//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/JCToolsQueueTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilAtomicMpscLinkedAtomicQueue.h"
#include "RxInternalUtilAtomicSpscAtomicArrayQueue.h"
#include "RxInternalUtilAtomicSpscExactAtomicArrayQueue.h"
#include "RxInternalUtilAtomicSpscLinkedAtomicQueue.h"
#include "RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue.h"
#include "RxInternalUtilJCToolsQueueTests.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilUnsafeMpmcArrayQueue.h"
#include "RxInternalUtilUnsafeMpscLinkedQueue.h"
#include "RxInternalUtilUnsafePow2.h"
#include "RxInternalUtilUnsafeSpmcArrayQueue.h"
#include "RxInternalUtilUnsafeSpscArrayQueue.h"
#include "RxInternalUtilUnsafeSpscLinkedQueue.h"
#include "RxInternalUtilUnsafeUnsafeAccess.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/BrokenBarrierException.h"
#include "java/util/concurrent/CyclicBarrier.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$41();

@interface RxInternalUtilJCToolsQueueTests_$1 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxInternalUtilAtomicMpscLinkedAtomicQueue *val$q_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
          withRxInternalUtilAtomicMpscLinkedAtomicQueue:(RxInternalUtilAtomicMpscLinkedAtomicQueue *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$1)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$1, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$1, val$q_, RxInternalUtilAtomicMpscLinkedAtomicQueue *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(RxInternalUtilJCToolsQueueTests_$1 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$1 *new_RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$1 *create_RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1);

@interface RxInternalUtilJCToolsQueueTests_$2 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxInternalUtilAtomicMpscLinkedAtomicQueue *val$q_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
          withRxInternalUtilAtomicMpscLinkedAtomicQueue:(RxInternalUtilAtomicMpscLinkedAtomicQueue *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$2)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$2, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$2, val$q_, RxInternalUtilAtomicMpscLinkedAtomicQueue *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(RxInternalUtilJCToolsQueueTests_$2 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$2 *new_RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$2 *create_RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1);

@interface RxInternalUtilJCToolsQueueTests_$3 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxInternalUtilUnsafeMpscLinkedQueue *val$q_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                withRxInternalUtilUnsafeMpscLinkedQueue:(RxInternalUtilUnsafeMpscLinkedQueue *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$3)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$3, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$3, val$q_, RxInternalUtilUnsafeMpscLinkedQueue *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(RxInternalUtilJCToolsQueueTests_$3 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$3 *new_RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$3 *create_RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1);

@interface RxInternalUtilJCToolsQueueTests_$4 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxInternalUtilUnsafeMpscLinkedQueue *val$q_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                withRxInternalUtilUnsafeMpscLinkedQueue:(RxInternalUtilUnsafeMpscLinkedQueue *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$4)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$4, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$4, val$q_, RxInternalUtilUnsafeMpscLinkedQueue *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(RxInternalUtilJCToolsQueueTests_$4 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$4 *new_RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$4 *create_RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1);

@interface RxInternalUtilJCToolsQueueTests_$5 : NSObject < JavaLangRunnable > {
 @public
  RxInternalUtilAtomicSpscLinkedAtomicQueue *val$q_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)run;

- (instancetype)initWithRxInternalUtilAtomicSpscLinkedAtomicQueue:(RxInternalUtilAtomicSpscLinkedAtomicQueue *)capture$0
                        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$5)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$5, val$q_, RxInternalUtilAtomicSpscLinkedAtomicQueue *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilJCToolsQueueTests_$5 *self, RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$5 *new_RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$5 *create_RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalUtilJCToolsQueueTests_$6 : NSObject < JavaLangRunnable > {
 @public
  RxInternalUtilUnsafeSpscLinkedQueue *val$q_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)run;

- (instancetype)initWithRxInternalUtilUnsafeSpscLinkedQueue:(RxInternalUtilUnsafeSpscLinkedQueue *)capture$0
                  withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_$6)

J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$6, val$q_, RxInternalUtilUnsafeSpscLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalUtilJCToolsQueueTests_$6, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilJCToolsQueueTests_$6 *self, RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$6 *new_RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilJCToolsQueueTests_$6 *create_RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@implementation RxInternalUtilJCToolsQueueTests

+ (void)awaitWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)cb {
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(cb);
}

- (void)casBasedUnsafe {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  jlong offset = RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(RxInternalUtilJCToolsQueueTests_IntField_class_(), @"value");
  RxInternalUtilJCToolsQueueTests_IntField *f = create_RxInternalUtilJCToolsQueueTests_IntField_init();
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(f, offset, 0, 1));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafeUnsafeAccess_compareAndSwapIntWithId_withLong_withInt_withInt_(f, offset, 0, 2));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, RxInternalUtilUnsafeUnsafeAccess_getAndAddIntWithId_withLong_withInt_(f, offset, 2));
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, RxInternalUtilUnsafeUnsafeAccess_getAndIncrementIntWithId_withLong_(f, offset));
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, RxInternalUtilUnsafeUnsafeAccess_getAndSetIntWithId_withLong_withInt_(f, offset, 0));
}

- (void)powerOfTwo {
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(1));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(2));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(3));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(4));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(5));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(8));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(13));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(16));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(25));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(31));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilUnsafePow2_isPowerOfTwoWithInt_(32));
}

- (void)testMpmcArrayQueueNull {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpmcArrayQueue *q = create_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(16);
  [q offerWithId:nil];
}

- (void)testMpmcArrayQueueIterator {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpmcArrayQueue *q = create_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(16);
  [q iterator];
}

- (void)testMpmcArrayQueueOfferPoll {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  id<JavaUtilQueue> q = create_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(128);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testMpmcOfferUpToCapacity {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  jint n = 128;
  RxInternalUtilUnsafeMpmcArrayQueue *queue = create_RxInternalUtilUnsafeMpmcArrayQueue_initWithInt_(n);
  for (jint i = 0; i < n; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  OrgJunitAssert_assertFalseWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(n)]);
}

- (void)testMpscLinkedAtomicQueueIterator {
  RxInternalUtilAtomicMpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicMpscLinkedAtomicQueue_init();
  [q iterator];
}

- (void)testMpscLinkedAtomicQueueNull {
  RxInternalUtilAtomicMpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicMpscLinkedAtomicQueue_init();
  [q offerWithId:nil];
}

- (void)testMpscLinkedAtomicQueueOfferPoll {
  RxInternalUtilAtomicMpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicMpscLinkedAtomicQueue_init();
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testMpscLinkedAtomicQueuePipelined {
  RxInternalUtilAtomicMpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicMpscLinkedAtomicQueue_init();
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  for (jint i = 0; i < 1000 * 1000; i++) {
    [set addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  JavaUtilConcurrentCyclicBarrier *cb = create_JavaUtilConcurrentCyclicBarrier_initWithInt_(3);
  JavaLangThread *t1 = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(cb, q));
  JavaLangThread *t2 = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(cb, q));
  [t1 start];
  [t2 start];
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(cb);
  JavaLangInteger *j;
  for (jint i = 0; i < 1000 * 1000; i++) {
    while ((j = [q poll]) == nil) ;
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$@$", @"Value ", j, @" already removed"), [set removeWithId:j]);
  }
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Set is not empty", [set isEmpty]);
}

- (void)testMpscLinkedQueueIterator {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpscLinkedQueue *q = create_RxInternalUtilUnsafeMpscLinkedQueue_init();
  [q iterator];
}

- (void)testMpscLinkedQueueNull {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpscLinkedQueue *q = create_RxInternalUtilUnsafeMpscLinkedQueue_init();
  [q offerWithId:nil];
}

- (void)testMpscLinkedQueueOfferPoll {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpscLinkedQueue *q = create_RxInternalUtilUnsafeMpscLinkedQueue_init();
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testMpscLinkedQueuePipelined {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeMpscLinkedQueue *q = create_RxInternalUtilUnsafeMpscLinkedQueue_init();
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  for (jint i = 0; i < 1000 * 1000; i++) {
    [set addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  JavaUtilConcurrentCyclicBarrier *cb = create_JavaUtilConcurrentCyclicBarrier_initWithInt_(3);
  JavaLangThread *t1 = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(cb, q));
  JavaLangThread *t2 = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(cb, q));
  [t1 start];
  [t2 start];
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(cb);
  JavaLangInteger *j;
  for (jint i = 0; i < 1000 * 1000; i++) {
    while ((j = [q poll]) == nil) ;
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$@$", @"Value ", j, @" already removed"), [set removeWithId:j]);
  }
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Set is not empty", [set isEmpty]);
}

- (void)testOfferPollWithJavaUtilQueue:(id<JavaUtilQueue>)q {
  for (jint i = 0; i < 64; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilQueue>) nil_chk(q)) offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  OrgJunitAssert_assertFalseWithBoolean_([((id<JavaUtilQueue>) nil_chk(q)) isEmpty]);
  for (jint i = 0; i < 64; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [q peek]);
    OrgJunitAssert_assertEqualsWithLong_withLong_(64 - i, [q size]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [q poll]);
  }
  OrgJunitAssert_assertTrueWithBoolean_([q isEmpty]);
  for (jint i = 0; i < 64; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [q poll]);
  }
  OrgJunitAssert_assertTrueWithBoolean_([q isEmpty]);
  OrgJunitAssert_assertNullWithId_([q peek]);
  OrgJunitAssert_assertNullWithId_([q poll]);
}

- (void)testSpmcArrayQueueNull {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpmcArrayQueue *q = create_RxInternalUtilUnsafeSpmcArrayQueue_initWithInt_(16);
  [q offerWithId:nil];
}

- (void)testSpmcArrayQueueOfferPoll {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  id<JavaUtilQueue> q = create_RxInternalUtilUnsafeSpmcArrayQueue_initWithInt_(128);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpmcArrayQueueIterator {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpmcArrayQueue *q = create_RxInternalUtilUnsafeSpmcArrayQueue_initWithInt_(16);
  [q iterator];
}

- (void)testSpmcOfferUpToCapacity {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  jint n = 128;
  RxInternalUtilUnsafeSpmcArrayQueue *queue = create_RxInternalUtilUnsafeSpmcArrayQueue_initWithInt_(n);
  for (jint i = 0; i < n; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  OrgJunitAssert_assertFalseWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(n)]);
}

- (void)testSpscArrayQueueNull {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscArrayQueue *q = create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(16);
  [q offerWithId:nil];
}

- (void)testSpscArrayQueueOfferPoll {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  id<JavaUtilQueue> q = create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(128);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscArrayQueueIterator {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscArrayQueue *q = create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(16);
  [q iterator];
}

- (void)testSpscLinkedAtomicQueueIterator {
  RxInternalUtilAtomicSpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init();
  [q iterator];
}

- (void)testSpscLinkedAtomicQueueNull {
  RxInternalUtilAtomicSpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init();
  [q offerWithId:nil];
}

- (void)testSpscLinkedAtomicQueueOfferPoll {
  RxInternalUtilAtomicSpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init();
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscLinkedAtomicQueuePipelined {
  RxInternalUtilAtomicSpscLinkedAtomicQueue *q = create_RxInternalUtilAtomicSpscLinkedAtomicQueue_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(q, count));
  [t start];
  for (jint i = 0; i < 1000 * 1000; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  [t join];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1000 * 1000, [count get]);
}

- (void)testSpscLinkedQueueIterator {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscLinkedQueue *q = create_RxInternalUtilUnsafeSpscLinkedQueue_init();
  [q iterator];
}

- (void)testSpscLinkedQueueNull {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscLinkedQueue *q = create_RxInternalUtilUnsafeSpscLinkedQueue_init();
  [q offerWithId:nil];
}

- (void)testSpscLinkedQueueOfferPoll {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscLinkedQueue *q = create_RxInternalUtilUnsafeSpscLinkedQueue_init();
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscLinkedQueuePipelined {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeSpscLinkedQueue *q = create_RxInternalUtilUnsafeSpscLinkedQueue_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(q, count));
  [t start];
  for (jint i = 0; i < 1000 * 1000; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  [t join];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1000 * 1000, [count get]);
}

- (void)testSpscOfferUpToCapacity {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  jint n = 128;
  RxInternalUtilUnsafeSpscArrayQueue *queue = create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(n);
  for (jint i = 0; i < n; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  OrgJunitAssert_assertFalseWithBoolean_([queue offerWithId:JavaLangInteger_valueOfWithInt_(n)]);
}

- (void)testUnsafeAccessAddressOf {
  if (!RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return;
  }
  RxInternalUtilUnsafeUnsafeAccess_addressOfWithIOSClass_withNSString_(NSObject_class_(), @"field");
}

- (void)testSpscExactAtomicArrayQueue {
  for (jint i = 1; i <= JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2; i++) {
    RxInternalUtilAtomicSpscExactAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(i);
    for (jint j = 0; j < i; j++) {
      OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(j)]);
    }
    OrgJunitAssert_assertFalseWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
    for (jint j = 0; j < i; j++) {
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q peek]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q poll]);
    }
    for (jint j = 0; j < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4; j++) {
      OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(j)]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q peek]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q poll]);
    }
  }
}

- (void)testUnboundedAtomicArrayQueue {
  for (jint i = 1; i <= JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2; i *= 2) {
    RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(i);
    for (jint j = 0; j < i; j++) {
      OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(j)]);
    }
    OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(i)]);
    for (jint j = 0; j < i; j++) {
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q peek]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q poll]);
    }
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [q peek]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [q poll]);
    for (jint j = 0; j < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4; j++) {
      OrgJunitAssert_assertTrueWithBoolean_([q offerWithId:JavaLangInteger_valueOfWithInt_(j)]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q peek]);
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(j), [q poll]);
    }
  }
}

- (void)testSpscAtomicArrayQueueNull {
  RxInternalUtilAtomicSpscAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(16);
  [q offerWithId:nil];
}

- (void)testSpscAtomicArrayQueueOfferPoll {
  id<JavaUtilQueue> q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(128);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscAtomicArrayQueueIterator {
  RxInternalUtilAtomicSpscAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(16);
  [q iterator];
}

- (void)testSpscExactAtomicArrayQueueNull {
  RxInternalUtilAtomicSpscExactAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscExactAtomicArrayQueue_initWithInt_(10);
  [q offerWithId:nil];
}

- (void)testSpscExactAtomicArrayQueueOfferPoll {
  id<JavaUtilQueue> q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(120);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscExactAtomicArrayQueueIterator {
  RxInternalUtilAtomicSpscAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(10);
  [q iterator];
}

- (void)testSpscUnboundedAtomicArrayQueueNull {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(16);
  [q offerWithId:nil];
}

- (void)testSpscUnboundedAtomicArrayQueueOfferPoll {
  id<JavaUtilQueue> q = create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(128);
  [self testOfferPollWithJavaUtilQueue:q];
}

- (void)testSpscUnboundedAtomicArrayQueueIterator {
  RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue *q = create_RxInternalUtilAtomicSpscUnboundedAtomicArrayQueue_initWithInt_(16);
  [q iterator];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilJCToolsQueueTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 16, -1 },
    { NULL, "V", 0x4, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(awaitWithJavaUtilConcurrentCyclicBarrier:);
  methods[1].selector = @selector(casBasedUnsafe);
  methods[2].selector = @selector(powerOfTwo);
  methods[3].selector = @selector(testMpmcArrayQueueNull);
  methods[4].selector = @selector(testMpmcArrayQueueIterator);
  methods[5].selector = @selector(testMpmcArrayQueueOfferPoll);
  methods[6].selector = @selector(testMpmcOfferUpToCapacity);
  methods[7].selector = @selector(testMpscLinkedAtomicQueueIterator);
  methods[8].selector = @selector(testMpscLinkedAtomicQueueNull);
  methods[9].selector = @selector(testMpscLinkedAtomicQueueOfferPoll);
  methods[10].selector = @selector(testMpscLinkedAtomicQueuePipelined);
  methods[11].selector = @selector(testMpscLinkedQueueIterator);
  methods[12].selector = @selector(testMpscLinkedQueueNull);
  methods[13].selector = @selector(testMpscLinkedQueueOfferPoll);
  methods[14].selector = @selector(testMpscLinkedQueuePipelined);
  methods[15].selector = @selector(testOfferPollWithJavaUtilQueue:);
  methods[16].selector = @selector(testSpmcArrayQueueNull);
  methods[17].selector = @selector(testSpmcArrayQueueOfferPoll);
  methods[18].selector = @selector(testSpmcArrayQueueIterator);
  methods[19].selector = @selector(testSpmcOfferUpToCapacity);
  methods[20].selector = @selector(testSpscArrayQueueNull);
  methods[21].selector = @selector(testSpscArrayQueueOfferPoll);
  methods[22].selector = @selector(testSpscArrayQueueIterator);
  methods[23].selector = @selector(testSpscLinkedAtomicQueueIterator);
  methods[24].selector = @selector(testSpscLinkedAtomicQueueNull);
  methods[25].selector = @selector(testSpscLinkedAtomicQueueOfferPoll);
  methods[26].selector = @selector(testSpscLinkedAtomicQueuePipelined);
  methods[27].selector = @selector(testSpscLinkedQueueIterator);
  methods[28].selector = @selector(testSpscLinkedQueueNull);
  methods[29].selector = @selector(testSpscLinkedQueueOfferPoll);
  methods[30].selector = @selector(testSpscLinkedQueuePipelined);
  methods[31].selector = @selector(testSpscOfferUpToCapacity);
  methods[32].selector = @selector(testUnsafeAccessAddressOf);
  methods[33].selector = @selector(testSpscExactAtomicArrayQueue);
  methods[34].selector = @selector(testUnboundedAtomicArrayQueue);
  methods[35].selector = @selector(testSpscAtomicArrayQueueNull);
  methods[36].selector = @selector(testSpscAtomicArrayQueueOfferPoll);
  methods[37].selector = @selector(testSpscAtomicArrayQueueIterator);
  methods[38].selector = @selector(testSpscExactAtomicArrayQueueNull);
  methods[39].selector = @selector(testSpscExactAtomicArrayQueueOfferPoll);
  methods[40].selector = @selector(testSpscExactAtomicArrayQueueIterator);
  methods[41].selector = @selector(testSpscUnboundedAtomicArrayQueueNull);
  methods[42].selector = @selector(testSpscUnboundedAtomicArrayQueueOfferPoll);
  methods[43].selector = @selector(testSpscUnboundedAtomicArrayQueueIterator);
  methods[44].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "await", "LJavaUtilConcurrentCyclicBarrier;", (void *)&RxInternalUtilJCToolsQueueTests__Annotations$0, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$1, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$2, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$3, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$4, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$5, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$6, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$7, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$8, "LJavaLangInterruptedException;", (void *)&RxInternalUtilJCToolsQueueTests__Annotations$9, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$10, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$11, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$12, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$13, "testOfferPoll", "LJavaUtilQueue;", "(Ljava/util/Queue<Ljava/lang/Integer;>;)V", (void *)&RxInternalUtilJCToolsQueueTests__Annotations$14, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$15, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$16, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$17, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$18, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$19, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$20, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$21, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$22, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$23, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$24, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$25, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$26, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$27, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$28, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$29, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$30, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$31, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$32, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$33, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$34, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$35, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$36, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$37, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$38, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$39, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$40, (void *)&RxInternalUtilJCToolsQueueTests__Annotations$41, "LRxInternalUtilJCToolsQueueTests_IntField;" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests = { "JCToolsQueueTests", "rx.internal.util", ptrTable, methods, NULL, 7, 0x1, 45, 0, -1, 48, -1, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests;
}

@end

void RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(JavaUtilConcurrentCyclicBarrier *cb) {
  RxInternalUtilJCToolsQueueTests_initialize();
  @try {
    [((JavaUtilConcurrentCyclicBarrier *) nil_chk(cb)) await];
  }
  @catch (JavaLangInterruptedException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSException_(ex);
  }
  @catch (JavaUtilConcurrentBrokenBarrierException *ex) {
    @throw create_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

void RxInternalUtilJCToolsQueueTests_init(RxInternalUtilJCToolsQueueTests *self) {
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests *new_RxInternalUtilJCToolsQueueTests_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests, init)
}

RxInternalUtilJCToolsQueueTests *create_RxInternalUtilJCToolsQueueTests_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests, init)
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangInternalError_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilJCToolsQueueTests__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangUnsupportedOperationException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilJCToolsQueueTests)

@implementation RxInternalUtilJCToolsQueueTests_IntField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilJCToolsQueueTests_IntField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilJCToolsQueueTests;" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_IntField = { "IntField", "rx.internal.util", ptrTable, methods, fields, 7, 0x18, 1, 1, 0, -1, -1, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_IntField;
}

@end

void RxInternalUtilJCToolsQueueTests_IntField_init(RxInternalUtilJCToolsQueueTests_IntField *self) {
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_IntField *new_RxInternalUtilJCToolsQueueTests_IntField_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_IntField, init)
}

RxInternalUtilJCToolsQueueTests_IntField *create_RxInternalUtilJCToolsQueueTests_IntField_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_IntField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilJCToolsQueueTests_IntField)

@implementation RxInternalUtilJCToolsQueueTests_$1

- (void)run {
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(val$cb_);
  for (jint i = 0; i < 500 * 1000; i++) {
    [((RxInternalUtilAtomicMpscLinkedAtomicQueue *) nil_chk(val$q_)) offerWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
          withRxInternalUtilAtomicMpscLinkedAtomicQueue:(RxInternalUtilAtomicMpscLinkedAtomicQueue *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxInternalUtilAtomicMpscLinkedAtomicQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$q_", "LRxInternalUtilAtomicMpscLinkedAtomicQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCyclicBarrier;LRxInternalUtilAtomicMpscLinkedAtomicQueue;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/internal/util/atomic/MpscLinkedAtomicQueue<Ljava/lang/Integer;>;)V", "Lrx/internal/util/atomic/MpscLinkedAtomicQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testMpscLinkedAtomicQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$1 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$1;
}

@end

void RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(RxInternalUtilJCToolsQueueTests_$1 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$q_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$1 *new_RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$1, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$1 *create_RxInternalUtilJCToolsQueueTests_$1_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$1, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_, capture$0, capture$1)
}

@implementation RxInternalUtilJCToolsQueueTests_$2

- (void)run {
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(val$cb_);
  for (jint i = 500 * 1000; i < 1000 * 1000; i++) {
    [((RxInternalUtilAtomicMpscLinkedAtomicQueue *) nil_chk(val$q_)) offerWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
          withRxInternalUtilAtomicMpscLinkedAtomicQueue:(RxInternalUtilAtomicMpscLinkedAtomicQueue *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxInternalUtilAtomicMpscLinkedAtomicQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$q_", "LRxInternalUtilAtomicMpscLinkedAtomicQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCyclicBarrier;LRxInternalUtilAtomicMpscLinkedAtomicQueue;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/internal/util/atomic/MpscLinkedAtomicQueue<Ljava/lang/Integer;>;)V", "Lrx/internal/util/atomic/MpscLinkedAtomicQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testMpscLinkedAtomicQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$2 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$2;
}

@end

void RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(RxInternalUtilJCToolsQueueTests_$2 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$q_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$2 *new_RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$2, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$2 *create_RxInternalUtilJCToolsQueueTests_$2_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilAtomicMpscLinkedAtomicQueue *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$2, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilAtomicMpscLinkedAtomicQueue_, capture$0, capture$1)
}

@implementation RxInternalUtilJCToolsQueueTests_$3

- (void)run {
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(val$cb_);
  for (jint i = 0; i < 500 * 1000; i++) {
    [((RxInternalUtilUnsafeMpscLinkedQueue *) nil_chk(val$q_)) offerWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                withRxInternalUtilUnsafeMpscLinkedQueue:(RxInternalUtilUnsafeMpscLinkedQueue *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxInternalUtilUnsafeMpscLinkedQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$q_", "LRxInternalUtilUnsafeMpscLinkedQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCyclicBarrier;LRxInternalUtilUnsafeMpscLinkedQueue;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/internal/util/unsafe/MpscLinkedQueue<Ljava/lang/Integer;>;)V", "Lrx/internal/util/unsafe/MpscLinkedQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testMpscLinkedQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$3 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$3;
}

@end

void RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(RxInternalUtilJCToolsQueueTests_$3 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$q_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$3 *new_RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$3, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$3 *create_RxInternalUtilJCToolsQueueTests_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$3, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_, capture$0, capture$1)
}

@implementation RxInternalUtilJCToolsQueueTests_$4

- (void)run {
  RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(val$cb_);
  for (jint i = 500 * 1000; i < 1000 * 1000; i++) {
    [((RxInternalUtilUnsafeMpscLinkedQueue *) nil_chk(val$q_)) offerWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                withRxInternalUtilUnsafeMpscLinkedQueue:(RxInternalUtilUnsafeMpscLinkedQueue *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxInternalUtilUnsafeMpscLinkedQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$q_", "LRxInternalUtilUnsafeMpscLinkedQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCyclicBarrier;LRxInternalUtilUnsafeMpscLinkedQueue;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/internal/util/unsafe/MpscLinkedQueue<Ljava/lang/Integer;>;)V", "Lrx/internal/util/unsafe/MpscLinkedQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testMpscLinkedQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$4 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$4;
}

@end

void RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(RxInternalUtilJCToolsQueueTests_$4 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$q_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$4 *new_RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$4, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$4 *create_RxInternalUtilJCToolsQueueTests_$4_initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_(JavaUtilConcurrentCyclicBarrier *capture$0, RxInternalUtilUnsafeMpscLinkedQueue *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$4, initWithJavaUtilConcurrentCyclicBarrier_withRxInternalUtilUnsafeMpscLinkedQueue_, capture$0, capture$1)
}

@implementation RxInternalUtilJCToolsQueueTests_$5

- (void)run {
  JavaLangInteger *j;
  for (jint i = 0; i < 1000 * 1000; i++) {
    while ((j = [((RxInternalUtilAtomicSpscLinkedAtomicQueue *) nil_chk(val$q_)) poll]) == nil) ;
    if ([((JavaLangInteger *) nil_chk(j)) intValue] == i) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
    }
  }
}

- (instancetype)initWithRxInternalUtilAtomicSpscLinkedAtomicQueue:(RxInternalUtilAtomicSpscLinkedAtomicQueue *)capture$0
                        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$q_);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalUtilAtomicSpscLinkedAtomicQueue:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$q_", "LRxInternalUtilAtomicSpscLinkedAtomicQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilAtomicSpscLinkedAtomicQueue;LJavaUtilConcurrentAtomicAtomicInteger;", "(Lrx/internal/util/atomic/SpscLinkedAtomicQueue<Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Lrx/internal/util/atomic/SpscLinkedAtomicQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testSpscLinkedAtomicQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$5 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$5;
}

@end

void RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilJCToolsQueueTests_$5 *self, RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$q_, capture$0);
  JreStrongAssign(&self->val$count_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$5 *new_RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$5, initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$5 *create_RxInternalUtilJCToolsQueueTests_$5_initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilAtomicSpscLinkedAtomicQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$5, initWithRxInternalUtilAtomicSpscLinkedAtomicQueue_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalUtilJCToolsQueueTests_$6

- (void)run {
  JavaLangInteger *j;
  for (jint i = 0; i < 1000 * 1000; i++) {
    while ((j = [((RxInternalUtilUnsafeSpscLinkedQueue *) nil_chk(val$q_)) poll]) == nil) ;
    if ([((JavaLangInteger *) nil_chk(j)) intValue] == i) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
    }
  }
}

- (instancetype)initWithRxInternalUtilUnsafeSpscLinkedQueue:(RxInternalUtilUnsafeSpscLinkedQueue *)capture$0
                  withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$q_);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalUtilUnsafeSpscLinkedQueue:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$q_", "LRxInternalUtilUnsafeSpscLinkedQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilUnsafeSpscLinkedQueue;LJavaUtilConcurrentAtomicAtomicInteger;", "(Lrx/internal/util/unsafe/SpscLinkedQueue<Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Lrx/internal/util/unsafe/SpscLinkedQueue<Ljava/lang/Integer;>;", "LRxInternalUtilJCToolsQueueTests;", "testSpscLinkedQueuePipelined" };
  static const J2ObjcClassInfo _RxInternalUtilJCToolsQueueTests_$6 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilJCToolsQueueTests_$6;
}

@end

void RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilJCToolsQueueTests_$6 *self, RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$q_, capture$0);
  JreStrongAssign(&self->val$count_, capture$1);
  NSObject_init(self);
}

RxInternalUtilJCToolsQueueTests_$6 *new_RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilJCToolsQueueTests_$6, initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalUtilJCToolsQueueTests_$6 *create_RxInternalUtilJCToolsQueueTests_$6_initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilUnsafeSpscLinkedQueue *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilJCToolsQueueTests_$6, initWithRxInternalUtilUnsafeSpscLinkedQueue_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}
