//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/BlockingOperatorNextTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxInternalOperatorsBlockingOperatorNext.h"
#include "RxInternalOperatorsBlockingOperatorNextTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsBehaviorSubject.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsSubject.h"
#include "RxSubscriber.h"
#include "RxTestUtil.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxInternalOperatorsBlockingOperatorNextTest ()

- (void)fireOnNextInNewThreadWithRxSubjectsSubject:(RxSubjectsSubject *)o
                                      withNSString:(NSString *)value;

- (void)fireOnErrorInNewThreadWithRxSubjectsSubject:(RxSubjectsSubject *)o;

- (void)assertErrorAfterObservableFailWithJavaUtilIterator:(id<JavaUtilIterator>)it;

@end

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(RxInternalOperatorsBlockingOperatorNextTest *self, RxSubjectsSubject *o, NSString *value);

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_fireOnErrorInNewThreadWithRxSubjectsSubject_(RxInternalOperatorsBlockingOperatorNextTest *self, RxSubjectsSubject *o);

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(RxInternalOperatorsBlockingOperatorNextTest *self, id<JavaUtilIterator> it);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$10();

@interface RxInternalOperatorsBlockingOperatorNextTest_$1 : JavaLangThread {
 @public
  RxSubjectsSubject *val$o_;
  NSString *val$value_;
}

- (void)run;

- (instancetype)initWithRxSubjectsSubject:(RxSubjectsSubject *)capture$0
                             withNSString:(NSString *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNextTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$1, val$o_, RxSubjectsSubject *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$1, val$value_, NSString *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxInternalOperatorsBlockingOperatorNextTest_$1 *self, RxSubjectsSubject *capture$0, NSString *capture$1);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$1 *new_RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxSubjectsSubject *capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$1 *create_RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxSubjectsSubject *capture$0, NSString *capture$1);

@interface RxInternalOperatorsBlockingOperatorNextTest_$2 : JavaLangThread {
 @public
  RxSubjectsSubject *val$o_;
}

- (void)run;

- (instancetype)initWithRxSubjectsSubject:(RxSubjectsSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNextTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$2, val$o_, RxSubjectsSubject *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxInternalOperatorsBlockingOperatorNextTest_$2 *self, RxSubjectsSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$2 *new_RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxSubjectsSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$2 *create_RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxSubjectsSubject *capture$0);

@interface RxInternalOperatorsBlockingOperatorNextTest_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$running_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
  JavaUtilConcurrentCountDownLatch *val$timeHasPassed_;
  JavaUtilConcurrentCountDownLatch *val$finished_;
}

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNextTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3, val$running_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3, val$timeHasPassed_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3, val$finished_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsBlockingOperatorNextTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$3 *new_RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$3 *create_RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

@interface RxInternalOperatorsBlockingOperatorNextTest_$3_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsBlockingOperatorNextTest_$3 *this$0_;
  RxSubscriber *val$o_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsBlockingOperatorNextTest_$3:(RxInternalOperatorsBlockingOperatorNextTest_$3 *)outer$
                                                      withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNextTest_$3_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3_$1, this$0_, RxInternalOperatorsBlockingOperatorNextTest_$3 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorNextTest_$3_$1, val$o_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *self, RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *new_RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *create_RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0);

@implementation RxInternalOperatorsBlockingOperatorNextTest

- (void)fireOnNextInNewThreadWithRxSubjectsSubject:(RxSubjectsSubject *)o
                                      withNSString:(NSString *)value {
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, o, value);
}

- (void)fireOnErrorInNewThreadWithRxSubjectsSubject:(RxSubjectsSubject *)o {
  RxInternalOperatorsBlockingOperatorNextTest_fireOnErrorInNewThreadWithRxSubjectsSubject_(self, o);
}

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxInternalOperatorsBlockingOperatorNext_class_());
}

- (void)testNext {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"one");
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [it next]);
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"two");
  OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [it next]);
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"three");
  @try {
    OrgJunitAssert_assertEqualsWithId_withId_(@"three", [it next]);
  }
  @catch (JavaUtilNoSuchElementException *e) {
    OrgJunitAssert_failWithNSString_(@"Calling next() without hasNext() should wait for next fire");
  }
  [((RxSubjectsSubject *) nil_chk(obs)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([it hasNext]);
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
  OrgJunitAssert_assertFalseWithBoolean_([it hasNext]);
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
}

- (void)testNextWithError {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"one");
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [it next]);
  RxInternalOperatorsBlockingOperatorNextTest_fireOnErrorInNewThreadWithRxSubjectsSubject_(self, obs);
  @try {
    [it hasNext];
    OrgJunitAssert_failWithNSString_(@"Expected a TestException");
  }
  @catch (RxExceptionsTestException *e) {
  }
  RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(self, it);
}

- (void)testNextWithEmpty {
  RxObservable *obs = [((RxObservable *) nil_chk(RxObservable_empty())) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  OrgJunitAssert_assertFalseWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
  OrgJunitAssert_assertFalseWithBoolean_([it hasNext]);
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
}

- (void)testOnError {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  [((RxSubjectsSubject *) nil_chk(obs)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
    OrgJunitAssert_failWithNSString_(@"Expected a TestException");
  }
  @catch (RxExceptionsTestException *e) {
  }
  RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(self, it);
}

- (void)testOnErrorInNewThread {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  RxInternalOperatorsBlockingOperatorNextTest_fireOnErrorInNewThreadWithRxSubjectsSubject_(self, obs);
  @try {
    [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
    OrgJunitAssert_failWithNSString_(@"Expected a TestException");
  }
  @catch (RxExceptionsTestException *e) {
  }
  RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(self, it);
}

- (void)assertErrorAfterObservableFailWithJavaUtilIterator:(id<JavaUtilIterator>)it {
  RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(self, it);
}

- (void)testNextWithOnlyUsingNextMethod {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"one");
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((id<JavaUtilIterator>) nil_chk(it)) next]);
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"two");
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [it next]);
  [((RxSubjectsSubject *) nil_chk(obs)) onCompleted];
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
}

- (void)testNextWithCallingHasNextMultipleTimes {
  RxSubjectsSubject *obs = RxSubjectsPublishSubject_create();
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
  RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(self, obs, @"one");
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
  OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
  OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
  OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [it next]);
  [((RxSubjectsSubject *) nil_chk(obs)) onCompleted];
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"At the end of an iterator should throw a NoSuchElementException");
  }
  @catch (JavaUtilNoSuchElementException *e) {
  }
}

- (void)testNoBufferingOrBlockingOfSequence {
  JavaUtilConcurrentCountDownLatch *finished = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  jint COUNT = 30;
  JavaUtilConcurrentCountDownLatch *timeHasPassed = create_JavaUtilConcurrentCountDownLatch_initWithInt_(COUNT);
  JavaUtilConcurrentAtomicAtomicBoolean *running = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxObservable *obs = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(running, count, timeHasPassed, finished));
  @try {
    id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(obs))) iterator];
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
    jint a = [((JavaLangInteger *) nil_chk([it next])) intValue];
    OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
    jint b = [((JavaLangInteger *) nil_chk([it next])) intValue];
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"a and b should be different", a != b);
    [timeHasPassed awaitWithLong:8000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
    jint c = [((JavaLangInteger *) nil_chk([it next])) intValue];
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"c should not just be the next in sequence", c != (b + 1));
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$I$I", @"expected that c [", c, @"] is higher than or equal to ", COUNT), c >= COUNT);
    OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
    jint d = [((JavaLangInteger *) nil_chk([it next])) intValue];
    OrgJunitAssert_assertTrueWithBoolean_(d > c);
    [running setWithBoolean:false];
    [finished await];
    OrgJunitAssert_assertFalseWithBoolean_([it hasNext]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"a: ", a, @" b: ", b, @" c: ", c)];
  }
  @finally {
    [running setWithBoolean:false];
  }
}

- (void)testSingleSourceManyIterators {
  RxObservable *o = RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
  RxSubjectsPublishSubject *terminal = RxSubjectsPublishSubject_create();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) takeUntilWithRxObservable:terminal])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) next];
  for (jint j = 0; j < 3; j++) {
    RxInternalOperatorsBlockingOperatorNext_NextIterator *it = (RxInternalOperatorsBlockingOperatorNext_NextIterator *) cast_chk([((id<JavaLangIterable>) nil_chk(iter)) iterator], [RxInternalOperatorsBlockingOperatorNext_NextIterator class]);
    for (jlong i = 0; i < 10; i++) {
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([((RxInternalOperatorsBlockingOperatorNext_NextIterator *) nil_chk(it)) hasNext]));
      OrgJunitAssert_assertEqualsWithNSString_withId_withId_(JreStrcat("I$", j, @"th iteration next"), JavaLangLong_valueOfWithLong_(i), [it next]);
    }
    [((RxSubjectsPublishSubject *) nil_chk(terminal)) onNextWithId:nil];
  }
}

- (void)testSynchronousNext {
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsBehaviorSubject *) nil_chk(RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(1)))) takeWithInt:1])) toBlocking])) single])) intValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxSubjectsBehaviorSubject *) nil_chk(RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(2)))) toBlocking])) toIterable])) iterator])) next])) intValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxSubjectsBehaviorSubject *) nil_chk(RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(3)))) toBlocking])) next])) iterator])) next])) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorNextTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x2, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, 19, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fireOnNextInNewThreadWithRxSubjectsSubject:withNSString:);
  methods[1].selector = @selector(fireOnErrorInNewThreadWithRxSubjectsSubject:);
  methods[2].selector = @selector(constructorShouldBePrivate);
  methods[3].selector = @selector(testNext);
  methods[4].selector = @selector(testNextWithError);
  methods[5].selector = @selector(testNextWithEmpty);
  methods[6].selector = @selector(testOnError);
  methods[7].selector = @selector(testOnErrorInNewThread);
  methods[8].selector = @selector(assertErrorAfterObservableFailWithJavaUtilIterator:);
  methods[9].selector = @selector(testNextWithOnlyUsingNextMethod);
  methods[10].selector = @selector(testNextWithCallingHasNextMultipleTimes);
  methods[11].selector = @selector(testNoBufferingOrBlockingOfSequence);
  methods[12].selector = @selector(testSingleSourceManyIterators);
  methods[13].selector = @selector(testSynchronousNext);
  methods[14].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fireOnNextInNewThread", "LRxSubjectsSubject;LNSString;", "(Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;)V", "fireOnErrorInNewThread", "LRxSubjectsSubject;", "(Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;)V", (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$0, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$1, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$2, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$3, "LNSException;", (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$4, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$5, "assertErrorAfterObservableFail", "LJavaUtilIterator;", "(Ljava/util/Iterator<Ljava/lang/String;>;)V", (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$6, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$7, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$8, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$9, (void *)&RxInternalOperatorsBlockingOperatorNextTest__Annotations$10 };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNextTest = { "BlockingOperatorNextTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 15, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorNextTest;
}

@end

void RxInternalOperatorsBlockingOperatorNextTest_fireOnNextInNewThreadWithRxSubjectsSubject_withNSString_(RxInternalOperatorsBlockingOperatorNextTest *self, RxSubjectsSubject *o, NSString *value) {
  [create_RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(o, value) start];
}

void RxInternalOperatorsBlockingOperatorNextTest_fireOnErrorInNewThreadWithRxSubjectsSubject_(RxInternalOperatorsBlockingOperatorNextTest *self, RxSubjectsSubject *o) {
  [create_RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(o) start];
}

void RxInternalOperatorsBlockingOperatorNextTest_assertErrorAfterObservableFailWithJavaUtilIterator_(RxInternalOperatorsBlockingOperatorNextTest *self, id<JavaUtilIterator> it) {
  @try {
    [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
    OrgJunitAssert_failWithNSString_(@"hasNext should throw a TestException");
  }
  @catch (RxExceptionsTestException *e) {
  }
  @try {
    [it next];
    OrgJunitAssert_failWithNSString_(@"next should throw a TestException");
  }
  @catch (RxExceptionsTestException *e) {
  }
}

void RxInternalOperatorsBlockingOperatorNextTest_init(RxInternalOperatorsBlockingOperatorNextTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorNextTest *new_RxInternalOperatorsBlockingOperatorNextTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorNextTest, init)
}

RxInternalOperatorsBlockingOperatorNextTest *create_RxInternalOperatorsBlockingOperatorNextTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorNextTest, init)
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorNextTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorNextTest)

@implementation RxInternalOperatorsBlockingOperatorNextTest_$1

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((RxSubjectsSubject *) nil_chk(val$o_)) onNextWithId:val$value_];
}

- (instancetype)initWithRxSubjectsSubject:(RxSubjectsSubject *)capture$0
                             withNSString:(NSString *)capture$1 {
  RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubjectsSubject:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LRxSubjectsSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$value_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsSubject;LNSString;", "(Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;)V", "Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;", "LRxInternalOperatorsBlockingOperatorNextTest;", "fireOnNextInNewThreadWithRxSubjectsSubject:withNSString:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNextTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorNextTest_$1;
}

@end

void RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxInternalOperatorsBlockingOperatorNextTest_$1 *self, RxSubjectsSubject *capture$0, NSString *capture$1) {
  JreStrongAssign(&self->val$o_, capture$0);
  JreStrongAssign(&self->val$value_, capture$1);
  JavaLangThread_init(self);
}

RxInternalOperatorsBlockingOperatorNextTest_$1 *new_RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxSubjectsSubject *capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$1, initWithRxSubjectsSubject_withNSString_, capture$0, capture$1)
}

RxInternalOperatorsBlockingOperatorNextTest_$1 *create_RxInternalOperatorsBlockingOperatorNextTest_$1_initWithRxSubjectsSubject_withNSString_(RxSubjectsSubject *capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$1, initWithRxSubjectsSubject_withNSString_, capture$0, capture$1)
}

@implementation RxInternalOperatorsBlockingOperatorNextTest_$2

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((RxSubjectsSubject *) nil_chk(val$o_)) onErrorWithNSException:create_RxExceptionsTestException_init()];
}

- (instancetype)initWithRxSubjectsSubject:(RxSubjectsSubject *)capture$0 {
  RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubjectsSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LRxSubjectsSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsSubject;", "(Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;)V", "Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;", "LRxInternalOperatorsBlockingOperatorNextTest;", "fireOnErrorInNewThreadWithRxSubjectsSubject:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNextTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorNextTest_$2;
}

@end

void RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxInternalOperatorsBlockingOperatorNextTest_$2 *self, RxSubjectsSubject *capture$0) {
  JreStrongAssign(&self->val$o_, capture$0);
  JavaLangThread_init(self);
}

RxInternalOperatorsBlockingOperatorNextTest_$2 *new_RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxSubjectsSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$2, initWithRxSubjectsSubject_, capture$0)
}

RxInternalOperatorsBlockingOperatorNextTest_$2 *create_RxInternalOperatorsBlockingOperatorNextTest_$2_initWithRxSubjectsSubject_(RxSubjectsSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$2, initWithRxSubjectsSubject_, capture$0)
}

@implementation RxInternalOperatorsBlockingOperatorNextTest_$3

- (void)callWithId:(RxSubscriber *)o {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(self, o)) start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3 {
  RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$running_);
  RELEASE_(val$count_);
  RELEASE_(val$timeHasPassed_);
  RELEASE_(val$finished_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$running_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeHasPassed_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$finished_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsBlockingOperatorNextTest;", "testNoBufferingOrBlockingOfSequence", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNextTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 4, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsBlockingOperatorNextTest_$3;
}

@end

void RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsBlockingOperatorNextTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  JreStrongAssign(&self->val$running_, capture$0);
  JreStrongAssign(&self->val$count_, capture$1);
  JreStrongAssign(&self->val$timeHasPassed_, capture$2);
  JreStrongAssign(&self->val$finished_, capture$3);
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorNextTest_$3 *new_RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

RxInternalOperatorsBlockingOperatorNextTest_$3 *create_RxInternalOperatorsBlockingOperatorNextTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxInternalOperatorsBlockingOperatorNextTest_$3_$1

- (void)run {
  @try {
    while ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$running_)) get]) {
      [((RxSubscriber *) nil_chk(val$o_)) onNextWithId:JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$count_)) incrementAndGet])];
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$timeHasPassed_)) countDown];
    }
    [((RxSubscriber *) nil_chk(val$o_)) onCompleted];
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(val$o_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$finished_)) countDown];
  }
}

- (instancetype)initWithRxInternalOperatorsBlockingOperatorNextTest_$3:(RxInternalOperatorsBlockingOperatorNextTest_$3 *)outer$
                                                      withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsBlockingOperatorNextTest_$3:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsBlockingOperatorNextTest_$3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$o_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsBlockingOperatorNextTest_$3;LRxSubscriber;", "(Lrx/internal/operators/BlockingOperatorNextTest$3;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsBlockingOperatorNextTest_$3;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorNextTest_$3_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorNextTest_$3_$1;
}

@end

void RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *self, RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$o_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *new_RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$3_$1, initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsBlockingOperatorNextTest_$3_$1 *create_RxInternalOperatorsBlockingOperatorNextTest_$3_$1_initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_(RxInternalOperatorsBlockingOperatorNextTest_$3 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorNextTest_$3_$1, initWithRxInternalOperatorsBlockingOperatorNextTest_$3_withRxSubscriber_, outer$, capture$0)
}
