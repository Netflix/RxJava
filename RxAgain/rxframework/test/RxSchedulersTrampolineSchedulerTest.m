//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/TrampolineSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversObservers.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerTests.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTrampolineSchedulerTest.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxSchedulersTrampolineSchedulerTest ()

+ (RxScheduler_Worker *)doWorkOnNewTrampolineWithNSString:(NSString *)key
                                    withJavaUtilArrayList:(JavaUtilArrayList *)workDone;

+ (id<RxFunctionsAction0>)createPrintActionWithNSString:(NSString *)message
                                  withJavaUtilArrayList:(JavaUtilArrayList *)workDone;

@end

__attribute__((unused)) static RxScheduler_Worker *RxSchedulersTrampolineSchedulerTest_doWorkOnNewTrampolineWithNSString_withJavaUtilArrayList_(NSString *key, JavaUtilArrayList *workDone);

__attribute__((unused)) static id<RxFunctionsAction0> RxSchedulersTrampolineSchedulerTest_createPrintActionWithNSString_withJavaUtilArrayList_(NSString *message, JavaUtilArrayList *workDone);

__attribute__((unused)) static IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$2();

@interface RxSchedulersTrampolineSchedulerTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  NSString *val$currentThreadName_;
}

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$1, val$currentThreadName_, NSString *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(RxSchedulersTrampolineSchedulerTest_$1 *self, NSString *capture$0);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$1 *new_RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$1 *create_RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(NSString *capture$0);

@interface RxSchedulersTrampolineSchedulerTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$2)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$2_init(RxSchedulersTrampolineSchedulerTest_$2 *self);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$2 *new_RxSchedulersTrampolineSchedulerTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$2 *create_RxSchedulersTrampolineSchedulerTest_$2_init();

@interface RxSchedulersTrampolineSchedulerTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriptionsCompositeSubscription *val$workers_;
  JavaUtilArrayList *val$workDone_;
}

- (void)call;

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                       withJavaUtilArrayList:(JavaUtilArrayList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$3)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$3, val$workers_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$3, val$workDone_, JavaUtilArrayList *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$3 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$3 *new_RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$3 *create_RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1);

@interface RxSchedulersTrampolineSchedulerTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriptionsCompositeSubscription *val$workers_;
  JavaUtilArrayList *val$workDone_;
  RxScheduler_Worker *val$worker2_;
}

- (void)call;

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                       withJavaUtilArrayList:(JavaUtilArrayList *)capture$1
                                      withRxScheduler_Worker:(RxScheduler_Worker *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$4)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$4, val$workers_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$4, val$workDone_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$4, val$worker2_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSchedulersTrampolineSchedulerTest_$4 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$4 *new_RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$4 *create_RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2);

@interface RxSchedulersTrampolineSchedulerTest_$5 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler_Worker *val$trampolineWorker_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)count;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$5)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$5, val$trampolineWorker_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxSchedulersTrampolineSchedulerTest_$5 *self, RxScheduler_Worker *capture$0);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5 *new_RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5 *create_RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0);

@interface RxSchedulersTrampolineSchedulerTest_$5_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTrampolineSchedulerTest_$5 *this$0_;
}

- (id<RxSubscription>)callWithId:(JavaLangLong *)count;

- (instancetype)initWithRxSchedulersTrampolineSchedulerTest_$5:(RxSchedulersTrampolineSchedulerTest_$5 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$5_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$5_$1, this$0_, RxSchedulersTrampolineSchedulerTest_$5 *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5_$1 *self, RxSchedulersTrampolineSchedulerTest_$5 *outer$);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5_$1 *new_RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5_$1 *create_RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5 *outer$);

@interface RxSchedulersTrampolineSchedulerTest_$5_$1_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$5_$1_$1)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init(RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *self);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *new_RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *create_RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init();

@interface RxSchedulersTrampolineSchedulerTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  NSString *val$key_;
  JavaUtilArrayList *val$workDone_;
}

- (void)call;

- (instancetype)initWithNSString:(NSString *)capture$0
           withJavaUtilArrayList:(JavaUtilArrayList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$6)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$6, val$key_, NSString *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$6, val$workDone_, JavaUtilArrayList *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$6 *self, NSString *capture$0, JavaUtilArrayList *capture$1);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$6 *new_RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$6 *create_RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1);

@interface RxSchedulersTrampolineSchedulerTest_$7 : NSObject < RxFunctionsAction0 > {
 @public
  NSString *val$message_;
  JavaUtilArrayList *val$workDone_;
}

- (void)call;

- (instancetype)initWithNSString:(NSString *)capture$0
           withJavaUtilArrayList:(JavaUtilArrayList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTrampolineSchedulerTest_$7)

J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$7, val$message_, NSString *)
J2OBJC_FIELD_SETTER(RxSchedulersTrampolineSchedulerTest_$7, val$workDone_, JavaUtilArrayList *)

__attribute__((unused)) static void RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$7 *self, NSString *capture$0, JavaUtilArrayList *capture$1);

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$7 *new_RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTrampolineSchedulerTest_$7 *create_RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1);

@implementation RxSchedulersTrampolineSchedulerTest

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_trampoline();
}

- (void)testMergeWithCurrentThreadScheduler1 {
  NSString *currentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_trampoline()])) mapWithRxFunctionsFunc1:create_RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(currentThreadName)];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(o)) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersTrampolineSchedulerTest_$2_init()];
}

- (void)testNestedTrampolineWithUnsubscribe {
  JavaUtilArrayList *workDone = create_JavaUtilArrayList_init();
  RxSubscriptionsCompositeSubscription *workers = create_RxSubscriptionsCompositeSubscription_init();
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_trampoline())) createWorker];
  @try {
    [workers addWithRxSubscription:worker];
    [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:create_RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(workers, workDone)];
    RxScheduler_Worker *worker2 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_trampoline())) createWorker];
    [workers addWithRxSubscription:worker2];
    [((RxScheduler_Worker *) nil_chk(worker2)) scheduleWithRxFunctionsAction0:create_RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(workers, workDone, worker2)];
    OrgJunitAssert_assertEqualsWithLong_withLong_(6, [workDone size]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"A.1", @"A.B.1", @"A.B.2", @"B.1", @"B.B.1", @"B.B.2" } count:6 type:NSString_class_()]), workDone);
  }
  @finally {
    [workers unsubscribe];
  }
}

- (void)testTrampolineWorkerHandlesConcurrentScheduling {
  RxScheduler_Worker *trampolineWorker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_trampoline())) createWorker];
  id<RxObserver> observer = RxObserversObservers_empty();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 50))) flatMapWithRxFunctionsFunc1:create_RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(trampolineWorker)])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

+ (RxScheduler_Worker *)doWorkOnNewTrampolineWithNSString:(NSString *)key
                                    withJavaUtilArrayList:(JavaUtilArrayList *)workDone {
  return RxSchedulersTrampolineSchedulerTest_doWorkOnNewTrampolineWithNSString_withJavaUtilArrayList_(key, workDone);
}

+ (id<RxFunctionsAction0>)createPrintActionWithNSString:(NSString *)message
                                  withJavaUtilArrayList:(JavaUtilArrayList *)workDone {
  return RxSchedulersTrampolineSchedulerTest_createPrintActionWithNSString_withJavaUtilArrayList_(message, workDone);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTrampolineSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "LRxScheduler_Worker;", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, "LRxFunctionsAction0;", 0xa, 6, 4, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testMergeWithCurrentThreadScheduler1);
  methods[2].selector = @selector(testNestedTrampolineWithUnsubscribe);
  methods[3].selector = @selector(testTrampolineWorkerHandlesConcurrentScheduling);
  methods[4].selector = @selector(doWorkOnNewTrampolineWithNSString:withJavaUtilArrayList:);
  methods[5].selector = @selector(createPrintActionWithNSString:withJavaUtilArrayList:);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersTrampolineSchedulerTest__Annotations$0, (void *)&RxSchedulersTrampolineSchedulerTest__Annotations$1, (void *)&RxSchedulersTrampolineSchedulerTest__Annotations$2, "doWorkOnNewTrampoline", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)Lrx/Scheduler$Worker;", "createPrintAction", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)Lrx/functions/Action0;" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest = { "TrampolineSchedulerTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest;
}

@end

RxScheduler_Worker *RxSchedulersTrampolineSchedulerTest_doWorkOnNewTrampolineWithNSString_withJavaUtilArrayList_(NSString *key, JavaUtilArrayList *workDone) {
  RxSchedulersTrampolineSchedulerTest_initialize();
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_trampoline())) createWorker];
  [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:create_RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(key, workDone)];
  return worker;
}

id<RxFunctionsAction0> RxSchedulersTrampolineSchedulerTest_createPrintActionWithNSString_withJavaUtilArrayList_(NSString *message, JavaUtilArrayList *workDone) {
  RxSchedulersTrampolineSchedulerTest_initialize();
  return create_RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(message, workDone);
}

void RxSchedulersTrampolineSchedulerTest_init(RxSchedulersTrampolineSchedulerTest *self) {
  RxSchedulersAbstractSchedulerTests_init(self);
}

RxSchedulersTrampolineSchedulerTest *new_RxSchedulersTrampolineSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest, init)
}

RxSchedulersTrampolineSchedulerTest *create_RxSchedulersTrampolineSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest, init)
}

IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTrampolineSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTrampolineSchedulerTest)

@implementation RxSchedulersTrampolineSchedulerTest_$1

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) isEqual:val$currentThreadName_]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$currentThreadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$currentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LNSString;", "LRxSchedulersTrampolineSchedulerTest;", "testMergeWithCurrentThreadScheduler1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$1;
}

@end

void RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(RxSchedulersTrampolineSchedulerTest_$1 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$currentThreadName_, capture$0);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$1 *new_RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$1, initWithNSString_, capture$0)
}

RxSchedulersTrampolineSchedulerTest_$1 *create_RxSchedulersTrampolineSchedulerTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$1, initWithNSString_, capture$0)
}

@implementation RxSchedulersTrampolineSchedulerTest_$2

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTrampolineSchedulerTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersTrampolineSchedulerTest;", "testMergeWithCurrentThreadScheduler1", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$2 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$2;
}

@end

void RxSchedulersTrampolineSchedulerTest_$2_init(RxSchedulersTrampolineSchedulerTest_$2 *self) {
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$2 *new_RxSchedulersTrampolineSchedulerTest_$2_init() {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$2, init)
}

RxSchedulersTrampolineSchedulerTest_$2 *create_RxSchedulersTrampolineSchedulerTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$2, init)
}

@implementation RxSchedulersTrampolineSchedulerTest_$3

- (void)call {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$workers_)) addWithRxSubscription:RxSchedulersTrampolineSchedulerTest_doWorkOnNewTrampolineWithNSString_withJavaUtilArrayList_(@"A", val$workDone_)];
}

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                       withJavaUtilArrayList:(JavaUtilArrayList *)capture$1 {
  RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$workers_);
  RELEASE_(val$workDone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriptionsCompositeSubscription:withJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$workers_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$workDone_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscription;LJavaUtilArrayList;", "(Lrx/subscriptions/CompositeSubscription;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxSchedulersTrampolineSchedulerTest;", "testNestedTrampolineWithUnsubscribe" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$3;
}

@end

void RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$3 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1) {
  JreStrongAssign(&self->val$workers_, capture$0);
  JreStrongAssign(&self->val$workDone_, capture$1);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$3 *new_RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$3, initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_, capture$0, capture$1)
}

RxSchedulersTrampolineSchedulerTest_$3 *create_RxSchedulersTrampolineSchedulerTest_$3_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$3, initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_, capture$0, capture$1)
}

@implementation RxSchedulersTrampolineSchedulerTest_$4

- (void)call {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$workers_)) addWithRxSubscription:RxSchedulersTrampolineSchedulerTest_doWorkOnNewTrampolineWithNSString_withJavaUtilArrayList_(@"B", val$workDone_)];
  [((RxScheduler_Worker *) nil_chk(val$worker2_)) unsubscribe];
}

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                       withJavaUtilArrayList:(JavaUtilArrayList *)capture$1
                                      withRxScheduler_Worker:(RxScheduler_Worker *)capture$2 {
  RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$workers_);
  RELEASE_(val$workDone_);
  RELEASE_(val$worker2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriptionsCompositeSubscription:withJavaUtilArrayList:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$workers_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$workDone_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$worker2_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscription;LJavaUtilArrayList;LRxScheduler_Worker;", "(Lrx/subscriptions/CompositeSubscription;Ljava/util/ArrayList<Ljava/lang/String;>;Lrx/Scheduler$Worker;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxSchedulersTrampolineSchedulerTest;", "testNestedTrampolineWithUnsubscribe" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$4;
}

@end

void RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSchedulersTrampolineSchedulerTest_$4 *self, RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2) {
  JreStrongAssign(&self->val$workers_, capture$0);
  JreStrongAssign(&self->val$workDone_, capture$1);
  JreStrongAssign(&self->val$worker2_, capture$2);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$4 *new_RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$4, initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_, capture$0, capture$1, capture$2)
}

RxSchedulersTrampolineSchedulerTest_$4 *create_RxSchedulersTrampolineSchedulerTest_$4_initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_(RxSubscriptionsCompositeSubscription *capture$0, JavaUtilArrayList *capture$1, RxScheduler_Worker *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$4, initWithRxSubscriptionsCompositeSubscription_withJavaUtilArrayList_withRxScheduler_Worker_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersTrampolineSchedulerTest_$5

- (RxObservable *)callWithId:(JavaLangInteger *)count {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)))) mapWithRxFunctionsFunc1:create_RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(self)])) limitWithInt:100];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0 {
  RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$trampolineWorker_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$trampolineWorker_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Lrx/Subscription;>;", "LRxScheduler_Worker;", "LRxSchedulersTrampolineSchedulerTest;", "testTrampolineWorkerHandlesConcurrentScheduling", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Lrx/Subscription;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$5 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$5;
}

@end

void RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxSchedulersTrampolineSchedulerTest_$5 *self, RxScheduler_Worker *capture$0) {
  JreStrongAssign(&self->val$trampolineWorker_, capture$0);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$5 *new_RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$5, initWithRxScheduler_Worker_, capture$0)
}

RxSchedulersTrampolineSchedulerTest_$5 *create_RxSchedulersTrampolineSchedulerTest_$5_initWithRxScheduler_Worker_(RxScheduler_Worker *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$5, initWithRxScheduler_Worker_, capture$0)
}

@implementation RxSchedulersTrampolineSchedulerTest_$5_$1

- (id<RxSubscription>)callWithId:(JavaLangLong *)count {
  return [((RxScheduler_Worker *) nil_chk(this$0_->val$trampolineWorker_)) scheduleWithRxFunctionsAction0:create_RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init()];
}

- (instancetype)initWithRxSchedulersTrampolineSchedulerTest_$5:(RxSchedulersTrampolineSchedulerTest_$5 *)outer$ {
  RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTrampolineSchedulerTest_$5:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersTrampolineSchedulerTest_$5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LRxSchedulersTrampolineSchedulerTest_$5;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$5_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$5_$1;
}

@end

void RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5_$1 *self, RxSchedulersTrampolineSchedulerTest_$5 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$5_$1 *new_RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$5_$1, initWithRxSchedulersTrampolineSchedulerTest_$5_, outer$)
}

RxSchedulersTrampolineSchedulerTest_$5_$1 *create_RxSchedulersTrampolineSchedulerTest_$5_$1_initWithRxSchedulersTrampolineSchedulerTest_$5_(RxSchedulersTrampolineSchedulerTest_$5 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$5_$1, initWithRxSchedulersTrampolineSchedulerTest_$5_, outer$)
}

@implementation RxSchedulersTrampolineSchedulerTest_$5_$1_$1

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSchedulersTrampolineSchedulerTest_$5_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$5_$1_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$5_$1_$1;
}

@end

void RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init(RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *self) {
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *new_RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$5_$1_$1, init)
}

RxSchedulersTrampolineSchedulerTest_$5_$1_$1 *create_RxSchedulersTrampolineSchedulerTest_$5_$1_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$5_$1_$1, init)
}

@implementation RxSchedulersTrampolineSchedulerTest_$6

- (void)call {
  NSString *msg = JreStrcat("$$", val$key_, @".1");
  [((JavaUtilArrayList *) nil_chk(val$workDone_)) addWithId:msg];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:msg];
  RxScheduler_Worker *worker3 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_trampoline())) createWorker];
  [((RxScheduler_Worker *) nil_chk(worker3)) scheduleWithRxFunctionsAction0:RxSchedulersTrampolineSchedulerTest_createPrintActionWithNSString_withJavaUtilArrayList_(JreStrcat("$$", val$key_, @".B.1"), val$workDone_)];
  [worker3 scheduleWithRxFunctionsAction0:RxSchedulersTrampolineSchedulerTest_createPrintActionWithNSString_withJavaUtilArrayList_(JreStrcat("$$", val$key_, @".B.2"), val$workDone_)];
}

- (instancetype)initWithNSString:(NSString *)capture$0
           withJavaUtilArrayList:(JavaUtilArrayList *)capture$1 {
  RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$key_);
  RELEASE_(val$workDone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithNSString:withJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$key_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$workDone_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxSchedulersTrampolineSchedulerTest;", "doWorkOnNewTrampolineWithNSString:withJavaUtilArrayList:" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$6 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$6;
}

@end

void RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$6 *self, NSString *capture$0, JavaUtilArrayList *capture$1) {
  JreStrongAssign(&self->val$key_, capture$0);
  JreStrongAssign(&self->val$workDone_, capture$1);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$6 *new_RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$6, initWithNSString_withJavaUtilArrayList_, capture$0, capture$1)
}

RxSchedulersTrampolineSchedulerTest_$6 *create_RxSchedulersTrampolineSchedulerTest_$6_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$6, initWithNSString_withJavaUtilArrayList_, capture$0, capture$1)
}

@implementation RxSchedulersTrampolineSchedulerTest_$7

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:val$message_];
  [((JavaUtilArrayList *) nil_chk(val$workDone_)) addWithId:val$message_];
}

- (instancetype)initWithNSString:(NSString *)capture$0
           withJavaUtilArrayList:(JavaUtilArrayList *)capture$1 {
  RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$message_);
  RELEASE_(val$workDone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithNSString:withJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$message_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$workDone_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxSchedulersTrampolineSchedulerTest;", "createPrintActionWithNSString:withJavaUtilArrayList:" };
  static const J2ObjcClassInfo _RxSchedulersTrampolineSchedulerTest_$7 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTrampolineSchedulerTest_$7;
}

@end

void RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(RxSchedulersTrampolineSchedulerTest_$7 *self, NSString *capture$0, JavaUtilArrayList *capture$1) {
  JreStrongAssign(&self->val$message_, capture$0);
  JreStrongAssign(&self->val$workDone_, capture$1);
  NSObject_init(self);
}

RxSchedulersTrampolineSchedulerTest_$7 *new_RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTrampolineSchedulerTest_$7, initWithNSString_withJavaUtilArrayList_, capture$0, capture$1)
}

RxSchedulersTrampolineSchedulerTest_$7 *create_RxSchedulersTrampolineSchedulerTest_$7_initWithNSString_withJavaUtilArrayList_(NSString *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTrampolineSchedulerTest_$7, initWithNSString_withJavaUtilArrayList_, capture$0, capture$1)
}
