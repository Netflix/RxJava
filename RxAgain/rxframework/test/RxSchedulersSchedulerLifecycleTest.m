//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/SchedulerLifecycleTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalSchedulersGenericScheduledExecutorService.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulerLifecycleTest.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Runnable.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxSchedulersSchedulerLifecycleTest ()

- (void)tryOutSchedulers;

@end

__attribute__((unused)) static void RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(RxSchedulersSchedulerLifecycleTest *self);

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerLifecycleTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerLifecycleTest__Annotations$1();

@interface RxSchedulersSchedulerLifecycleTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerLifecycleTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerLifecycleTest_$1, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersSchedulerLifecycleTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxSchedulersSchedulerLifecycleTest_$1 *new_RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerLifecycleTest_$1 *create_RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxSchedulersSchedulerLifecycleTest_$2 : NSObject < JavaLangRunnable > {
 @public
  id<RxFunctionsAction0> val$countAction_;
}

- (void)run;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerLifecycleTest_$2)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerLifecycleTest_$2, val$countAction_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(RxSchedulersSchedulerLifecycleTest_$2 *self, id<RxFunctionsAction0> capture$0);

__attribute__((unused)) static RxSchedulersSchedulerLifecycleTest_$2 *new_RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerLifecycleTest_$2 *create_RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0);

@implementation RxSchedulersSchedulerLifecycleTest

- (void)testShutdown {
  RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(self);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"testShutdown >> Giving time threads to spin-up"];
  JavaLangThread_sleepWithLong_(500);
  id<JavaUtilSet> rxThreads = create_JavaUtilHashSet_init();
  for (JavaLangThread * __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(JavaLangThread_getAllStackTraces())) keySet])) {
    if ([((NSString *) nil_chk([((JavaLangThread *) nil_chk(t)) getName])) hasPrefix:@"Rx"]) {
      [rxThreads addWithId:t];
    }
  }
  RxSchedulersSchedulers_shutdown();
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"testShutdown >> Giving time to threads to stop"];
  JavaLangThread_sleepWithLong_(500);
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  for (JavaLangThread * __strong t in rxThreads) {
    if ([((JavaLangThread *) nil_chk(t)) isAlive]) {
      [b appendWithNSString:JreStrcat("$@$", @"Thread ", t, @" failed to shutdown\x0d\n")];
      {
        IOSObjectArray *a__ = [t getStackTrace];
        JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangStackTraceElement *ste = *b__++;
          [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"  "])) appendWithId:ste])) appendWithNSString:@"\x0d\n"];
        }
      }
    }
  }
  if ([b length] > 0) {
    [JreLoadStatic(JavaLangSystem, out) printWithId:b];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"testShutdown >> Restarting schedulers..."];
    RxSchedulersSchedulers_start();
    OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Rx Threads were still alive:\x0d\n", b));
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"testShutdown >> Restarting schedulers..."];
  RxSchedulersSchedulers_start();
  RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(self);
}

- (void)tryOutSchedulers {
  RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(self);
}

- (void)testStartIdempotence {
  RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(self);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"testStartIdempotence >> giving some time"];
  JavaLangThread_sleepWithLong_(500);
  id<JavaUtilSet> rxThreads = create_JavaUtilHashSet_init();
  for (JavaLangThread * __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(JavaLangThread_getAllStackTraces())) keySet])) {
    if ([((NSString *) nil_chk([((JavaLangThread *) nil_chk(t)) getName])) hasPrefix:@"Rx"]) {
      [rxThreads addWithId:t];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"testStartIdempotence >> ", t)];
    }
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"testStartIdempotence >> trying to start again"];
  RxSchedulersSchedulers_start();
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"testStartIdempotence >> giving some time again"];
  JavaLangThread_sleepWithLong_(500);
  id<JavaUtilSet> rxThreads2 = create_JavaUtilHashSet_init();
  for (JavaLangThread * __strong t in nil_chk([((id<JavaUtilMap>) nil_chk(JavaLangThread_getAllStackTraces())) keySet])) {
    if ([((NSString *) nil_chk([((JavaLangThread *) nil_chk(t)) getName])) hasPrefix:@"Rx"]) {
      [rxThreads2 addWithId:t];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"testStartIdempotence >>>> ", t)];
    }
  }
  OrgJunitAssert_assertEqualsWithId_withId_(rxThreads, rxThreads2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerLifecycleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x2, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testShutdown);
  methods[1].selector = @selector(tryOutSchedulers);
  methods[2].selector = @selector(testStartIdempotence);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxSchedulersSchedulerLifecycleTest__Annotations$0, (void *)&RxSchedulersSchedulerLifecycleTest__Annotations$1 };
  static const J2ObjcClassInfo _RxSchedulersSchedulerLifecycleTest = { "SchedulerLifecycleTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersSchedulerLifecycleTest;
}

@end

void RxSchedulersSchedulerLifecycleTest_tryOutSchedulers(RxSchedulersSchedulerLifecycleTest *self) {
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(4);
  id<RxFunctionsAction0> countAction = create_RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(cdl);
  RxSubscriptionsCompositeSubscription *csub = create_RxSubscriptionsCompositeSubscription_init();
  @try {
    RxScheduler_Worker *w1 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
    [csub addWithRxSubscription:w1];
    [((RxScheduler_Worker *) nil_chk(w1)) scheduleWithRxFunctionsAction0:countAction];
    RxScheduler_Worker *w2 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
    [csub addWithRxSubscription:w2];
    [((RxScheduler_Worker *) nil_chk(w2)) scheduleWithRxFunctionsAction0:countAction];
    RxScheduler_Worker *w3 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) createWorker];
    [csub addWithRxSubscription:w3];
    [((RxScheduler_Worker *) nil_chk(w3)) scheduleWithRxFunctionsAction0:countAction];
    [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(RxInternalSchedulersGenericScheduledExecutorService_getInstance())) executeWithJavaLangRunnable:create_RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(countAction)];
    [((RxInternalUtilRxRingBuffer *) nil_chk(RxInternalUtilRxRingBuffer_getSpscInstance())) release__];
    if (![cdl awaitWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      OrgJunitAssert_failWithNSString_(@"countAction was not run by every worker");
    }
  }
  @finally {
    [csub unsubscribe];
  }
}

void RxSchedulersSchedulerLifecycleTest_init(RxSchedulersSchedulerLifecycleTest *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerLifecycleTest *new_RxSchedulersSchedulerLifecycleTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerLifecycleTest, init)
}

RxSchedulersSchedulerLifecycleTest *create_RxSchedulersSchedulerLifecycleTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerLifecycleTest, init)
}

IOSObjectArray *RxSchedulersSchedulerLifecycleTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersSchedulerLifecycleTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersSchedulerLifecycleTest)

@implementation RxSchedulersSchedulerLifecycleTest_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersSchedulerLifecycleTest;", "tryOutSchedulers" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerLifecycleTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxSchedulersSchedulerLifecycleTest_$1;
}

@end

void RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersSchedulerLifecycleTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$cdl_, capture$0);
  NSObject_init(self);
}

RxSchedulersSchedulerLifecycleTest_$1 *new_RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerLifecycleTest_$1, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxSchedulersSchedulerLifecycleTest_$1 *create_RxSchedulersSchedulerLifecycleTest_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerLifecycleTest_$1, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxSchedulersSchedulerLifecycleTest_$2

- (void)run {
  [((id<RxFunctionsAction0>) nil_chk(val$countAction_)) call];
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0 {
  RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countAction_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;", "LRxSchedulersSchedulerLifecycleTest;", "tryOutSchedulers" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerLifecycleTest_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxSchedulersSchedulerLifecycleTest_$2;
}

@end

void RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(RxSchedulersSchedulerLifecycleTest_$2 *self, id<RxFunctionsAction0> capture$0) {
  JreStrongAssign(&self->val$countAction_, capture$0);
  NSObject_init(self);
}

RxSchedulersSchedulerLifecycleTest_$2 *new_RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerLifecycleTest_$2, initWithRxFunctionsAction0_, capture$0)
}

RxSchedulersSchedulerLifecycleTest_$2 *create_RxSchedulersSchedulerLifecycleTest_$2_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerLifecycleTest_$2, initWithRxFunctionsAction0_, capture$0)
}
