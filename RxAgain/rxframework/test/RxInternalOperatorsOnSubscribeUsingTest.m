//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeUsingTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOnSubscribeUsingTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOnSubscribeUsingTest () {
 @public
  id<RxFunctionsAction1> disposeSubscription_;
}

- (void)performTestUsingWithBoolean:(jboolean)disposeEagerly;

- (void)performTestUsingWithSubscribingTwiceWithBoolean:(jboolean)disposeEagerly;

- (void)performTestUsingWithResourceFactoryErrorWithBoolean:(jboolean)disposeEagerly;

- (void)performTestUsingWithObservableFactoryErrorWithBoolean:(jboolean)disposeEagerly;

- (void)performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean:(jboolean)disposeEagerly;

+ (id<RxFunctionsAction0>)createUnsubActionWithJavaUtilList:(id<JavaUtilList>)events;

+ (id<RxFunctionsAction1>)createOnErrorActionWithJavaUtilList:(id<JavaUtilList>)events;

+ (id<RxFunctionsFunc0>)createResourceFactoryWithJavaUtilList:(id<JavaUtilList>)events;

+ (id<RxFunctionsAction0>)createOnCompletedActionWithJavaUtilList:(id<JavaUtilList>)events;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest, disposeSubscription_, id<RxFunctionsAction1>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly);

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithSubscribingTwiceWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly);

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithResourceFactoryErrorWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly);

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly);

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly);

__attribute__((unused)) static id<RxFunctionsAction0> RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(id<JavaUtilList> events);

__attribute__((unused)) static id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeUsingTest_createOnErrorActionWithJavaUtilList_(id<JavaUtilList> events);

__attribute__((unused)) static id<RxFunctionsFunc0> RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(id<JavaUtilList> events);

__attribute__((unused)) static id<RxFunctionsAction0> RxInternalOperatorsOnSubscribeUsingTest_createOnCompletedActionWithJavaUtilList_(id<JavaUtilList> events);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$15();

@protocol RxInternalOperatorsOnSubscribeUsingTest_Resource < JavaObject >

- (NSString *)getTextFromWeb;

- (void)dispose;

@end

@interface RxInternalOperatorsOnSubscribeUsingTest_Resource : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_Resource)

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeUsingTest_Resource)

@interface RxInternalOperatorsOnSubscribeUsingTest_DisposeAction : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)r;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *new_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction)

@interface RxInternalOperatorsOnSubscribeUsingTest_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxSubscription>)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$1_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$2 : NSObject < RxFunctionsFunc0 > {
 @public
  id<RxInternalOperatorsOnSubscribeUsingTest_Resource> val$resource_;
}

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call;

- (instancetype)initWithRxInternalOperatorsOnSubscribeUsingTest_Resource:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$2, val$resource_, id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(RxInternalOperatorsOnSubscribeUsingTest_$2 *self, id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$2 *new_RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$2 *create_RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$3_init(RxInternalOperatorsOnSubscribeUsingTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$3 *new_RxInternalOperatorsOnSubscribeUsingTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$3 *create_RxInternalOperatorsOnSubscribeUsingTest_$3_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$4 : NSObject < RxFunctionsFunc0 >

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$4_init(RxInternalOperatorsOnSubscribeUsingTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$4 *new_RxInternalOperatorsOnSubscribeUsingTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$4 *create_RxInternalOperatorsOnSubscribeUsingTest_$4_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$4_$1 : NSObject < RxInternalOperatorsOnSubscribeUsingTest_Resource > {
 @public
  jboolean first_;
}

- (NSString *)getTextFromWeb;

- (void)dispose;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$4_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$5 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$5_init(RxInternalOperatorsOnSubscribeUsingTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$5 *new_RxInternalOperatorsOnSubscribeUsingTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$5 *create_RxInternalOperatorsOnSubscribeUsingTest_$5_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$6 : NSObject < RxFunctionsFunc0 >

- (id<RxSubscription>)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$6_init(RxInternalOperatorsOnSubscribeUsingTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$6 *new_RxInternalOperatorsOnSubscribeUsingTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$6 *create_RxInternalOperatorsOnSubscribeUsingTest_$6_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxSubscription>)subscription;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$7_init(RxInternalOperatorsOnSubscribeUsingTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$7 *new_RxInternalOperatorsOnSubscribeUsingTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$7 *create_RxInternalOperatorsOnSubscribeUsingTest_$7_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$8 : NSObject < RxFunctionsFunc0 > {
 @public
  id<RxFunctionsAction0> val$unsubscribe_;
}

- (id<RxSubscription>)call;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$8, val$unsubscribe_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsingTest_$8 *self, id<RxFunctionsAction0> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$8 *new_RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$8 *create_RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$9 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxSubscription>)subscription;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$9_init(RxInternalOperatorsOnSubscribeUsingTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$9 *new_RxInternalOperatorsOnSubscribeUsingTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$9 *create_RxInternalOperatorsOnSubscribeUsingTest_$9_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$10 : NSObject < RxFunctionsFunc0 > {
 @public
  id<RxFunctionsAction0> val$unsubscribe_;
}

- (id<RxSubscription>)call;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$10, val$unsubscribe_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsingTest_$10 *self, id<RxFunctionsAction0> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$10 *new_RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$10 *create_RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$11 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxSubscription>)subscription;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$11_init(RxInternalOperatorsOnSubscribeUsingTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$11 *new_RxInternalOperatorsOnSubscribeUsingTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$11 *create_RxInternalOperatorsOnSubscribeUsingTest_$11_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$11_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$11_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$12 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$12_init(RxInternalOperatorsOnSubscribeUsingTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$12 *new_RxInternalOperatorsOnSubscribeUsingTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$12 *create_RxInternalOperatorsOnSubscribeUsingTest_$12_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$13 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$13)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$13_init(RxInternalOperatorsOnSubscribeUsingTest_$13 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$13 *new_RxInternalOperatorsOnSubscribeUsingTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$13 *create_RxInternalOperatorsOnSubscribeUsingTest_$13_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$14 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$14_init(RxInternalOperatorsOnSubscribeUsingTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$14 *new_RxInternalOperatorsOnSubscribeUsingTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$14 *create_RxInternalOperatorsOnSubscribeUsingTest_$14_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$15 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$15)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$15_init(RxInternalOperatorsOnSubscribeUsingTest_$15 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$15 *new_RxInternalOperatorsOnSubscribeUsingTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$15 *create_RxInternalOperatorsOnSubscribeUsingTest_$15_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$16 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilList> val$events_;
}

- (void)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$16, val$events_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$16 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$16 *new_RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$16 *create_RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$17 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$events_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$17, val$events_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$17 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$17 *new_RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$17 *create_RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$18 : NSObject < RxFunctionsFunc0 > {
 @public
  id<JavaUtilList> val$events_;
}

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$18, val$events_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$18 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$18 *new_RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$18 *create_RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$18_$1 : NSObject < RxInternalOperatorsOnSubscribeUsingTest_Resource > {
 @public
  RxInternalOperatorsOnSubscribeUsingTest_$18 *this$0_;
}

- (NSString *)getTextFromWeb;

- (void)dispose;

- (instancetype)initWithRxInternalOperatorsOnSubscribeUsingTest_$18:(RxInternalOperatorsOnSubscribeUsingTest_$18 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$18_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$18_$1, this$0_, RxInternalOperatorsOnSubscribeUsingTest_$18 *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *self, RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$);

@interface RxInternalOperatorsOnSubscribeUsingTest_$19 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilList> val$events_;
}

- (void)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$19)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$19, val$events_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$19 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$19 *new_RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$19 *create_RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$20 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$20)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$20_init(RxInternalOperatorsOnSubscribeUsingTest_$20 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$20 *new_RxInternalOperatorsOnSubscribeUsingTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$20 *create_RxInternalOperatorsOnSubscribeUsingTest_$20_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$21 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$21_init(RxInternalOperatorsOnSubscribeUsingTest_$21 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$21 *new_RxInternalOperatorsOnSubscribeUsingTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$21 *create_RxInternalOperatorsOnSubscribeUsingTest_$21_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$22 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)c;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$22)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$22, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeUsingTest_$22 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$22 *new_RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$22 *create_RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeUsingTest_$23 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$23)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$23_init(RxInternalOperatorsOnSubscribeUsingTest_$23 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$23 *new_RxInternalOperatorsOnSubscribeUsingTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$23 *create_RxInternalOperatorsOnSubscribeUsingTest_$23_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$24 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$24)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$24_init(RxInternalOperatorsOnSubscribeUsingTest_$24 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$24 *new_RxInternalOperatorsOnSubscribeUsingTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$24 *create_RxInternalOperatorsOnSubscribeUsingTest_$24_init();

@interface RxInternalOperatorsOnSubscribeUsingTest_$25 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)c;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsingTest_$25)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsingTest_$25, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeUsingTest_$25 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$25 *new_RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsingTest_$25 *create_RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxInternalOperatorsOnSubscribeUsingTest

- (void)testUsing {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithBoolean_(self, false);
}

- (void)testUsingEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithBoolean_(self, true);
}

- (void)performTestUsingWithBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithBoolean_(self, disposeEagerly);
}

- (void)testUsingWithSubscribingTwice {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithSubscribingTwiceWithBoolean_(self, false);
}

- (void)testUsingWithSubscribingTwiceDisposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithSubscribingTwiceWithBoolean_(self, true);
}

- (void)performTestUsingWithSubscribingTwiceWithBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithSubscribingTwiceWithBoolean_(self, disposeEagerly);
}

- (void)testUsingWithResourceFactoryError {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithResourceFactoryErrorWithBoolean_(self, false);
}

- (void)testUsingWithResourceFactoryErrorDisposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithResourceFactoryErrorWithBoolean_(self, true);
}

- (void)performTestUsingWithResourceFactoryErrorWithBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithResourceFactoryErrorWithBoolean_(self, disposeEagerly);
}

- (void)testUsingWithObservableFactoryError {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorWithBoolean_(self, false);
}

- (void)testUsingWithObservableFactoryErrorDisposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorWithBoolean_(self, true);
}

- (void)performTestUsingWithObservableFactoryErrorWithBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorWithBoolean_(self, disposeEagerly);
}

- (void)testUsingWithObservableFactoryErrorInOnSubscribe {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean_(self, false);
}

- (void)testUsingWithObservableFactoryErrorInOnSubscribeDisposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean_(self, true);
}

- (void)performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean_(self, disposeEagerly);
}

- (void)testUsingDisposesEagerlyBeforeCompletion {
  id<JavaUtilList> events = create_JavaUtilArrayList_init();
  id<RxFunctionsFunc0> resourceFactory = RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(events);
  id<RxFunctionsAction0> completion = RxInternalOperatorsOnSubscribeUsingTest_createOnCompletedActionWithJavaUtilList_(events);
  id<RxFunctionsAction0> unsub = RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(events);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$12_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), true))) doOnUnsubscribeWithRxFunctionsAction0:unsub])) doOnCompletedWithRxFunctionsAction0:completion];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"disposed", @"completed", @"unsub" } count:3 type:NSString_class_()]), events);
}

- (void)testUsingDoesNotDisposesEagerlyBeforeCompletion {
  id<JavaUtilList> events = create_JavaUtilArrayList_init();
  id<RxFunctionsFunc0> resourceFactory = RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(events);
  id<RxFunctionsAction0> completion = RxInternalOperatorsOnSubscribeUsingTest_createOnCompletedActionWithJavaUtilList_(events);
  id<RxFunctionsAction0> unsub = RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(events);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$13_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), false))) doOnUnsubscribeWithRxFunctionsAction0:unsub])) doOnCompletedWithRxFunctionsAction0:completion];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"completed", @"unsub", @"disposed" } count:3 type:NSString_class_()]), events);
}

- (void)testUsingDisposesEagerlyBeforeError {
  id<JavaUtilList> events = create_JavaUtilArrayList_init();
  id<RxFunctionsFunc0> resourceFactory = RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(events);
  id<RxFunctionsAction1> onError = RxInternalOperatorsOnSubscribeUsingTest_createOnErrorActionWithJavaUtilList_(events);
  id<RxFunctionsAction0> unsub = RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(events);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$14_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), true))) doOnUnsubscribeWithRxFunctionsAction0:unsub])) doOnErrorWithRxFunctionsAction1:onError];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"disposed", @"error", @"unsub" } count:3 type:NSString_class_()]), events);
}

- (void)testUsingDoesNotDisposesEagerlyBeforeError {
  id<JavaUtilList> events = create_JavaUtilArrayList_init();
  id<RxFunctionsFunc0> resourceFactory = RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(events);
  id<RxFunctionsAction1> onError = RxInternalOperatorsOnSubscribeUsingTest_createOnErrorActionWithJavaUtilList_(events);
  id<RxFunctionsAction0> unsub = RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(events);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$15_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), false))) doOnUnsubscribeWithRxFunctionsAction0:unsub])) doOnErrorWithRxFunctionsAction1:onError];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"error", @"unsub", @"disposed" } count:3 type:NSString_class_()]), events);
}

+ (id<RxFunctionsAction0>)createUnsubActionWithJavaUtilList:(id<JavaUtilList>)events {
  return RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(events);
}

+ (id<RxFunctionsAction1>)createOnErrorActionWithJavaUtilList:(id<JavaUtilList>)events {
  return RxInternalOperatorsOnSubscribeUsingTest_createOnErrorActionWithJavaUtilList_(events);
}

+ (id<RxFunctionsFunc0>)createResourceFactoryWithJavaUtilList:(id<JavaUtilList>)events {
  return RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(events);
}

+ (id<RxFunctionsAction0>)createOnCompletedActionWithJavaUtilList:(id<JavaUtilList>)events {
  return RxInternalOperatorsOnSubscribeUsingTest_createOnCompletedActionWithJavaUtilList_(events);
}

- (void)factoryThrows {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxInternalOperatorsOnSubscribeUsingTest_$20_init(), create_RxInternalOperatorsOnSubscribeUsingTest_$21_init(), create_RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)))) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [count get]);
}

- (void)nonEagerTermination {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(create_RxInternalOperatorsOnSubscribeUsingTest_$23_init(), create_RxInternalOperatorsOnSubscribeUsingTest_$24_init(), create_RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(count), false))) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [count get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(disposeSubscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x2, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x2, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x2, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "LRxFunctionsAction0;", 0xa, 20, 21, -1, 22, -1, -1 },
    { NULL, "LRxFunctionsAction1;", 0xa, 23, 21, -1, 24, -1, -1 },
    { NULL, "LRxFunctionsFunc0;", 0xa, 25, 21, -1, 26, -1, -1 },
    { NULL, "LRxFunctionsAction0;", 0xa, 27, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testUsing);
  methods[1].selector = @selector(testUsingEagerly);
  methods[2].selector = @selector(performTestUsingWithBoolean:);
  methods[3].selector = @selector(testUsingWithSubscribingTwice);
  methods[4].selector = @selector(testUsingWithSubscribingTwiceDisposeEagerly);
  methods[5].selector = @selector(performTestUsingWithSubscribingTwiceWithBoolean:);
  methods[6].selector = @selector(testUsingWithResourceFactoryError);
  methods[7].selector = @selector(testUsingWithResourceFactoryErrorDisposeEagerly);
  methods[8].selector = @selector(performTestUsingWithResourceFactoryErrorWithBoolean:);
  methods[9].selector = @selector(testUsingWithObservableFactoryError);
  methods[10].selector = @selector(testUsingWithObservableFactoryErrorDisposeEagerly);
  methods[11].selector = @selector(performTestUsingWithObservableFactoryErrorWithBoolean:);
  methods[12].selector = @selector(testUsingWithObservableFactoryErrorInOnSubscribe);
  methods[13].selector = @selector(testUsingWithObservableFactoryErrorInOnSubscribeDisposeEagerly);
  methods[14].selector = @selector(performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean:);
  methods[15].selector = @selector(testUsingDisposesEagerlyBeforeCompletion);
  methods[16].selector = @selector(testUsingDoesNotDisposesEagerlyBeforeCompletion);
  methods[17].selector = @selector(testUsingDisposesEagerlyBeforeError);
  methods[18].selector = @selector(testUsingDoesNotDisposesEagerlyBeforeError);
  methods[19].selector = @selector(createUnsubActionWithJavaUtilList:);
  methods[20].selector = @selector(createOnErrorActionWithJavaUtilList:);
  methods[21].selector = @selector(createResourceFactoryWithJavaUtilList:);
  methods[22].selector = @selector(createOnCompletedActionWithJavaUtilList:);
  methods[23].selector = @selector(factoryThrows);
  methods[24].selector = @selector(nonEagerTermination);
  methods[25].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "disposeSubscription_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$1, "performTestUsing", "Z", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$3, "performTestUsingWithSubscribingTwice", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$5, "performTestUsingWithResourceFactoryError", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$7, "performTestUsingWithObservableFactoryError", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$9, "performTestUsingWithObservableFactoryErrorInOnSubscribe", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$10, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$11, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$12, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$13, "createUnsubAction", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Lrx/functions/Action0;", "createOnErrorAction", "(Ljava/util/List<Ljava/lang/String;>;)Lrx/functions/Action1<Ljava/lang/Throwable;>;", "createResourceFactory", "(Ljava/util/List<Ljava/lang/String;>;)Lrx/functions/Func0<Lrx/internal/operators/OnSubscribeUsingTest$Resource;>;", "createOnCompletedAction", (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$14, (void *)&RxInternalOperatorsOnSubscribeUsingTest__Annotations$15, "Lrx/functions/Action1<Lrx/Subscription;>;", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;LRxInternalOperatorsOnSubscribeUsingTest_DisposeAction;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest = { "OnSubscribeUsingTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 26, 1, -1, 31, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly) {
  id<RxInternalOperatorsOnSubscribeUsingTest_Resource> resource = OrgMockitoMockito_mockWithIOSClass_(RxInternalOperatorsOnSubscribeUsingTest_Resource_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb]))) thenReturnWithId:@"Hello world!"];
  id<RxFunctionsFunc0> resourceFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(resource);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$3_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), disposeEagerly);
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"Hello"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"world!"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(resource, OrgMockitoMockito_timesWithInt_(1)))) dispose];
}

void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithSubscribingTwiceWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly) {
  id<RxFunctionsFunc0> resourceFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$4_init();
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$5_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observable = RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(), disposeEagerly);
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [observable subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"Hello"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"world!"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"Hello"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"world!"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithResourceFactoryErrorWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly) {
  id<RxFunctionsFunc0> resourceFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$6_init();
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$7_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(resourceFactory, observableFactory, self->disposeSubscription_))) toBlocking])) last];
}

void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly) {
  id<RxFunctionsAction0> unsubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsFunc0> resourceFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(unsubscribe);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$9_init();
  @try {
    [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(resourceFactory, observableFactory, self->disposeSubscription_))) toBlocking])) last];
    OrgJunitAssert_failWithNSString_(@"Should throw a TestException when the observableFactory throws it");
  }
  @catch (RxExceptionsTestException *e) {
    [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
  }
}

void RxInternalOperatorsOnSubscribeUsingTest_performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean_(RxInternalOperatorsOnSubscribeUsingTest *self, jboolean disposeEagerly) {
  id<RxFunctionsAction0> unsubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsFunc0> resourceFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(unsubscribe);
  id<RxFunctionsFunc1> observableFactory = create_RxInternalOperatorsOnSubscribeUsingTest_$11_init();
  @try {
    [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(resourceFactory, observableFactory, self->disposeSubscription_, disposeEagerly))) toBlocking])) last];
    OrgJunitAssert_failWithNSString_(@"Should throw a TestException when the observableFactory throws it");
  }
  @catch (RxExceptionsTestException *e) {
    [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
  }
}

id<RxFunctionsAction0> RxInternalOperatorsOnSubscribeUsingTest_createUnsubActionWithJavaUtilList_(id<JavaUtilList> events) {
  RxInternalOperatorsOnSubscribeUsingTest_initialize();
  return create_RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(events);
}

id<RxFunctionsAction1> RxInternalOperatorsOnSubscribeUsingTest_createOnErrorActionWithJavaUtilList_(id<JavaUtilList> events) {
  RxInternalOperatorsOnSubscribeUsingTest_initialize();
  return create_RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(events);
}

id<RxFunctionsFunc0> RxInternalOperatorsOnSubscribeUsingTest_createResourceFactoryWithJavaUtilList_(id<JavaUtilList> events) {
  RxInternalOperatorsOnSubscribeUsingTest_initialize();
  return create_RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(events);
}

id<RxFunctionsAction0> RxInternalOperatorsOnSubscribeUsingTest_createOnCompletedActionWithJavaUtilList_(id<JavaUtilList> events) {
  RxInternalOperatorsOnSubscribeUsingTest_initialize();
  return create_RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(events);
}

void RxInternalOperatorsOnSubscribeUsingTest_init(RxInternalOperatorsOnSubscribeUsingTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->disposeSubscription_, new_RxInternalOperatorsOnSubscribeUsingTest_$1_init());
}

RxInternalOperatorsOnSubscribeUsingTest *new_RxInternalOperatorsOnSubscribeUsingTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest, init)
}

RxInternalOperatorsOnSubscribeUsingTest *create_RxInternalOperatorsOnSubscribeUsingTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeUsingTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeUsingTest)

@implementation RxInternalOperatorsOnSubscribeUsingTest_Resource

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTextFromWeb);
  methods[1].selector = @selector(dispose);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_Resource = { "Resource", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x60a, 2, 0, 0, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_Resource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeUsingTest_Resource)

@implementation RxInternalOperatorsOnSubscribeUsingTest_DisposeAction

- (void)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)r {
  [((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(r)) dispose];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "LRxInternalOperatorsOnSubscribeUsingTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_DisposeAction = { "DisposeAction", "rx.internal.operators", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *new_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction, init)
}

RxInternalOperatorsOnSubscribeUsingTest_DisposeAction *create_RxInternalOperatorsOnSubscribeUsingTest_DisposeAction_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeUsingTest_DisposeAction)

@implementation RxInternalOperatorsOnSubscribeUsingTest_$1

- (void)callWithId:(id<RxSubscription>)s {
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LRxInternalOperatorsOnSubscribeUsingTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$1, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$2

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call {
  return val$resource_;
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeUsingTest_Resource:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$resource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeUsingTest_Resource:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$resource_", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/internal/operators/OnSubscribeUsingTest$Resource;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(RxInternalOperatorsOnSubscribeUsingTest_$2 *self, id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0) {
  JreStrongAssign(&self->val$resource_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$2 *new_RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$2, initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$2 *create_RxInternalOperatorsOnSubscribeUsingTest_$2_initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_(id<RxInternalOperatorsOnSubscribeUsingTest_Resource> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$2, initWithRxInternalOperatorsOnSubscribeUsingTest_Resource_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$3

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$3_init(RxInternalOperatorsOnSubscribeUsingTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$3 *new_RxInternalOperatorsOnSubscribeUsingTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$3, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$3 *create_RxInternalOperatorsOnSubscribeUsingTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$3, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$4

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call {
  return create_RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithSubscribingTwiceWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/internal/operators/OnSubscribeUsingTest$Resource;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$4_init(RxInternalOperatorsOnSubscribeUsingTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$4 *new_RxInternalOperatorsOnSubscribeUsingTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$4, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$4 *create_RxInternalOperatorsOnSubscribeUsingTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$4, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$4_$1

- (NSString *)getTextFromWeb {
  if (first_) {
    first_ = false;
    return @"Hello world!";
  }
  return @"Nothing";
}

- (void)dispose {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTextFromWeb);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest_$4;", "call" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$4_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$4_$1;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *self) {
  NSObject_init(self);
  self->first_ = true;
}

RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$4_$1, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$4_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$4_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$4_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$5

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithSubscribingTwiceWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$5_init(RxInternalOperatorsOnSubscribeUsingTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$5 *new_RxInternalOperatorsOnSubscribeUsingTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$5, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$5 *create_RxInternalOperatorsOnSubscribeUsingTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$5, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$6

- (id<RxSubscription>)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithResourceFactoryErrorWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$6_init(RxInternalOperatorsOnSubscribeUsingTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$6 *new_RxInternalOperatorsOnSubscribeUsingTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$6, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$6 *create_RxInternalOperatorsOnSubscribeUsingTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$6, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$7

- (RxObservable *)callWithId:(id<RxSubscription>)subscription {
  return RxObservable_empty();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscription;", "(Lrx/Subscription;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithResourceFactoryErrorWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Subscription;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$7;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$7_init(RxInternalOperatorsOnSubscribeUsingTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$7 *new_RxInternalOperatorsOnSubscribeUsingTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$7, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$7 *create_RxInternalOperatorsOnSubscribeUsingTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$7, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$8

- (id<RxSubscription>)call {
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(val$unsubscribe_);
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithObservableFactoryErrorWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$8;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsingTest_$8 *self, id<RxFunctionsAction0> capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$8 *new_RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$8, initWithRxFunctionsAction0_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$8 *create_RxInternalOperatorsOnSubscribeUsingTest_$8_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$8, initWithRxFunctionsAction0_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$9

- (RxObservable *)callWithId:(id<RxSubscription>)subscription {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscription;", "(Lrx/Subscription;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithObservableFactoryErrorWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Subscription;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$9;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$9_init(RxInternalOperatorsOnSubscribeUsingTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$9 *new_RxInternalOperatorsOnSubscribeUsingTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$9, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$9 *create_RxInternalOperatorsOnSubscribeUsingTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$9, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$10

- (id<RxSubscription>)call {
  return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(val$unsubscribe_);
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$10;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsingTest_$10 *self, id<RxFunctionsAction0> capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$10 *new_RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$10, initWithRxFunctionsAction0_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$10 *create_RxInternalOperatorsOnSubscribeUsingTest_$10_initWithRxFunctionsAction0_(id<RxFunctionsAction0> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$10, initWithRxFunctionsAction0_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$11

- (RxObservable *)callWithId:(id<RxSubscription>)subscription {
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscription;", "(Lrx/Subscription;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "performTestUsingWithObservableFactoryErrorInOnSubscribeWithBoolean:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Subscription;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$11;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$11_init(RxInternalOperatorsOnSubscribeUsingTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$11 *new_RxInternalOperatorsOnSubscribeUsingTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$11, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$11 *create_RxInternalOperatorsOnSubscribeUsingTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$11, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$11_$1

- (void)callWithId:(RxSubscriber *)t1 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOnSubscribeUsingTest_$11;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$11_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$11_$1;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init(RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$11_$1, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$11_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$11_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$11_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$12

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "testUsingDisposesEagerlyBeforeCompletion", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$12;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$12_init(RxInternalOperatorsOnSubscribeUsingTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$12 *new_RxInternalOperatorsOnSubscribeUsingTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$12, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$12 *create_RxInternalOperatorsOnSubscribeUsingTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$12, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$13

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "testUsingDoesNotDisposesEagerlyBeforeCompletion", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$13 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$13;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$13_init(RxInternalOperatorsOnSubscribeUsingTest_$13 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$13 *new_RxInternalOperatorsOnSubscribeUsingTest_$13_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$13, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$13 *create_RxInternalOperatorsOnSubscribeUsingTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$13, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$14

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return [((RxObservable *) nil_chk(RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_JavaLangRuntimeException_init())];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "testUsingDisposesEagerlyBeforeError", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$14;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$14_init(RxInternalOperatorsOnSubscribeUsingTest_$14 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$14 *new_RxInternalOperatorsOnSubscribeUsingTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$14, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$14 *create_RxInternalOperatorsOnSubscribeUsingTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$14, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$15

- (RxObservable *)callWithId:(id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)resource {
  return [((RxObservable *) nil_chk(RxObservable_fromWithNSObjectArray_([((NSString *) nil_chk([((id<RxInternalOperatorsOnSubscribeUsingTest_Resource>) nil_chk(resource)) getTextFromWeb])) split:@" "]))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_JavaLangRuntimeException_init())];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", "(Lrx/internal/operators/OnSubscribeUsingTest$Resource;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "testUsingDoesNotDisposesEagerlyBeforeError", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OnSubscribeUsingTest$Resource;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$15 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$15;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$15_init(RxInternalOperatorsOnSubscribeUsingTest_$15 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$15 *new_RxInternalOperatorsOnSubscribeUsingTest_$15_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$15, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$15 *create_RxInternalOperatorsOnSubscribeUsingTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$15, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$16

- (void)call {
  [((id<JavaUtilList>) nil_chk(val$events_)) addWithId:@"unsub"];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$events_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "createUnsubActionWithJavaUtilList:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$16;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$16 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$events_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$16 *new_RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$16, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$16 *create_RxInternalOperatorsOnSubscribeUsingTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$16, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$17

- (void)callWithId:(NSException *)t {
  [((id<JavaUtilList>) nil_chk(val$events_)) addWithId:@"error"];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$events_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "createOnErrorActionWithJavaUtilList:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$17;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$17 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$events_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$17 *new_RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$17, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$17 *create_RxInternalOperatorsOnSubscribeUsingTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$17, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$18

- (id<RxInternalOperatorsOnSubscribeUsingTest_Resource>)call {
  return create_RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(self);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOnSubscribeUsingTest_Resource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$events_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "createResourceFactoryWithJavaUtilList:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/internal/operators/OnSubscribeUsingTest$Resource;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$18;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$18 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$events_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$18 *new_RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$18, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$18 *create_RxInternalOperatorsOnSubscribeUsingTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$18, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$18_$1

- (NSString *)getTextFromWeb {
  return @"hello world";
}

- (void)dispose {
  [((id<JavaUtilList>) nil_chk(this$0_->val$events_)) addWithId:@"disposed"];
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeUsingTest_$18:(RxInternalOperatorsOnSubscribeUsingTest_$18 *)outer$ {
  RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTextFromWeb);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(initWithRxInternalOperatorsOnSubscribeUsingTest_$18:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeUsingTest_$18;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest_$18;", "call" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$18_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$18_$1;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *self, RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *new_RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$18_$1, initWithRxInternalOperatorsOnSubscribeUsingTest_$18_, outer$)
}

RxInternalOperatorsOnSubscribeUsingTest_$18_$1 *create_RxInternalOperatorsOnSubscribeUsingTest_$18_$1_initWithRxInternalOperatorsOnSubscribeUsingTest_$18_(RxInternalOperatorsOnSubscribeUsingTest_$18 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$18_$1, initWithRxInternalOperatorsOnSubscribeUsingTest_$18_, outer$)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$19

- (void)call {
  [((id<JavaUtilList>) nil_chk(val$events_)) addWithId:@"completed"];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$events_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "createOnCompletedActionWithJavaUtilList:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$19 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$19;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeUsingTest_$19 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$events_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$19 *new_RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$19, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$19 *create_RxInternalOperatorsOnSubscribeUsingTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$19, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$20

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest;", "factoryThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$20 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$20;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$20_init(RxInternalOperatorsOnSubscribeUsingTest_$20 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$20 *new_RxInternalOperatorsOnSubscribeUsingTest_$20_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$20, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$20 *create_RxInternalOperatorsOnSubscribeUsingTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$20, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$21

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  @throw create_RxExceptionsTestException_initWithNSString_(@"forced failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "factoryThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$21 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$21;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$21_init(RxInternalOperatorsOnSubscribeUsingTest_$21 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$21 *new_RxInternalOperatorsOnSubscribeUsingTest_$21_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$21, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$21 *create_RxInternalOperatorsOnSubscribeUsingTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$21, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$22

- (void)callWithId:(JavaLangInteger *)c {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeUsingTest;", "factoryThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$22 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$22;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeUsingTest_$22 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$22 *new_RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$22, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$22 *create_RxInternalOperatorsOnSubscribeUsingTest_$22_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$22, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$23

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeUsingTest;", "nonEagerTermination", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$23 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$23;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$23_init(RxInternalOperatorsOnSubscribeUsingTest_$23 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$23 *new_RxInternalOperatorsOnSubscribeUsingTest_$23_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$23, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$23 *create_RxInternalOperatorsOnSubscribeUsingTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$23, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$24

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  return RxObservable_justWithId_(v);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeUsingTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeUsingTest;", "nonEagerTermination", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$24 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$24;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$24_init(RxInternalOperatorsOnSubscribeUsingTest_$24 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$24 *new_RxInternalOperatorsOnSubscribeUsingTest_$24_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$24, init)
}

RxInternalOperatorsOnSubscribeUsingTest_$24 *create_RxInternalOperatorsOnSubscribeUsingTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$24, init)
}

@implementation RxInternalOperatorsOnSubscribeUsingTest_$25

- (void)callWithId:(JavaLangInteger *)c {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeUsingTest;", "nonEagerTermination", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsingTest_$25 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsingTest_$25;
}

@end

void RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeUsingTest_$25 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeUsingTest_$25 *new_RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$25, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeUsingTest_$25 *create_RxInternalOperatorsOnSubscribeUsingTest_$25_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsingTest_$25, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
