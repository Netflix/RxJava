//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/schedulers/GenericScheduledExecutorServiceTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalSchedulersGenericScheduledExecutorService.h"
#include "RxInternalSchedulersGenericScheduledExecutorServiceTest.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersGenericScheduledExecutorServiceTest__Annotations$0();

@interface RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$found1_;
  JavaUtilConcurrentAtomicAtomicInteger *val$state_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1)

J2OBJC_FIELD_SETTER(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1, val$found1_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1, val$state_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *new_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$found2_;
  JavaUtilConcurrentAtomicAtomicInteger *val$state_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2)

J2OBJC_FIELD_SETTER(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2, val$found2_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2, val$state_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *new_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@implementation RxInternalSchedulersGenericScheduledExecutorServiceTest

- (void)verifyInstanceIsSingleThreaded {
  id<JavaUtilConcurrentScheduledExecutorService> exec = RxInternalSchedulersGenericScheduledExecutorService_getInstance();
  JavaUtilConcurrentAtomicAtomicInteger *state = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *found1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *found2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<JavaUtilConcurrentFuture> f1 = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(exec)) scheduleWithJavaLangRunnable:create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(found1, state) withLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<JavaUtilConcurrentFuture> f2 = [exec scheduleWithJavaLangRunnable:create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(found2, state) withLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<JavaUtilConcurrentFuture>) nil_chk(f1)) get];
  [((id<JavaUtilConcurrentFuture>) nil_chk(f2)) get];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [state get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [found1 get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [found2 get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersGenericScheduledExecutorServiceTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(verifyInstanceIsSingleThreaded);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxInternalSchedulersGenericScheduledExecutorServiceTest__Annotations$0 };
  static const J2ObjcClassInfo _RxInternalSchedulersGenericScheduledExecutorServiceTest = { "GenericScheduledExecutorServiceTest", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalSchedulersGenericScheduledExecutorServiceTest;
}

@end

void RxInternalSchedulersGenericScheduledExecutorServiceTest_init(RxInternalSchedulersGenericScheduledExecutorServiceTest *self) {
  NSObject_init(self);
}

RxInternalSchedulersGenericScheduledExecutorServiceTest *new_RxInternalSchedulersGenericScheduledExecutorServiceTest_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest, init)
}

RxInternalSchedulersGenericScheduledExecutorServiceTest *create_RxInternalSchedulersGenericScheduledExecutorServiceTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest, init)
}

IOSObjectArray *RxInternalSchedulersGenericScheduledExecutorServiceTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersGenericScheduledExecutorServiceTest)

@implementation RxInternalSchedulersGenericScheduledExecutorServiceTest_$1

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(250);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$found1_)) setWithInt:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$state_)) getAndSetWithInt:1]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$found1_);
  RELEASE_(val$state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$found1_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$state_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalSchedulersGenericScheduledExecutorServiceTest;", "verifyInstanceIsSingleThreaded" };
  static const J2ObjcClassInfo _RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1;
}

@end

void RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$found1_, capture$0);
  JreStrongAssign(&self->val$state_, capture$1);
  NSObject_init(self);
}

RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *new_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalSchedulersGenericScheduledExecutorServiceTest_$1 *create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalSchedulersGenericScheduledExecutorServiceTest_$2

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$found2_)) setWithInt:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$state_)) getAndSetWithInt:2]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$found2_);
  RELEASE_(val$state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$found2_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$state_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalSchedulersGenericScheduledExecutorServiceTest;", "verifyInstanceIsSingleThreaded" };
  static const J2ObjcClassInfo _RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2;
}

@end

void RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$found2_, capture$0);
  JreStrongAssign(&self->val$state_, capture$1);
  NSObject_init(self);
}

RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *new_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalSchedulersGenericScheduledExecutorServiceTest_$2 *create_RxInternalSchedulersGenericScheduledExecutorServiceTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersGenericScheduledExecutorServiceTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}
