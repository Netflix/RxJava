//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTakeWhileTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTakeWhileTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$8();

@interface RxInternalOperatorsOperatorTakeWhileTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> s_;
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s
                     withNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable, s_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *self, id<RxSubscription> s, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_TestObservable *new_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_TestObservable *create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable)

@interface RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorTakeWhileTest_TestObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable:(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *)outer$
                                                               withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1, this$0_, RxInternalOperatorsOperatorTakeWhileTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *self, RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *new_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorTakeWhileTest_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)input;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$1_init(RxInternalOperatorsOperatorTakeWhileTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$1 *new_RxInternalOperatorsOperatorTakeWhileTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$1 *create_RxInternalOperatorsOperatorTakeWhileTest_$1_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$2 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)input;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$2_init(RxInternalOperatorsOperatorTakeWhileTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$2 *new_RxInternalOperatorsOperatorTakeWhileTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$2 *create_RxInternalOperatorsOperatorTakeWhileTest_$2_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$3 : NSObject < RxFunctionsFunc1 > {
 @public
  jint index_;
}

- (JavaLangBoolean *)callWithId:(NSString *)input;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$3_init(RxInternalOperatorsOperatorTakeWhileTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$3 *new_RxInternalOperatorsOperatorTakeWhileTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$3 *create_RxInternalOperatorsOperatorTakeWhileTest_$3_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$4 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$4_init(RxInternalOperatorsOperatorTakeWhileTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$4 *new_RxInternalOperatorsOperatorTakeWhileTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$4 *create_RxInternalOperatorsOperatorTakeWhileTest_$4_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$5 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$5_init(RxInternalOperatorsOperatorTakeWhileTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$5 *new_RxInternalOperatorsOperatorTakeWhileTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$5 *create_RxInternalOperatorsOperatorTakeWhileTest_$5_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$6 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaLangRuntimeException *val$testException_;
}

- (JavaLangBoolean *)callWithId:(NSString *)s;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeWhileTest_$6, val$testException_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(RxInternalOperatorsOperatorTakeWhileTest_$6 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$6 *new_RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$6 *create_RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOperatorTakeWhileTest_$7 : NSObject < RxFunctionsFunc1 > {
 @public
  jint index_;
}

- (JavaLangBoolean *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$7_init(RxInternalOperatorsOperatorTakeWhileTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$7 *new_RxInternalOperatorsOperatorTakeWhileTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$7 *create_RxInternalOperatorsOperatorTakeWhileTest_$7_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$8 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$8_init(RxInternalOperatorsOperatorTakeWhileTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$8 *new_RxInternalOperatorsOperatorTakeWhileTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$8 *create_RxInternalOperatorsOperatorTakeWhileTest_$8_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$9 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$9_init(RxInternalOperatorsOperatorTakeWhileTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$9 *new_RxInternalOperatorsOperatorTakeWhileTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$9 *create_RxInternalOperatorsOperatorTakeWhileTest_$9_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$10 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$10_init(RxInternalOperatorsOperatorTakeWhileTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$10 *new_RxInternalOperatorsOperatorTakeWhileTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$10 *create_RxInternalOperatorsOperatorTakeWhileTest_$10_init();

@interface RxInternalOperatorsOperatorTakeWhileTest_$11 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeWhileTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeWhileTest_$11_init(RxInternalOperatorsOperatorTakeWhileTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$11 *new_RxInternalOperatorsOperatorTakeWhileTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeWhileTest_$11 *create_RxInternalOperatorsOperatorTakeWhileTest_$11_init();

@implementation RxInternalOperatorsOperatorTakeWhileTest

- (void)testTakeWhile1 {
  RxObservable *w = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *take = [((RxObservable *) nil_chk(w)) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$1_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testTakeWhileOnSubject1 {
  RxSubjectsSubject *s = RxSubjectsPublishSubject_create();
  RxObservable *take = [((RxSubjectsSubject *) nil_chk(s)) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$2_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  [s onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [s onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [s onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [s onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [s onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [s onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testTakeWhile2 {
  RxObservable *w = RxObservable_justWithId_withId_withId_(@"one", @"two", @"three");
  RxObservable *take = [((RxObservable *) nil_chk(w)) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$3_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testTakeWhileDoesntLeakErrors {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeWhileTest_$4_init());
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$5_init()])) toBlocking])) lastOrDefaultWithId:@""];
}

- (void)testTakeWhileProtectsPredicateCall {
  RxInternalOperatorsOperatorTakeWhileTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_()), [IOSObjectArray arrayWithObjects:(id[]){ @"one" } count:1 type:NSString_class_()]);
  JavaLangRuntimeException *testException = create_JavaLangRuntimeException_initWithNSString_(@"test exception");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *take = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(testException)];
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(source->t_)) join];
  }
  @catch (NSException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException];
}

- (void)testUnsubscribeAfterTake {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeWhileTest_TestObservable *w = create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(s, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *take = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(w))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$7_init()];
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(w->t_)) join];
  }
  @catch (NSException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable thread finished"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(s, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testBackpressure {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$8_init()];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorTakeWhileTest_$9_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()])];
  [ts requestMoreWithLong:5];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
}

- (void)testNoUnsubscribeDownstream {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$10_init()];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) unsafeSubscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Unsubscribed!", [ts isUnsubscribed]);
}

- (void)testErrorCauseIncludesLastValue {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"abc"))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeWhileTest_$11_init()])) subscribeWithRxSubscriber:ts];
  [ts assertTerminalEvent];
  [ts assertNoValues];
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((NSException *) nil_chk([((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getCause])) getMessage])) contains:@"abc"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTakeWhile1);
  methods[1].selector = @selector(testTakeWhileOnSubject1);
  methods[2].selector = @selector(testTakeWhile2);
  methods[3].selector = @selector(testTakeWhileDoesntLeakErrors);
  methods[4].selector = @selector(testTakeWhileProtectsPredicateCall);
  methods[5].selector = @selector(testUnsubscribeAfterTake);
  methods[6].selector = @selector(testBackpressure);
  methods[7].selector = @selector(testNoUnsubscribeDownstream);
  methods[8].selector = @selector(testErrorCauseIncludesLastValue);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$3, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$4, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$5, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$6, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$7, (void *)&RxInternalOperatorsOperatorTakeWhileTest__Annotations$8, "LRxInternalOperatorsOperatorTakeWhileTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest = { "OperatorTakeWhileTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, 9, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_init(RxInternalOperatorsOperatorTakeWhileTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest *new_RxInternalOperatorsOperatorTakeWhileTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest, init)
}

RxInternalOperatorsOperatorTakeWhileTest *create_RxInternalOperatorsOperatorTakeWhileTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeWhileTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeWhileTest)

@implementation RxInternalOperatorsOperatorTakeWhileTest_TestObservable

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s
                     withNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(self, s, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable subscribed to ..."];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:s_];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestObservable thread"];
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscription:withNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorTakeWhileTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 2, 3, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *self, id<RxSubscription> s, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->s_, s);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorTakeWhileTest_TestObservable *new_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_TestObservable, initWithRxSubscription_withNSStringArray_, s, values)
}

RxInternalOperatorsOperatorTakeWhileTest_TestObservable *create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_TestObservable, initWithRxSubscription_withNSStringArray_, s, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeWhileTest_TestObservable)

@implementation RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable:(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *)outer$
                                                               withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTakeWhileTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTakeWhileTest_TestObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorTakeWhileTest$TestObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorTakeWhileTest_TestObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *self, RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *new_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1, initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1 *create_RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1_initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorTakeWhileTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_TestObservable_$1, initWithRxInternalOperatorsOperatorTakeWhileTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)input {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(input)) intValue] < 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhile1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$1;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$1_init(RxInternalOperatorsOperatorTakeWhileTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$1 *new_RxInternalOperatorsOperatorTakeWhileTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$1, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$1 *create_RxInternalOperatorsOperatorTakeWhileTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$1, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$2

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)input {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(input)) intValue] < 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhileOnSubject1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$2;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$2_init(RxInternalOperatorsOperatorTakeWhileTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$2 *new_RxInternalOperatorsOperatorTakeWhileTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$2, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$2 *create_RxInternalOperatorsOperatorTakeWhileTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$2, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$3

- (JavaLangBoolean *)callWithId:(NSString *)input {
  return JavaLangBoolean_valueOfWithBoolean_(index_++ < 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhile2", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$3;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$3_init(RxInternalOperatorsOperatorTakeWhileTest_$3 *self) {
  NSObject_init(self);
  self->index_ = 0;
}

RxInternalOperatorsOperatorTakeWhileTest_$3 *new_RxInternalOperatorsOperatorTakeWhileTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$3, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$3 *create_RxInternalOperatorsOperatorTakeWhileTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$3, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$4

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:@"one"];
  [observer onErrorWithNSException:create_NSException_initWithNSString_(@"test failed")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhileDoesntLeakErrors", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$4;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$4_init(RxInternalOperatorsOperatorTakeWhileTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$4 *new_RxInternalOperatorsOperatorTakeWhileTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$4, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$4 *create_RxInternalOperatorsOperatorTakeWhileTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$4, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$5

- (JavaLangBoolean *)callWithId:(NSString *)s {
  return JavaLangBoolean_valueOfWithBoolean_(false);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhileDoesntLeakErrors", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$5;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$5_init(RxInternalOperatorsOperatorTakeWhileTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$5 *new_RxInternalOperatorsOperatorTakeWhileTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$5, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$5 *create_RxInternalOperatorsOperatorTakeWhileTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$5, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$6

- (JavaLangBoolean *)callWithId:(NSString *)s {
  @throw val$testException_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$testException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$testException_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaLangRuntimeException;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testTakeWhileProtectsPredicateCall", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$6;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(RxInternalOperatorsOperatorTakeWhileTest_$6 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$testException_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$6 *new_RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$6, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOperatorTakeWhileTest_$6 *create_RxInternalOperatorsOperatorTakeWhileTest_$6_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$6, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$7

- (JavaLangBoolean *)callWithId:(NSString *)s {
  return JavaLangBoolean_valueOfWithBoolean_(index_++ < 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testUnsubscribeAfterTake", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$7;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$7_init(RxInternalOperatorsOperatorTakeWhileTest_$7 *self) {
  NSObject_init(self);
  self->index_ = 0;
}

RxInternalOperatorsOperatorTakeWhileTest_$7 *new_RxInternalOperatorsOperatorTakeWhileTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$7, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$7 *create_RxInternalOperatorsOperatorTakeWhileTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$7, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$8

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 100);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$8;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$8_init(RxInternalOperatorsOperatorTakeWhileTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$8 *new_RxInternalOperatorsOperatorTakeWhileTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$8, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$8 *create_RxInternalOperatorsOperatorTakeWhileTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$8, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$9

- (void)onStart {
  [self requestWithLong:5];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorTakeWhileTest_$9 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTakeWhileTest;", "testBackpressure", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$9;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$9_init(RxInternalOperatorsOperatorTakeWhileTest_$9 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$9 *new_RxInternalOperatorsOperatorTakeWhileTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$9, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$9 *create_RxInternalOperatorsOperatorTakeWhileTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$9, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$10

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testNoUnsubscribeDownstream", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$10;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$10_init(RxInternalOperatorsOperatorTakeWhileTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$10 *new_RxInternalOperatorsOperatorTakeWhileTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$10, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$10 *create_RxInternalOperatorsOperatorTakeWhileTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$10, init)
}

@implementation RxInternalOperatorsOperatorTakeWhileTest_$11

- (JavaLangBoolean *)callWithId:(NSString *)t1 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeWhileTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorTakeWhileTest;", "testErrorCauseIncludesLastValue", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeWhileTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeWhileTest_$11;
}

@end

void RxInternalOperatorsOperatorTakeWhileTest_$11_init(RxInternalOperatorsOperatorTakeWhileTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeWhileTest_$11 *new_RxInternalOperatorsOperatorTakeWhileTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$11, init)
}

RxInternalOperatorsOperatorTakeWhileTest_$11 *create_RxInternalOperatorsOperatorTakeWhileTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeWhileTest_$11, init)
}
