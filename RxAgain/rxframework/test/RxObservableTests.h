//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ObservableTests.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservableTests")
#ifdef RESTRICT_RxObservableTests
#define INCLUDE_ALL_RxObservableTests 0
#else
#define INCLUDE_ALL_RxObservableTests 1
#endif
#undef RESTRICT_RxObservableTests

#if !defined (RxObservableTests_) && (INCLUDE_ALL_RxObservableTests || defined(INCLUDE_RxObservableTests))
#define RxObservableTests_

@protocol RxObserver;

@interface RxObservableTests : NSObject {
 @public
  id<RxObserver> w_;
}

#pragma mark Public

- (instancetype)init;

- (void)before;

- (void)forEachWithError;

- (void)forEachWithNull;

- (void)fromArityArgs1;

- (void)fromArityArgs3;

- (void)fromArray;

- (void)fromIterable;

- (void)nullObserver;

- (void)nullOnSubscribe;

- (void)nullSubscriber;

- (void)observableThrowsWhileOnErrorFails;

- (void)observableThrowsWhileOnErrorFailsUnsafe;

- (void)observableThrowsWhileSubscriberIsUnsubscribed;

- (void)subscribeWithNull;

- (void)testAmbWith;

- (void)testCache;

- (void)testCacheHint;

- (void)testCacheWithCapacity;

- (void)testCompose;

- (void)testConcatWith;

- (void)testContains;

- (void)testContainsWithEmptyObservable;

- (void)testContainsWithInexistence;

- (void)testContainsWithNull;

- (void)testCountAFewItems;

- (void)testCountError;

- (void)testCountZeroItems;

- (void)testCreate;

- (void)testCustomObservableWithErrorInObservableSynchronous;

- (void)testCustomObservableWithErrorInObserverAsynchronous;

- (void)testCustomObservableWithErrorInObserverSynchronous;

- (void)testEmptyIdentity;

- (void)testEmptyIsEmpty;

- (void)testErrorThrownIssue1685;

- (void)testErrorThrownWithoutErrorHandlerAsynchronous;

- (void)testErrorThrownWithoutErrorHandlerSynchronous;

- (void)testFirstOfNone;

- (void)testFirstWithPredicateOfNoneMatchingThePredicate;

- (void)testForEachWithError;

- (void)testForEachWithNull;

- (void)testIgnoreElements;

- (void)testJustWithScheduler;

- (void)testMaterializeDematerializeChaining;

- (void)testMergeWith;

- (void)testOfType;

- (void)testOfTypeWithPolymorphism;

- (void)testOnSubscribeFails;

- (void)testPublishLast;

- (void)testRangeWithScheduler;

- (void)testReduce;

- (void)testReduceWithEmptyObservable;

- (void)testReduceWithEmptyObservableAndSeed;

- (void)testReduceWithInitialValue;

- (void)testReplay;

- (void)testStartWithWithScheduler;

- (void)testSubscribeWithoutOnError;

- (void)testSubscribingSubscriberAsObserverMaintainsSubscriptionChain;

- (void)testTakeFirstOfNone;

- (void)testTakeFirstOfSome;

- (void)testTakeFirstWithPredicateOfNoneMatchingThePredicate;

- (void)testTakeFirstWithPredicateOfSome;

- (void)testTakeWhileToList;

- (void)testTakeWithErrorInObserver;

- (void)toFunctionReceivesObservableReturnsResult;

@end

J2OBJC_STATIC_INIT(RxObservableTests)

J2OBJC_FIELD_SETTER(RxObservableTests, w_, id<RxObserver>)

FOUNDATION_EXPORT void RxObservableTests_init(RxObservableTests *self);

FOUNDATION_EXPORT RxObservableTests *new_RxObservableTests_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservableTests *create_RxObservableTests_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservableTests)

#endif

#if !defined (RxObservableTests_FailingObservable_) && (INCLUDE_ALL_RxObservableTests || defined(INCLUDE_RxObservableTests_FailingObservable))
#define RxObservableTests_FailingObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable 1
#include "RxObservable.h"

@interface RxObservableTests_FailingObservable : RxObservable

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_FailingObservable)

FOUNDATION_EXPORT void RxObservableTests_FailingObservable_init(RxObservableTests_FailingObservable *self);

FOUNDATION_EXPORT RxObservableTests_FailingObservable *new_RxObservableTests_FailingObservable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservableTests_FailingObservable *create_RxObservableTests_FailingObservable_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservableTests_FailingObservable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservableTests")
