//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/ReplaySubjectTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsReplaySubjectTest")
#ifdef RESTRICT_RxSubjectsReplaySubjectTest
#define INCLUDE_ALL_RxSubjectsReplaySubjectTest 0
#else
#define INCLUDE_ALL_RxSubjectsReplaySubjectTest 1
#endif
#undef RESTRICT_RxSubjectsReplaySubjectTest

#if !defined (RxSubjectsReplaySubjectTest_) && (INCLUDE_ALL_RxSubjectsReplaySubjectTest || defined(INCLUDE_RxSubjectsReplaySubjectTest))
#define RxSubjectsReplaySubjectTest_

@class RxSubjectsReplaySubject;

@interface RxSubjectsReplaySubjectTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)backpressureSizeAndTimeLive;

- (void)backpressureSizeAndTimeOffline;

- (void)backpressureSizeBoundLive;

- (void)backpressureSizeBoundOffline;

- (void)backpressureUnboundedLive;

- (void)backpressureUnboundedOffline;

- (void)filtered;

- (void)testCompleted;

- (void)testCompletedAfterError;

- (void)testCompletedStopsEmittingData;

- (void)testCurrentStateMethodsEmpty;

- (void)testCurrentStateMethodsError;

- (void)testCurrentStateMethodsNormal;

- (void)testError;

- (void)testGetValues;

- (void)testGetValuesUnbounded;

- (void)testNewSubscriberDoesntBlockExisting;

- (void)testOnErrorThrowsDoesntPreventDelivery;

- (void)testOnErrorThrowsDoesntPreventDelivery2;

- (void)testReplay1AfterTermination;

- (void)testReplay1Directly;

- (void)testReplaySubjectBoundedEmpty;

- (void)testReplaySubjectBoundedError;

- (void)testReplaySubjectEmpty;

- (void)testReplaySubjectError;

- (void)testReplaySubjectValueRelay;

- (void)testReplaySubjectValueRelayBounded;

- (void)testReplaySubjectValueRelayBoundedEmptyIncomplete;

- (void)testReplaySubjectValueRelayBoundedIncomplete;

- (void)testReplaySubjectValueRelayEmptyIncomplete;

- (void)testReplaySubjectValueRelayIncomplete;

- (void)testReplayTimestampedAfterTermination;

- (void)testReplayTimestampedDirectly;

- (void)testSizeAndHasAnyValueEffectivelyUnbounded;

- (void)testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted;

- (void)testSizeAndHasAnyValueEffectivelyUnboundedEmptyError;

- (void)testSizeAndHasAnyValueEffectivelyUnboundedError;

- (void)testSizeAndHasAnyValueSizeBounded;

- (void)testSizeAndHasAnyValueTimeBounded;

- (void)testSizeAndHasAnyValueUnbounded;

- (void)testSizeAndHasAnyValueUnboundedEmptyCompleted;

- (void)testSizeAndHasAnyValueUnboundedEmptyError;

- (void)testSizeAndHasAnyValueUnboundedError;

- (void)testSubscribeMidSequence;

- (void)testSubscriptionLeak;

- (void)testTerminateOnce;

- (void)testUnsubscribeFirstObserver;

- (void)testUnsubscriptionCase;

#pragma mark Package-Private

- (void)backpressureLiveWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs;

- (void)backpressureOfflineWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs;

- (void)backpressureOffline5WithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest)

FOUNDATION_EXPORT void RxSubjectsReplaySubjectTest_init(RxSubjectsReplaySubjectTest *self);

FOUNDATION_EXPORT RxSubjectsReplaySubjectTest *new_RxSubjectsReplaySubjectTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsReplaySubjectTest *create_RxSubjectsReplaySubjectTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsReplaySubjectTest)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsReplaySubjectTest")
