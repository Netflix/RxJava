//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/producers/SingleDelayedProducerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalProducersSingleDelayedProducer.h"
#include "RxInternalProducersSingleDelayedProducerTest.h"
#include "RxObserversSubscribers.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalProducersSingleDelayedProducerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalProducersSingleDelayedProducerTest__Annotations$1();

@interface RxInternalProducersSingleDelayedProducerTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$waiter_;
  RxInternalProducersSingleDelayedProducer *val$pa_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                 withRxInternalProducersSingleDelayedProducer:(RxInternalProducersSingleDelayedProducer *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalProducersSingleDelayedProducerTest_$1)

J2OBJC_FIELD_SETTER(RxInternalProducersSingleDelayedProducerTest_$1, val$waiter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalProducersSingleDelayedProducerTest_$1, val$pa_, RxInternalProducersSingleDelayedProducer *)
J2OBJC_FIELD_SETTER(RxInternalProducersSingleDelayedProducerTest_$1, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(RxInternalProducersSingleDelayedProducerTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxInternalProducersSingleDelayedProducerTest_$1 *new_RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalProducersSingleDelayedProducerTest_$1 *create_RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@implementation RxInternalProducersSingleDelayedProducerTest

- (void)negativeRequestThrows {
  RxInternalProducersSingleDelayedProducer *pa = create_RxInternalProducersSingleDelayedProducer_initWithRxSubscriber_(RxObserversSubscribers_empty());
  @try {
    [pa requestWithLong:-99];
    OrgJunitAssert_failWithNSString_(@"Failed to throw on invalid request amount");
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"n >= 0 required", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

- (void)requestCompleteRace {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    for (jint i = 0; i < 10000; i++) {
      JavaUtilConcurrentAtomicAtomicInteger *waiter = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(2);
      RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
      RxInternalProducersSingleDelayedProducer *pa = create_RxInternalProducersSingleDelayedProducer_initWithRxSubscriber_(ts);
      JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
      [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(waiter, pa, cdl)];
      [waiter decrementAndGet];
      while ([waiter get] != 0) ;
      [pa setValueWithId:JavaLangInteger_valueOfWithInt_(1)];
      if (![cdl awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
        OrgJunitAssert_failWithNSString_(@"The wait for completion timed out");
      }
      [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
      [ts assertCompleted];
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalProducersSingleDelayedProducerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(negativeRequestThrows);
  methods[1].selector = @selector(requestCompleteRace);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalProducersSingleDelayedProducerTest__Annotations$0, "LJavaLangException;", (void *)&RxInternalProducersSingleDelayedProducerTest__Annotations$1 };
  static const J2ObjcClassInfo _RxInternalProducersSingleDelayedProducerTest = { "SingleDelayedProducerTest", "rx.internal.producers", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalProducersSingleDelayedProducerTest;
}

@end

void RxInternalProducersSingleDelayedProducerTest_init(RxInternalProducersSingleDelayedProducerTest *self) {
  NSObject_init(self);
}

RxInternalProducersSingleDelayedProducerTest *new_RxInternalProducersSingleDelayedProducerTest_init() {
  J2OBJC_NEW_IMPL(RxInternalProducersSingleDelayedProducerTest, init)
}

RxInternalProducersSingleDelayedProducerTest *create_RxInternalProducersSingleDelayedProducerTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalProducersSingleDelayedProducerTest, init)
}

IOSObjectArray *RxInternalProducersSingleDelayedProducerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalProducersSingleDelayedProducerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalProducersSingleDelayedProducerTest)

@implementation RxInternalProducersSingleDelayedProducerTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$waiter_)) decrementAndGet];
  while ([val$waiter_ get] != 0) ;
  [((RxInternalProducersSingleDelayedProducer *) nil_chk(val$pa_)) requestWithLong:1];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                 withRxInternalProducersSingleDelayedProducer:(RxInternalProducersSingleDelayedProducer *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$waiter_);
  RELEASE_(val$pa_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxInternalProducersSingleDelayedProducer:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$waiter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$pa_", "LRxInternalProducersSingleDelayedProducer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LRxInternalProducersSingleDelayedProducer;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicInteger;Lrx/internal/producers/SingleDelayedProducer<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/internal/producers/SingleDelayedProducer<Ljava/lang/Integer;>;", "LRxInternalProducersSingleDelayedProducerTest;", "requestCompleteRace" };
  static const J2ObjcClassInfo _RxInternalProducersSingleDelayedProducerTest_$1 = { "", "rx.internal.producers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalProducersSingleDelayedProducerTest_$1;
}

@end

void RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(RxInternalProducersSingleDelayedProducerTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$waiter_, capture$0);
  JreStrongAssign(&self->val$pa_, capture$1);
  JreStrongAssign(&self->val$cdl_, capture$2);
  NSObject_init(self);
}

RxInternalProducersSingleDelayedProducerTest_$1 *new_RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalProducersSingleDelayedProducerTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxInternalProducersSingleDelayedProducerTest_$1 *create_RxInternalProducersSingleDelayedProducerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxInternalProducersSingleDelayedProducer *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalProducersSingleDelayedProducerTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxInternalProducersSingleDelayedProducer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}
