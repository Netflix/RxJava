//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/CompletableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCapturingUncaughtExceptionHandler.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxCompletableTest.h"
#include "RxCompletableTestFunc1a.h"
#include "RxCompletableTestFunc1b.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsOnCompletedFailedException.h"
#include "RxExceptionsOnErrorFailedException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsMultipleAssignmentSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/function/Consumer.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxCompletableTest () {
 @public
  id<RxFunctionsFunc1> onCreate_;
  id<RxFunctionsFunc2> onStart_;
}

+ (void)expectUncaughtTestExceptionWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

@end

J2OBJC_FIELD_SETTER(RxCompletableTest, onCreate_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxCompletableTest, onStart_, id<RxFunctionsFunc2>)

__attribute__((unused)) static void RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(id<RxFunctionsAction0> action);

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$42();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$43();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$44();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$45();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$46();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$47();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$48();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$49();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$50();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$51();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$52();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$53();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$54();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$55();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$56();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$57();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$58();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$59();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$60();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$61();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$62();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$63();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$64();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$65();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$66();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$67();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$68();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$69();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$70();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$71();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$72();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$73();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$74();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$75();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$76();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$77();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$78();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$79();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$80();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$81();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$82();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$83();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$84();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$85();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$86();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$87();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$88();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$89();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$90();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$91();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$92();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$93();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$94();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$95();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$96();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$97();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$98();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$99();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$100();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$101();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$102();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$103();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$104();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$105();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$106();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$107();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$108();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$109();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$110();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$111();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$112();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$113();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$114();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$115();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$116();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$117();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$118();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$119();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$120();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$121();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$122();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$123();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$124();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$125();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$126();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$127();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$128();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$129();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$130();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$131();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$132();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$133();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$134();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$135();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$136();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$137();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$138();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$139();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$140();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$141();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$142();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$143();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$144();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$145();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$146();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$147();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$148();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$149();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$150();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$151();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$152();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$153();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$154();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$155();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$156();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$157();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$158();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$159();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$160();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$161();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$162();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$163();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$164();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$165();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$166();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$167();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$168();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$169();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$170();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$171();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$172();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$173();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$174();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$175();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$176();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$177();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$178();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$179();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$180();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$181();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$182();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$183();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$184();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$185();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$186();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$187();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$188();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$189();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$190();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$191();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$192();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$193();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$194();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$195();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$196();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$197();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$198();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$199();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$200();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$201();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$202();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$203();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$204();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$205();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$206();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$207();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$208();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$209();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$210();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$211();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$212();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$213();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$214();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$215();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$216();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$217();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$218();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$219();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$220();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$221();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$222();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$223();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$224();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$225();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$226();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$227();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$228();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$229();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$230();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$231();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$232();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$233();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$234();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$235();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$236();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$237();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$238();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$239();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$240();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$241();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$242();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$243();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$244();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$245();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$246();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$247();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$248();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$249();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$250();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$251();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$252();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$253();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$254();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$255();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$256();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$257();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$258();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$259();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$260();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$261();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$262();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$263();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$264();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$265();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$266();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$267();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$268();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$269();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$270();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$271();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$272();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$273();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$274();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$275();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$276();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$277();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$278();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$279();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$280();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$281();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$282();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$283();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$284();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$285();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$286();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$287();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$288();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$289();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$290();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$291();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$292();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$293();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$294();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$295();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$296();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$297();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$298();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$299();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$300();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$301();

__attribute__((unused)) static IOSObjectArray *RxCompletableTest__Annotations$302();

@interface RxCompletableTest_IterableIteratorNextThrows_$1 : NSObject < JavaUtilIterator >

- (jboolean)hasNext;

- (RxCompletable *)next;

- (void)remove;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_IterableIteratorNextThrows_$1)

__attribute__((unused)) static void RxCompletableTest_IterableIteratorNextThrows_$1_init(RxCompletableTest_IterableIteratorNextThrows_$1 *self);

__attribute__((unused)) static RxCompletableTest_IterableIteratorNextThrows_$1 *new_RxCompletableTest_IterableIteratorNextThrows_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_IterableIteratorNextThrows_$1 *create_RxCompletableTest_IterableIteratorNextThrows_$1_init();

@interface RxCompletableTest_IterableIteratorHasNextThrows_$1 : NSObject < JavaUtilIterator >

- (jboolean)hasNext;

- (RxCompletable *)next;

- (void)remove;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_IterableIteratorHasNextThrows_$1)

__attribute__((unused)) static void RxCompletableTest_IterableIteratorHasNextThrows_$1_init(RxCompletableTest_IterableIteratorHasNextThrows_$1 *self);

__attribute__((unused)) static RxCompletableTest_IterableIteratorHasNextThrows_$1 *new_RxCompletableTest_IterableIteratorHasNextThrows_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_IterableIteratorHasNextThrows_$1 *create_RxCompletableTest_IterableIteratorHasNextThrows_$1_init();

inline jlong RxCompletableTest_NormalCompletable_get_serialVersionUID();
#define RxCompletableTest_NormalCompletable_serialVersionUID 7192337844700923752LL
J2OBJC_STATIC_FIELD_CONSTANT(RxCompletableTest_NormalCompletable, serialVersionUID, jlong)

@interface RxCompletableTest_NormalCompletable_$1 : NSObject < RxCompletable_OnSubscribe > {
 @public
  RxCompletableTest_NormalCompletable *this$0_;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)initWithRxCompletableTest_NormalCompletable:(RxCompletableTest_NormalCompletable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_NormalCompletable_$1)

J2OBJC_FIELD_SETTER(RxCompletableTest_NormalCompletable_$1, this$0_, RxCompletableTest_NormalCompletable *)

__attribute__((unused)) static void RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable_$1 *self, RxCompletableTest_NormalCompletable *outer$);

__attribute__((unused)) static RxCompletableTest_NormalCompletable_$1 *new_RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_NormalCompletable_$1 *create_RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable *outer$);

inline jlong RxCompletableTest_ErrorCompletable_get_serialVersionUID();
#define RxCompletableTest_ErrorCompletable_serialVersionUID 7192337844700923752LL
J2OBJC_STATIC_FIELD_CONSTANT(RxCompletableTest_ErrorCompletable, serialVersionUID, jlong)

@interface RxCompletableTest_ErrorCompletable_$1 : NSObject < RxCompletable_OnSubscribe > {
 @public
  RxCompletableTest_ErrorCompletable *this$0_;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)initWithRxCompletableTest_ErrorCompletable:(RxCompletableTest_ErrorCompletable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_ErrorCompletable_$1)

J2OBJC_FIELD_SETTER(RxCompletableTest_ErrorCompletable_$1, this$0_, RxCompletableTest_ErrorCompletable *)

__attribute__((unused)) static void RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable_$1 *self, RxCompletableTest_ErrorCompletable *outer$);

__attribute__((unused)) static RxCompletableTest_ErrorCompletable_$1 *new_RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_ErrorCompletable_$1 *create_RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable *outer$);

@interface RxCompletableTest_CompletableOperatorSwap_$1 : NSObject < RxCompletableSubscriber > {
 @public
  id<RxCompletableSubscriber> val$v_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (instancetype)initWithRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_CompletableOperatorSwap_$1)

J2OBJC_FIELD_SETTER(RxCompletableTest_CompletableOperatorSwap_$1, val$v_, id<RxCompletableSubscriber>)

__attribute__((unused)) static void RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(RxCompletableTest_CompletableOperatorSwap_$1 *self, id<RxCompletableSubscriber> capture$0);

__attribute__((unused)) static RxCompletableTest_CompletableOperatorSwap_$1 *new_RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_CompletableOperatorSwap_$1 *create_RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> capture$0);

@interface RxCompletableTest_$1 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$1)

__attribute__((unused)) static void RxCompletableTest_$1_init(RxCompletableTest_$1 *self);

__attribute__((unused)) static RxCompletableTest_$1 *new_RxCompletableTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$1 *create_RxCompletableTest_$1_init();

@interface RxCompletableTest_$2 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$2)

__attribute__((unused)) static void RxCompletableTest_$2_init(RxCompletableTest_$2 *self);

__attribute__((unused)) static RxCompletableTest_$2 *new_RxCompletableTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$2 *create_RxCompletableTest_$2_init();

@interface RxCompletableTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requested_;
}

- (void)callWithId:(JavaLangLong *)v;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$3)

J2OBJC_FIELD_SETTER(RxCompletableTest_$3, val$requested_, id<JavaUtilList>)

__attribute__((unused)) static void RxCompletableTest_$3_initWithJavaUtilList_(RxCompletableTest_$3 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxCompletableTest_$3 *new_RxCompletableTest_$3_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$3 *create_RxCompletableTest_$3_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxCompletableTest_$4 : NSObject < RxCompletable_OnSubscribe > {
 @public
  JavaLangException *val$e_;
}

- (void)callWithId:(id<RxCompletableSubscriber>)cs;

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$4)

J2OBJC_FIELD_SETTER(RxCompletableTest_$4, val$e_, JavaLangException *)

__attribute__((unused)) static void RxCompletableTest_$4_initWithJavaLangException_(RxCompletableTest_$4 *self, JavaLangException *capture$0);

__attribute__((unused)) static RxCompletableTest_$4 *new_RxCompletableTest_$4_initWithJavaLangException_(JavaLangException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$4 *create_RxCompletableTest_$4_initWithJavaLangException_(JavaLangException *capture$0);

@interface RxCompletableTest_$5 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$hasRun_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$5)

J2OBJC_FIELD_SETTER(RxCompletableTest_$5, val$hasRun_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$5 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$5 *new_RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$5 *create_RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$6 : NSObject < RxSingle_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$hasRun_;
}

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$6)

J2OBJC_FIELD_SETTER(RxCompletableTest_$6, val$hasRun_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$6 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$6 *new_RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$6 *create_RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$7 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$7)

__attribute__((unused)) static void RxCompletableTest_$7_init(RxCompletableTest_$7 *self);

__attribute__((unused)) static RxCompletableTest_$7 *new_RxCompletableTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$7 *create_RxCompletableTest_$7_init();

@interface RxCompletableTest_$8 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$8)

__attribute__((unused)) static void RxCompletableTest_$8_init(RxCompletableTest_$8 *self);

__attribute__((unused)) static RxCompletableTest_$8 *new_RxCompletableTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$8 *create_RxCompletableTest_$8_init();

@interface RxCompletableTest_$9 : NSObject < RxFunctionsFunc0 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$9)

J2OBJC_FIELD_SETTER(RxCompletableTest_$9, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest_$9 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$9 *new_RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$9 *create_RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$10 : NSObject < RxFunctionsFunc0 >

- (RxCompletable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$10)

__attribute__((unused)) static void RxCompletableTest_$10_init(RxCompletableTest_$10 *self);

__attribute__((unused)) static RxCompletableTest_$10 *new_RxCompletableTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$10 *create_RxCompletableTest_$10_init();

@interface RxCompletableTest_$11 : NSObject < RxFunctionsFunc0 >

- (RxCompletable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$11)

__attribute__((unused)) static void RxCompletableTest_$11_init(RxCompletableTest_$11 *self);

__attribute__((unused)) static RxCompletableTest_$11 *new_RxCompletableTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$11 *create_RxCompletableTest_$11_init();

@interface RxCompletableTest_$12 : NSObject < RxFunctionsFunc0 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$12)

J2OBJC_FIELD_SETTER(RxCompletableTest_$12, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest_$12 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$12 *new_RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$12 *create_RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$13 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$13)

J2OBJC_FIELD_SETTER(RxCompletableTest_$13, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$13 *new_RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$13 *create_RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$14 : NSObject < JavaUtilConcurrentCallable >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$14)

__attribute__((unused)) static void RxCompletableTest_$14_init(RxCompletableTest_$14 *self);

__attribute__((unused)) static RxCompletableTest_$14 *new_RxCompletableTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$14 *create_RxCompletableTest_$14_init();

@interface RxCompletableTest_$15 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$15)

__attribute__((unused)) static void RxCompletableTest_$15_init(RxCompletableTest_$15 *self);

__attribute__((unused)) static RxCompletableTest_$15 *new_RxCompletableTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$15 *create_RxCompletableTest_$15_init();

@interface RxCompletableTest_$16 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$16)

__attribute__((unused)) static void RxCompletableTest_$16_init(RxCompletableTest_$16 *self);

__attribute__((unused)) static RxCompletableTest_$16 *new_RxCompletableTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$16 *create_RxCompletableTest_$16_init();

@interface RxCompletableTest_$17 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$17)

J2OBJC_FIELD_SETTER(RxCompletableTest_$17, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$17 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$17 *new_RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$17 *create_RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$18 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$18)

__attribute__((unused)) static void RxCompletableTest_$18_init(RxCompletableTest_$18 *self);

__attribute__((unused)) static RxCompletableTest_$18 *new_RxCompletableTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$18 *create_RxCompletableTest_$18_init();

@interface RxCompletableTest_$19 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$19)

__attribute__((unused)) static void RxCompletableTest_$19_init(RxCompletableTest_$19 *self);

__attribute__((unused)) static RxCompletableTest_$19 *new_RxCompletableTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$19 *create_RxCompletableTest_$19_init();

@interface RxCompletableTest_$20 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$20)

__attribute__((unused)) static void RxCompletableTest_$20_init(RxCompletableTest_$20 *self);

__attribute__((unused)) static RxCompletableTest_$20 *new_RxCompletableTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$20 *create_RxCompletableTest_$20_init();

@interface RxCompletableTest_$21 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requested_;
}

- (void)callWithId:(JavaLangLong *)v;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$21)

J2OBJC_FIELD_SETTER(RxCompletableTest_$21, val$requested_, id<JavaUtilList>)

__attribute__((unused)) static void RxCompletableTest_$21_initWithJavaUtilList_(RxCompletableTest_$21 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxCompletableTest_$21 *new_RxCompletableTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$21 *create_RxCompletableTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxCompletableTest_$22 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$22)

__attribute__((unused)) static void RxCompletableTest_$22_init(RxCompletableTest_$22 *self);

__attribute__((unused)) static RxCompletableTest_$22 *new_RxCompletableTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$22 *create_RxCompletableTest_$22_init();

@interface RxCompletableTest_$23 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$23)

__attribute__((unused)) static void RxCompletableTest_$23_init(RxCompletableTest_$23 *self);

__attribute__((unused)) static RxCompletableTest_$23 *new_RxCompletableTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$23 *create_RxCompletableTest_$23_init();

@interface RxCompletableTest_$24 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requested_;
}

- (void)callWithId:(JavaLangLong *)v;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$24)

J2OBJC_FIELD_SETTER(RxCompletableTest_$24, val$requested_, id<JavaUtilList>)

__attribute__((unused)) static void RxCompletableTest_$24_initWithJavaUtilList_(RxCompletableTest_$24 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxCompletableTest_$24 *new_RxCompletableTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$24 *create_RxCompletableTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxCompletableTest_$25 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$onSubscribeCalled_;
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$25)

J2OBJC_FIELD_SETTER(RxCompletableTest_$25, val$onSubscribeCalled_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$25, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$25 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxCompletableTest_$25 *new_RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$25 *create_RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxCompletableTest_$26 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$26)

J2OBJC_FIELD_SETTER(RxCompletableTest_$26, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$26 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$26 *new_RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$26 *create_RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$27 : NSObject < RxCompletableSubscriber > {
 @public
  RxSubscriptionsMultipleAssignmentSubscription *val$mad_;
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                            withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$27)

J2OBJC_FIELD_SETTER(RxCompletableTest_$27, val$mad_, RxSubscriptionsMultipleAssignmentSubscription *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$27, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$27 *self, RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxCompletableTest_$27 *new_RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$27 *create_RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxCompletableTest_$28 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$28)

__attribute__((unused)) static void RxCompletableTest_$28_init(RxCompletableTest_$28 *self);

__attribute__((unused)) static RxCompletableTest_$28 *new_RxCompletableTest_$28_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$28 *create_RxCompletableTest_$28_init();

@interface RxCompletableTest_$29 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(id)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$29)

J2OBJC_FIELD_SETTER(RxCompletableTest_$29, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest_$29 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$29 *new_RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$29 *create_RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$30 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)callWithId:(JavaLangInteger *)d;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$30)

J2OBJC_FIELD_SETTER(RxCompletableTest_$30, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$30 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$30 *new_RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$30 *create_RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$31 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribedFirst_;
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$31)

J2OBJC_FIELD_SETTER(RxCompletableTest_$31, val$error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$31, val$unsubscribedFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$31, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$31 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

__attribute__((unused)) static RxCompletableTest_$31 *new_RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$31 *create_RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

@interface RxCompletableTest_$32 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$32)

__attribute__((unused)) static void RxCompletableTest_$32_init(RxCompletableTest_$32 *self);

__attribute__((unused)) static RxCompletableTest_$32 *new_RxCompletableTest_$32_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$32 *create_RxCompletableTest_$32_init();

@interface RxCompletableTest_$33 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$33)

J2OBJC_FIELD_SETTER(RxCompletableTest_$33, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest_$33 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$33 *new_RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$33 *create_RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$34 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)callWithId:(JavaLangInteger *)d;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$34)

J2OBJC_FIELD_SETTER(RxCompletableTest_$34, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$34 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$34 *new_RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$34 *create_RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$35 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribedFirst_;
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$35)

J2OBJC_FIELD_SETTER(RxCompletableTest_$35, val$error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$35, val$unsubscribedFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$35, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$35 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

__attribute__((unused)) static RxCompletableTest_$35 *new_RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$35 *create_RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

@interface RxCompletableTest_$36 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$36)

__attribute__((unused)) static void RxCompletableTest_$36_init(RxCompletableTest_$36 *self);

__attribute__((unused)) static RxCompletableTest_$36 *new_RxCompletableTest_$36_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$36 *create_RxCompletableTest_$36_init();

@interface RxCompletableTest_$37 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$37)

J2OBJC_FIELD_SETTER(RxCompletableTest_$37, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest_$37 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$37 *new_RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$37 *create_RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$38 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)callWithId:(JavaLangInteger *)d;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$38)

J2OBJC_FIELD_SETTER(RxCompletableTest_$38, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$38 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$38 *new_RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$38 *create_RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$39 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribedFirst_;
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$39)

J2OBJC_FIELD_SETTER(RxCompletableTest_$39, val$unsubscribedFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$39, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$39, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$39 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

__attribute__((unused)) static RxCompletableTest_$39 *new_RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$39 *create_RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

@interface RxCompletableTest_$40 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$40)

__attribute__((unused)) static void RxCompletableTest_$40_init(RxCompletableTest_$40 *self);

__attribute__((unused)) static RxCompletableTest_$40 *new_RxCompletableTest_$40_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$40 *create_RxCompletableTest_$40_init();

@interface RxCompletableTest_$41 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$41)

J2OBJC_FIELD_SETTER(RxCompletableTest_$41, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest_$41 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$41 *new_RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$41 *create_RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$42 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
}

- (void)callWithId:(JavaLangInteger *)d;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$42)

J2OBJC_FIELD_SETTER(RxCompletableTest_$42, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$42 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$42 *new_RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$42 *create_RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$43 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribedFirst_;
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribe_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$43)

J2OBJC_FIELD_SETTER(RxCompletableTest_$43, val$unsubscribedFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$43, val$unsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$43, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$43 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

__attribute__((unused)) static RxCompletableTest_$43 *new_RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$43 *create_RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

@interface RxCompletableTest_$44 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(id)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$44)

J2OBJC_FIELD_SETTER(RxCompletableTest_$44, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest_$44 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$44 *new_RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$44 *create_RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$45 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$45)

__attribute__((unused)) static void RxCompletableTest_$45_init(RxCompletableTest_$45 *self);

__attribute__((unused)) static RxCompletableTest_$45 *new_RxCompletableTest_$45_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$45 *create_RxCompletableTest_$45_init();

@interface RxCompletableTest_$46 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$46)

__attribute__((unused)) static void RxCompletableTest_$46_init(RxCompletableTest_$46 *self);

__attribute__((unused)) static RxCompletableTest_$46 *new_RxCompletableTest_$46_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$46 *create_RxCompletableTest_$46_init();

@interface RxCompletableTest_$47 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$47)

__attribute__((unused)) static void RxCompletableTest_$47_init(RxCompletableTest_$47 *self);

__attribute__((unused)) static RxCompletableTest_$47 *new_RxCompletableTest_$47_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$47 *create_RxCompletableTest_$47_init();

@interface RxCompletableTest_$48 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$48)

__attribute__((unused)) static void RxCompletableTest_$48_init(RxCompletableTest_$48 *self);

__attribute__((unused)) static RxCompletableTest_$48 *new_RxCompletableTest_$48_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$48 *create_RxCompletableTest_$48_init();

@interface RxCompletableTest_$49 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$49)

__attribute__((unused)) static void RxCompletableTest_$49_init(RxCompletableTest_$49 *self);

__attribute__((unused)) static RxCompletableTest_$49 *new_RxCompletableTest_$49_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$49 *create_RxCompletableTest_$49_init();

@interface RxCompletableTest_$50 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$50)

__attribute__((unused)) static void RxCompletableTest_$50_init(RxCompletableTest_$50 *self);

__attribute__((unused)) static RxCompletableTest_$50 *new_RxCompletableTest_$50_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$50 *create_RxCompletableTest_$50_init();

@interface RxCompletableTest_$51 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$51)

__attribute__((unused)) static void RxCompletableTest_$51_init(RxCompletableTest_$51 *self);

__attribute__((unused)) static RxCompletableTest_$51 *new_RxCompletableTest_$51_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$51 *create_RxCompletableTest_$51_init();

@interface RxCompletableTest_$52 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(id)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$52)

J2OBJC_FIELD_SETTER(RxCompletableTest_$52, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest_$52 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$52 *new_RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$52 *create_RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$53 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$53)

__attribute__((unused)) static void RxCompletableTest_$53_init(RxCompletableTest_$53 *self);

__attribute__((unused)) static RxCompletableTest_$53 *new_RxCompletableTest_$53_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$53 *create_RxCompletableTest_$53_init();

@interface RxCompletableTest_$54 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(id)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$54)

J2OBJC_FIELD_SETTER(RxCompletableTest_$54, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest_$54 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$54 *new_RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$54 *create_RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$55 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$55)

__attribute__((unused)) static void RxCompletableTest_$55_init(RxCompletableTest_$55 *self);

__attribute__((unused)) static RxCompletableTest_$55 *new_RxCompletableTest_$55_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$55 *create_RxCompletableTest_$55_init();

@interface RxCompletableTest_$56 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$56)

__attribute__((unused)) static void RxCompletableTest_$56_init(RxCompletableTest_$56 *self);

__attribute__((unused)) static RxCompletableTest_$56 *new_RxCompletableTest_$56_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$56 *create_RxCompletableTest_$56_init();

@interface RxCompletableTest_$57 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$57)

__attribute__((unused)) static void RxCompletableTest_$57_init(RxCompletableTest_$57 *self);

__attribute__((unused)) static RxCompletableTest_$57 *new_RxCompletableTest_$57_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$57 *create_RxCompletableTest_$57_init();

@interface RxCompletableTest_$58 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$58)

__attribute__((unused)) static void RxCompletableTest_$58_init(RxCompletableTest_$58 *self);

__attribute__((unused)) static RxCompletableTest_$58 *new_RxCompletableTest_$58_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$58 *create_RxCompletableTest_$58_init();

@interface RxCompletableTest_$59 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$59)

__attribute__((unused)) static void RxCompletableTest_$59_init(RxCompletableTest_$59 *self);

__attribute__((unused)) static RxCompletableTest_$59 *new_RxCompletableTest_$59_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$59 *create_RxCompletableTest_$59_init();

@interface RxCompletableTest_$60 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(id)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$60)

J2OBJC_FIELD_SETTER(RxCompletableTest_$60, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest_$60 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$60 *new_RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$60 *create_RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$61 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$61)

__attribute__((unused)) static void RxCompletableTest_$61_init(RxCompletableTest_$61 *self);

__attribute__((unused)) static RxCompletableTest_$61 *new_RxCompletableTest_$61_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$61 *create_RxCompletableTest_$61_init();

@interface RxCompletableTest_$62 : NSObject < RxCompletable_Transformer >

- (RxCompletable *)callWithId:(RxCompletable *)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$62)

__attribute__((unused)) static void RxCompletableTest_$62_init(RxCompletableTest_$62 *self);

__attribute__((unused)) static RxCompletableTest_$62 *new_RxCompletableTest_$62_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$62 *create_RxCompletableTest_$62_init();

@interface RxCompletableTest_$63 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$done_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$63)

J2OBJC_FIELD_SETTER(RxCompletableTest_$63, val$error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$63, val$done_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$63 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxCompletableTest_$63 *new_RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$63 *create_RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxCompletableTest_$64 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$done_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$64)

J2OBJC_FIELD_SETTER(RxCompletableTest_$64, val$error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$64, val$done_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$64 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxCompletableTest_$64 *new_RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$64 *create_RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxCompletableTest_$65 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$done_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$65)

J2OBJC_FIELD_SETTER(RxCompletableTest_$65, val$error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$65, val$done_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$65 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxCompletableTest_$65 *new_RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$65 *create_RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxCompletableTest_$66 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$66)

J2OBJC_FIELD_SETTER(RxCompletableTest_$66, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$66 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$66 *new_RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$66 *create_RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$67 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$67)

J2OBJC_FIELD_SETTER(RxCompletableTest_$67, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$67 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$67 *new_RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$67 *create_RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$68 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$68)

__attribute__((unused)) static void RxCompletableTest_$68_init(RxCompletableTest_$68 *self);

__attribute__((unused)) static RxCompletableTest_$68 *new_RxCompletableTest_$68_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$68 *create_RxCompletableTest_$68_init();

@interface RxCompletableTest_$69 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$69)

J2OBJC_FIELD_SETTER(RxCompletableTest_$69, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$69 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$69 *new_RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$69 *create_RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$70 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$70)

J2OBJC_FIELD_SETTER(RxCompletableTest_$70, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$70 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$70 *new_RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$70 *create_RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$71 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$71)

J2OBJC_FIELD_SETTER(RxCompletableTest_$71, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$71 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$71 *new_RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$71 *create_RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$72 : NSObject < RxCompletableSubscriber >

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$72)

__attribute__((unused)) static void RxCompletableTest_$72_init(RxCompletableTest_$72 *self);

__attribute__((unused)) static RxCompletableTest_$72 *new_RxCompletableTest_$72_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$72 *create_RxCompletableTest_$72_init();

@interface RxCompletableTest_$73 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$73)

__attribute__((unused)) static void RxCompletableTest_$73_init(RxCompletableTest_$73 *self);

__attribute__((unused)) static RxCompletableTest_$73 *new_RxCompletableTest_$73_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$73 *create_RxCompletableTest_$73_init();

@interface RxCompletableTest_$74 : NSObject < RxCompletableSubscriber >

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$74)

__attribute__((unused)) static void RxCompletableTest_$74_init(RxCompletableTest_$74 *self);

__attribute__((unused)) static RxCompletableTest_$74 *new_RxCompletableTest_$74_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$74 *create_RxCompletableTest_$74_init();

@interface RxCompletableTest_$75 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$75)

J2OBJC_FIELD_SETTER(RxCompletableTest_$75, val$error_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$75 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$75 *new_RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$75 *create_RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$76 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$76)

J2OBJC_FIELD_SETTER(RxCompletableTest_$76, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$76 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$76 *new_RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$76 *create_RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$77 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$77)

__attribute__((unused)) static void RxCompletableTest_$77_init(RxCompletableTest_$77 *self);

__attribute__((unused)) static RxCompletableTest_$77 *new_RxCompletableTest_$77_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$77 *create_RxCompletableTest_$77_init();

@interface RxCompletableTest_$78 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)callWithId:(id<RxSubscription>)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$78)

J2OBJC_FIELD_SETTER(RxCompletableTest_$78, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$78 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$78 *new_RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$78 *create_RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$79 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxSubscription>)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$79)

__attribute__((unused)) static void RxCompletableTest_$79_init(RxCompletableTest_$79 *self);

__attribute__((unused)) static RxCompletableTest_$79 *new_RxCompletableTest_$79_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$79 *create_RxCompletableTest_$79_init();

@interface RxCompletableTest_$80 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$80)

J2OBJC_FIELD_SETTER(RxCompletableTest_$80, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$80 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$80 *new_RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$80 *create_RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$81 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$81)

J2OBJC_FIELD_SETTER(RxCompletableTest_$81, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$81 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$81 *new_RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$81 *create_RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$82 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$doneAfter_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$82)

J2OBJC_FIELD_SETTER(RxCompletableTest_$82, val$doneAfter_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$82, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$82 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxCompletableTest_$82 *new_RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$82 *create_RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxCompletableTest_$83 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$83)

J2OBJC_FIELD_SETTER(RxCompletableTest_$83, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$83 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$83 *new_RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$83 *create_RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$84 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$doneAfter_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$84)

J2OBJC_FIELD_SETTER(RxCompletableTest_$84, val$doneAfter_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$84 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$84 *new_RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$84 *create_RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$85 : NSObject < RxCompletable_Operator >

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$85)

__attribute__((unused)) static void RxCompletableTest_$85_init(RxCompletableTest_$85 *self);

__attribute__((unused)) static RxCompletableTest_$85 *new_RxCompletableTest_$85_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$85 *create_RxCompletableTest_$85_init();

@interface RxCompletableTest_$86 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$name_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$86)

J2OBJC_FIELD_SETTER(RxCompletableTest_$86, val$name_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$86, val$cdl_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$86, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$86 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxCompletableTest_$86 *new_RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$86 *create_RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

@interface RxCompletableTest_$87 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$name_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$87)

J2OBJC_FIELD_SETTER(RxCompletableTest_$87, val$name_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$87, val$cdl_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$87, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$87 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxCompletableTest_$87 *new_RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$87 *create_RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

@interface RxCompletableTest_$88 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$88)

__attribute__((unused)) static void RxCompletableTest_$88_init(RxCompletableTest_$88 *self);

__attribute__((unused)) static RxCompletableTest_$88 *new_RxCompletableTest_$88_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$88 *create_RxCompletableTest_$88_init();

@interface RxCompletableTest_$89 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$89)

__attribute__((unused)) static void RxCompletableTest_$89_init(RxCompletableTest_$89 *self);

__attribute__((unused)) static RxCompletableTest_$89 *new_RxCompletableTest_$89_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$89 *create_RxCompletableTest_$89_init();

@interface RxCompletableTest_$90 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$90)

__attribute__((unused)) static void RxCompletableTest_$90_init(RxCompletableTest_$90 *self);

__attribute__((unused)) static RxCompletableTest_$90 *new_RxCompletableTest_$90_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$90 *create_RxCompletableTest_$90_init();

@interface RxCompletableTest_$91 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(NSException *)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$91)

J2OBJC_FIELD_SETTER(RxCompletableTest_$91, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest_$91 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$91 *new_RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$91 *create_RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$92 : NSObject < RxFunctionsFunc1 > {
 @public
  RxCompletableTest *this$0_;
}

- (RxCompletable *)callWithId:(NSException *)v;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$92)

J2OBJC_FIELD_SETTER(RxCompletableTest_$92, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest_$92 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$92 *new_RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$92 *create_RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$93 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$93)

J2OBJC_FIELD_SETTER(RxCompletableTest_$93, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$93 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$93 *new_RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$93 *create_RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$94 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$94)

J2OBJC_FIELD_SETTER(RxCompletableTest_$94, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$94 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$94 *new_RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$94 *create_RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$94_$1 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxSubscription> val$d_;
  RxScheduler_Worker *val$w_;
}

- (void)call;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0
                withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$94_$1)

J2OBJC_FIELD_SETTER(RxCompletableTest_$94_$1, val$d_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxCompletableTest_$94_$1, val$w_, RxScheduler_Worker *)

__attribute__((unused)) static void RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(RxCompletableTest_$94_$1 *self, id<RxSubscription> capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxCompletableTest_$94_$1 *new_RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$94_$1 *create_RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1);

@interface RxCompletableTest_$95 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$95)

J2OBJC_FIELD_SETTER(RxCompletableTest_$95, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$95 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$95 *new_RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$95 *create_RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$96 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$96)

J2OBJC_FIELD_SETTER(RxCompletableTest_$96, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$96 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$96 *new_RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$96 *create_RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$97 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$97)

J2OBJC_FIELD_SETTER(RxCompletableTest_$97, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$97 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$97 *new_RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$97 *create_RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$98 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$98)

J2OBJC_FIELD_SETTER(RxCompletableTest_$98, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$98 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$98 *new_RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$98 *create_RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$99 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)n
                         withId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$99)

__attribute__((unused)) static void RxCompletableTest_$99_init(RxCompletableTest_$99 *self);

__attribute__((unused)) static RxCompletableTest_$99 *new_RxCompletableTest_$99_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$99 *create_RxCompletableTest_$99_init();

@interface RxCompletableTest_$100 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$100)

J2OBJC_FIELD_SETTER(RxCompletableTest_$100, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$100 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$100 *new_RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$100 *create_RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$101 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$101)

J2OBJC_FIELD_SETTER(RxCompletableTest_$101, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$101 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$101 *new_RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$101 *create_RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$102 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$102)

__attribute__((unused)) static void RxCompletableTest_$102_init(RxCompletableTest_$102 *self);

__attribute__((unused)) static RxCompletableTest_$102 *new_RxCompletableTest_$102_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$102 *create_RxCompletableTest_$102_init();

@interface RxCompletableTest_$103 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$103)

J2OBJC_FIELD_SETTER(RxCompletableTest_$103, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$103 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$103 *new_RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$103 *create_RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$104 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$104)

J2OBJC_FIELD_SETTER(RxCompletableTest_$104, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$104 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$104 *new_RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$104 *create_RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$105 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$105)

J2OBJC_FIELD_SETTER(RxCompletableTest_$105, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$105 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$105 *new_RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$105 *create_RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$106 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$106)

J2OBJC_FIELD_SETTER(RxCompletableTest_$106, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$106 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$106 *new_RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$106 *create_RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$107 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$107)

J2OBJC_FIELD_SETTER(RxCompletableTest_$107, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$107 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$107 *new_RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$107 *create_RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$108 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$108)

J2OBJC_FIELD_SETTER(RxCompletableTest_$108, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$108 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$108 *new_RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$108 *create_RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$109 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$109)

__attribute__((unused)) static void RxCompletableTest_$109_init(RxCompletableTest_$109 *self);

__attribute__((unused)) static RxCompletableTest_$109 *new_RxCompletableTest_$109_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$109 *create_RxCompletableTest_$109_init();

@interface RxCompletableTest_$110 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$110)

__attribute__((unused)) static void RxCompletableTest_$110_init(RxCompletableTest_$110 *self);

__attribute__((unused)) static RxCompletableTest_$110 *new_RxCompletableTest_$110_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$110 *create_RxCompletableTest_$110_init();

@interface RxCompletableTest_$111 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$111)

__attribute__((unused)) static void RxCompletableTest_$111_init(RxCompletableTest_$111 *self);

__attribute__((unused)) static RxCompletableTest_$111 *new_RxCompletableTest_$111_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$111 *create_RxCompletableTest_$111_init();

@interface RxCompletableTest_$112 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$112)

J2OBJC_FIELD_SETTER(RxCompletableTest_$112, val$err_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$112 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$112 *new_RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$112 *create_RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$113 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$113)

__attribute__((unused)) static void RxCompletableTest_$113_init(RxCompletableTest_$113 *self);

__attribute__((unused)) static RxCompletableTest_$113 *new_RxCompletableTest_$113_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$113 *create_RxCompletableTest_$113_init();

@interface RxCompletableTest_$114 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$114)

__attribute__((unused)) static void RxCompletableTest_$114_init(RxCompletableTest_$114 *self);

__attribute__((unused)) static RxCompletableTest_$114 *new_RxCompletableTest_$114_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$114 *create_RxCompletableTest_$114_init();

@interface RxCompletableTest_$115 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$115)

J2OBJC_FIELD_SETTER(RxCompletableTest_$115, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$115 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$115 *new_RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$115 *create_RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$116 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$116)

J2OBJC_FIELD_SETTER(RxCompletableTest_$116, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$116 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$116 *new_RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$116 *create_RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$117 : NSObject < RxCompletable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$name_;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$117)

J2OBJC_FIELD_SETTER(RxCompletableTest_$117, val$name_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$117 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$117 *new_RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$117 *create_RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$118 : NSObject < RxCompletable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$name_;
}

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$118)

J2OBJC_FIELD_SETTER(RxCompletableTest_$118, val$name_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$118 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$118 *new_RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$118 *create_RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$119 : NSObject < RxFunctionsAction0 > {
 @public
  RxCompletableTest *this$0_;
}

- (void)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$119)

J2OBJC_FIELD_SETTER(RxCompletableTest_$119, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest_$119 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$119 *new_RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$119 *create_RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$120 : NSObject < RxFunctionsAction0 > {
 @public
  RxCompletableTest *this$0_;
}

- (void)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$120)

J2OBJC_FIELD_SETTER(RxCompletableTest_$120, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest_$120 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$120 *new_RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$120 *create_RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$120_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$120_$1)

__attribute__((unused)) static void RxCompletableTest_$120_$1_init(RxCompletableTest_$120_$1 *self);

__attribute__((unused)) static RxCompletableTest_$120_$1 *new_RxCompletableTest_$120_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$120_$1 *create_RxCompletableTest_$120_$1_init();

@interface RxCompletableTest_$121 : NSObject < RxFunctionsAction0 > {
 @public
  RxCompletableTest *this$0_;
}

- (void)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$121)

J2OBJC_FIELD_SETTER(RxCompletableTest_$121, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest_$121 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$121 *new_RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$121 *create_RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$121_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$121_$1)

__attribute__((unused)) static void RxCompletableTest_$121_$1_init(RxCompletableTest_$121_$1 *self);

__attribute__((unused)) static RxCompletableTest_$121_$1 *new_RxCompletableTest_$121_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$121_$1 *create_RxCompletableTest_$121_$1_init();

@interface RxCompletableTest_$122 : NSObject < RxFunctionsAction0 > {
 @public
  RxCompletableTest *this$0_;
}

- (void)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$122)

J2OBJC_FIELD_SETTER(RxCompletableTest_$122, this$0_, RxCompletableTest *)

__attribute__((unused)) static void RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest_$122 *self, RxCompletableTest *outer$);

__attribute__((unused)) static RxCompletableTest_$122 *new_RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$122 *create_RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest *outer$);

@interface RxCompletableTest_$122_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$122_$1)

__attribute__((unused)) static void RxCompletableTest_$122_$1_init(RxCompletableTest_$122_$1 *self);

__attribute__((unused)) static RxCompletableTest_$122_$1 *new_RxCompletableTest_$122_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$122_$1 *create_RxCompletableTest_$122_$1_init();

@interface RxCompletableTest_$122_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$122_$2)

__attribute__((unused)) static void RxCompletableTest_$122_$2_init(RxCompletableTest_$122_$2 *self);

__attribute__((unused)) static RxCompletableTest_$122_$2 *new_RxCompletableTest_$122_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$122_$2 *create_RxCompletableTest_$122_$2_init();

@interface RxCompletableTest_$123 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$123)

__attribute__((unused)) static void RxCompletableTest_$123_init(RxCompletableTest_$123 *self);

__attribute__((unused)) static RxCompletableTest_$123 *new_RxCompletableTest_$123_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$123 *create_RxCompletableTest_$123_init();

@interface RxCompletableTest_$124 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$124)

__attribute__((unused)) static void RxCompletableTest_$124_init(RxCompletableTest_$124 *self);

__attribute__((unused)) static RxCompletableTest_$124 *new_RxCompletableTest_$124_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$124 *create_RxCompletableTest_$124_init();

@interface RxCompletableTest_$125 : NSObject < JavaUtilConcurrentCallable >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$125)

__attribute__((unused)) static void RxCompletableTest_$125_init(RxCompletableTest_$125 *self);

__attribute__((unused)) static RxCompletableTest_$125 *new_RxCompletableTest_$125_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$125 *create_RxCompletableTest_$125_init();

@interface RxCompletableTest_$126 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxCompletable *)c;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$126)

__attribute__((unused)) static void RxCompletableTest_$126_init(RxCompletableTest_$126 *self);

__attribute__((unused)) static RxCompletableTest_$126 *new_RxCompletableTest_$126_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$126 *create_RxCompletableTest_$126_init();

@interface RxCompletableTest_$127 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$127)

__attribute__((unused)) static void RxCompletableTest_$127_init(RxCompletableTest_$127 *self);

__attribute__((unused)) static RxCompletableTest_$127 *new_RxCompletableTest_$127_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$127 *create_RxCompletableTest_$127_init();

@interface RxCompletableTest_$128 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$128)

__attribute__((unused)) static void RxCompletableTest_$128_init(RxCompletableTest_$128 *self);

__attribute__((unused)) static RxCompletableTest_$128 *new_RxCompletableTest_$128_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$128 *create_RxCompletableTest_$128_init();

@interface RxCompletableTest_$129 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$129)

__attribute__((unused)) static void RxCompletableTest_$129_init(RxCompletableTest_$129 *self);

__attribute__((unused)) static RxCompletableTest_$129 *new_RxCompletableTest_$129_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$129 *create_RxCompletableTest_$129_init();

@interface RxCompletableTest_$130 : RxSingleSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$v_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
  JavaUtilConcurrentAtomicAtomicReference *val$e_;
}

- (void)onSuccessWithId:(id)value;

- (void)onErrorWithNSException:(NSException *)error;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$130)

J2OBJC_FIELD_SETTER(RxCompletableTest_$130, val$v_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$130, val$cdl_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$130, val$e_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$130 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxCompletableTest_$130 *new_RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$130 *create_RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

@interface RxCompletableTest_$131 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$131)

__attribute__((unused)) static void RxCompletableTest_$131_init(RxCompletableTest_$131 *self);

__attribute__((unused)) static RxCompletableTest_$131 *new_RxCompletableTest_$131_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$131 *create_RxCompletableTest_$131_init();

@interface RxCompletableTest_$132 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$132)

__attribute__((unused)) static void RxCompletableTest_$132_init(RxCompletableTest_$132 *self);

__attribute__((unused)) static RxCompletableTest_$132 *new_RxCompletableTest_$132_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$132 *create_RxCompletableTest_$132_init();

@interface RxCompletableTest_$133 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$133)

__attribute__((unused)) static void RxCompletableTest_$133_init(RxCompletableTest_$133 *self);

__attribute__((unused)) static RxCompletableTest_$133 *new_RxCompletableTest_$133_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$133 *create_RxCompletableTest_$133_init();

@interface RxCompletableTest_$134 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$134)

__attribute__((unused)) static void RxCompletableTest_$134_init(RxCompletableTest_$134 *self);

__attribute__((unused)) static RxCompletableTest_$134 *new_RxCompletableTest_$134_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$134 *create_RxCompletableTest_$134_init();

@interface RxCompletableTest_$135 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$name_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$135)

J2OBJC_FIELD_SETTER(RxCompletableTest_$135, val$name_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$135, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxCompletableTest_$135 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxCompletableTest_$135 *new_RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$135 *create_RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxCompletableTest_$136 : NSObject < RxCompletableSubscriber >

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$136)

__attribute__((unused)) static void RxCompletableTest_$136_init(RxCompletableTest_$136 *self);

__attribute__((unused)) static RxCompletableTest_$136 *new_RxCompletableTest_$136_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$136 *create_RxCompletableTest_$136_init();

@interface RxCompletableTest_$136_$1 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxSubscription> val$d_;
  RxScheduler_Worker *val$w_;
}

- (void)call;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0
                withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$136_$1)

J2OBJC_FIELD_SETTER(RxCompletableTest_$136_$1, val$d_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxCompletableTest_$136_$1, val$w_, RxScheduler_Worker *)

__attribute__((unused)) static void RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(RxCompletableTest_$136_$1 *self, id<RxSubscription> capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxCompletableTest_$136_$1 *new_RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$136_$1 *create_RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1);

@interface RxCompletableTest_$137 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$137)

J2OBJC_FIELD_SETTER(RxCompletableTest_$137, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$137 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$137 *new_RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$137 *create_RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$138 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$138)

__attribute__((unused)) static void RxCompletableTest_$138_init(RxCompletableTest_$138 *self);

__attribute__((unused)) static RxCompletableTest_$138 *new_RxCompletableTest_$138_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$138 *create_RxCompletableTest_$138_init();

@interface RxCompletableTest_$139 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$complete_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$139)

J2OBJC_FIELD_SETTER(RxCompletableTest_$139, val$complete_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$139 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$139 *new_RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$139 *create_RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$140 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$140)

J2OBJC_FIELD_SETTER(RxCompletableTest_$140, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$140 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$140 *new_RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$140 *create_RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$141 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$141)

__attribute__((unused)) static void RxCompletableTest_$141_init(RxCompletableTest_$141 *self);

__attribute__((unused)) static RxCompletableTest_$141 *new_RxCompletableTest_$141_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$141 *create_RxCompletableTest_$141_init();

@interface RxCompletableTest_$142 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$complete_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$142)

J2OBJC_FIELD_SETTER(RxCompletableTest_$142, val$complete_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$142 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$142 *new_RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$142 *create_RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$143 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$143)

__attribute__((unused)) static void RxCompletableTest_$143_init(RxCompletableTest_$143 *self);

__attribute__((unused)) static RxCompletableTest_$143 *new_RxCompletableTest_$143_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$143 *create_RxCompletableTest_$143_init();

@interface RxCompletableTest_$144 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$144)

__attribute__((unused)) static void RxCompletableTest_$144_init(RxCompletableTest_$144 *self);

__attribute__((unused)) static RxCompletableTest_$144 *new_RxCompletableTest_$144_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$144 *create_RxCompletableTest_$144_init();

@interface RxCompletableTest_$145 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$145)

J2OBJC_FIELD_SETTER(RxCompletableTest_$145, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$145 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$145 *new_RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$145 *create_RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$146 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$146)

__attribute__((unused)) static void RxCompletableTest_$146_init(RxCompletableTest_$146 *self);

__attribute__((unused)) static RxCompletableTest_$146 *new_RxCompletableTest_$146_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$146 *create_RxCompletableTest_$146_init();

@interface RxCompletableTest_$147 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$complete_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$147)

J2OBJC_FIELD_SETTER(RxCompletableTest_$147, val$complete_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$147 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$147 *new_RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$147 *create_RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$148 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$complete_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$148)

J2OBJC_FIELD_SETTER(RxCompletableTest_$148, val$complete_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$148 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$148 *new_RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$148 *create_RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$149 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$149)

__attribute__((unused)) static void RxCompletableTest_$149_init(RxCompletableTest_$149 *self);

__attribute__((unused)) static RxCompletableTest_$149 *new_RxCompletableTest_$149_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$149 *create_RxCompletableTest_$149_init();

@interface RxCompletableTest_$150 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$complete_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$150)

J2OBJC_FIELD_SETTER(RxCompletableTest_$150, val$complete_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$150 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$150 *new_RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$150 *create_RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$151 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxCompletableTest *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (id)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$151)

J2OBJC_FIELD_SETTER(RxCompletableTest_$151, this$0_, RxCompletableTest *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$151, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$151 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$151 *new_RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$151 *create_RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$152 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxCompletableTest *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (id)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$152)

J2OBJC_FIELD_SETTER(RxCompletableTest_$152, this$0_, RxCompletableTest *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$152, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$152 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$152 *new_RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$152 *create_RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$153 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxCompletableTest *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (id)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$153)

J2OBJC_FIELD_SETTER(RxCompletableTest_$153, this$0_, RxCompletableTest *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$153, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$153 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$153 *new_RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$153 *create_RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$154 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxCompletableTest *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$run_;
}

- (id)call;

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$154)

J2OBJC_FIELD_SETTER(RxCompletableTest_$154, this$0_, RxCompletableTest *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$154, val$run_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$154 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxCompletableTest_$154 *new_RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$154 *create_RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxCompletableTest_$155 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$155)

__attribute__((unused)) static void RxCompletableTest_$155_init(RxCompletableTest_$155 *self);

__attribute__((unused)) static RxCompletableTest_$155 *new_RxCompletableTest_$155_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$155 *create_RxCompletableTest_$155_init();

@interface RxCompletableTest_$156 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$156)

__attribute__((unused)) static void RxCompletableTest_$156_init(RxCompletableTest_$156 *self);

__attribute__((unused)) static RxCompletableTest_$156 *new_RxCompletableTest_$156_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$156 *create_RxCompletableTest_$156_init();

@interface RxCompletableTest_$157 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$157)

__attribute__((unused)) static void RxCompletableTest_$157_init(RxCompletableTest_$157 *self);

__attribute__((unused)) static RxCompletableTest_$157 *new_RxCompletableTest_$157_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$157 *create_RxCompletableTest_$157_init();

@interface RxCompletableTest_$158 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$158)

__attribute__((unused)) static void RxCompletableTest_$158_init(RxCompletableTest_$158 *self);

__attribute__((unused)) static RxCompletableTest_$158 *new_RxCompletableTest_$158_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$158 *create_RxCompletableTest_$158_init();

@interface RxCompletableTest_$159 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$159)

__attribute__((unused)) static void RxCompletableTest_$159_init(RxCompletableTest_$159 *self);

__attribute__((unused)) static RxCompletableTest_$159 *new_RxCompletableTest_$159_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$159 *create_RxCompletableTest_$159_init();

@interface RxCompletableTest_$160 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$160)

__attribute__((unused)) static void RxCompletableTest_$160_init(RxCompletableTest_$160 *self);

__attribute__((unused)) static RxCompletableTest_$160 *new_RxCompletableTest_$160_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$160 *create_RxCompletableTest_$160_init();

@interface RxCompletableTest_$161 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$161)

__attribute__((unused)) static void RxCompletableTest_$161_init(RxCompletableTest_$161 *self);

__attribute__((unused)) static RxCompletableTest_$161 *new_RxCompletableTest_$161_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$161 *create_RxCompletableTest_$161_init();

@interface RxCompletableTest_$162 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$162)

__attribute__((unused)) static void RxCompletableTest_$162_init(RxCompletableTest_$162 *self);

__attribute__((unused)) static RxCompletableTest_$162 *new_RxCompletableTest_$162_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$162 *create_RxCompletableTest_$162_init();

@interface RxCompletableTest_$163 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$163)

__attribute__((unused)) static void RxCompletableTest_$163_init(RxCompletableTest_$163 *self);

__attribute__((unused)) static RxCompletableTest_$163 *new_RxCompletableTest_$163_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$163 *create_RxCompletableTest_$163_init();

@interface RxCompletableTest_$164 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$164)

__attribute__((unused)) static void RxCompletableTest_$164_init(RxCompletableTest_$164 *self);

__attribute__((unused)) static RxCompletableTest_$164 *new_RxCompletableTest_$164_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$164 *create_RxCompletableTest_$164_init();

@interface RxCompletableTest_$165 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscriptionRef_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$165)

J2OBJC_FIELD_SETTER(RxCompletableTest_$165, val$subscriptionRef_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$165 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$165 *new_RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$165 *create_RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$166 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscriptionRef_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$166)

J2OBJC_FIELD_SETTER(RxCompletableTest_$166, val$subscriptionRef_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$166 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$166 *new_RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$166 *create_RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$167 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscriptionRef_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$167)

J2OBJC_FIELD_SETTER(RxCompletableTest_$167, val$subscriptionRef_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$167 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxCompletableTest_$167 *new_RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$167 *create_RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxCompletableTest_$168 : NSObject < RxCompletableSubscriber >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$168)

__attribute__((unused)) static void RxCompletableTest_$168_init(RxCompletableTest_$168 *self);

__attribute__((unused)) static RxCompletableTest_$168 *new_RxCompletableTest_$168_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$168 *create_RxCompletableTest_$168_init();

@interface RxCompletableTest_$169 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$169)

__attribute__((unused)) static void RxCompletableTest_$169_init(RxCompletableTest_$169 *self);

__attribute__((unused)) static RxCompletableTest_$169 *new_RxCompletableTest_$169_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$169 *create_RxCompletableTest_$169_init();

@interface RxCompletableTest_$170 : NSObject < RxCompletableSubscriber >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$170)

__attribute__((unused)) static void RxCompletableTest_$170_init(RxCompletableTest_$170 *self);

__attribute__((unused)) static RxCompletableTest_$170 *new_RxCompletableTest_$170_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$170 *create_RxCompletableTest_$170_init();

@interface RxCompletableTest_$171 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$171)

__attribute__((unused)) static void RxCompletableTest_$171_init(RxCompletableTest_$171 *self);

__attribute__((unused)) static RxCompletableTest_$171 *new_RxCompletableTest_$171_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$171 *create_RxCompletableTest_$171_init();

@interface RxCompletableTest_$172 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$172)

__attribute__((unused)) static void RxCompletableTest_$172_init(RxCompletableTest_$172 *self);

__attribute__((unused)) static RxCompletableTest_$172 *new_RxCompletableTest_$172_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$172 *create_RxCompletableTest_$172_init();

@interface RxCompletableTest_$173 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$173)

__attribute__((unused)) static void RxCompletableTest_$173_init(RxCompletableTest_$173 *self);

__attribute__((unused)) static RxCompletableTest_$173 *new_RxCompletableTest_$173_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$173 *create_RxCompletableTest_$173_init();

@interface RxCompletableTest_$174 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$174)

__attribute__((unused)) static void RxCompletableTest_$174_init(RxCompletableTest_$174 *self);

__attribute__((unused)) static RxCompletableTest_$174 *new_RxCompletableTest_$174_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$174 *create_RxCompletableTest_$174_init();

@interface RxCompletableTest_$175 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$175)

__attribute__((unused)) static void RxCompletableTest_$175_init(RxCompletableTest_$175 *self);

__attribute__((unused)) static RxCompletableTest_$175 *new_RxCompletableTest_$175_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$175 *create_RxCompletableTest_$175_init();

@interface RxCompletableTest_$176 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSException *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$176)

__attribute__((unused)) static void RxCompletableTest_$176_init(RxCompletableTest_$176 *self);

__attribute__((unused)) static RxCompletableTest_$176 *new_RxCompletableTest_$176_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$176 *create_RxCompletableTest_$176_init();

@interface RxCompletableTest_$177 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$completableRef_;
  id val$expectedResult_;
}

- (id)callWithId:(RxCompletable *)completable;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                         withId:(id)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$177)

J2OBJC_FIELD_SETTER(RxCompletableTest_$177, val$completableRef_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxCompletableTest_$177, val$expectedResult_, id)

__attribute__((unused)) static void RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(RxCompletableTest_$177 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1);

__attribute__((unused)) static RxCompletableTest_$177 *new_RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$177 *create_RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1);

@interface RxCompletableTest_$178 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$atomicInteger_;
}

- (void)callWithId:(RxNotification *)notification;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$178)

J2OBJC_FIELD_SETTER(RxCompletableTest_$178, val$atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$178 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$178 *new_RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$178 *create_RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxCompletableTest_$179 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$atomicInteger_;
}

- (void)callWithId:(RxNotification *)notification;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_$179)

J2OBJC_FIELD_SETTER(RxCompletableTest_$179, val$atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$179 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxCompletableTest_$179 *new_RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxCompletableTest_$179 *create_RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxCompletableTest

- (void)complete {
  RxCompletable *c = RxCompletable_complete();
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatNull {
  RxCompletable_concatWithRxCompletableArray_(nil);
}

- (void)concatEmpty {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithLength:0 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatSingleSource {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)concatSingleSourceThrows {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatMultipleSources {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)concatMultipleOneThrows {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatMultipleOneIsNull {
  RxCompletable *c = RxCompletable_concatWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableEmpty {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilCollections_emptyList());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableNull {
  RxCompletable_concatWithJavaLangIterable_(nil);
}

- (void)concatIterableIteratorNull {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(create_RxCompletableTest_$1_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableWithNull {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableSingle {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)concatIterableMany {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)concatIterableOneThrows {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableManyOneThrows {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableIterableThrows {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(create_RxCompletableTest_$2_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableIteratorHasNextThrows {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorHasNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatIterableIteratorNextThrows {
  RxCompletable *c = RxCompletable_concatWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatObservableEmpty {
  RxCompletable *c = RxCompletable_concatWithRxObservable_(RxObservable_empty());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatObservableError {
  RxCompletable *c = RxCompletable_concatWithRxObservable_(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatObservableSingle {
  RxCompletable *c = RxCompletable_concatWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)concatObservableSingleThrows {
  RxCompletable *c = RxCompletable_concatWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatObservableMany {
  RxCompletable *c = RxCompletable_concatWithRxObservable_([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:3]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)concatObservableManyOneThrows {
  RxCompletable *c = RxCompletable_concatWithRxObservable_(RxObservable_justWithId_withId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatObservablePrefetch {
  id<JavaUtilList> requested = create_JavaUtilArrayList_init();
  RxObservable *cs = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:10])) doOnRequestWithRxFunctionsAction1:create_RxCompletableTest_$3_initWithJavaUtilList_(requested)];
  RxCompletable *c = RxCompletable_concatWithRxObservable_withInt_(cs, 5);
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(5LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL) } count:11 type:JavaLangLong_class_()]), requested);
}

- (void)andThen {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_complete())) andThenWithRxObservable:RxObservable_justWithId_(@"foo")])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:@"foo"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)andThenNever {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_never())) andThenWithRxObservable:RxObservable_justWithId_(@"foo")])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertNoValues];
  [ts assertNoTerminalEvent];
}

- (void)andThenError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  JavaUtilConcurrentAtomicAtomicBoolean *hasRun = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  JavaLangException *e = create_JavaLangException_init();
  [((RxObservable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$4_initWithJavaLangException_(e)))) andThenWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(create_RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(hasRun))])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Should not have subscribed to observable when completable errors", [hasRun get]);
}

- (void)andThenSubscribeOn {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [((RxObservable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_complete())) andThenWithRxObservable:[((RxObservable *) nil_chk(RxObservable_justWithId_(@"foo"))) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler]])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertNoValues];
  [ts assertNoTerminalEvent];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueWithId:@"foo"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)andThenSingle {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_complete())) andThenWithRxSingle:RxSingle_justWithId_(@"foo")])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:@"foo"];
  [ts assertCompleted];
  [ts assertNoErrors];
  [ts assertUnsubscribed];
}

- (void)andThenSingleNever {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_never())) andThenWithRxSingle:RxSingle_justWithId_(@"foo")])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertNoValues];
  [ts assertNoTerminalEvent];
}

- (void)andThenSingleError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  JavaUtilConcurrentAtomicAtomicBoolean *hasRun = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  JavaLangException *e = create_JavaLangException_init();
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_errorWithNSException_(e))) andThenWithRxSingle:RxSingle_createWithRxSingle_OnSubscribe_(create_RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(hasRun))])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  [ts assertUnsubscribed];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Should not have subscribed to single when completable errors", [hasRun get]);
}

- (void)andThenSingleSubscribeOn {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_complete())) andThenWithRxSingle:[((RxSingle *) nil_chk(RxSingle_justWithId_(@"foo"))) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler]])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts assertNoValues];
  [ts assertNoTerminalEvent];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueWithId:@"foo"];
  [ts assertCompleted];
  [ts assertNoErrors];
  [ts assertUnsubscribed];
}

- (void)createNull {
  RxCompletable_createWithRxCompletable_OnSubscribe_(nil);
}

- (void)createOnSubscribeThrowsNPE {
  RxCompletable *c = RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$7_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)createOnSubscribeThrowsRuntimeException {
  @try {
    RxCompletable *c = RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$8_init());
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw exception");
  }
  @catch (JavaLangNullPointerException *ex) {
    if (!([[((JavaLangNullPointerException *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsTestException class]])) {
      [ex printStackTrace];
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Did not wrap the TestException but it returned: ", ex));
    }
  }
}

- (void)defer {
  RxCompletable *c = RxCompletable_deferWithRxFunctionsFunc0_(create_RxCompletableTest_$9_initWithRxCompletableTest_(self));
  [((RxCompletableTest_NormalCompletable *) nil_chk(normal_)) assertSubscriptionsWithInt:0];
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)deferNull {
  RxCompletable_deferWithRxFunctionsFunc0_(nil);
}

- (void)deferReturnsNull {
  RxCompletable *c = RxCompletable_deferWithRxFunctionsFunc0_(create_RxCompletableTest_$10_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)deferFunctionThrows {
  RxCompletable *c = RxCompletable_deferWithRxFunctionsFunc0_(create_RxCompletableTest_$11_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)deferErrorSource {
  RxCompletable *c = RxCompletable_deferWithRxFunctionsFunc0_(create_RxCompletableTest_$12_initWithRxCompletableTest_(self));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)errorNull {
  RxCompletable_errorWithNSException_(nil);
}

- (void)errorNormal {
  RxCompletable *c = RxCompletable_errorWithNSException_(create_RxExceptionsTestException_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromCallableNull {
  RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(nil);
}

- (void)fromCallableNormal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls));
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)fromCallableThrows {
  RxCompletable *c = RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$14_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromObservableNull {
  RxCompletable_fromObservableWithRxObservable_(nil);
}

- (void)fromObservableEmpty {
  RxCompletable *c = RxCompletable_fromObservableWithRxObservable_(RxObservable_empty());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromObservableSome {
  for (jint n = 1; n < 10000; n *= 10) {
    RxCompletable *c = RxCompletable_fromObservableWithRxObservable_(RxObservable_rangeWithInt_withInt_(1, n));
    [((RxCompletable *) nil_chk(c)) await];
  }
}

- (void)fromObservableError {
  RxCompletable *c = RxCompletable_fromObservableWithRxObservable_(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromFutureNull {
  RxCompletable_fromFutureWithJavaUtilConcurrentFuture_(nil);
}

- (void)fromFutureNormal {
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  @try {
    RxCompletable *c = RxCompletable_fromFutureWithJavaUtilConcurrentFuture_([((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) submitWithJavaLangRunnable:create_RxCompletableTest_$15_init()]);
    [((RxCompletable *) nil_chk(c)) await];
  }
  @finally {
    [exec shutdown];
  }
}

- (void)fromFutureThrows {
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  RxCompletable *c = RxCompletable_fromFutureWithJavaUtilConcurrentFuture_([((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) submitWithJavaLangRunnable:create_RxCompletableTest_$16_init()]);
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Failed to throw Exception");
  }
  @catch (JavaLangRuntimeException *ex) {
    if (!(([[((JavaLangRuntimeException *) nil_chk(ex)) getCause] isKindOfClass:[JavaUtilConcurrentExecutionException class]]) && ([[((NSException *) nil_chk([ex getCause])) getCause] isKindOfClass:[RxExceptionsTestException class]]))) {
      [ex printStackTrace];
      OrgJunitAssert_failWithNSString_(@"Wrong exception received");
    }
  }
  @finally {
    [exec shutdown];
  }
}

- (void)fromActionNull {
  RxCompletable_fromActionWithRxFunctionsAction0_(nil);
}

- (void)fromActionNormal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_fromActionWithRxFunctionsAction0_(create_RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls));
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)fromActionThrows {
  RxCompletable *c = RxCompletable_fromActionWithRxFunctionsAction0_(create_RxCompletableTest_$18_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromSingleNull {
  RxCompletable_fromSingleWithRxSingle_(nil);
}

- (void)fromSingleNormal {
  RxCompletable *c = RxCompletable_fromSingleWithRxSingle_(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)fromSingleThrows {
  RxCompletable *c = RxCompletable_fromSingleWithRxSingle_(RxSingle_errorWithNSException_(create_RxExceptionsTestException_init()));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeNull {
  RxCompletable_mergeWithRxCompletableArray_(nil);
}

- (void)mergeEmpty {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithLength:0 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeSingleSource {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeSingleSourceThrows {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeMultipleSources {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeMultipleOneThrows {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeMultipleOneIsNull {
  RxCompletable *c = RxCompletable_mergeWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableEmpty {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilCollections_emptyList());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableNull {
  RxCompletable_mergeWithJavaLangIterable_(nil);
}

- (void)mergeIterableIteratorNull {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(create_RxCompletableTest_$19_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableWithNull {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableSingle {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeIterableMany {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeIterableOneThrows {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableManyOneThrows {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableIterableThrows {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(create_RxCompletableTest_$20_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableIteratorHasNextThrows {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorHasNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeIterableIteratorNextThrows {
  RxCompletable *c = RxCompletable_mergeWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeObservableEmpty {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_(RxObservable_empty());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeObservableError {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeObservableSingle {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeObservableSingleThrows {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeObservableMany {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:3]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeObservableManyOneThrows {
  RxCompletable *c = RxCompletable_mergeWithRxObservable_(RxObservable_justWithId_withId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeObservableMaxConcurrent {
  id<JavaUtilList> requested = create_JavaUtilArrayList_init();
  RxObservable *cs = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:10])) doOnRequestWithRxFunctionsAction1:create_RxCompletableTest_$21_initWithJavaUtilList_(requested)];
  RxCompletable *c = RxCompletable_mergeWithRxObservable_withInt_(cs, 5);
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(5LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL) } count:11 type:JavaLangLong_class_()]), requested);
}

- (void)mergeDelayErrorNull {
  RxCompletable_mergeDelayErrorWithRxCompletableArray_(nil);
}

- (void)mergeDelayErrorEmpty {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithLength:0 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorSingleSource {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeDelayErrorSingleSourceThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorMultipleSources {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeDelayErrorMultipleOneThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]);
  @try {
    [((RxCompletable *) nil_chk(c)) await];
  }
  @catch (RxExceptionsTestException *ex) {
    [normal_ assertSubscriptionsWithInt:2];
  }
}

- (void)mergeDelayErrorMultipleOneIsNull {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableEmpty {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilCollections_emptyList());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableNull {
  RxCompletable_mergeDelayErrorWithJavaLangIterable_(nil);
}

- (void)mergeDelayErrorIterableIteratorNull {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(create_RxCompletableTest_$22_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableWithNull {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, nil } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableSingle {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeDelayErrorIterableMany {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeDelayErrorIterableOneThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableManyOneThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]));
  @try {
    [((RxCompletable *) nil_chk(c)) await];
  }
  @catch (RxExceptionsTestException *ex) {
    [normal_ assertSubscriptionsWithInt:2];
  }
}

- (void)mergeDelayErrorIterableIterableThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(create_RxCompletableTest_$23_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableIteratorHasNextThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorHasNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorIterableIteratorNextThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorObservableEmpty {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable_empty());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorObservableError {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorObservableSingle {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)mergeDelayErrorObservableSingleThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable_justWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorObservableMany {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:3]);
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:3];
}

- (void)mergeDelayErrorObservableManyOneThrows {
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable_justWithId_withId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeDelayErrorObservableMaxConcurrent {
  id<JavaUtilList> requested = create_JavaUtilArrayList_init();
  RxObservable *cs = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_))) repeatWithLong:10])) doOnRequestWithRxFunctionsAction1:create_RxCompletableTest_$24_initWithJavaUtilList_(requested)];
  RxCompletable *c = RxCompletable_mergeDelayErrorWithRxObservable_withInt_(cs, 5);
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(5LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL) } count:11 type:JavaLangLong_class_()]), requested);
}

- (void)never {
  JavaUtilConcurrentAtomicAtomicBoolean *onSubscribeCalled = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxCompletable *) nil_chk(RxCompletable_never())) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(onSubscribeCalled, calls)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"onSubscribe not called", [onSubscribeCalled get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"There were calls to onXXX methods", 0, [calls get]);
}

- (void)timer {
  RxCompletable *c = RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_(500, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)timerNewThread {
  RxCompletable *c = RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(500, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), RxSchedulersSchedulers_newThread());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)timerTestScheduler {
  RxSchedulersTestScheduler *scheduler = RxSchedulersSchedulers_test();
  RxCompletable *c = RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(250, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), scheduler);
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler)) advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
  [scheduler advanceTimeByWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)timerCancel {
  RxCompletable *c = RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_(250, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
  RxSubscriptionsMultipleAssignmentSubscription *mad = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(mad, calls)];
  JavaLangThread_sleepWithLong_(100);
  [mad unsubscribe];
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)timerUnitNull {
  RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_(1, nil);
}

- (void)timerSchedulerNull {
  RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), nil);
}

- (void)usingNormalEager {
  JavaUtilConcurrentAtomicAtomicInteger *unsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$28_init(), create_RxCompletableTest_$29_initWithRxCompletableTest_(self), create_RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(unsubscribe));
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribedFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(error, unsubscribedFirst, unsubscribe)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [unsubscribe get]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed first", [unsubscribedFirst get]);
  OrgJunitAssert_assertNullWithId_([error get]);
}

- (void)usingNormalLazy {
  JavaUtilConcurrentAtomicAtomicInteger *unsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(create_RxCompletableTest_$32_init(), create_RxCompletableTest_$33_initWithRxCompletableTest_(self), create_RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(unsubscribe), false);
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribedFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(error, unsubscribedFirst, unsubscribe)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [unsubscribe get]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Disposed first", [unsubscribedFirst get]);
  OrgJunitAssert_assertNullWithId_([error get]);
}

- (void)usingErrorEager {
  JavaUtilConcurrentAtomicAtomicInteger *unsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$36_init(), create_RxCompletableTest_$37_initWithRxCompletableTest_(self), create_RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(unsubscribe));
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribedFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribedFirst, unsubscribe, complete)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [unsubscribe get]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed first", [unsubscribedFirst get]);
  OrgJunitAssert_assertFalseWithBoolean_([complete get]);
}

- (void)usingErrorLazy {
  JavaUtilConcurrentAtomicAtomicInteger *unsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(create_RxCompletableTest_$40_init(), create_RxCompletableTest_$41_initWithRxCompletableTest_(self), create_RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(unsubscribe), false);
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribedFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribedFirst, unsubscribe, complete)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [unsubscribe get]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Disposed first", [unsubscribedFirst get]);
  OrgJunitAssert_assertFalseWithBoolean_([complete get]);
}

- (void)usingResourceSupplierNull {
  RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(nil, create_RxCompletableTest_$44_initWithRxCompletableTest_(self), create_RxCompletableTest_$45_init());
}

- (void)usingMapperNull {
  RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$46_init(), nil, create_RxCompletableTest_$47_init());
}

- (void)usingMapperReturnsNull {
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$48_init(), create_RxCompletableTest_$49_init(), create_RxCompletableTest_$50_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)usingDisposeNull {
  RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$51_init(), create_RxCompletableTest_$52_initWithRxCompletableTest_(self), nil);
}

- (void)usingResourceThrows {
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$53_init(), create_RxCompletableTest_$54_initWithRxCompletableTest_(self), create_RxCompletableTest_$55_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)usingMapperThrows {
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$56_init(), create_RxCompletableTest_$57_init(), create_RxCompletableTest_$58_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)usingDisposerThrows {
  RxCompletable *c = RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$59_init(), create_RxCompletableTest_$60_initWithRxCompletableTest_(self), create_RxCompletableTest_$61_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)composeNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) composeWithRxCompletable_Transformer:create_RxCompletableTest_$62_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)composeNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) composeWithRxCompletable_Transformer:nil];
}

- (void)concatWithNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) concatWithWithRxCompletable:normal_->completable_];
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:2];
}

- (void)concatWithError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) concatWithWithRxCompletable:((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)concatWithNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) concatWithWithRxCompletable:nil];
}

- (void)delayUnitNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:1 withJavaUtilConcurrentTimeUnit:nil];
}

- (void)delaySchedulerNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:nil];
}

- (void)delayNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  JavaUtilConcurrentAtomicAtomicBoolean *done = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(error, done)];
  JavaLangThread_sleepWithLong_(100);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Already done", [done get]);
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not done", [done get]);
  OrgJunitAssert_assertNullWithId_([error get]);
}

- (void)delayErrorImmediately {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) delayWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  JavaUtilConcurrentAtomicAtomicBoolean *done = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(error, done)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([error get])) description], [[error get] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Already done", [done get]);
  JavaLangThread_sleepWithLong_(100);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Already done", [done get]);
  JavaLangThread_sleepWithLong_(200);
}

- (void)delayErrorToo {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) delayWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:RxSchedulersSchedulers_computation() withBoolean:true];
  JavaUtilConcurrentAtomicAtomicBoolean *done = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(error, done)];
  JavaLangThread_sleepWithLong_(100);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Already done", [done get]);
  OrgJunitAssert_assertNullWithId_([error get]);
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Already done", [done get]);
  OrgJunitAssert_assertTrueWithBoolean_([[error get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)doOnCompletedNormal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnCompletedWithRxFunctionsAction0:create_RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)doOnCompletedError {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doOnCompletedWithRxFunctionsAction0:create_RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Failed to throw TestException");
  }
  @catch (RxExceptionsTestException *ex) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)doOnCompletedNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnCompletedWithRxFunctionsAction0:nil];
}

- (void)doOnCompletedThrows {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnCompletedWithRxFunctionsAction0:create_RxCompletableTest_$68_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)doOnDisposeNormalDoesntCall {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnUnsubscribeWithRxFunctionsAction0:create_RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)doOnDisposeErrorDoesntCall {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doOnUnsubscribeWithRxFunctionsAction0:create_RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"No exception thrown");
  }
  @catch (RxExceptionsTestException *ex) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)doOnDisposeChildCancels {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnUnsubscribeWithRxFunctionsAction0:create_RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$72_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)doOnDisposeNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnUnsubscribeWithRxFunctionsAction0:nil];
}

- (void)doOnDisposeThrows {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnUnsubscribeWithRxFunctionsAction0:create_RxCompletableTest_$73_init()];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$74_init()];
}

- (void)doOnErrorNoError {
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnErrorWithRxFunctionsAction1:create_RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(error)];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertNullWithId_([error get]);
}

- (void)doOnErrorHasError {
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doOnErrorWithRxFunctionsAction1:create_RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(err)];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw exception");
  }
  @catch (NSException *e) {
  }
  OrgJunitAssert_assertTrueWithBoolean_([[err get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)doOnErrorNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnErrorWithRxFunctionsAction1:nil];
}

- (void)doOnErrorThrows {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doOnErrorWithRxFunctionsAction1:create_RxCompletableTest_$77_init()];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
  }
  @catch (RxExceptionsCompositeException *ex) {
    id<JavaUtilList> a = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(a)) size]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:1] isKindOfClass:[JavaLangIllegalStateException class]]);
  }
}

- (void)doOnSubscribeNormal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnSubscribeWithRxFunctionsAction1:create_RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  for (jint i = 0; i < 10; i++) {
    [((RxCompletable *) nil_chk(c)) await];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [calls get]);
}

- (void)doOnSubscribeNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnSubscribeWithRxFunctionsAction1:nil];
}

- (void)doOnSubscribeThrows {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnSubscribeWithRxFunctionsAction1:create_RxCompletableTest_$79_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)doOnTerminateNormal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doOnTerminateWithRxFunctionsAction0:create_RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)doOnTerminateError {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doOnTerminateWithRxFunctionsAction0:create_RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did dot throw exception");
  }
  @catch (RxExceptionsTestException *ex) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)doAfterTerminateNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *doneAfter = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doAfterTerminateWithRxFunctionsAction0:create_RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(doneAfter, complete)];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  [c await];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Closure called before onComplete", [doneAfter get]);
}

- (void)doAfterTerminateWithError {
  JavaUtilConcurrentAtomicAtomicBoolean *doneAfter = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) doAfterTerminateWithRxFunctionsAction0:create_RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(doneAfter)];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw TestException");
  }
  @catch (RxExceptionsTestException *ex) {
  }
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Closure called", [doneAfter get]);
}

- (void)doAfterTerminateNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) doAfterTerminateWithRxFunctionsAction0:nil];
}

- (void)getNormal {
  OrgJunitAssert_assertNullWithId_([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) get]);
}

- (void)getError {
  OrgJunitAssert_assertTrueWithBoolean_([[((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)getTimeout {
  @try {
    [((RxCompletable *) nil_chk(RxCompletable_never())) getWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangRuntimeException *ex) {
    if (!([[((JavaLangRuntimeException *) nil_chk(ex)) getCause] isKindOfClass:[JavaUtilConcurrentTimeoutException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Wrong exception cause: ", [ex getCause]));
    }
  }
}

- (void)getNullUnit {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) getWithLong:1 withJavaUtilConcurrentTimeUnit:nil];
}

- (void)liftNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) liftWithRxCompletable_Operator:nil];
}

- (void)liftReturnsNull {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) liftWithRxCompletable_Operator:create_RxCompletableTest_$85_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)liftOnCompleteError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) liftWithRxCompletable_Operator:create_RxCompletableTest_CompletableOperatorSwap_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)liftOnErrorComplete {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) liftWithRxCompletable_Operator:create_RxCompletableTest_CompletableOperatorSwap_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)mergeWithNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) mergeWithWithRxCompletable:nil];
}

- (void)mergeWithNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) mergeWithWithRxCompletable:normal_->completable_];
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:2];
}

- (void)observeOnNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) observeOnWithRxScheduler:nil];
}

- (void)observeOnNormal {
  JavaUtilConcurrentAtomicAtomicReference *name = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(name, cdl, err)];
  [cdl await];
  OrgJunitAssert_assertNullWithId_([err get]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([name get])) hasPrefix:@"RxComputation"]);
}

- (void)observeOnError {
  JavaUtilConcurrentAtomicAtomicReference *name = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(name, cdl, err)];
  [cdl await];
  OrgJunitAssert_assertTrueWithBoolean_([[err get] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([name get])) hasPrefix:@"RxComputation"]);
}

- (void)onErrorComplete {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorComplete];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)onErrorCompleteFalse {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorCompleteWithRxFunctionsFunc1:create_RxCompletableTest_$88_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)onErrorCompleteNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorCompleteWithRxFunctionsFunc1:nil];
}

- (void)onErrorResumeNextNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorResumeNextWithRxFunctionsFunc1:nil];
}

- (void)onErrorResumeNextFunctionReturnsNull {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorResumeNextWithRxFunctionsFunc1:create_RxCompletableTest_$89_init()];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw an exception");
  }
  @catch (RxExceptionsCompositeException *ex) {
    id<JavaUtilList> a = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(a)) size]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:1] isKindOfClass:[JavaLangNullPointerException class]]);
  }
}

- (void)onErrorResumeNextFunctionThrows {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorResumeNextWithRxFunctionsFunc1:create_RxCompletableTest_$90_init()];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw an exception");
  }
  @catch (RxExceptionsCompositeException *ex) {
    id<JavaUtilList> a = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(a)) size]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[a getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
  }
}

- (void)onErrorResumeNextNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorResumeNextWithRxFunctionsFunc1:create_RxCompletableTest_$91_initWithRxCompletableTest_(self)];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)onErrorResumeNextError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorResumeNextWithRxFunctionsFunc1:create_RxCompletableTest_$92_initWithRxCompletableTest_(self)];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)repeatNormal {
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) repeat];
  [((RxCompletable *) nil_chk(c)) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(err)];
  jint callsCount = [calls get];
  OrgJunitAssert_assertTrueWithBoolean_(callsCount >= 3 && callsCount <= 6);
  OrgJunitAssert_assertNullWithId_([err get]);
}

- (void)repeatError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) repeat];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)repeat5Times {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) repeatWithLong:5];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [calls get]);
}

- (void)repeat1Time {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) repeatWithLong:1];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
}

- (void)repeat0Time {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) repeatWithLong:0];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)repeatWhenNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) repeatWhenWithRxFunctionsFunc1:nil];
}

- (void)retryNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) retry];
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)retry5Times {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(5);
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromActionWithRxFunctionsAction0_(create_RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) retry];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)retryBiPredicate5Times {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) retryWithRxFunctionsFunc2:create_RxCompletableTest_$99_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)retryTimes5Error {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) retryWithLong:5];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)retryTimes5Normal {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(5);
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromActionWithRxFunctionsAction0_(create_RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) retryWithLong:5];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)retryNegativeTimes {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) retryWithLong:-1];
}

- (void)retryWhen5Times {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(5);
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromActionWithRxFunctionsAction0_(create_RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls)))) retryWhenWithRxFunctionsFunc1:create_RxCompletableTest_$102_init()];
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)subscribe {
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) doOnCompletedWithRxFunctionsAction0:create_RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  [((RxCompletable *) nil_chk(c)) subscribe];
  JavaLangThread_sleepWithLong_(150);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)subscribeDispose {
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) doOnCompletedWithRxFunctionsAction0:create_RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  id<RxSubscription> d = [((RxCompletable *) nil_chk(c)) subscribe];
  JavaLangThread_sleepWithLong_(100);
  [((id<RxSubscription>) nil_chk(d)) unsubscribe];
  JavaLangThread_sleepWithLong_(150);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Completed", [complete get]);
}

- (void)subscribeTwoCallbacksNormal {
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete) withRxFunctionsAction1:create_RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(err)];
  OrgJunitAssert_assertNullWithId_([err get]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)subscribeTwoCallbacksError {
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete) withRxFunctionsAction1:create_RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(err)];
  OrgJunitAssert_assertTrueWithBoolean_([[err get] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)subscribeTwoCallbacksFirstNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:nil withRxFunctionsAction1:create_RxCompletableTest_$109_init()];
}

- (void)subscribeTwoCallbacksSecondNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$110_init() withRxFunctionsAction1:nil];
}

- (void)subscribeTwoCallbacksCompleteThrows {
  JavaUtilConcurrentAtomicAtomicReference *err = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$111_init() withRxFunctionsAction1:create_RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(err)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(NSString_valueOf_([err get]), [[err get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)subscribeTwoCallbacksOnErrorThrows {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$113_init() withRxFunctionsAction1:create_RxCompletableTest_$114_init()];
}

- (void)subscribeActionNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(run)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [run get]);
}

- (void)subscribeActionError {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(run)];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Completed", [run get]);
}

- (void)subscribeActionNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxFunctionsAction0:nil];
}

- (void)subscribeSubscriberNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) unsafeSubscribeWithRxSubscriber:nil];
}

- (void)subscribeCompletableSubscriberNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) unsafeSubscribeWithRxCompletableSubscriber:nil];
}

- (void)subscribeSubscriberNormal {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) unsafeSubscribeWithRxSubscriber:ts];
  [ts assertCompleted];
  [ts assertNoValues];
  [ts assertNoErrors];
}

- (void)subscribeSubscriberError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) unsafeSubscribeWithRxSubscriber:ts];
  [ts assertNotCompleted];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)subscribeOnNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeOnWithRxScheduler:nil];
}

- (void)subscribeOnNormal {
  JavaUtilConcurrentAtomicAtomicReference *name = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(name)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([name get])) hasPrefix:@"RxComputation"]);
}

- (void)subscribeOnError {
  JavaUtilConcurrentAtomicAtomicReference *name = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(name)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"No exception thrown");
  }
  @catch (RxExceptionsTestException *ex) {
  }
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([name get])) hasPrefix:@"RxComputation"]);
}

- (void)subscribeEmptyOnError {
  RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(create_RxCompletableTest_$119_initWithRxCompletableTest_(self));
}

- (void)subscribeOneActionOnError {
  RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(create_RxCompletableTest_$120_initWithRxCompletableTest_(self));
}

- (void)subscribeOneActionThrowFromOnCompleted {
  RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(create_RxCompletableTest_$121_initWithRxCompletableTest_(self));
}

- (void)subscribeTwoActionsThrowFromOnError {
  RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(create_RxCompletableTest_$122_initWithRxCompletableTest_(self));
}

- (void)propagateExceptionSubscribeEmpty {
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) toSingleDefaultWithId:JavaLangInteger_valueOfWithInt_(0)])) subscribe];
}

- (void)propagateExceptionSubscribeOneAction {
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) toSingleDefaultWithId:JavaLangInteger_valueOfWithInt_(1)])) subscribeWithRxFunctionsAction1:create_RxCompletableTest_$123_init()];
}

- (void)propagateExceptionSubscribeOneActionThrowFromOnSuccess {
  [((RxSingle *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleDefaultWithId:JavaLangInteger_valueOfWithInt_(1)])) subscribeWithRxFunctionsAction1:create_RxCompletableTest_$124_init()];
}

- (void)timeoutEmitError {
  NSException *e = [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_never())) timeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) get];
  OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[JavaUtilConcurrentTimeoutException class]]);
}

- (void)timeoutSwitchNormal {
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_never())) timeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxCompletable:((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_];
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)timeoutTimerCancelled {
  RxCompletable *c = [((RxCompletable *) nil_chk(RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$125_init()))) timeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxCompletable:((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_];
  [((RxCompletable *) nil_chk(c)) await];
  JavaLangThread_sleepWithLong_(100);
  [normal_ assertSubscriptionsWithInt:0];
}

- (void)timeoutUnitNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) timeoutWithLong:1 withJavaUtilConcurrentTimeUnit:nil];
}

- (void)timeoutSchedulerNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) timeoutWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:nil];
}

- (void)timeoutOtherNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) timeoutWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxCompletable:nil];
}

- (void)toNormal {
  RxObservable *flow = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toWithRxFunctionsFunc1:create_RxCompletableTest_$126_init()];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(flow)) toBlocking])) forEachWithRxFunctionsAction1:create_RxCompletableTest_$127_init()];
}

- (void)toNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toWithRxFunctionsFunc1:nil];
}

- (void)toObservableNormal {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toObservable])) toBlocking])) forEachWithRxFunctionsAction1:create_RxCompletableTest_$128_init()];
}

- (void)toObservableError {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) toObservable])) toBlocking])) forEachWithRxFunctionsAction1:create_RxCompletableTest_$129_init()];
}

+ (id)getWithRxSingle:(RxSingle *)single {
  return RxCompletableTest_getWithRxSingle_(single);
}

- (void)toSingleSupplierNormal {
  jint v = [((JavaLangInteger *) nil_chk(RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleWithRxFunctionsFunc0:create_RxCompletableTest_$131_init()]))) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, v);
}

- (void)toSingleSupplierError {
  RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) toSingleWithRxFunctionsFunc0:create_RxCompletableTest_$132_init()]);
}

- (void)toSingleSupplierNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleWithRxFunctionsFunc0:nil];
}

- (void)toSingleSupplierReturnsNull {
  RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleWithRxFunctionsFunc0:create_RxCompletableTest_$133_init()]);
}

- (void)toSingleSupplierThrows {
  RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleWithRxFunctionsFunc0:create_RxCompletableTest_$134_init()]);
}

- (void)toSingleDefaultError {
  RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) toSingleDefaultWithId:JavaLangInteger_valueOfWithInt_(1)]);
}

- (void)toSingleDefaultNormal {
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), RxCompletableTest_getWithRxSingle_([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleDefaultWithId:JavaLangInteger_valueOfWithInt_(1)]));
}

- (void)toSingleDefaultNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) toSingleDefaultWithId:nil];
}

- (void)unsubscribeOnNormal {
  JavaUtilConcurrentAtomicAtomicReference *name = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk([((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(name, cdl)])) unsubscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) unsafeSubscribeWithRxCompletableSubscriber:create_RxCompletableTest_$136_init()];
  [cdl await];
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([name get])) hasPrefix:@"RxComputation"]);
}

- (void)ambArrayNull {
  RxCompletable_ambWithRxCompletableArray_(nil);
}

- (void)ambArrayEmpty {
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithLength:0 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambArraySingleNormal {
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambArraySingleError {
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_ } count:1 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambArrayOneFires {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ c1, c2 } count:2 type:RxCompletable_class_()]);
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps1 onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)ambArrayOneFiresError {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ c1, c2 } count:2 type:RxCompletable_class_()]);
  JavaUtilConcurrentAtomicAtomicReference *complete = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$138_init() withRxFunctionsAction1:create_RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [[complete get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)ambArraySecondFires {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ c1, c2 } count:2 type:RxCompletable_class_()]);
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps2 onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)ambArraySecondFiresError {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ c1, c2 } count:2 type:RxCompletable_class_()]);
  JavaUtilConcurrentAtomicAtomicReference *complete = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$141_init() withRxFunctionsAction1:create_RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps2 onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [[complete get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)ambMultipleOneIsNull {
  RxCompletable *c = RxCompletable_ambWithRxCompletableArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:2 type:RxCompletable_class_()]);
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableEmpty {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilCollections_emptyList());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableNull {
  RxCompletable_ambWithJavaLangIterable_(nil);
}

- (void)ambIterableIteratorNull {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(create_RxCompletableTest_$143_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableWithNull {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableSingle {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)ambIterableMany {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_, normal_->completable_, normal_->completable_ } count:3 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)ambIterableOneThrows {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilCollections_singletonWithId_(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableManyOneThrows {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_, ((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_ } count:2 type:RxCompletable_class_()]));
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableIterableThrows {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(create_RxCompletableTest_$144_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableIteratorHasNextThrows {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorHasNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambIterableIteratorNextThrows {
  RxCompletable *c = RxCompletable_ambWithJavaLangIterable_(create_RxCompletableTest_IterableIteratorNextThrows_init());
  [((RxCompletable *) nil_chk(c)) await];
}

- (void)ambWithNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) ambWithWithRxCompletable:nil];
}

- (void)ambWithArrayOneFires {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = [((RxCompletable *) nil_chk(c1)) ambWithWithRxCompletable:c2];
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps1 onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)ambWithArrayOneFiresError {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = [((RxCompletable *) nil_chk(c1)) ambWithWithRxCompletable:c2];
  JavaUtilConcurrentAtomicAtomicReference *complete = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$146_init() withRxFunctionsAction1:create_RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [[complete get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)ambWithArraySecondFires {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = [((RxCompletable *) nil_chk(c1)) ambWithWithRxCompletable:c2];
  JavaUtilConcurrentAtomicAtomicBoolean *complete = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps2 onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [complete get]);
}

- (void)ambWithArraySecondFiresError {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxCompletable *c1 = RxCompletable_fromObservableWithRxObservable_(ps1);
  RxCompletable *c2 = RxCompletable_fromObservableWithRxObservable_(ps2);
  RxCompletable *c = [((RxCompletable *) nil_chk(c1)) ambWithWithRxCompletable:c2];
  JavaUtilConcurrentAtomicAtomicReference *complete = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxCompletable *) nil_chk(c)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$149_init() withRxFunctionsAction1:create_RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(complete)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"First subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Second subject no subscribers", [((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ps2 onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"First subject has subscribers", [ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Second subject has subscribers", [ps2 hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not completed", [[complete get] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)startWithCompletableNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxCompletable:RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, run))];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Did not start with other", [run get]);
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)startWithCompletableError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxCompletable:((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw TestException");
  }
  @catch (RxExceptionsTestException *ex) {
    [normal_ assertSubscriptionsWithInt:0];
    [error_ assertSubscriptionsWithInt:1];
  }
}

- (void)startWithFlowableNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxObservable:RxObservable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, run))];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(c)) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Did not start with other", [run get]);
  [normal_ assertSubscriptionsWithInt:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)startWithFlowableError {
  RxObservable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(c)) subscribeWithRxSubscriber:ts];
  [normal_ assertSubscriptionsWithInt:0];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)startWithCompletableNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxCompletable:nil];
}

- (void)startWithFlowableNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) startWithWithRxObservable:nil];
}

- (void)andThenCompletableNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxCompletable:nil];
}

- (void)andThenFlowableNull {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxObservable:nil];
}

- (void)andThenCompletableNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxCompletable:RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, run))];
  [((RxCompletable *) nil_chk(c)) await];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Start with other", [run get]);
  [normal_ assertSubscriptionsWithInt:1];
}

- (void)andThenCompletableError {
  RxCompletable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxCompletable:((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_];
  @try {
    [((RxCompletable *) nil_chk(c)) await];
    OrgJunitAssert_failWithNSString_(@"Did not throw TestException");
  }
  @catch (RxExceptionsTestException *ex) {
    [normal_ assertSubscriptionsWithInt:1];
    [error_ assertSubscriptionsWithInt:1];
  }
}

- (void)andThenFlowableNormal {
  JavaUtilConcurrentAtomicAtomicBoolean *run = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxObservable:RxObservable_fromCallableWithJavaUtilConcurrentCallable_(create_RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, run))];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(c)) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Start with other", [run get]);
  [normal_ assertSubscriptionsWithInt:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)andThenFlowableError {
  RxObservable *c = [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) andThenWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(c)) subscribeWithRxSubscriber:ts];
  [normal_ assertSubscriptionsWithInt:1];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)usingFactoryThrows {
  id<RxFunctionsAction1> onDispose = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$155_init(), create_RxCompletableTest_$156_init(), onDispose))) unsafeSubscribeWithRxSubscriber:ts];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(onDispose))) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)usingFactoryAndDisposerThrow {
  id<RxFunctionsAction1> onDispose = create_RxCompletableTest_$157_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$158_init(), create_RxCompletableTest_$159_init(), onDispose))) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsCompositeException_class_()];
  RxExceptionsCompositeException *ex = (RxExceptionsCompositeException *) cast_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0], [RxExceptionsCompositeException class]);
  id<JavaUtilList> listEx = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(listEx)) size]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([listEx getWithInt:0])) description], [[listEx getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([listEx getWithInt:1])) description], [[listEx getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)usingFactoryReturnsNull {
  id<RxFunctionsAction1> onDispose = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$160_init(), create_RxCompletableTest_$161_init(), onDispose))) unsafeSubscribeWithRxSubscriber:ts];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(onDispose))) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:JavaLangNullPointerException_class_()];
}

- (void)usingFactoryReturnsNullAndDisposerThrows {
  id<RxFunctionsAction1> onDispose = create_RxCompletableTest_$162_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(create_RxCompletableTest_$163_init(), create_RxCompletableTest_$164_init(), onDispose))) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsCompositeException_class_()];
  RxExceptionsCompositeException *ex = (RxExceptionsCompositeException *) cast_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0], [RxExceptionsCompositeException class]);
  id<JavaUtilList> listEx = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(listEx)) size]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([listEx getWithInt:0])) description], [[listEx getWithInt:0] isKindOfClass:[JavaLangNullPointerException class]]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([listEx getWithInt:1])) description], [[listEx getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)subscribeReportsUnsubscribed {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribe];
  [stringSubject onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeReportsUnsubscribedOnError {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribe];
  [stringSubject onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeActionReportsUnsubscribed {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:RxFunctionsActions_empty()];
  [stringSubject onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeActionReportsUnsubscribedAfter {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  JavaUtilConcurrentAtomicAtomicReference *subscriptionRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(subscriptionRef)];
  [subscriptionRef setWithId:completableSubscription];
  [stringSubject onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"Unsubscribed before the call to onCompleted", [subscriptionRef get]);
}

- (void)subscribeActionReportsUnsubscribedOnError {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:RxFunctionsActions_empty()];
  [stringSubject onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeAction2ReportsUnsubscribed {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:RxFunctionsActions_empty() withRxFunctionsAction1:RxFunctionsActions_empty()];
  [stringSubject onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeAction2ReportsUnsubscribedOnError {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:RxFunctionsActions_empty() withRxFunctionsAction1:RxFunctionsActions_empty()];
  [stringSubject onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
}

- (void)subscribeAction2ReportsUnsubscribedAfter {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  JavaUtilConcurrentAtomicAtomicReference *subscriptionRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(subscriptionRef) withRxFunctionsAction1:RxFunctionsActions_empty()];
  [subscriptionRef setWithId:completableSubscription];
  [stringSubject onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"Unsubscribed before the call to onCompleted", [subscriptionRef get]);
}

- (void)subscribeAction2ReportsUnsubscribedOnErrorAfter {
  RxSubjectsPublishSubject *stringSubject = RxSubjectsPublishSubject_create();
  RxCompletable *completable = [((RxSubjectsPublishSubject *) nil_chk(stringSubject)) toCompletable];
  JavaUtilConcurrentAtomicAtomicReference *subscriptionRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxSubscription> completableSubscription = [((RxCompletable *) nil_chk(completable)) subscribeWithRxFunctionsAction0:RxFunctionsActions_empty() withRxFunctionsAction1:create_RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(subscriptionRef)];
  [subscriptionRef setWithId:completableSubscription];
  [stringSubject onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not unsubscribed?", [((id<RxSubscription>) nil_chk(completableSubscription)) isUnsubscribed]);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"Unsubscribed before the call to onError", [subscriptionRef get]);
}

+ (void)expectUncaughtTestExceptionWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(action);
}

- (void)safeOnCompleteThrows {
  @try {
    [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxCompletableSubscriber:create_RxCompletableTest_$168_init()];
    OrgJunitAssert_failWithNSString_(@"Did not propagate exception!");
  }
  @catch (RxExceptionsOnCompletedFailedException *ex) {
    NSException *c = [((RxExceptionsOnCompletedFailedException *) nil_chk(ex)) getCause];
    OrgJunitAssert_assertNotNullWithId_(c);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Forced failure", [((NSException *) nil_chk(c)) getMessage]);
  }
}

- (void)safeOnCompleteThrowsRegularSubscriber {
  @try {
    [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxSubscriber:create_RxCompletableTest_$169_init()];
    OrgJunitAssert_failWithNSString_(@"Did not propagate exception!");
  }
  @catch (RxExceptionsOnCompletedFailedException *ex) {
    NSException *c = [((RxExceptionsOnCompletedFailedException *) nil_chk(ex)) getCause];
    OrgJunitAssert_assertNotNullWithId_(c);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Forced failure", [((NSException *) nil_chk(c)) getMessage]);
  }
}

- (void)safeOnErrorThrows {
  @try {
    [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) subscribeWithRxCompletableSubscriber:create_RxCompletableTest_$170_init()];
    OrgJunitAssert_failWithNSString_(@"Did not propagate exception!");
  }
  @catch (RxExceptionsOnErrorFailedException *ex) {
    NSException *c = [((RxExceptionsOnErrorFailedException *) nil_chk(ex)) getCause];
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", c), [c isKindOfClass:[RxExceptionsCompositeException class]]);
    RxExceptionsCompositeException *ce = (RxExceptionsCompositeException *) cast_chk(c, [RxExceptionsCompositeException class]);
    id<JavaUtilList> list = [((RxExceptionsCompositeException *) nil_chk(ce)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(list)) size]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:0]), [[list getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertNullWithId_([((NSException *) nil_chk([list getWithInt:0])) getMessage]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:1]), [[list getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Forced failure", [((NSException *) nil_chk([list getWithInt:1])) getMessage]);
  }
}

- (void)safeOnErrorThrowsRegularSubscriber {
  @try {
    [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) subscribeWithRxSubscriber:create_RxCompletableTest_$171_init()];
    OrgJunitAssert_failWithNSString_(@"Did not propagate exception!");
  }
  @catch (RxExceptionsOnErrorFailedException *ex) {
    NSException *c = [((RxExceptionsOnErrorFailedException *) nil_chk(ex)) getCause];
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", c), [c isKindOfClass:[RxExceptionsCompositeException class]]);
    RxExceptionsCompositeException *ce = (RxExceptionsCompositeException *) cast_chk(c, [RxExceptionsCompositeException class]);
    id<JavaUtilList> list = [((RxExceptionsCompositeException *) nil_chk(ce)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(list)) size]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:0]), [[list getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertNullWithId_([((NSException *) nil_chk([list getWithInt:0])) getMessage]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:1]), [[list getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Forced failure", [((NSException *) nil_chk([list getWithInt:1])) getMessage]);
  }
}

- (void)setUp {
  JreStrongAssign(&onCreate_, OrgMockitoMockito_spyWithId_(create_RxCompletableTestFunc1a_init()));
  RxPluginsRxJavaHooks_setOnCompletableCreateWithRxFunctionsFunc1_(onCreate_);
  JreStrongAssign(&onStart_, OrgMockitoMockito_spyWithId_(create_RxCompletableTestFunc1b_init()));
  RxPluginsRxJavaHooks_setOnCompletableStartWithRxFunctionsFunc2_(onStart_);
}

- (void)after {
  RxPluginsRxJavaHooks_reset();
}

- (void)testHookCreate {
  id<RxCompletable_OnSubscribe> subscriber = OrgMockitoMockito_mockWithIOSClass_(RxCompletable_OnSubscribe_class_());
  RxCompletable_createWithRxCompletable_OnSubscribe_(subscriber);
  [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onCreate_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:subscriber];
}

- (void)testHookSubscribeStart {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxCompletable *completable = RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$172_init());
  [((RxCompletable *) nil_chk(completable)) subscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc2>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onStart_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_eqWithId_(completable) withId:OrgMockitoMatchers_anyWithIOSClass_(RxCompletable_OnSubscribe_class_())];
}

- (void)testHookUnsafeSubscribeStart {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxCompletable *completable = RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_$173_init());
  [((RxCompletable *) nil_chk(completable)) unsafeSubscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc2>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onStart_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_eqWithId_(completable) withId:OrgMockitoMatchers_anyWithIOSClass_(RxCompletable_OnSubscribe_class_())];
}

- (void)onStartCalledSafe {
  RxObserversTestSubscriber *ts = create_RxCompletableTest_$174_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)onStartCalledUnsafeSafe {
  RxObserversTestSubscriber *ts = create_RxCompletableTest_$175_init();
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(normal_))->completable_)) unsafeSubscribeWithRxSubscriber:ts];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)onErrorCompleteFunctionThrows {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(error_))->completable_)) onErrorCompleteWithRxFunctionsFunc1:create_RxCompletableTest_$176_init()])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsCompositeException_class_()];
  RxExceptionsCompositeException *composite = (RxExceptionsCompositeException *) cast_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0], [RxExceptionsCompositeException class]);
  id<JavaUtilList> errors = [((RxExceptionsCompositeException *) nil_chk(composite)) getExceptions];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(errors)) size]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([errors getWithInt:0])) description], [[errors getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithNSString_withId_withId_([((NSException *) nil_chk([errors getWithInt:0])) description], nil, [((NSException *) nil_chk([errors getWithInt:0])) getMessage]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([errors getWithInt:1])) description], [[errors getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithNSString_withId_withId_([((NSException *) nil_chk([errors getWithInt:1])) description], @"Forced inner failure", [((NSException *) nil_chk([errors getWithInt:1])) getMessage]);
}

- (void)toFunctionReceivesObservableReturnsResult {
  RxCompletable *c = RxCompletable_errorWithNSException_(create_JavaLangRuntimeException_init());
  id expectedResult = create_NSObject_init();
  JavaUtilConcurrentAtomicAtomicReference *completableRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id actualResult = [((RxCompletable *) nil_chk(c)) toWithRxFunctionsFunc1:create_RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(completableRef, expectedResult)];
  OrgJunitAssert_assertSameWithId_withId_(expectedResult, actualResult);
  OrgJunitAssert_assertSameWithId_withId_(c, [completableRef get]);
}

- (void)doOnEachNullAction {
  [((RxCompletable *) nil_chk(RxCompletable_complete())) doOnEachWithRxFunctionsAction1:nil];
}

- (void)doOnEachCompleted {
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_complete())) doOnEachWithRxFunctionsAction1:create_RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(atomicInteger)])) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [atomicInteger get]);
}

- (void)doOnEachError {
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  [((RxCompletable *) nil_chk([((RxCompletable *) nil_chk(RxCompletable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"What?")))) doOnEachWithRxFunctionsAction1:create_RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(atomicInteger)])) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [atomicInteger get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(normal_);
  RELEASE_(error_);
  RELEASE_(onCreate_);
  RELEASE_(onStart_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 49, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 50, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 51, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 52, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 53, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 54, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 55, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 56, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 57, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 58, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 59, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 60, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 61, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 62, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 63, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 64, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 65, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 66, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 67, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 68, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 69, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 70, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 71, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 72, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 73, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 74, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 75, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 76, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 77, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 78, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 79, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 80, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 81, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 82, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 83, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 84, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 85, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 86, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 87, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 88, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 89, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 90, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 91, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 92, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 93, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 94, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 95, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 96, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 97, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 98, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 99, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 100, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 101, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 102, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 103, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 104, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 105, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 106, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 107, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 108, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 109, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 110, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 111, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 112, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 113, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 115, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 116, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 117, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 118, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 119, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 120, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 121, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 122, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 123, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 124, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 125, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 126, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 127, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 128, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 129, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 130, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 131, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 132, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 133, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 134, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 135, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 136, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 137, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 138, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 139, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 140, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 141, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 142, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 143, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 144, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 145, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 146, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 147, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 148, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 149, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 150, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 151, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 152, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 153, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 154, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 155, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 156, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 157, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 158, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 159, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 160, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 161, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 162, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 163, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 164, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 165, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 166, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 167, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 168, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 169, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 170, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 171, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 172, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 173, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 174, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 175, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 176, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 177, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 178, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 179, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 180, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 181, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 182, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 183, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 184, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 185, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 186, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 187, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 188, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 189, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 190, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 191, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 192, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 193, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 194, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 195, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 196, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 197, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 198, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 199, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 200, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 201, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 202, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 203, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 204, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 205, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 206, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 207, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 208, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 209, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 210, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 211, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 212, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 213, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 214, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 215, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 216, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 217, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 218, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 219, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 220, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 221, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 222, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 223, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 224, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 225, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 226, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 227, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 228, -1 },
    { NULL, "LNSObject;", 0x8, 229, 230, -1, 231, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 232, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 233, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 234, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 235, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 236, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 237, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 238, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 239, -1 },
    { NULL, "V", 0x1, -1, -1, 114, -1, 240, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 241, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 242, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 243, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 244, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 245, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 246, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 247, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 248, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 249, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 250, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 251, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 252, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 253, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 254, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 255, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 256, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 257, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 258, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 259, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 260, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 261, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 262, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 263, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 264, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 265, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 266, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 267, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 268, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 269, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 270, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 271, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 272, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 273, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 274, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 275, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 276, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 277, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 278, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 279, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 280, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 281, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 282, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 283, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 284, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 285, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 286, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 287, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 288, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 289, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 290, -1 },
    { NULL, "V", 0xa, 291, 292, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 293, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 294, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 295, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 296, -1 },
    { NULL, "V", 0x1, -1, -1, 297, -1, 298, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 299, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 300, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 301, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 302, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 303, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 304, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 305, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 306, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 307, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 308, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 309, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(complete);
  methods[1].selector = @selector(concatNull);
  methods[2].selector = @selector(concatEmpty);
  methods[3].selector = @selector(concatSingleSource);
  methods[4].selector = @selector(concatSingleSourceThrows);
  methods[5].selector = @selector(concatMultipleSources);
  methods[6].selector = @selector(concatMultipleOneThrows);
  methods[7].selector = @selector(concatMultipleOneIsNull);
  methods[8].selector = @selector(concatIterableEmpty);
  methods[9].selector = @selector(concatIterableNull);
  methods[10].selector = @selector(concatIterableIteratorNull);
  methods[11].selector = @selector(concatIterableWithNull);
  methods[12].selector = @selector(concatIterableSingle);
  methods[13].selector = @selector(concatIterableMany);
  methods[14].selector = @selector(concatIterableOneThrows);
  methods[15].selector = @selector(concatIterableManyOneThrows);
  methods[16].selector = @selector(concatIterableIterableThrows);
  methods[17].selector = @selector(concatIterableIteratorHasNextThrows);
  methods[18].selector = @selector(concatIterableIteratorNextThrows);
  methods[19].selector = @selector(concatObservableEmpty);
  methods[20].selector = @selector(concatObservableError);
  methods[21].selector = @selector(concatObservableSingle);
  methods[22].selector = @selector(concatObservableSingleThrows);
  methods[23].selector = @selector(concatObservableMany);
  methods[24].selector = @selector(concatObservableManyOneThrows);
  methods[25].selector = @selector(concatObservablePrefetch);
  methods[26].selector = @selector(andThen);
  methods[27].selector = @selector(andThenNever);
  methods[28].selector = @selector(andThenError);
  methods[29].selector = @selector(andThenSubscribeOn);
  methods[30].selector = @selector(andThenSingle);
  methods[31].selector = @selector(andThenSingleNever);
  methods[32].selector = @selector(andThenSingleError);
  methods[33].selector = @selector(andThenSingleSubscribeOn);
  methods[34].selector = @selector(createNull);
  methods[35].selector = @selector(createOnSubscribeThrowsNPE);
  methods[36].selector = @selector(createOnSubscribeThrowsRuntimeException);
  methods[37].selector = @selector(defer);
  methods[38].selector = @selector(deferNull);
  methods[39].selector = @selector(deferReturnsNull);
  methods[40].selector = @selector(deferFunctionThrows);
  methods[41].selector = @selector(deferErrorSource);
  methods[42].selector = @selector(errorNull);
  methods[43].selector = @selector(errorNormal);
  methods[44].selector = @selector(fromCallableNull);
  methods[45].selector = @selector(fromCallableNormal);
  methods[46].selector = @selector(fromCallableThrows);
  methods[47].selector = @selector(fromObservableNull);
  methods[48].selector = @selector(fromObservableEmpty);
  methods[49].selector = @selector(fromObservableSome);
  methods[50].selector = @selector(fromObservableError);
  methods[51].selector = @selector(fromFutureNull);
  methods[52].selector = @selector(fromFutureNormal);
  methods[53].selector = @selector(fromFutureThrows);
  methods[54].selector = @selector(fromActionNull);
  methods[55].selector = @selector(fromActionNormal);
  methods[56].selector = @selector(fromActionThrows);
  methods[57].selector = @selector(fromSingleNull);
  methods[58].selector = @selector(fromSingleNormal);
  methods[59].selector = @selector(fromSingleThrows);
  methods[60].selector = @selector(mergeNull);
  methods[61].selector = @selector(mergeEmpty);
  methods[62].selector = @selector(mergeSingleSource);
  methods[63].selector = @selector(mergeSingleSourceThrows);
  methods[64].selector = @selector(mergeMultipleSources);
  methods[65].selector = @selector(mergeMultipleOneThrows);
  methods[66].selector = @selector(mergeMultipleOneIsNull);
  methods[67].selector = @selector(mergeIterableEmpty);
  methods[68].selector = @selector(mergeIterableNull);
  methods[69].selector = @selector(mergeIterableIteratorNull);
  methods[70].selector = @selector(mergeIterableWithNull);
  methods[71].selector = @selector(mergeIterableSingle);
  methods[72].selector = @selector(mergeIterableMany);
  methods[73].selector = @selector(mergeIterableOneThrows);
  methods[74].selector = @selector(mergeIterableManyOneThrows);
  methods[75].selector = @selector(mergeIterableIterableThrows);
  methods[76].selector = @selector(mergeIterableIteratorHasNextThrows);
  methods[77].selector = @selector(mergeIterableIteratorNextThrows);
  methods[78].selector = @selector(mergeObservableEmpty);
  methods[79].selector = @selector(mergeObservableError);
  methods[80].selector = @selector(mergeObservableSingle);
  methods[81].selector = @selector(mergeObservableSingleThrows);
  methods[82].selector = @selector(mergeObservableMany);
  methods[83].selector = @selector(mergeObservableManyOneThrows);
  methods[84].selector = @selector(mergeObservableMaxConcurrent);
  methods[85].selector = @selector(mergeDelayErrorNull);
  methods[86].selector = @selector(mergeDelayErrorEmpty);
  methods[87].selector = @selector(mergeDelayErrorSingleSource);
  methods[88].selector = @selector(mergeDelayErrorSingleSourceThrows);
  methods[89].selector = @selector(mergeDelayErrorMultipleSources);
  methods[90].selector = @selector(mergeDelayErrorMultipleOneThrows);
  methods[91].selector = @selector(mergeDelayErrorMultipleOneIsNull);
  methods[92].selector = @selector(mergeDelayErrorIterableEmpty);
  methods[93].selector = @selector(mergeDelayErrorIterableNull);
  methods[94].selector = @selector(mergeDelayErrorIterableIteratorNull);
  methods[95].selector = @selector(mergeDelayErrorIterableWithNull);
  methods[96].selector = @selector(mergeDelayErrorIterableSingle);
  methods[97].selector = @selector(mergeDelayErrorIterableMany);
  methods[98].selector = @selector(mergeDelayErrorIterableOneThrows);
  methods[99].selector = @selector(mergeDelayErrorIterableManyOneThrows);
  methods[100].selector = @selector(mergeDelayErrorIterableIterableThrows);
  methods[101].selector = @selector(mergeDelayErrorIterableIteratorHasNextThrows);
  methods[102].selector = @selector(mergeDelayErrorIterableIteratorNextThrows);
  methods[103].selector = @selector(mergeDelayErrorObservableEmpty);
  methods[104].selector = @selector(mergeDelayErrorObservableError);
  methods[105].selector = @selector(mergeDelayErrorObservableSingle);
  methods[106].selector = @selector(mergeDelayErrorObservableSingleThrows);
  methods[107].selector = @selector(mergeDelayErrorObservableMany);
  methods[108].selector = @selector(mergeDelayErrorObservableManyOneThrows);
  methods[109].selector = @selector(mergeDelayErrorObservableMaxConcurrent);
  methods[110].selector = @selector(never);
  methods[111].selector = @selector(timer);
  methods[112].selector = @selector(timerNewThread);
  methods[113].selector = @selector(timerTestScheduler);
  methods[114].selector = @selector(timerCancel);
  methods[115].selector = @selector(timerUnitNull);
  methods[116].selector = @selector(timerSchedulerNull);
  methods[117].selector = @selector(usingNormalEager);
  methods[118].selector = @selector(usingNormalLazy);
  methods[119].selector = @selector(usingErrorEager);
  methods[120].selector = @selector(usingErrorLazy);
  methods[121].selector = @selector(usingResourceSupplierNull);
  methods[122].selector = @selector(usingMapperNull);
  methods[123].selector = @selector(usingMapperReturnsNull);
  methods[124].selector = @selector(usingDisposeNull);
  methods[125].selector = @selector(usingResourceThrows);
  methods[126].selector = @selector(usingMapperThrows);
  methods[127].selector = @selector(usingDisposerThrows);
  methods[128].selector = @selector(composeNormal);
  methods[129].selector = @selector(composeNull);
  methods[130].selector = @selector(concatWithNormal);
  methods[131].selector = @selector(concatWithError);
  methods[132].selector = @selector(concatWithNull);
  methods[133].selector = @selector(delayUnitNull);
  methods[134].selector = @selector(delaySchedulerNull);
  methods[135].selector = @selector(delayNormal);
  methods[136].selector = @selector(delayErrorImmediately);
  methods[137].selector = @selector(delayErrorToo);
  methods[138].selector = @selector(doOnCompletedNormal);
  methods[139].selector = @selector(doOnCompletedError);
  methods[140].selector = @selector(doOnCompletedNull);
  methods[141].selector = @selector(doOnCompletedThrows);
  methods[142].selector = @selector(doOnDisposeNormalDoesntCall);
  methods[143].selector = @selector(doOnDisposeErrorDoesntCall);
  methods[144].selector = @selector(doOnDisposeChildCancels);
  methods[145].selector = @selector(doOnDisposeNull);
  methods[146].selector = @selector(doOnDisposeThrows);
  methods[147].selector = @selector(doOnErrorNoError);
  methods[148].selector = @selector(doOnErrorHasError);
  methods[149].selector = @selector(doOnErrorNull);
  methods[150].selector = @selector(doOnErrorThrows);
  methods[151].selector = @selector(doOnSubscribeNormal);
  methods[152].selector = @selector(doOnSubscribeNull);
  methods[153].selector = @selector(doOnSubscribeThrows);
  methods[154].selector = @selector(doOnTerminateNormal);
  methods[155].selector = @selector(doOnTerminateError);
  methods[156].selector = @selector(doAfterTerminateNormal);
  methods[157].selector = @selector(doAfterTerminateWithError);
  methods[158].selector = @selector(doAfterTerminateNull);
  methods[159].selector = @selector(getNormal);
  methods[160].selector = @selector(getError);
  methods[161].selector = @selector(getTimeout);
  methods[162].selector = @selector(getNullUnit);
  methods[163].selector = @selector(liftNull);
  methods[164].selector = @selector(liftReturnsNull);
  methods[165].selector = @selector(liftOnCompleteError);
  methods[166].selector = @selector(liftOnErrorComplete);
  methods[167].selector = @selector(mergeWithNull);
  methods[168].selector = @selector(mergeWithNormal);
  methods[169].selector = @selector(observeOnNull);
  methods[170].selector = @selector(observeOnNormal);
  methods[171].selector = @selector(observeOnError);
  methods[172].selector = @selector(onErrorComplete);
  methods[173].selector = @selector(onErrorCompleteFalse);
  methods[174].selector = @selector(onErrorCompleteNull);
  methods[175].selector = @selector(onErrorResumeNextNull);
  methods[176].selector = @selector(onErrorResumeNextFunctionReturnsNull);
  methods[177].selector = @selector(onErrorResumeNextFunctionThrows);
  methods[178].selector = @selector(onErrorResumeNextNormal);
  methods[179].selector = @selector(onErrorResumeNextError);
  methods[180].selector = @selector(repeatNormal);
  methods[181].selector = @selector(repeatError);
  methods[182].selector = @selector(repeat5Times);
  methods[183].selector = @selector(repeat1Time);
  methods[184].selector = @selector(repeat0Time);
  methods[185].selector = @selector(repeatWhenNull);
  methods[186].selector = @selector(retryNormal);
  methods[187].selector = @selector(retry5Times);
  methods[188].selector = @selector(retryBiPredicate5Times);
  methods[189].selector = @selector(retryTimes5Error);
  methods[190].selector = @selector(retryTimes5Normal);
  methods[191].selector = @selector(retryNegativeTimes);
  methods[192].selector = @selector(retryWhen5Times);
  methods[193].selector = @selector(subscribe);
  methods[194].selector = @selector(subscribeDispose);
  methods[195].selector = @selector(subscribeTwoCallbacksNormal);
  methods[196].selector = @selector(subscribeTwoCallbacksError);
  methods[197].selector = @selector(subscribeTwoCallbacksFirstNull);
  methods[198].selector = @selector(subscribeTwoCallbacksSecondNull);
  methods[199].selector = @selector(subscribeTwoCallbacksCompleteThrows);
  methods[200].selector = @selector(subscribeTwoCallbacksOnErrorThrows);
  methods[201].selector = @selector(subscribeActionNormal);
  methods[202].selector = @selector(subscribeActionError);
  methods[203].selector = @selector(subscribeActionNull);
  methods[204].selector = @selector(subscribeSubscriberNull);
  methods[205].selector = @selector(subscribeCompletableSubscriberNull);
  methods[206].selector = @selector(subscribeSubscriberNormal);
  methods[207].selector = @selector(subscribeSubscriberError);
  methods[208].selector = @selector(subscribeOnNull);
  methods[209].selector = @selector(subscribeOnNormal);
  methods[210].selector = @selector(subscribeOnError);
  methods[211].selector = @selector(subscribeEmptyOnError);
  methods[212].selector = @selector(subscribeOneActionOnError);
  methods[213].selector = @selector(subscribeOneActionThrowFromOnCompleted);
  methods[214].selector = @selector(subscribeTwoActionsThrowFromOnError);
  methods[215].selector = @selector(propagateExceptionSubscribeEmpty);
  methods[216].selector = @selector(propagateExceptionSubscribeOneAction);
  methods[217].selector = @selector(propagateExceptionSubscribeOneActionThrowFromOnSuccess);
  methods[218].selector = @selector(timeoutEmitError);
  methods[219].selector = @selector(timeoutSwitchNormal);
  methods[220].selector = @selector(timeoutTimerCancelled);
  methods[221].selector = @selector(timeoutUnitNull);
  methods[222].selector = @selector(timeoutSchedulerNull);
  methods[223].selector = @selector(timeoutOtherNull);
  methods[224].selector = @selector(toNormal);
  methods[225].selector = @selector(toNull);
  methods[226].selector = @selector(toObservableNormal);
  methods[227].selector = @selector(toObservableError);
  methods[228].selector = @selector(getWithRxSingle:);
  methods[229].selector = @selector(toSingleSupplierNormal);
  methods[230].selector = @selector(toSingleSupplierError);
  methods[231].selector = @selector(toSingleSupplierNull);
  methods[232].selector = @selector(toSingleSupplierReturnsNull);
  methods[233].selector = @selector(toSingleSupplierThrows);
  methods[234].selector = @selector(toSingleDefaultError);
  methods[235].selector = @selector(toSingleDefaultNormal);
  methods[236].selector = @selector(toSingleDefaultNull);
  methods[237].selector = @selector(unsubscribeOnNormal);
  methods[238].selector = @selector(ambArrayNull);
  methods[239].selector = @selector(ambArrayEmpty);
  methods[240].selector = @selector(ambArraySingleNormal);
  methods[241].selector = @selector(ambArraySingleError);
  methods[242].selector = @selector(ambArrayOneFires);
  methods[243].selector = @selector(ambArrayOneFiresError);
  methods[244].selector = @selector(ambArraySecondFires);
  methods[245].selector = @selector(ambArraySecondFiresError);
  methods[246].selector = @selector(ambMultipleOneIsNull);
  methods[247].selector = @selector(ambIterableEmpty);
  methods[248].selector = @selector(ambIterableNull);
  methods[249].selector = @selector(ambIterableIteratorNull);
  methods[250].selector = @selector(ambIterableWithNull);
  methods[251].selector = @selector(ambIterableSingle);
  methods[252].selector = @selector(ambIterableMany);
  methods[253].selector = @selector(ambIterableOneThrows);
  methods[254].selector = @selector(ambIterableManyOneThrows);
  methods[255].selector = @selector(ambIterableIterableThrows);
  methods[256].selector = @selector(ambIterableIteratorHasNextThrows);
  methods[257].selector = @selector(ambIterableIteratorNextThrows);
  methods[258].selector = @selector(ambWithNull);
  methods[259].selector = @selector(ambWithArrayOneFires);
  methods[260].selector = @selector(ambWithArrayOneFiresError);
  methods[261].selector = @selector(ambWithArraySecondFires);
  methods[262].selector = @selector(ambWithArraySecondFiresError);
  methods[263].selector = @selector(startWithCompletableNormal);
  methods[264].selector = @selector(startWithCompletableError);
  methods[265].selector = @selector(startWithFlowableNormal);
  methods[266].selector = @selector(startWithFlowableError);
  methods[267].selector = @selector(startWithCompletableNull);
  methods[268].selector = @selector(startWithFlowableNull);
  methods[269].selector = @selector(andThenCompletableNull);
  methods[270].selector = @selector(andThenFlowableNull);
  methods[271].selector = @selector(andThenCompletableNormal);
  methods[272].selector = @selector(andThenCompletableError);
  methods[273].selector = @selector(andThenFlowableNormal);
  methods[274].selector = @selector(andThenFlowableError);
  methods[275].selector = @selector(usingFactoryThrows);
  methods[276].selector = @selector(usingFactoryAndDisposerThrow);
  methods[277].selector = @selector(usingFactoryReturnsNull);
  methods[278].selector = @selector(usingFactoryReturnsNullAndDisposerThrows);
  methods[279].selector = @selector(subscribeReportsUnsubscribed);
  methods[280].selector = @selector(subscribeReportsUnsubscribedOnError);
  methods[281].selector = @selector(subscribeActionReportsUnsubscribed);
  methods[282].selector = @selector(subscribeActionReportsUnsubscribedAfter);
  methods[283].selector = @selector(subscribeActionReportsUnsubscribedOnError);
  methods[284].selector = @selector(subscribeAction2ReportsUnsubscribed);
  methods[285].selector = @selector(subscribeAction2ReportsUnsubscribedOnError);
  methods[286].selector = @selector(subscribeAction2ReportsUnsubscribedAfter);
  methods[287].selector = @selector(subscribeAction2ReportsUnsubscribedOnErrorAfter);
  methods[288].selector = @selector(expectUncaughtTestExceptionWithRxFunctionsAction0:);
  methods[289].selector = @selector(safeOnCompleteThrows);
  methods[290].selector = @selector(safeOnCompleteThrowsRegularSubscriber);
  methods[291].selector = @selector(safeOnErrorThrows);
  methods[292].selector = @selector(safeOnErrorThrowsRegularSubscriber);
  methods[293].selector = @selector(setUp);
  methods[294].selector = @selector(after);
  methods[295].selector = @selector(testHookCreate);
  methods[296].selector = @selector(testHookSubscribeStart);
  methods[297].selector = @selector(testHookUnsafeSubscribeStart);
  methods[298].selector = @selector(onStartCalledSafe);
  methods[299].selector = @selector(onStartCalledUnsafeSafe);
  methods[300].selector = @selector(onErrorCompleteFunctionThrows);
  methods[301].selector = @selector(toFunctionReceivesObservableReturnsResult);
  methods[302].selector = @selector(doOnEachNullAction);
  methods[303].selector = @selector(doOnEachCompleted);
  methods[304].selector = @selector(doOnEachError);
  methods[305].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "normal_", "LRxCompletableTest_NormalCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LRxCompletableTest_ErrorCompletable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onCreate_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x2, -1, -1, 310, -1 },
    { "onStart_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x2, -1, -1, 311, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxCompletableTest__Annotations$0, (void *)&RxCompletableTest__Annotations$1, (void *)&RxCompletableTest__Annotations$2, (void *)&RxCompletableTest__Annotations$3, (void *)&RxCompletableTest__Annotations$4, (void *)&RxCompletableTest__Annotations$5, (void *)&RxCompletableTest__Annotations$6, (void *)&RxCompletableTest__Annotations$7, (void *)&RxCompletableTest__Annotations$8, (void *)&RxCompletableTest__Annotations$9, (void *)&RxCompletableTest__Annotations$10, (void *)&RxCompletableTest__Annotations$11, (void *)&RxCompletableTest__Annotations$12, (void *)&RxCompletableTest__Annotations$13, (void *)&RxCompletableTest__Annotations$14, (void *)&RxCompletableTest__Annotations$15, (void *)&RxCompletableTest__Annotations$16, (void *)&RxCompletableTest__Annotations$17, (void *)&RxCompletableTest__Annotations$18, (void *)&RxCompletableTest__Annotations$19, (void *)&RxCompletableTest__Annotations$20, (void *)&RxCompletableTest__Annotations$21, (void *)&RxCompletableTest__Annotations$22, (void *)&RxCompletableTest__Annotations$23, (void *)&RxCompletableTest__Annotations$24, (void *)&RxCompletableTest__Annotations$25, (void *)&RxCompletableTest__Annotations$26, (void *)&RxCompletableTest__Annotations$27, (void *)&RxCompletableTest__Annotations$28, (void *)&RxCompletableTest__Annotations$29, (void *)&RxCompletableTest__Annotations$30, (void *)&RxCompletableTest__Annotations$31, (void *)&RxCompletableTest__Annotations$32, (void *)&RxCompletableTest__Annotations$33, (void *)&RxCompletableTest__Annotations$34, (void *)&RxCompletableTest__Annotations$35, (void *)&RxCompletableTest__Annotations$36, (void *)&RxCompletableTest__Annotations$37, (void *)&RxCompletableTest__Annotations$38, (void *)&RxCompletableTest__Annotations$39, (void *)&RxCompletableTest__Annotations$40, (void *)&RxCompletableTest__Annotations$41, (void *)&RxCompletableTest__Annotations$42, (void *)&RxCompletableTest__Annotations$43, (void *)&RxCompletableTest__Annotations$44, (void *)&RxCompletableTest__Annotations$45, (void *)&RxCompletableTest__Annotations$46, (void *)&RxCompletableTest__Annotations$47, (void *)&RxCompletableTest__Annotations$48, (void *)&RxCompletableTest__Annotations$49, (void *)&RxCompletableTest__Annotations$50, (void *)&RxCompletableTest__Annotations$51, (void *)&RxCompletableTest__Annotations$52, (void *)&RxCompletableTest__Annotations$53, (void *)&RxCompletableTest__Annotations$54, (void *)&RxCompletableTest__Annotations$55, (void *)&RxCompletableTest__Annotations$56, (void *)&RxCompletableTest__Annotations$57, (void *)&RxCompletableTest__Annotations$58, (void *)&RxCompletableTest__Annotations$59, (void *)&RxCompletableTest__Annotations$60, (void *)&RxCompletableTest__Annotations$61, (void *)&RxCompletableTest__Annotations$62, (void *)&RxCompletableTest__Annotations$63, (void *)&RxCompletableTest__Annotations$64, (void *)&RxCompletableTest__Annotations$65, (void *)&RxCompletableTest__Annotations$66, (void *)&RxCompletableTest__Annotations$67, (void *)&RxCompletableTest__Annotations$68, (void *)&RxCompletableTest__Annotations$69, (void *)&RxCompletableTest__Annotations$70, (void *)&RxCompletableTest__Annotations$71, (void *)&RxCompletableTest__Annotations$72, (void *)&RxCompletableTest__Annotations$73, (void *)&RxCompletableTest__Annotations$74, (void *)&RxCompletableTest__Annotations$75, (void *)&RxCompletableTest__Annotations$76, (void *)&RxCompletableTest__Annotations$77, (void *)&RxCompletableTest__Annotations$78, (void *)&RxCompletableTest__Annotations$79, (void *)&RxCompletableTest__Annotations$80, (void *)&RxCompletableTest__Annotations$81, (void *)&RxCompletableTest__Annotations$82, (void *)&RxCompletableTest__Annotations$83, (void *)&RxCompletableTest__Annotations$84, (void *)&RxCompletableTest__Annotations$85, (void *)&RxCompletableTest__Annotations$86, (void *)&RxCompletableTest__Annotations$87, (void *)&RxCompletableTest__Annotations$88, (void *)&RxCompletableTest__Annotations$89, (void *)&RxCompletableTest__Annotations$90, (void *)&RxCompletableTest__Annotations$91, (void *)&RxCompletableTest__Annotations$92, (void *)&RxCompletableTest__Annotations$93, (void *)&RxCompletableTest__Annotations$94, (void *)&RxCompletableTest__Annotations$95, (void *)&RxCompletableTest__Annotations$96, (void *)&RxCompletableTest__Annotations$97, (void *)&RxCompletableTest__Annotations$98, (void *)&RxCompletableTest__Annotations$99, (void *)&RxCompletableTest__Annotations$100, (void *)&RxCompletableTest__Annotations$101, (void *)&RxCompletableTest__Annotations$102, (void *)&RxCompletableTest__Annotations$103, (void *)&RxCompletableTest__Annotations$104, (void *)&RxCompletableTest__Annotations$105, (void *)&RxCompletableTest__Annotations$106, (void *)&RxCompletableTest__Annotations$107, (void *)&RxCompletableTest__Annotations$108, (void *)&RxCompletableTest__Annotations$109, (void *)&RxCompletableTest__Annotations$110, (void *)&RxCompletableTest__Annotations$111, (void *)&RxCompletableTest__Annotations$112, (void *)&RxCompletableTest__Annotations$113, "LJavaLangInterruptedException;", (void *)&RxCompletableTest__Annotations$114, (void *)&RxCompletableTest__Annotations$115, (void *)&RxCompletableTest__Annotations$116, (void *)&RxCompletableTest__Annotations$117, (void *)&RxCompletableTest__Annotations$118, (void *)&RxCompletableTest__Annotations$119, (void *)&RxCompletableTest__Annotations$120, (void *)&RxCompletableTest__Annotations$121, (void *)&RxCompletableTest__Annotations$122, (void *)&RxCompletableTest__Annotations$123, (void *)&RxCompletableTest__Annotations$124, (void *)&RxCompletableTest__Annotations$125, (void *)&RxCompletableTest__Annotations$126, (void *)&RxCompletableTest__Annotations$127, (void *)&RxCompletableTest__Annotations$128, (void *)&RxCompletableTest__Annotations$129, (void *)&RxCompletableTest__Annotations$130, (void *)&RxCompletableTest__Annotations$131, (void *)&RxCompletableTest__Annotations$132, (void *)&RxCompletableTest__Annotations$133, (void *)&RxCompletableTest__Annotations$134, (void *)&RxCompletableTest__Annotations$135, (void *)&RxCompletableTest__Annotations$136, (void *)&RxCompletableTest__Annotations$137, (void *)&RxCompletableTest__Annotations$138, (void *)&RxCompletableTest__Annotations$139, (void *)&RxCompletableTest__Annotations$140, (void *)&RxCompletableTest__Annotations$141, (void *)&RxCompletableTest__Annotations$142, (void *)&RxCompletableTest__Annotations$143, (void *)&RxCompletableTest__Annotations$144, (void *)&RxCompletableTest__Annotations$145, (void *)&RxCompletableTest__Annotations$146, (void *)&RxCompletableTest__Annotations$147, (void *)&RxCompletableTest__Annotations$148, (void *)&RxCompletableTest__Annotations$149, (void *)&RxCompletableTest__Annotations$150, (void *)&RxCompletableTest__Annotations$151, (void *)&RxCompletableTest__Annotations$152, (void *)&RxCompletableTest__Annotations$153, (void *)&RxCompletableTest__Annotations$154, (void *)&RxCompletableTest__Annotations$155, (void *)&RxCompletableTest__Annotations$156, (void *)&RxCompletableTest__Annotations$157, (void *)&RxCompletableTest__Annotations$158, (void *)&RxCompletableTest__Annotations$159, (void *)&RxCompletableTest__Annotations$160, (void *)&RxCompletableTest__Annotations$161, (void *)&RxCompletableTest__Annotations$162, (void *)&RxCompletableTest__Annotations$163, (void *)&RxCompletableTest__Annotations$164, (void *)&RxCompletableTest__Annotations$165, (void *)&RxCompletableTest__Annotations$166, (void *)&RxCompletableTest__Annotations$167, (void *)&RxCompletableTest__Annotations$168, (void *)&RxCompletableTest__Annotations$169, (void *)&RxCompletableTest__Annotations$170, (void *)&RxCompletableTest__Annotations$171, (void *)&RxCompletableTest__Annotations$172, (void *)&RxCompletableTest__Annotations$173, (void *)&RxCompletableTest__Annotations$174, (void *)&RxCompletableTest__Annotations$175, (void *)&RxCompletableTest__Annotations$176, (void *)&RxCompletableTest__Annotations$177, (void *)&RxCompletableTest__Annotations$178, (void *)&RxCompletableTest__Annotations$179, (void *)&RxCompletableTest__Annotations$180, (void *)&RxCompletableTest__Annotations$181, (void *)&RxCompletableTest__Annotations$182, (void *)&RxCompletableTest__Annotations$183, (void *)&RxCompletableTest__Annotations$184, (void *)&RxCompletableTest__Annotations$185, (void *)&RxCompletableTest__Annotations$186, (void *)&RxCompletableTest__Annotations$187, (void *)&RxCompletableTest__Annotations$188, (void *)&RxCompletableTest__Annotations$189, (void *)&RxCompletableTest__Annotations$190, (void *)&RxCompletableTest__Annotations$191, (void *)&RxCompletableTest__Annotations$192, (void *)&RxCompletableTest__Annotations$193, (void *)&RxCompletableTest__Annotations$194, (void *)&RxCompletableTest__Annotations$195, (void *)&RxCompletableTest__Annotations$196, (void *)&RxCompletableTest__Annotations$197, (void *)&RxCompletableTest__Annotations$198, (void *)&RxCompletableTest__Annotations$199, (void *)&RxCompletableTest__Annotations$200, (void *)&RxCompletableTest__Annotations$201, (void *)&RxCompletableTest__Annotations$202, (void *)&RxCompletableTest__Annotations$203, (void *)&RxCompletableTest__Annotations$204, (void *)&RxCompletableTest__Annotations$205, (void *)&RxCompletableTest__Annotations$206, (void *)&RxCompletableTest__Annotations$207, (void *)&RxCompletableTest__Annotations$208, (void *)&RxCompletableTest__Annotations$209, (void *)&RxCompletableTest__Annotations$210, (void *)&RxCompletableTest__Annotations$211, (void *)&RxCompletableTest__Annotations$212, (void *)&RxCompletableTest__Annotations$213, (void *)&RxCompletableTest__Annotations$214, (void *)&RxCompletableTest__Annotations$215, (void *)&RxCompletableTest__Annotations$216, (void *)&RxCompletableTest__Annotations$217, (void *)&RxCompletableTest__Annotations$218, (void *)&RxCompletableTest__Annotations$219, (void *)&RxCompletableTest__Annotations$220, (void *)&RxCompletableTest__Annotations$221, (void *)&RxCompletableTest__Annotations$222, (void *)&RxCompletableTest__Annotations$223, (void *)&RxCompletableTest__Annotations$224, (void *)&RxCompletableTest__Annotations$225, (void *)&RxCompletableTest__Annotations$226, (void *)&RxCompletableTest__Annotations$227, "get", "LRxSingle;", "<T:Ljava/lang/Object;>(Lrx/Single<TT;>;)TT;", (void *)&RxCompletableTest__Annotations$228, (void *)&RxCompletableTest__Annotations$229, (void *)&RxCompletableTest__Annotations$230, (void *)&RxCompletableTest__Annotations$231, (void *)&RxCompletableTest__Annotations$232, (void *)&RxCompletableTest__Annotations$233, (void *)&RxCompletableTest__Annotations$234, (void *)&RxCompletableTest__Annotations$235, (void *)&RxCompletableTest__Annotations$236, (void *)&RxCompletableTest__Annotations$237, (void *)&RxCompletableTest__Annotations$238, (void *)&RxCompletableTest__Annotations$239, (void *)&RxCompletableTest__Annotations$240, (void *)&RxCompletableTest__Annotations$241, (void *)&RxCompletableTest__Annotations$242, (void *)&RxCompletableTest__Annotations$243, (void *)&RxCompletableTest__Annotations$244, (void *)&RxCompletableTest__Annotations$245, (void *)&RxCompletableTest__Annotations$246, (void *)&RxCompletableTest__Annotations$247, (void *)&RxCompletableTest__Annotations$248, (void *)&RxCompletableTest__Annotations$249, (void *)&RxCompletableTest__Annotations$250, (void *)&RxCompletableTest__Annotations$251, (void *)&RxCompletableTest__Annotations$252, (void *)&RxCompletableTest__Annotations$253, (void *)&RxCompletableTest__Annotations$254, (void *)&RxCompletableTest__Annotations$255, (void *)&RxCompletableTest__Annotations$256, (void *)&RxCompletableTest__Annotations$257, (void *)&RxCompletableTest__Annotations$258, (void *)&RxCompletableTest__Annotations$259, (void *)&RxCompletableTest__Annotations$260, (void *)&RxCompletableTest__Annotations$261, (void *)&RxCompletableTest__Annotations$262, (void *)&RxCompletableTest__Annotations$263, (void *)&RxCompletableTest__Annotations$264, (void *)&RxCompletableTest__Annotations$265, (void *)&RxCompletableTest__Annotations$266, (void *)&RxCompletableTest__Annotations$267, (void *)&RxCompletableTest__Annotations$268, (void *)&RxCompletableTest__Annotations$269, (void *)&RxCompletableTest__Annotations$270, (void *)&RxCompletableTest__Annotations$271, (void *)&RxCompletableTest__Annotations$272, (void *)&RxCompletableTest__Annotations$273, (void *)&RxCompletableTest__Annotations$274, (void *)&RxCompletableTest__Annotations$275, (void *)&RxCompletableTest__Annotations$276, (void *)&RxCompletableTest__Annotations$277, (void *)&RxCompletableTest__Annotations$278, (void *)&RxCompletableTest__Annotations$279, (void *)&RxCompletableTest__Annotations$280, (void *)&RxCompletableTest__Annotations$281, (void *)&RxCompletableTest__Annotations$282, (void *)&RxCompletableTest__Annotations$283, (void *)&RxCompletableTest__Annotations$284, (void *)&RxCompletableTest__Annotations$285, (void *)&RxCompletableTest__Annotations$286, "expectUncaughtTestException", "LRxFunctionsAction0;", (void *)&RxCompletableTest__Annotations$287, (void *)&RxCompletableTest__Annotations$288, (void *)&RxCompletableTest__Annotations$289, (void *)&RxCompletableTest__Annotations$290, "LJavaLangException;", (void *)&RxCompletableTest__Annotations$291, (void *)&RxCompletableTest__Annotations$292, (void *)&RxCompletableTest__Annotations$293, (void *)&RxCompletableTest__Annotations$294, (void *)&RxCompletableTest__Annotations$295, (void *)&RxCompletableTest__Annotations$296, (void *)&RxCompletableTest__Annotations$297, (void *)&RxCompletableTest__Annotations$298, (void *)&RxCompletableTest__Annotations$299, (void *)&RxCompletableTest__Annotations$300, (void *)&RxCompletableTest__Annotations$301, (void *)&RxCompletableTest__Annotations$302, "Lrx/functions/Func1<Lrx/Completable$OnSubscribe;Lrx/Completable$OnSubscribe;>;", "Lrx/functions/Func2<Lrx/Completable;Lrx/Completable$OnSubscribe;Lrx/Completable$OnSubscribe;>;", "LRxCompletableTest_IterableIteratorNextThrows;LRxCompletableTest_IterableIteratorHasNextThrows;LRxCompletableTest_NormalCompletable;LRxCompletableTest_ErrorCompletable;LRxCompletableTest_CompletableOperatorSwap;" };
  static const J2ObjcClassInfo _RxCompletableTest = { "CompletableTest", "rx", ptrTable, methods, fields, 7, 0x1, 306, 4, -1, 312, -1, -1, -1 };
  return &_RxCompletableTest;
}

@end

id RxCompletableTest_getWithRxSingle_(RxSingle *single) {
  RxCompletableTest_initialize();
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *v = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *e = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxSingle *) nil_chk(single)) subscribeWithRxSingleSubscriber:create_RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(v, cdl, e)];
  @try {
    [cdl await];
  }
  @catch (JavaLangInterruptedException *ex) {
    RxExceptionsExceptions_propagateWithNSException_(ex);
  }
  if ([e get] != nil) {
    RxExceptionsExceptions_propagateWithNSException_([e get]);
  }
  return [v get];
}

void RxCompletableTest_expectUncaughtTestExceptionWithRxFunctionsAction0_(id<RxFunctionsAction0> action) {
  RxCompletableTest_initialize();
  id<JavaLangThread_UncaughtExceptionHandler> originalHandler = JavaLangThread_getDefaultUncaughtExceptionHandler();
  RxCapturingUncaughtExceptionHandler *handler = create_RxCapturingUncaughtExceptionHandler_init();
  JavaLangThread_setDefaultUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler_(handler);
  @try {
    [((id<RxFunctionsAction0>) nil_chk(action)) call];
    OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Should have received exactly 1 exception", 1, handler->count_);
    NSException *caught = handler->caught_;
    while (caught != nil) {
      if ([caught isKindOfClass:[RxExceptionsTestException class]]) break;
      if (caught == [caught getCause]) break;
      caught = [caught getCause];
    }
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"A TestException should have been delivered to the handler", [caught isKindOfClass:[RxExceptionsTestException class]]);
  }
  @finally {
    JavaLangThread_setDefaultUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler_(originalHandler);
  }
}

void RxCompletableTest_init(RxCompletableTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->normal_, new_RxCompletableTest_NormalCompletable_init());
  JreStrongAssignAndConsume(&self->error_, new_RxCompletableTest_ErrorCompletable_init());
}

RxCompletableTest *new_RxCompletableTest_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest, init)
}

RxCompletableTest *create_RxCompletableTest_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest, init)
}

IOSObjectArray *RxCompletableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$48() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$49() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$50() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$51() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$52() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$53() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$54() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$55() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$56() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$57() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$58() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$59() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$60() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$61() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$62() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$63() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$64() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$65() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$66() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$67() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$68() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$69() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$70() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$71() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$72() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$73() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$74() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$75() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$76() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$77() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$78() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$79() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$80() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$81() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$82() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$83() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$84() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$85() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$86() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$87() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$88() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$89() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$90() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$91() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$92() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$93() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$94() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$95() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$96() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$97() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$98() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$99() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$100() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$101() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$102() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$103() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$104() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$105() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$106() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$107() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$108() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$109() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$110() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$111() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1500) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$112() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1500) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$113() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$114() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$115() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$116() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$117() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$118() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$119() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$120() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$121() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$122() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$123() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$124() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$125() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$126() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$127() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$128() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$129() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$130() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$131() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$132() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$133() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$134() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$135() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$136() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$137() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$138() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$139() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$140() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$141() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$142() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$143() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$144() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$145() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$146() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$147() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$148() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$149() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$150() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$151() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$152() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$153() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$154() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$155() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$156() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$157() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$158() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$159() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$160() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$161() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$162() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$163() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$164() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$165() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$166() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$167() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$168() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$169() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$170() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$171() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$172() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$173() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$174() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$175() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$176() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$177() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$178() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$179() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$180() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$181() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$182() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$183() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$184() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$185() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$186() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$187() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$188() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$189() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$190() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$191() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$192() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$193() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$194() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$195() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$196() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$197() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$198() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$199() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$200() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$201() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$202() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$203() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$204() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$205() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$206() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$207() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$208() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$209() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$210() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$211() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$212() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$213() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$214() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$215() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$216() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$217() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$218() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$219() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$220() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$221() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$222() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$223() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$224() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$225() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$226() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$227() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$228() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$229() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$230() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$231() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$232() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$233() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$234() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$235() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$236() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$237() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$238() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$239() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$240() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$241() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$242() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$243() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$244() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$245() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$246() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$247() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$248() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$249() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$250() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$251() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$252() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$253() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$254() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$255() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$256() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$257() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$258() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$259() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$260() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$261() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$262() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$263() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$264() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$265() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$266() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$267() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$268() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$269() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$270() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$271() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$272() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$273() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$274() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$275() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$276() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$277() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$278() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$279() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$280() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$281() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$282() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$283() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$284() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$285() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$286() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$287() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$288() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$289() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$290() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$291() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$292() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$293() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$294() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$295() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$296() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$297() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$298() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$299() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$300() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$301() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxCompletableTest__Annotations$302() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest)

@implementation RxCompletableTest_IterableIteratorNextThrows

- (id<JavaUtilIterator>)iterator {
  return create_RxCompletableTest_IterableIteratorNextThrows_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_IterableIteratorNextThrows_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_IterableIteratorNextThrows = { "IterableIteratorNextThrows", "rx", ptrTable, methods, NULL, 7, 0x18, 2, 0, 1, -1, -1, 2, -1 };
  return &_RxCompletableTest_IterableIteratorNextThrows;
}

@end

void RxCompletableTest_IterableIteratorNextThrows_init(RxCompletableTest_IterableIteratorNextThrows *self) {
  NSObject_init(self);
}

RxCompletableTest_IterableIteratorNextThrows *new_RxCompletableTest_IterableIteratorNextThrows_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_IterableIteratorNextThrows, init)
}

RxCompletableTest_IterableIteratorNextThrows *create_RxCompletableTest_IterableIteratorNextThrows_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_IterableIteratorNextThrows, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest_IterableIteratorNextThrows)

@implementation RxCompletableTest_IterableIteratorNextThrows_$1

- (jboolean)hasNext {
  return true;
}

- (RxCompletable *)next {
  @throw create_RxExceptionsTestException_init();
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_IterableIteratorNextThrows_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest_IterableIteratorNextThrows;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_IterableIteratorNextThrows_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_IterableIteratorNextThrows_$1;
}

@end

void RxCompletableTest_IterableIteratorNextThrows_$1_init(RxCompletableTest_IterableIteratorNextThrows_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_IterableIteratorNextThrows_$1 *new_RxCompletableTest_IterableIteratorNextThrows_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_IterableIteratorNextThrows_$1, init)
}

RxCompletableTest_IterableIteratorNextThrows_$1 *create_RxCompletableTest_IterableIteratorNextThrows_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_IterableIteratorNextThrows_$1, init)
}

@implementation RxCompletableTest_IterableIteratorHasNextThrows

- (id<JavaUtilIterator>)iterator {
  return create_RxCompletableTest_IterableIteratorHasNextThrows_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_IterableIteratorHasNextThrows_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_IterableIteratorHasNextThrows = { "IterableIteratorHasNextThrows", "rx", ptrTable, methods, NULL, 7, 0x18, 2, 0, 1, -1, -1, 2, -1 };
  return &_RxCompletableTest_IterableIteratorHasNextThrows;
}

@end

void RxCompletableTest_IterableIteratorHasNextThrows_init(RxCompletableTest_IterableIteratorHasNextThrows *self) {
  NSObject_init(self);
}

RxCompletableTest_IterableIteratorHasNextThrows *new_RxCompletableTest_IterableIteratorHasNextThrows_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_IterableIteratorHasNextThrows, init)
}

RxCompletableTest_IterableIteratorHasNextThrows *create_RxCompletableTest_IterableIteratorHasNextThrows_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_IterableIteratorHasNextThrows, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest_IterableIteratorHasNextThrows)

@implementation RxCompletableTest_IterableIteratorHasNextThrows_$1

- (jboolean)hasNext {
  @throw create_RxExceptionsTestException_init();
}

- (RxCompletable *)next {
  return nil;
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_IterableIteratorHasNextThrows_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest_IterableIteratorHasNextThrows;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_IterableIteratorHasNextThrows_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_IterableIteratorHasNextThrows_$1;
}

@end

void RxCompletableTest_IterableIteratorHasNextThrows_$1_init(RxCompletableTest_IterableIteratorHasNextThrows_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_IterableIteratorHasNextThrows_$1 *new_RxCompletableTest_IterableIteratorHasNextThrows_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_IterableIteratorHasNextThrows_$1, init)
}

RxCompletableTest_IterableIteratorHasNextThrows_$1 *create_RxCompletableTest_IterableIteratorHasNextThrows_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_IterableIteratorHasNextThrows_$1, init)
}

@implementation RxCompletableTest_NormalCompletable

- (void)assertSubscriptionsWithInt:(jint)n {
  OrgJunitAssert_assertEqualsWithLong_withLong_(n, [self get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_NormalCompletable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(completable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(assertSubscriptionsWithInt:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxCompletableTest_NormalCompletable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "completable_", "LRxCompletable;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertSubscriptions", "I", "LRxCompletableTest;" };
  static const J2ObjcClassInfo _RxCompletableTest_NormalCompletable = { "NormalCompletable", "rx", ptrTable, methods, fields, 7, 0x18, 2, 2, 2, -1, -1, -1, -1 };
  return &_RxCompletableTest_NormalCompletable;
}

@end

void RxCompletableTest_NormalCompletable_init(RxCompletableTest_NormalCompletable *self) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->completable_, RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(self)));
}

RxCompletableTest_NormalCompletable *new_RxCompletableTest_NormalCompletable_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_NormalCompletable, init)
}

RxCompletableTest_NormalCompletable *create_RxCompletableTest_NormalCompletable_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_NormalCompletable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest_NormalCompletable)

@implementation RxCompletableTest_NormalCompletable_$1

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [this$0_ getAndIncrement];
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_unsubscribed()];
  [s onCompleted];
}

- (instancetype)initWithRxCompletableTest_NormalCompletable:(RxCompletableTest_NormalCompletable *)outer$ {
  RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest_NormalCompletable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest_NormalCompletable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest_NormalCompletable;" };
  static const J2ObjcClassInfo _RxCompletableTest_NormalCompletable_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, -1, -1, -1 };
  return &_RxCompletableTest_NormalCompletable_$1;
}

@end

void RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable_$1 *self, RxCompletableTest_NormalCompletable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_NormalCompletable_$1 *new_RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_NormalCompletable_$1, initWithRxCompletableTest_NormalCompletable_, outer$)
}

RxCompletableTest_NormalCompletable_$1 *create_RxCompletableTest_NormalCompletable_$1_initWithRxCompletableTest_NormalCompletable_(RxCompletableTest_NormalCompletable *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_NormalCompletable_$1, initWithRxCompletableTest_NormalCompletable_, outer$)
}

@implementation RxCompletableTest_ErrorCompletable

- (void)assertSubscriptionsWithInt:(jint)n {
  OrgJunitAssert_assertEqualsWithLong_withLong_(n, [self get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_ErrorCompletable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(completable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(assertSubscriptionsWithInt:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxCompletableTest_ErrorCompletable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "completable_", "LRxCompletable;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertSubscriptions", "I", "LRxCompletableTest;" };
  static const J2ObjcClassInfo _RxCompletableTest_ErrorCompletable = { "ErrorCompletable", "rx", ptrTable, methods, fields, 7, 0x18, 2, 2, 2, -1, -1, -1, -1 };
  return &_RxCompletableTest_ErrorCompletable;
}

@end

void RxCompletableTest_ErrorCompletable_init(RxCompletableTest_ErrorCompletable *self) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->completable_, RxCompletable_createWithRxCompletable_OnSubscribe_(create_RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(self)));
}

RxCompletableTest_ErrorCompletable *new_RxCompletableTest_ErrorCompletable_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_ErrorCompletable, init)
}

RxCompletableTest_ErrorCompletable *create_RxCompletableTest_ErrorCompletable_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_ErrorCompletable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest_ErrorCompletable)

@implementation RxCompletableTest_ErrorCompletable_$1

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [this$0_ getAndIncrement];
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_unsubscribed()];
  [s onErrorWithNSException:create_RxExceptionsTestException_init()];
}

- (instancetype)initWithRxCompletableTest_ErrorCompletable:(RxCompletableTest_ErrorCompletable *)outer$ {
  RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest_ErrorCompletable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest_ErrorCompletable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest_ErrorCompletable;" };
  static const J2ObjcClassInfo _RxCompletableTest_ErrorCompletable_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, -1, -1, -1 };
  return &_RxCompletableTest_ErrorCompletable_$1;
}

@end

void RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable_$1 *self, RxCompletableTest_ErrorCompletable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_ErrorCompletable_$1 *new_RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_ErrorCompletable_$1, initWithRxCompletableTest_ErrorCompletable_, outer$)
}

RxCompletableTest_ErrorCompletable_$1 *create_RxCompletableTest_ErrorCompletable_$1_initWithRxCompletableTest_ErrorCompletable_(RxCompletableTest_ErrorCompletable *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_ErrorCompletable_$1, initWithRxCompletableTest_ErrorCompletable_, outer$)
}

@implementation RxCompletableTest_CompletableOperatorSwap

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)v {
  return create_RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(v);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_CompletableOperatorSwap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletableSubscriber;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;" };
  static const J2ObjcClassInfo _RxCompletableTest_CompletableOperatorSwap = { "CompletableOperatorSwap", "rx", ptrTable, methods, NULL, 7, 0x18, 2, 0, 2, -1, -1, -1, -1 };
  return &_RxCompletableTest_CompletableOperatorSwap;
}

@end

void RxCompletableTest_CompletableOperatorSwap_init(RxCompletableTest_CompletableOperatorSwap *self) {
  NSObject_init(self);
}

RxCompletableTest_CompletableOperatorSwap *new_RxCompletableTest_CompletableOperatorSwap_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_CompletableOperatorSwap, init)
}

RxCompletableTest_CompletableOperatorSwap *create_RxCompletableTest_CompletableOperatorSwap_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_CompletableOperatorSwap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCompletableTest_CompletableOperatorSwap)

@implementation RxCompletableTest_CompletableOperatorSwap_$1

- (void)onCompleted {
  [((id<RxCompletableSubscriber>) nil_chk(val$v_)) onErrorWithNSException:create_RxExceptionsTestException_init()];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxCompletableSubscriber>) nil_chk(val$v_)) onCompleted];
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((id<RxCompletableSubscriber>) nil_chk(val$v_)) onSubscribeWithRxSubscription:d];
}

- (instancetype)initWithRxCompletableSubscriber:(id<RxCompletableSubscriber>)capture$0 {
  RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$v_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithRxSubscription:);
  methods[3].selector = @selector(initWithRxCompletableSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$v_", "LRxCompletableSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LRxSubscription;", "LRxCompletableSubscriber;", "LRxCompletableTest_CompletableOperatorSwap;", "callWithId:" };
  static const J2ObjcClassInfo _RxCompletableTest_CompletableOperatorSwap_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_CompletableOperatorSwap_$1;
}

@end

void RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(RxCompletableTest_CompletableOperatorSwap_$1 *self, id<RxCompletableSubscriber> capture$0) {
  JreStrongAssign(&self->val$v_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_CompletableOperatorSwap_$1 *new_RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_CompletableOperatorSwap_$1, initWithRxCompletableSubscriber_, capture$0)
}

RxCompletableTest_CompletableOperatorSwap_$1 *create_RxCompletableTest_CompletableOperatorSwap_$1_initWithRxCompletableSubscriber_(id<RxCompletableSubscriber> capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_CompletableOperatorSwap_$1, initWithRxCompletableSubscriber_, capture$0)
}

@implementation RxCompletableTest_$1

- (id<JavaUtilIterator>)iterator {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "concatIterableIteratorNull", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$1;
}

@end

void RxCompletableTest_$1_init(RxCompletableTest_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_$1 *new_RxCompletableTest_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$1, init)
}

RxCompletableTest_$1 *create_RxCompletableTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$1, init)
}

@implementation RxCompletableTest_$2

- (id<JavaUtilIterator>)iterator {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "concatIterableIterableThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$2;
}

@end

void RxCompletableTest_$2_init(RxCompletableTest_$2 *self) {
  NSObject_init(self);
}

RxCompletableTest_$2 *new_RxCompletableTest_$2_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$2, init)
}

RxCompletableTest_$2 *create_RxCompletableTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$2, init)
}

@implementation RxCompletableTest_$3

- (void)callWithId:(JavaLangLong *)v {
  [((id<JavaUtilList>) nil_chk(val$requested_)) addWithId:v];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxCompletableTest_$3_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxCompletableTest;", "concatObservablePrefetch", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$3 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$3;
}

@end

void RxCompletableTest_$3_initWithJavaUtilList_(RxCompletableTest_$3 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$3 *new_RxCompletableTest_$3_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$3, initWithJavaUtilList_, capture$0)
}

RxCompletableTest_$3 *create_RxCompletableTest_$3_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$3, initWithJavaUtilList_, capture$0)
}

@implementation RxCompletableTest_$4

- (void)callWithId:(id<RxCompletableSubscriber>)cs {
  [((id<RxCompletableSubscriber>) nil_chk(cs)) onErrorWithNSException:val$e_];
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0 {
  RxCompletableTest_$4_initWithJavaLangException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LJavaLangException;", "LRxCompletableTest;", "andThenError" };
  static const J2ObjcClassInfo _RxCompletableTest_$4 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxCompletableTest_$4;
}

@end

void RxCompletableTest_$4_initWithJavaLangException_(RxCompletableTest_$4 *self, JavaLangException *capture$0) {
  JreStrongAssign(&self->val$e_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$4 *new_RxCompletableTest_$4_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$4, initWithJavaLangException_, capture$0)
}

RxCompletableTest_$4 *create_RxCompletableTest_$4_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$4, initWithJavaLangException_, capture$0)
}

@implementation RxCompletableTest_$5

- (void)callWithId:(RxSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$hasRun_)) setWithBoolean:true];
  [((RxSubscriber *) nil_chk(s)) onNextWithId:@"foo"];
  [s onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$hasRun_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$hasRun_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "andThenError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$5 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$5;
}

@end

void RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$5 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$hasRun_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$5 *new_RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$5, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$5 *create_RxCompletableTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$5, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$6

- (void)callWithId:(RxSingleSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$hasRun_)) setWithBoolean:true];
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"foo"];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$hasRun_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$hasRun_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "andThenSingleError", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$6 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$6;
}

@end

void RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$6 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$hasRun_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$6 *new_RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$6, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$6 *create_RxCompletableTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$6, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$7

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  @throw create_JavaLangNullPointerException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;", "createOnSubscribeThrowsNPE" };
  static const J2ObjcClassInfo _RxCompletableTest_$7 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$7;
}

@end

void RxCompletableTest_$7_init(RxCompletableTest_$7 *self) {
  NSObject_init(self);
}

RxCompletableTest_$7 *new_RxCompletableTest_$7_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$7, init)
}

RxCompletableTest_$7 *create_RxCompletableTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$7, init)
}

@implementation RxCompletableTest_$8

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;", "createOnSubscribeThrowsRuntimeException" };
  static const J2ObjcClassInfo _RxCompletableTest_$8 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$8;
}

@end

void RxCompletableTest_$8_init(RxCompletableTest_$8 *self) {
  NSObject_init(self);
}

RxCompletableTest_$8 *new_RxCompletableTest_$8_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$8, init)
}

RxCompletableTest_$8 *create_RxCompletableTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$8, init)
}

@implementation RxCompletableTest_$9

- (RxCompletable *)call {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$9_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "defer", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$9 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$9;
}

@end

void RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest_$9 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$9 *new_RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$9, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$9 *create_RxCompletableTest_$9_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$9, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$10

- (RxCompletable *)call {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "deferReturnsNull", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$10 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$10;
}

@end

void RxCompletableTest_$10_init(RxCompletableTest_$10 *self) {
  NSObject_init(self);
}

RxCompletableTest_$10 *new_RxCompletableTest_$10_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$10, init)
}

RxCompletableTest_$10 *create_RxCompletableTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$10, init)
}

@implementation RxCompletableTest_$11

- (RxCompletable *)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "deferFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$11 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$11;
}

@end

void RxCompletableTest_$11_init(RxCompletableTest_$11 *self) {
  NSObject_init(self);
}

RxCompletableTest_$11 *new_RxCompletableTest_$11_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$11, init)
}

RxCompletableTest_$11 *create_RxCompletableTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$11, init)
}

@implementation RxCompletableTest_$12

- (RxCompletable *)call {
  return ((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$12_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "deferErrorSource", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$12 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$12;
}

@end

void RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest_$12 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$12 *new_RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$12, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$12 *create_RxCompletableTest_$12_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$12, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$13

- (id)call {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "fromCallableNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$13 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$13;
}

@end

void RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$13 *new_RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$13 *create_RxCompletableTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$14

- (id)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;", "fromCallableThrows", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$14 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$14;
}

@end

void RxCompletableTest_$14_init(RxCompletableTest_$14 *self) {
  NSObject_init(self);
}

RxCompletableTest_$14 *new_RxCompletableTest_$14_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$14, init)
}

RxCompletableTest_$14 *create_RxCompletableTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$14, init)
}

@implementation RxCompletableTest_$15

- (void)run {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "fromFutureNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$15 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$15;
}

@end

void RxCompletableTest_$15_init(RxCompletableTest_$15 *self) {
  NSObject_init(self);
}

RxCompletableTest_$15 *new_RxCompletableTest_$15_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$15, init)
}

RxCompletableTest_$15 *create_RxCompletableTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$15, init)
}

@implementation RxCompletableTest_$16

- (void)run {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "fromFutureThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$16 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$16;
}

@end

void RxCompletableTest_$16_init(RxCompletableTest_$16 *self) {
  NSObject_init(self);
}

RxCompletableTest_$16 *new_RxCompletableTest_$16_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$16, init)
}

RxCompletableTest_$16 *create_RxCompletableTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$16, init)
}

@implementation RxCompletableTest_$17

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "fromActionNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$17 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$17;
}

@end

void RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$17 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$17 *new_RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$17, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$17 *create_RxCompletableTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$17, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$18

- (void)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "fromActionThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$18 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$18;
}

@end

void RxCompletableTest_$18_init(RxCompletableTest_$18 *self) {
  NSObject_init(self);
}

RxCompletableTest_$18 *new_RxCompletableTest_$18_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$18, init)
}

RxCompletableTest_$18 *create_RxCompletableTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$18, init)
}

@implementation RxCompletableTest_$19

- (id<JavaUtilIterator>)iterator {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "mergeIterableIteratorNull", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$19 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$19;
}

@end

void RxCompletableTest_$19_init(RxCompletableTest_$19 *self) {
  NSObject_init(self);
}

RxCompletableTest_$19 *new_RxCompletableTest_$19_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$19, init)
}

RxCompletableTest_$19 *create_RxCompletableTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$19, init)
}

@implementation RxCompletableTest_$20

- (id<JavaUtilIterator>)iterator {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "mergeIterableIterableThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$20 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$20;
}

@end

void RxCompletableTest_$20_init(RxCompletableTest_$20 *self) {
  NSObject_init(self);
}

RxCompletableTest_$20 *new_RxCompletableTest_$20_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$20, init)
}

RxCompletableTest_$20 *create_RxCompletableTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$20, init)
}

@implementation RxCompletableTest_$21

- (void)callWithId:(JavaLangLong *)v {
  [((id<JavaUtilList>) nil_chk(val$requested_)) addWithId:v];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxCompletableTest_$21_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxCompletableTest;", "mergeObservableMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$21 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$21;
}

@end

void RxCompletableTest_$21_initWithJavaUtilList_(RxCompletableTest_$21 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$21 *new_RxCompletableTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$21, initWithJavaUtilList_, capture$0)
}

RxCompletableTest_$21 *create_RxCompletableTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$21, initWithJavaUtilList_, capture$0)
}

@implementation RxCompletableTest_$22

- (id<JavaUtilIterator>)iterator {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "mergeDelayErrorIterableIteratorNull", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$22 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$22;
}

@end

void RxCompletableTest_$22_init(RxCompletableTest_$22 *self) {
  NSObject_init(self);
}

RxCompletableTest_$22 *new_RxCompletableTest_$22_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$22, init)
}

RxCompletableTest_$22 *create_RxCompletableTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$22, init)
}

@implementation RxCompletableTest_$23

- (id<JavaUtilIterator>)iterator {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "mergeDelayErrorIterableIterableThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$23 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$23;
}

@end

void RxCompletableTest_$23_init(RxCompletableTest_$23 *self) {
  NSObject_init(self);
}

RxCompletableTest_$23 *new_RxCompletableTest_$23_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$23, init)
}

RxCompletableTest_$23 *create_RxCompletableTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$23, init)
}

@implementation RxCompletableTest_$24

- (void)callWithId:(JavaLangLong *)v {
  [((id<JavaUtilList>) nil_chk(val$requested_)) addWithId:v];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxCompletableTest_$24_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxCompletableTest;", "mergeDelayErrorObservableMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$24 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$24;
}

@end

void RxCompletableTest_$24_initWithJavaUtilList_(RxCompletableTest_$24 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$24 *new_RxCompletableTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$24, initWithJavaUtilList_, capture$0)
}

RxCompletableTest_$24 *create_RxCompletableTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$24, initWithJavaUtilList_, capture$0)
}

@implementation RxCompletableTest_$25

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$onSubscribeCalled_)) setWithBoolean:true];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onSubscribeCalled_);
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onSubscribeCalled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "never" };
  static const J2ObjcClassInfo _RxCompletableTest_$25 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$25;
}

@end

void RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$25 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$onSubscribeCalled_, capture$0);
  JreStrongAssign(&self->val$calls_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$25 *new_RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$25, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxCompletableTest_$25 *create_RxCompletableTest_$25_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$25, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxCompletableTest_$26

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (void)onErrorWithNSException:(NSException *)e {
  RxPluginsRxJavaHooks_onErrorWithNSException_(e);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "timerTestScheduler" };
  static const J2ObjcClassInfo _RxCompletableTest_$26 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$26;
}

@end

void RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$26 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$26 *new_RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$26, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$26 *create_RxCompletableTest_$26_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$26, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$27

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsMultipleAssignmentSubscription *) nil_chk(val$mad_)) setWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$0
                            withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$mad_);
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxSubscriptionsMultipleAssignmentSubscription:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mad_", "LRxSubscriptionsMultipleAssignmentSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxSubscriptionsMultipleAssignmentSubscription;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "timerCancel" };
  static const J2ObjcClassInfo _RxCompletableTest_$27 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$27;
}

@end

void RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$27 *self, RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$mad_, capture$0);
  JreStrongAssign(&self->val$calls_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$27 *new_RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$27, initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxCompletableTest_$27 *create_RxCompletableTest_$27_initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsMultipleAssignmentSubscription *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$27, initWithRxSubscriptionsMultipleAssignmentSubscription_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxCompletableTest_$28

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$28_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingNormalEager", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$28 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$28;
}

@end

void RxCompletableTest_$28_init(RxCompletableTest_$28 *self) {
  NSObject_init(self);
}

RxCompletableTest_$28 *new_RxCompletableTest_$28_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$28, init)
}

RxCompletableTest_$28 *create_RxCompletableTest_$28_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$28, init)
}

@implementation RxCompletableTest_$29

- (RxCompletable *)callWithId:(id)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$29_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingNormalEager", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$29 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$29;
}

@end

void RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest_$29 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$29 *new_RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$29, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$29 *create_RxCompletableTest_$29_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$29, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$30

- (void)callWithId:(JavaLangInteger *)d {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) setWithInt:[((JavaLangInteger *) nil_chk(d)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "usingNormalEager", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$30 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$30;
}

@end

void RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$30 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$30 *new_RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$30, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$30 *create_RxCompletableTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$30, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$31

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) lazySetWithId:e];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribedFirst_)) setWithBoolean:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) get] != 0];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2 {
  RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$unsubscribedFirst_);
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$unsubscribedFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "usingNormalEager" };
  static const J2ObjcClassInfo _RxCompletableTest_$31 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$31;
}

@end

void RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$31 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$unsubscribedFirst_, capture$1);
  JreStrongAssign(&self->val$unsubscribe_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$31 *new_RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$31, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$31 *create_RxCompletableTest_$31_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$31, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$32

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$32_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingNormalLazy", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$32 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$32;
}

@end

void RxCompletableTest_$32_init(RxCompletableTest_$32 *self) {
  NSObject_init(self);
}

RxCompletableTest_$32 *new_RxCompletableTest_$32_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$32, init)
}

RxCompletableTest_$32 *create_RxCompletableTest_$32_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$32, init)
}

@implementation RxCompletableTest_$33

- (RxCompletable *)callWithId:(JavaLangInteger *)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$33_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingNormalLazy", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$33 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$33;
}

@end

void RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest_$33 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$33 *new_RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$33, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$33 *create_RxCompletableTest_$33_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$33, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$34

- (void)callWithId:(JavaLangInteger *)d {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) setWithInt:[((JavaLangInteger *) nil_chk(d)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "usingNormalLazy", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$34 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$34;
}

@end

void RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$34 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$34 *new_RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$34, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$34 *create_RxCompletableTest_$34_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$34, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$35

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) lazySetWithId:e];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribedFirst_)) setWithBoolean:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) get] != 0];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2 {
  RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$unsubscribedFirst_);
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$unsubscribedFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "usingNormalLazy" };
  static const J2ObjcClassInfo _RxCompletableTest_$35 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$35;
}

@end

void RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$35 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$unsubscribedFirst_, capture$1);
  JreStrongAssign(&self->val$unsubscribe_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$35 *new_RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$35, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$35 *create_RxCompletableTest_$35_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$35, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$36

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$36_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingErrorEager", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$36 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$36;
}

@end

void RxCompletableTest_$36_init(RxCompletableTest_$36 *self) {
  NSObject_init(self);
}

RxCompletableTest_$36 *new_RxCompletableTest_$36_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$36, init)
}

RxCompletableTest_$36 *create_RxCompletableTest_$36_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$36, init)
}

@implementation RxCompletableTest_$37

- (RxCompletable *)callWithId:(JavaLangInteger *)v {
  return ((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$37_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingErrorEager", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$37 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$37;
}

@end

void RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest_$37 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$37 *new_RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$37, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$37 *create_RxCompletableTest_$37_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$37, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$38

- (void)callWithId:(JavaLangInteger *)d {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) setWithInt:[((JavaLangInteger *) nil_chk(d)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "usingErrorEager", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$38 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$38;
}

@end

void RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$38 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$38 *new_RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$38, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$38 *create_RxCompletableTest_$38_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$38, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$39

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribedFirst_)) setWithBoolean:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) get] != 0];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2 {
  RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribedFirst_);
  RELEASE_(val$unsubscribe_);
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribedFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "usingErrorEager" };
  static const J2ObjcClassInfo _RxCompletableTest_$39 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$39;
}

@end

void RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$39 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  JreStrongAssign(&self->val$unsubscribedFirst_, capture$0);
  JreStrongAssign(&self->val$unsubscribe_, capture$1);
  JreStrongAssign(&self->val$complete_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$39 *new_RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$39, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$39 *create_RxCompletableTest_$39_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$39, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$40

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$40_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingErrorLazy", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$40 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$40;
}

@end

void RxCompletableTest_$40_init(RxCompletableTest_$40 *self) {
  NSObject_init(self);
}

RxCompletableTest_$40 *new_RxCompletableTest_$40_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$40, init)
}

RxCompletableTest_$40 *create_RxCompletableTest_$40_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$40, init)
}

@implementation RxCompletableTest_$41

- (RxCompletable *)callWithId:(JavaLangInteger *)v {
  return ((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$41_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingErrorLazy", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$41 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$41;
}

@end

void RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest_$41 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$41 *new_RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$41, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$41 *create_RxCompletableTest_$41_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$41, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$42

- (void)callWithId:(JavaLangInteger *)d {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) setWithInt:[((JavaLangInteger *) nil_chk(d)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "usingErrorLazy", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$42 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$42;
}

@end

void RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$42 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$42 *new_RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$42, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$42 *create_RxCompletableTest_$42_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$42, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$43

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribedFirst_)) setWithBoolean:[((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribe_)) get] != 0];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2 {
  RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribedFirst_);
  RELEASE_(val$unsubscribe_);
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribedFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "usingErrorLazy" };
  static const J2ObjcClassInfo _RxCompletableTest_$43 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$43;
}

@end

void RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$43 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  JreStrongAssign(&self->val$unsubscribedFirst_, capture$0);
  JreStrongAssign(&self->val$unsubscribe_, capture$1);
  JreStrongAssign(&self->val$complete_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$43 *new_RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$43, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$43 *create_RxCompletableTest_$43_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$43, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$44

- (RxCompletable *)callWithId:(id)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$44_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingResourceSupplierNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$44 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$44;
}

@end

void RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest_$44 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$44 *new_RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$44, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$44 *create_RxCompletableTest_$44_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$44, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$45

- (void)callWithId:(id)v {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$45_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingResourceSupplierNull", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$45 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$45;
}

@end

void RxCompletableTest_$45_init(RxCompletableTest_$45 *self) {
  NSObject_init(self);
}

RxCompletableTest_$45 *new_RxCompletableTest_$45_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$45, init)
}

RxCompletableTest_$45 *create_RxCompletableTest_$45_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$45, init)
}

@implementation RxCompletableTest_$46

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$46_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingMapperNull", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$46 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$46;
}

@end

void RxCompletableTest_$46_init(RxCompletableTest_$46 *self) {
  NSObject_init(self);
}

RxCompletableTest_$46 *new_RxCompletableTest_$46_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$46, init)
}

RxCompletableTest_$46 *create_RxCompletableTest_$46_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$46, init)
}

@implementation RxCompletableTest_$47

- (void)callWithId:(id)v {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$47_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingMapperNull", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$47 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$47;
}

@end

void RxCompletableTest_$47_init(RxCompletableTest_$47 *self) {
  NSObject_init(self);
}

RxCompletableTest_$47 *new_RxCompletableTest_$47_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$47, init)
}

RxCompletableTest_$47 *create_RxCompletableTest_$47_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$47, init)
}

@implementation RxCompletableTest_$48

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$48_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingMapperReturnsNull", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$48 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$48;
}

@end

void RxCompletableTest_$48_init(RxCompletableTest_$48 *self) {
  NSObject_init(self);
}

RxCompletableTest_$48 *new_RxCompletableTest_$48_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$48, init)
}

RxCompletableTest_$48 *create_RxCompletableTest_$48_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$48, init)
}

@implementation RxCompletableTest_$49

- (RxCompletable *)callWithId:(id)v {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$49_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingMapperReturnsNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$49 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$49;
}

@end

void RxCompletableTest_$49_init(RxCompletableTest_$49 *self) {
  NSObject_init(self);
}

RxCompletableTest_$49 *new_RxCompletableTest_$49_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$49, init)
}

RxCompletableTest_$49 *create_RxCompletableTest_$49_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$49, init)
}

@implementation RxCompletableTest_$50

- (void)callWithId:(id)v {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$50_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingMapperReturnsNull", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$50 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$50;
}

@end

void RxCompletableTest_$50_init(RxCompletableTest_$50 *self) {
  NSObject_init(self);
}

RxCompletableTest_$50 *new_RxCompletableTest_$50_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$50, init)
}

RxCompletableTest_$50 *create_RxCompletableTest_$50_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$50, init)
}

@implementation RxCompletableTest_$51

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$51_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingDisposeNull", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$51 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$51;
}

@end

void RxCompletableTest_$51_init(RxCompletableTest_$51 *self) {
  NSObject_init(self);
}

RxCompletableTest_$51 *new_RxCompletableTest_$51_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$51, init)
}

RxCompletableTest_$51 *create_RxCompletableTest_$51_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$51, init)
}

@implementation RxCompletableTest_$52

- (RxCompletable *)callWithId:(id)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$52_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingDisposeNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$52 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$52;
}

@end

void RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest_$52 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$52 *new_RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$52, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$52 *create_RxCompletableTest_$52_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$52, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$53

- (id)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$53_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingResourceThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$53 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$53;
}

@end

void RxCompletableTest_$53_init(RxCompletableTest_$53 *self) {
  NSObject_init(self);
}

RxCompletableTest_$53 *new_RxCompletableTest_$53_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$53, init)
}

RxCompletableTest_$53 *create_RxCompletableTest_$53_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$53, init)
}

@implementation RxCompletableTest_$54

- (RxCompletable *)callWithId:(id)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$54_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingResourceThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$54 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$54;
}

@end

void RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest_$54 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$54 *new_RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$54, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$54 *create_RxCompletableTest_$54_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$54, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$55

- (void)callWithId:(id)v {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$55_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingResourceThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$55 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$55;
}

@end

void RxCompletableTest_$55_init(RxCompletableTest_$55 *self) {
  NSObject_init(self);
}

RxCompletableTest_$55 *new_RxCompletableTest_$55_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$55, init)
}

RxCompletableTest_$55 *create_RxCompletableTest_$55_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$55, init)
}

@implementation RxCompletableTest_$56

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$56_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingMapperThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$56 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$56;
}

@end

void RxCompletableTest_$56_init(RxCompletableTest_$56 *self) {
  NSObject_init(self);
}

RxCompletableTest_$56 *new_RxCompletableTest_$56_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$56, init)
}

RxCompletableTest_$56 *create_RxCompletableTest_$56_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$56, init)
}

@implementation RxCompletableTest_$57

- (RxCompletable *)callWithId:(id)v {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$57_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingMapperThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$57 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$57;
}

@end

void RxCompletableTest_$57_init(RxCompletableTest_$57 *self) {
  NSObject_init(self);
}

RxCompletableTest_$57 *new_RxCompletableTest_$57_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$57, init)
}

RxCompletableTest_$57 *create_RxCompletableTest_$57_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$57, init)
}

@implementation RxCompletableTest_$58

- (void)callWithId:(id)v {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$58_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingMapperThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$58 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$58;
}

@end

void RxCompletableTest_$58_init(RxCompletableTest_$58 *self) {
  NSObject_init(self);
}

RxCompletableTest_$58 *new_RxCompletableTest_$58_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$58, init)
}

RxCompletableTest_$58 *create_RxCompletableTest_$58_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$58, init)
}

@implementation RxCompletableTest_$59

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$59_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingDisposerThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$59 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$59;
}

@end

void RxCompletableTest_$59_init(RxCompletableTest_$59 *self) {
  NSObject_init(self);
}

RxCompletableTest_$59 *new_RxCompletableTest_$59_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$59, init)
}

RxCompletableTest_$59 *create_RxCompletableTest_$59_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$59, init)
}

@implementation RxCompletableTest_$60

- (RxCompletable *)callWithId:(id)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$60_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingDisposerThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$60 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$60;
}

@end

void RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest_$60 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$60 *new_RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$60, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$60 *create_RxCompletableTest_$60_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$60, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$61

- (void)callWithId:(id)v {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$61_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "usingDisposerThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$61 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$61;
}

@end

void RxCompletableTest_$61_init(RxCompletableTest_$61 *self) {
  NSObject_init(self);
}

RxCompletableTest_$61 *new_RxCompletableTest_$61_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$61, init)
}

RxCompletableTest_$61 *create_RxCompletableTest_$61_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$61, init)
}

@implementation RxCompletableTest_$62

- (RxCompletable *)callWithId:(RxCompletable *)n {
  return [((RxCompletable *) nil_chk(n)) onErrorComplete];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$62_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletable;", "LRxCompletableTest;", "composeNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$62 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$62;
}

@end

void RxCompletableTest_$62_init(RxCompletableTest_$62 *self) {
  NSObject_init(self);
}

RxCompletableTest_$62 *new_RxCompletableTest_$62_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$62, init)
}

RxCompletableTest_$62 *create_RxCompletableTest_$62_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$62, init)
}

@implementation RxCompletableTest_$63

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$done_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$done_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$done_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "delayNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$63 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$63;
}

@end

void RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$63 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$done_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$63 *new_RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$63, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxCompletableTest_$63 *create_RxCompletableTest_$63_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$63, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxCompletableTest_$64

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$done_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$done_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$done_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "delayErrorImmediately" };
  static const J2ObjcClassInfo _RxCompletableTest_$64 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$64;
}

@end

void RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$64 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$done_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$64 *new_RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$64, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxCompletableTest_$64 *create_RxCompletableTest_$64_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$64, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxCompletableTest_$65

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$done_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  RELEASE_(val$done_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$done_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "delayErrorToo" };
  static const J2ObjcClassInfo _RxCompletableTest_$65 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$65;
}

@end

void RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$65 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$error_, capture$0);
  JreStrongAssign(&self->val$done_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$65 *new_RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$65, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxCompletableTest_$65 *create_RxCompletableTest_$65_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$65, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxCompletableTest_$66

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnCompletedNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$66 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$66;
}

@end

void RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$66 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$66 *new_RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$66, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$66 *create_RxCompletableTest_$66_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$66, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$67

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnCompletedError" };
  static const J2ObjcClassInfo _RxCompletableTest_$67 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$67;
}

@end

void RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$67 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$67 *new_RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$67, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$67 *create_RxCompletableTest_$67_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$67, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$68

- (void)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$68_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "doOnCompletedThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$68 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$68;
}

@end

void RxCompletableTest_$68_init(RxCompletableTest_$68 *self) {
  NSObject_init(self);
}

RxCompletableTest_$68 *new_RxCompletableTest_$68_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$68, init)
}

RxCompletableTest_$68 *create_RxCompletableTest_$68_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$68, init)
}

@implementation RxCompletableTest_$69

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnDisposeNormalDoesntCall" };
  static const J2ObjcClassInfo _RxCompletableTest_$69 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$69;
}

@end

void RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$69 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$69 *new_RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$69, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$69 *create_RxCompletableTest_$69_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$69, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$70

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnDisposeErrorDoesntCall" };
  static const J2ObjcClassInfo _RxCompletableTest_$70 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$70;
}

@end

void RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$70 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$70 *new_RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$70, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$70 *create_RxCompletableTest_$70_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$70, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$71

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnDisposeChildCancels" };
  static const J2ObjcClassInfo _RxCompletableTest_$71 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$71;
}

@end

void RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$71 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$71 *new_RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$71, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$71 *create_RxCompletableTest_$71_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$71, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$72

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((id<RxSubscription>) nil_chk(d)) unsubscribe];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$72_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxCompletableTest;", "doOnDisposeChildCancels" };
  static const J2ObjcClassInfo _RxCompletableTest_$72 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxCompletableTest_$72;
}

@end

void RxCompletableTest_$72_init(RxCompletableTest_$72 *self) {
  NSObject_init(self);
}

RxCompletableTest_$72 *new_RxCompletableTest_$72_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$72, init)
}

RxCompletableTest_$72 *create_RxCompletableTest_$72_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$72, init)
}

@implementation RxCompletableTest_$73

- (void)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$73_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "doOnDisposeThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$73 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$73;
}

@end

void RxCompletableTest_$73_init(RxCompletableTest_$73 *self) {
  NSObject_init(self);
}

RxCompletableTest_$73 *new_RxCompletableTest_$73_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$73, init)
}

RxCompletableTest_$73 *create_RxCompletableTest_$73_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$73, init)
}

@implementation RxCompletableTest_$74

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((id<RxSubscription>) nil_chk(d)) unsubscribe];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$74_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxCompletableTest;", "doOnDisposeThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$74 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxCompletableTest_$74;
}

@end

void RxCompletableTest_$74_init(RxCompletableTest_$74 *self) {
  NSObject_init(self);
}

RxCompletableTest_$74 *new_RxCompletableTest_$74_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$74, init)
}

RxCompletableTest_$74 *create_RxCompletableTest_$74_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$74, init)
}

@implementation RxCompletableTest_$75

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "doOnErrorNoError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$75 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$75;
}

@end

void RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$75 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$error_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$75 *new_RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$75, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$75 *create_RxCompletableTest_$75_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$75, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$76

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "doOnErrorHasError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$76 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$76;
}

@end

void RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$76 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$76 *new_RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$76, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$76 *create_RxCompletableTest_$76_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$76, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$77

- (void)callWithId:(NSException *)e {
  @throw create_JavaLangIllegalStateException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$77_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "doOnErrorThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$77 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$77;
}

@end

void RxCompletableTest_$77_init(RxCompletableTest_$77 *self) {
  NSObject_init(self);
}

RxCompletableTest_$77 *new_RxCompletableTest_$77_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$77, init)
}

RxCompletableTest_$77 *create_RxCompletableTest_$77_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$77, init)
}

@implementation RxCompletableTest_$78

- (void)callWithId:(id<RxSubscription>)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnSubscribeNormal", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$78 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$78;
}

@end

void RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$78 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$78 *new_RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$78, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$78 *create_RxCompletableTest_$78_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$78, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$79

- (void)callWithId:(id<RxSubscription>)d {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$79_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LRxCompletableTest;", "doOnSubscribeThrows", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$79 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$79;
}

@end

void RxCompletableTest_$79_init(RxCompletableTest_$79 *self) {
  NSObject_init(self);
}

RxCompletableTest_$79 *new_RxCompletableTest_$79_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$79, init)
}

RxCompletableTest_$79 *create_RxCompletableTest_$79_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$79, init)
}

@implementation RxCompletableTest_$80

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnTerminateNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$80 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$80;
}

@end

void RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$80 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$80 *new_RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$80, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$80 *create_RxCompletableTest_$80_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$80, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$81

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnTerminateError" };
  static const J2ObjcClassInfo _RxCompletableTest_$81 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$81;
}

@end

void RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$81 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$81 *new_RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$81, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$81 *create_RxCompletableTest_$81_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$81, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$82

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$doneAfter_)) setWithBoolean:[((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) get]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$doneAfter_);
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$doneAfter_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "doAfterTerminateNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$82 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$82;
}

@end

void RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$82 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$doneAfter_, capture$0);
  JreStrongAssign(&self->val$complete_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$82 *new_RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$82, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxCompletableTest_$82 *create_RxCompletableTest_$82_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$82, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxCompletableTest_$83

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "doAfterTerminateNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$83 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$83;
}

@end

void RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$83 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$83 *new_RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$83, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$83 *create_RxCompletableTest_$83_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$83, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$84

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$doneAfter_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$doneAfter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$doneAfter_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "doAfterTerminateWithError" };
  static const J2ObjcClassInfo _RxCompletableTest_$84 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$84;
}

@end

void RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$84 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$doneAfter_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$84 *new_RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$84, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$84 *create_RxCompletableTest_$84_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$84, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$85

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)v {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$85_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletableSubscriber;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;", "liftReturnsNull" };
  static const J2ObjcClassInfo _RxCompletableTest_$85 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$85;
}

@end

void RxCompletableTest_$85_init(RxCompletableTest_$85 *self) {
  NSObject_init(self);
}

RxCompletableTest_$85 *new_RxCompletableTest_$85_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$85, init)
}

RxCompletableTest_$85 *create_RxCompletableTest_$85_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$85, init)
}

@implementation RxCompletableTest_$86

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$name_);
  RELEASE_(val$cdl_);
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "observeOnNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$86 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 8, -1, 9, -1, -1 };
  return &_RxCompletableTest_$86;
}

@end

void RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$86 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  JreStrongAssign(&self->val$name_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  JreStrongAssign(&self->val$err_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$86 *new_RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$86, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$86 *create_RxCompletableTest_$86_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$86, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$87

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$name_);
  RELEASE_(val$cdl_);
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "observeOnError" };
  static const J2ObjcClassInfo _RxCompletableTest_$87 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 3, 8, -1, 9, -1, -1 };
  return &_RxCompletableTest_$87;
}

@end

void RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$87 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  JreStrongAssign(&self->val$name_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  JreStrongAssign(&self->val$err_, capture$2);
  NSObject_init(self);
}

RxCompletableTest_$87 *new_RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$87, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$87 *create_RxCompletableTest_$87_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$87, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$88

- (JavaLangBoolean *)callWithId:(NSException *)e {
  return JavaLangBoolean_valueOfWithBoolean_([e isKindOfClass:[JavaLangIllegalStateException class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$88_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorCompleteFalse", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$88 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$88;
}

@end

void RxCompletableTest_$88_init(RxCompletableTest_$88 *self) {
  NSObject_init(self);
}

RxCompletableTest_$88 *new_RxCompletableTest_$88_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$88, init)
}

RxCompletableTest_$88 *create_RxCompletableTest_$88_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$88, init)
}

@implementation RxCompletableTest_$89

- (RxCompletable *)callWithId:(NSException *)e {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$89_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorResumeNextFunctionReturnsNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$89 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$89;
}

@end

void RxCompletableTest_$89_init(RxCompletableTest_$89 *self) {
  NSObject_init(self);
}

RxCompletableTest_$89 *new_RxCompletableTest_$89_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$89, init)
}

RxCompletableTest_$89 *create_RxCompletableTest_$89_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$89, init)
}

@implementation RxCompletableTest_$90

- (RxCompletable *)callWithId:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$90_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorResumeNextFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$90 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$90;
}

@end

void RxCompletableTest_$90_init(RxCompletableTest_$90 *self) {
  NSObject_init(self);
}

RxCompletableTest_$90 *new_RxCompletableTest_$90_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$90, init)
}

RxCompletableTest_$90 *create_RxCompletableTest_$90_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$90, init)
}

@implementation RxCompletableTest_$91

- (RxCompletable *)callWithId:(NSException *)v {
  return ((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$91_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorResumeNextNormal", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$91 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$91;
}

@end

void RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest_$91 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$91 *new_RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$91, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$91 *create_RxCompletableTest_$91_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$91, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$92

- (RxCompletable *)callWithId:(NSException *)v {
  return ((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$92_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorResumeNextError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$92 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$92;
}

@end

void RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest_$92 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$92 *new_RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$92, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$92 *create_RxCompletableTest_$92_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$92, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$93

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
  JavaLangThread_sleepWithLong_(100);
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "repeatNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$93 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$93;
}

@end

void RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$93 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$93 *new_RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$93, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$93 *create_RxCompletableTest_$93_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$93, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$94

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(d, w) withLong:550 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
}

- (void)onCompleted {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "repeatNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$94 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, -1, -1 };
  return &_RxCompletableTest_$94;
}

@end

void RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$94 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$94 *new_RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$94, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$94 *create_RxCompletableTest_$94_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$94, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$94_$1

- (void)call {
  @try {
    [((id<RxSubscription>) nil_chk(val$d_)) unsubscribe];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(val$w_)) unsubscribe];
  }
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0
                withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$d_);
  RELEASE_(val$w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscription:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$d_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$w_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;LRxScheduler_Worker;", "LRxCompletableTest_$94;", "onSubscribeWithRxSubscription:" };
  static const J2ObjcClassInfo _RxCompletableTest_$94_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$94_$1;
}

@end

void RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(RxCompletableTest_$94_$1 *self, id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  JreStrongAssign(&self->val$d_, capture$0);
  JreStrongAssign(&self->val$w_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$94_$1 *new_RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$94_$1, initWithRxSubscription_withRxScheduler_Worker_, capture$0, capture$1)
}

RxCompletableTest_$94_$1 *create_RxCompletableTest_$94_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$94_$1, initWithRxSubscription_withRxScheduler_Worker_, capture$0, capture$1)
}

@implementation RxCompletableTest_$95

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "repeat5Times", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$95 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$95;
}

@end

void RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$95 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$95 *new_RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$95, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$95 *create_RxCompletableTest_$95_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$95, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$96

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "repeat1Time", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$96 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$96;
}

@end

void RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$96 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$96 *new_RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$96, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$96 *create_RxCompletableTest_$96_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$96, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$97

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "repeat0Time", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$97 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$97;
}

@end

void RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$97 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$97 *new_RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$97, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$97 *create_RxCompletableTest_$97_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$97, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$98

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) decrementAndGet] != 0) {
    @throw create_RxExceptionsTestException_init();
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "retry5Times" };
  static const J2ObjcClassInfo _RxCompletableTest_$98 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$98;
}

@end

void RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$98 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$98 *new_RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$98, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$98 *create_RxCompletableTest_$98_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$98, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$99

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)n
                         withId:(NSException *)e {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(n)) intValue] < 5);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$99_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxCompletableTest;", "retryBiPredicate5Times", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$99 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$99;
}

@end

void RxCompletableTest_$99_init(RxCompletableTest_$99 *self) {
  NSObject_init(self);
}

RxCompletableTest_$99 *new_RxCompletableTest_$99_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$99, init)
}

RxCompletableTest_$99 *create_RxCompletableTest_$99_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$99, init)
}

@implementation RxCompletableTest_$100

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) decrementAndGet] != 0) {
    @throw create_RxExceptionsTestException_init();
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "retryTimes5Normal" };
  static const J2ObjcClassInfo _RxCompletableTest_$100 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$100;
}

@end

void RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$100 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$100 *new_RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$100, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$100 *create_RxCompletableTest_$100_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$100, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$101

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) decrementAndGet] != 0) {
    @throw create_RxExceptionsTestException_init();
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "retryWhen5Times" };
  static const J2ObjcClassInfo _RxCompletableTest_$101 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$101;
}

@end

void RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$101 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$101 *new_RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$101, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$101 *create_RxCompletableTest_$101_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$101, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$102

- (RxObservable *)callWithId:(RxObservable *)o {
  return o;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$102_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<Ljava/lang/Object;>;", "LRxCompletableTest;", "retryWhen5Times", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$102 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$102;
}

@end

void RxCompletableTest_$102_init(RxCompletableTest_$102 *self) {
  NSObject_init(self);
}

RxCompletableTest_$102 *new_RxCompletableTest_$102_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$102, init)
}

RxCompletableTest_$102 *create_RxCompletableTest_$102_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$102, init)
}

@implementation RxCompletableTest_$103

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribe" };
  static const J2ObjcClassInfo _RxCompletableTest_$103 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$103;
}

@end

void RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$103 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$103 *new_RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$103, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$103 *create_RxCompletableTest_$103_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$103, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$104

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribeDispose" };
  static const J2ObjcClassInfo _RxCompletableTest_$104 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$104;
}

@end

void RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$104 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$104 *new_RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$104, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$104 *create_RxCompletableTest_$104_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$104, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$105

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribeTwoCallbacksNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$105 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$105;
}

@end

void RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$105 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$105 *new_RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$105, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$105 *create_RxCompletableTest_$105_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$105, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$106

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "subscribeTwoCallbacksNormal", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$106 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$106;
}

@end

void RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$106 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$106 *new_RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$106, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$106 *create_RxCompletableTest_$106_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$106, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$107

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribeTwoCallbacksError" };
  static const J2ObjcClassInfo _RxCompletableTest_$107 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$107;
}

@end

void RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$107 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$107 *new_RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$107, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$107 *create_RxCompletableTest_$107_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$107, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$108

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "subscribeTwoCallbacksError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$108 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$108;
}

@end

void RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$108 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$108 *new_RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$108, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$108 *create_RxCompletableTest_$108_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$108, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$109

- (void)callWithId:(NSException *)throwable {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$109_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "subscribeTwoCallbacksFirstNull", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$109 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$109;
}

@end

void RxCompletableTest_$109_init(RxCompletableTest_$109 *self) {
  NSObject_init(self);
}

RxCompletableTest_$109 *new_RxCompletableTest_$109_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$109, init)
}

RxCompletableTest_$109 *create_RxCompletableTest_$109_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$109, init)
}

@implementation RxCompletableTest_$110

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$110_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeTwoCallbacksSecondNull" };
  static const J2ObjcClassInfo _RxCompletableTest_$110 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$110;
}

@end

void RxCompletableTest_$110_init(RxCompletableTest_$110 *self) {
  NSObject_init(self);
}

RxCompletableTest_$110 *new_RxCompletableTest_$110_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$110, init)
}

RxCompletableTest_$110 *create_RxCompletableTest_$110_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$110, init)
}

@implementation RxCompletableTest_$111

- (void)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$111_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeTwoCallbacksCompleteThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$111 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$111;
}

@end

void RxCompletableTest_$111_init(RxCompletableTest_$111 *self) {
  NSObject_init(self);
}

RxCompletableTest_$111 *new_RxCompletableTest_$111_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$111, init)
}

RxCompletableTest_$111 *create_RxCompletableTest_$111_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$111, init)
}

@implementation RxCompletableTest_$112

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "subscribeTwoCallbacksCompleteThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$112 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$112;
}

@end

void RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$112 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$112 *new_RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$112, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$112 *create_RxCompletableTest_$112_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$112, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$113

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$113_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeTwoCallbacksOnErrorThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$113 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$113;
}

@end

void RxCompletableTest_$113_init(RxCompletableTest_$113 *self) {
  NSObject_init(self);
}

RxCompletableTest_$113 *new_RxCompletableTest_$113_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$113, init)
}

RxCompletableTest_$113 *create_RxCompletableTest_$113_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$113, init)
}

@implementation RxCompletableTest_$114

- (void)callWithId:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$114_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "subscribeTwoCallbacksOnErrorThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$114 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$114;
}

@end

void RxCompletableTest_$114_init(RxCompletableTest_$114 *self) {
  NSObject_init(self);
}

RxCompletableTest_$114 *new_RxCompletableTest_$114_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$114, init)
}

RxCompletableTest_$114 *create_RxCompletableTest_$114_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$114, init)
}

@implementation RxCompletableTest_$115

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribeActionNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$115 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$115;
}

@end

void RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$115 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$115 *new_RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$115, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$115 *create_RxCompletableTest_$115_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$115, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$116

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "subscribeActionError" };
  static const J2ObjcClassInfo _RxCompletableTest_$116 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$116;
}

@end

void RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$116 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$116 *new_RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$116, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$116 *create_RxCompletableTest_$116_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$116, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$117

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_unsubscribed()];
  [s onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxCompletableTest;", "subscribeOnNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$117 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$117;
}

@end

void RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$117 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$name_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$117 *new_RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$117, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$117 *create_RxCompletableTest_$117_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$117, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$118

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((id<RxCompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_unsubscribed()];
  [s onErrorWithNSException:create_RxExceptionsTestException_init()];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxCompletableTest;", "subscribeOnError" };
  static const J2ObjcClassInfo _RxCompletableTest_$118 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxCompletableTest_$118;
}

@end

void RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$118 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$name_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$118 *new_RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$118, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$118 *create_RxCompletableTest_$118_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$118, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$119

- (void)call {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_)) subscribe];
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$119_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeEmptyOnError" };
  static const J2ObjcClassInfo _RxCompletableTest_$119 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$119;
}

@end

void RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest_$119 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$119 *new_RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$119, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$119 *create_RxCompletableTest_$119_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$119, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$120

- (void)call {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$120_$1_init()];
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$120_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeOneActionOnError" };
  static const J2ObjcClassInfo _RxCompletableTest_$120 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$120;
}

@end

void RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest_$120 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$120 *new_RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$120, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$120 *create_RxCompletableTest_$120_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$120, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$120_$1

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$120_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest_$120;", "call" };
  static const J2ObjcClassInfo _RxCompletableTest_$120_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$120_$1;
}

@end

void RxCompletableTest_$120_$1_init(RxCompletableTest_$120_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_$120_$1 *new_RxCompletableTest_$120_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$120_$1, init)
}

RxCompletableTest_$120_$1 *create_RxCompletableTest_$120_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$120_$1, init)
}

@implementation RxCompletableTest_$121

- (void)call {
  [((RxCompletable *) nil_chk(((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$121_$1_init()];
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$121_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeOneActionThrowFromOnCompleted" };
  static const J2ObjcClassInfo _RxCompletableTest_$121 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$121;
}

@end

void RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest_$121 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$121 *new_RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$121, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$121 *create_RxCompletableTest_$121_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$121, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$121_$1

- (void)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$121_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest_$121;", "call" };
  static const J2ObjcClassInfo _RxCompletableTest_$121_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$121_$1;
}

@end

void RxCompletableTest_$121_$1_init(RxCompletableTest_$121_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_$121_$1 *new_RxCompletableTest_$121_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$121_$1, init)
}

RxCompletableTest_$121_$1 *create_RxCompletableTest_$121_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$121_$1, init)
}

@implementation RxCompletableTest_$122

- (void)call {
  [((RxCompletable *) nil_chk(((RxCompletableTest_ErrorCompletable *) nil_chk(this$0_->error_))->completable_)) subscribeWithRxFunctionsAction0:create_RxCompletableTest_$122_$1_init() withRxFunctionsAction1:create_RxCompletableTest_$122_$2_init()];
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$ {
  RxCompletableTest_$122_initWithRxCompletableTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableTest;", "subscribeTwoActionsThrowFromOnError" };
  static const J2ObjcClassInfo _RxCompletableTest_$122 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$122;
}

@end

void RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest_$122 *self, RxCompletableTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxCompletableTest_$122 *new_RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$122, initWithRxCompletableTest_, outer$)
}

RxCompletableTest_$122 *create_RxCompletableTest_$122_initWithRxCompletableTest_(RxCompletableTest *outer$) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$122, initWithRxCompletableTest_, outer$)
}

@implementation RxCompletableTest_$122_$1

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$122_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest_$122;", "call" };
  static const J2ObjcClassInfo _RxCompletableTest_$122_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$122_$1;
}

@end

void RxCompletableTest_$122_$1_init(RxCompletableTest_$122_$1 *self) {
  NSObject_init(self);
}

RxCompletableTest_$122_$1 *new_RxCompletableTest_$122_$1_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$122_$1, init)
}

RxCompletableTest_$122_$1 *create_RxCompletableTest_$122_$1_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$122_$1, init)
}

@implementation RxCompletableTest_$122_$2

- (void)callWithId:(NSException *)throwable {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$122_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest_$122;", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$122_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 0, 3, -1 };
  return &_RxCompletableTest_$122_$2;
}

@end

void RxCompletableTest_$122_$2_init(RxCompletableTest_$122_$2 *self) {
  NSObject_init(self);
}

RxCompletableTest_$122_$2 *new_RxCompletableTest_$122_$2_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$122_$2, init)
}

RxCompletableTest_$122_$2 *create_RxCompletableTest_$122_$2_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$122_$2, init)
}

@implementation RxCompletableTest_$123

- (void)callWithId:(JavaLangInteger *)integer {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$123_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "propagateExceptionSubscribeOneAction", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$123 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$123;
}

@end

void RxCompletableTest_$123_init(RxCompletableTest_$123 *self) {
  NSObject_init(self);
}

RxCompletableTest_$123 *new_RxCompletableTest_$123_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$123, init)
}

RxCompletableTest_$123 *create_RxCompletableTest_$123_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$123, init)
}

@implementation RxCompletableTest_$124

- (void)callWithId:(JavaLangInteger *)integer {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$124_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "propagateExceptionSubscribeOneActionThrowFromOnSuccess", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$124 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$124;
}

@end

void RxCompletableTest_$124_init(RxCompletableTest_$124 *self) {
  NSObject_init(self);
}

RxCompletableTest_$124 *new_RxCompletableTest_$124_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$124, init)
}

RxCompletableTest_$124 *create_RxCompletableTest_$124_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$124, init)
}

@implementation RxCompletableTest_$125

- (id)call {
  JavaLangThread_sleepWithLong_(50);
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$125_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;", "timeoutTimerCancelled", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$125 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$125;
}

@end

void RxCompletableTest_$125_init(RxCompletableTest_$125 *self) {
  NSObject_init(self);
}

RxCompletableTest_$125 *new_RxCompletableTest_$125_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$125, init)
}

RxCompletableTest_$125 *create_RxCompletableTest_$125_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$125, init)
}

@implementation RxCompletableTest_$126

- (RxObservable *)callWithId:(RxCompletable *)c {
  return [((RxCompletable *) nil_chk(c)) toObservable];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$126_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletable;", "(Lrx/Completable;)Lrx/Observable<Ljava/lang/Object;>;", "LRxCompletableTest;", "toNormal", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$126 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxCompletableTest_$126;
}

@end

void RxCompletableTest_$126_init(RxCompletableTest_$126 *self) {
  NSObject_init(self);
}

RxCompletableTest_$126 *new_RxCompletableTest_$126_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$126, init)
}

RxCompletableTest_$126 *create_RxCompletableTest_$126_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$126, init)
}

@implementation RxCompletableTest_$127

- (void)callWithId:(id)e {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$127_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "toNormal", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$127 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$127;
}

@end

void RxCompletableTest_$127_init(RxCompletableTest_$127 *self) {
  NSObject_init(self);
}

RxCompletableTest_$127 *new_RxCompletableTest_$127_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$127, init)
}

RxCompletableTest_$127 *create_RxCompletableTest_$127_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$127, init)
}

@implementation RxCompletableTest_$128

- (void)callWithId:(id)e {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$128_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "toObservableNormal", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$128 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$128;
}

@end

void RxCompletableTest_$128_init(RxCompletableTest_$128 *self) {
  NSObject_init(self);
}

RxCompletableTest_$128 *new_RxCompletableTest_$128_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$128, init)
}

RxCompletableTest_$128 *create_RxCompletableTest_$128_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$128, init)
}

@implementation RxCompletableTest_$129

- (void)callWithId:(id)e {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$129_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxCompletableTest;", "toObservableError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$129 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$129;
}

@end

void RxCompletableTest_$129_init(RxCompletableTest_$129 *self) {
  NSObject_init(self);
}

RxCompletableTest_$129 *new_RxCompletableTest_$129_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$129, init)
}

RxCompletableTest_$129 *create_RxCompletableTest_$129_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$129, init)
}

@implementation RxCompletableTest_$130

- (void)onSuccessWithId:(id)value {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$v_)) setWithId:value];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)error {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$e_)) setWithId:error];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$v_);
  RELEASE_(val$cdl_);
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSuccessWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$v_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$e_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<TT;>;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "getWithRxSingle:", "Lrx/SingleSubscriber<TT;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$130 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 3, 3, 9, -1, 10, 11, -1 };
  return &_RxCompletableTest_$130;
}

@end

void RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$130 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  JreStrongAssign(&self->val$v_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  JreStrongAssign(&self->val$e_, capture$2);
  RxSingleSubscriber_init(self);
}

RxCompletableTest_$130 *new_RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$130, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxCompletableTest_$130 *create_RxCompletableTest_$130_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$130, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

@implementation RxCompletableTest_$131

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$131_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "toSingleSupplierNormal", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$131 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$131;
}

@end

void RxCompletableTest_$131_init(RxCompletableTest_$131 *self) {
  NSObject_init(self);
}

RxCompletableTest_$131 *new_RxCompletableTest_$131_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$131, init)
}

RxCompletableTest_$131 *create_RxCompletableTest_$131_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$131, init)
}

@implementation RxCompletableTest_$132

- (id)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$132_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "toSingleSupplierError", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$132 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$132;
}

@end

void RxCompletableTest_$132_init(RxCompletableTest_$132 *self) {
  NSObject_init(self);
}

RxCompletableTest_$132 *new_RxCompletableTest_$132_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$132, init)
}

RxCompletableTest_$132 *create_RxCompletableTest_$132_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$132, init)
}

@implementation RxCompletableTest_$133

- (id)call {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$133_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "toSingleSupplierReturnsNull", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$133 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$133;
}

@end

void RxCompletableTest_$133_init(RxCompletableTest_$133 *self) {
  NSObject_init(self);
}

RxCompletableTest_$133 *new_RxCompletableTest_$133_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$133, init)
}

RxCompletableTest_$133 *create_RxCompletableTest_$133_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$133, init)
}

@implementation RxCompletableTest_$134

- (id)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$134_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "toSingleSupplierThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$134 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$134;
}

@end

void RxCompletableTest_$134_init(RxCompletableTest_$134 *self) {
  NSObject_init(self);
}

RxCompletableTest_$134 *new_RxCompletableTest_$134_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$134, init)
}

RxCompletableTest_$134 *create_RxCompletableTest_$134_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$134, init)
}

@implementation RxCompletableTest_$135

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$name_)) setWithId:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$name_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxCompletableTest;", "unsubscribeOnNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$135 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxCompletableTest_$135;
}

@end

void RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxCompletableTest_$135 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$name_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$135 *new_RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$135, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxCompletableTest_$135 *create_RxCompletableTest_$135_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$135, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxCompletableTest_$136

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(d, w) withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$136_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxCompletableTest;", "unsubscribeOnNormal" };
  static const J2ObjcClassInfo _RxCompletableTest_$136 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxCompletableTest_$136;
}

@end

void RxCompletableTest_$136_init(RxCompletableTest_$136 *self) {
  NSObject_init(self);
}

RxCompletableTest_$136 *new_RxCompletableTest_$136_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$136, init)
}

RxCompletableTest_$136 *create_RxCompletableTest_$136_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$136, init)
}

@implementation RxCompletableTest_$136_$1

- (void)call {
  @try {
    [((id<RxSubscription>) nil_chk(val$d_)) unsubscribe];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(val$w_)) unsubscribe];
  }
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0
                withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$d_);
  RELEASE_(val$w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscription:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$d_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$w_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;LRxScheduler_Worker;", "LRxCompletableTest_$136;", "onSubscribeWithRxSubscription:" };
  static const J2ObjcClassInfo _RxCompletableTest_$136_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$136_$1;
}

@end

void RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(RxCompletableTest_$136_$1 *self, id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  JreStrongAssign(&self->val$d_, capture$0);
  JreStrongAssign(&self->val$w_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$136_$1 *new_RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$136_$1, initWithRxSubscription_withRxScheduler_Worker_, capture$0, capture$1)
}

RxCompletableTest_$136_$1 *create_RxCompletableTest_$136_$1_initWithRxSubscription_withRxScheduler_Worker_(id<RxSubscription> capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$136_$1, initWithRxSubscription_withRxScheduler_Worker_, capture$0, capture$1)
}

@implementation RxCompletableTest_$137

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "ambArrayOneFires" };
  static const J2ObjcClassInfo _RxCompletableTest_$137 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$137;
}

@end

void RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$137 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$137 *new_RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$137, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$137 *create_RxCompletableTest_$137_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$137, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$138

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$138_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "ambArrayOneFiresError" };
  static const J2ObjcClassInfo _RxCompletableTest_$138 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$138;
}

@end

void RxCompletableTest_$138_init(RxCompletableTest_$138 *self) {
  NSObject_init(self);
}

RxCompletableTest_$138 *new_RxCompletableTest_$138_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$138, init)
}

RxCompletableTest_$138 *create_RxCompletableTest_$138_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$138, init)
}

@implementation RxCompletableTest_$139

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$complete_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "ambArrayOneFiresError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$139 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$139;
}

@end

void RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$139 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$139 *new_RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$139, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$139 *create_RxCompletableTest_$139_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$139, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$140

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "ambArraySecondFires" };
  static const J2ObjcClassInfo _RxCompletableTest_$140 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$140;
}

@end

void RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$140 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$140 *new_RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$140, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$140 *create_RxCompletableTest_$140_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$140, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$141

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$141_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "ambArraySecondFiresError" };
  static const J2ObjcClassInfo _RxCompletableTest_$141 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$141;
}

@end

void RxCompletableTest_$141_init(RxCompletableTest_$141 *self) {
  NSObject_init(self);
}

RxCompletableTest_$141 *new_RxCompletableTest_$141_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$141, init)
}

RxCompletableTest_$141 *create_RxCompletableTest_$141_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$141, init)
}

@implementation RxCompletableTest_$142

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$complete_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "ambArraySecondFiresError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$142 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$142;
}

@end

void RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$142 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$142 *new_RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$142, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$142 *create_RxCompletableTest_$142_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$142, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$143

- (id<JavaUtilIterator>)iterator {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$143_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "ambIterableIteratorNull", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$143 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$143;
}

@end

void RxCompletableTest_$143_init(RxCompletableTest_$143 *self) {
  NSObject_init(self);
}

RxCompletableTest_$143 *new_RxCompletableTest_$143_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$143, init)
}

RxCompletableTest_$143 *create_RxCompletableTest_$143_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$143, init)
}

@implementation RxCompletableTest_$144

- (id<JavaUtilIterator>)iterator {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$144_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lrx/Completable;>;", "LRxCompletableTest;", "ambIterableIterableThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$144 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxCompletableTest_$144;
}

@end

void RxCompletableTest_$144_init(RxCompletableTest_$144 *self) {
  NSObject_init(self);
}

RxCompletableTest_$144 *new_RxCompletableTest_$144_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$144, init)
}

RxCompletableTest_$144 *create_RxCompletableTest_$144_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$144, init)
}

@implementation RxCompletableTest_$145

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "ambWithArrayOneFires" };
  static const J2ObjcClassInfo _RxCompletableTest_$145 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$145;
}

@end

void RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$145 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$145 *new_RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$145, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$145 *create_RxCompletableTest_$145_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$145, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$146

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$146_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "ambWithArrayOneFiresError" };
  static const J2ObjcClassInfo _RxCompletableTest_$146 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$146;
}

@end

void RxCompletableTest_$146_init(RxCompletableTest_$146 *self) {
  NSObject_init(self);
}

RxCompletableTest_$146 *new_RxCompletableTest_$146_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$146, init)
}

RxCompletableTest_$146 *create_RxCompletableTest_$146_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$146, init)
}

@implementation RxCompletableTest_$147

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$complete_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "ambWithArrayOneFiresError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$147 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$147;
}

@end

void RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$147 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$147 *new_RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$147, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$147 *create_RxCompletableTest_$147_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$147, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$148

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$complete_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "ambWithArraySecondFires" };
  static const J2ObjcClassInfo _RxCompletableTest_$148 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxCompletableTest_$148;
}

@end

void RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$148 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$148 *new_RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$148, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxCompletableTest_$148 *create_RxCompletableTest_$148_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$148, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxCompletableTest_$149

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$149_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "ambWithArraySecondFiresError" };
  static const J2ObjcClassInfo _RxCompletableTest_$149 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxCompletableTest_$149;
}

@end

void RxCompletableTest_$149_init(RxCompletableTest_$149 *self) {
  NSObject_init(self);
}

RxCompletableTest_$149 *new_RxCompletableTest_$149_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$149, init)
}

RxCompletableTest_$149 *create_RxCompletableTest_$149_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$149, init)
}

@implementation RxCompletableTest_$150

- (void)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$complete_)) setWithId:e];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$complete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$complete_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxCompletableTest;", "ambWithArraySecondFiresError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$150 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$150;
}

@end

void RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$150 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$complete_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$150 *new_RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$150, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$150 *create_RxCompletableTest_$150_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$150, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$151

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:[((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_)) get] == 0];
  return nil;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "startWithCompletableNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$151 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$151;
}

@end

void RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$151 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$151 *new_RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$151, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

RxCompletableTest_$151 *create_RxCompletableTest_$151_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$151, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

@implementation RxCompletableTest_$152

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:[((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_)) get] == 0];
  return JavaLangInteger_valueOfWithInt_(1);
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "startWithFlowableNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$152 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$152;
}

@end

void RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$152 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$152 *new_RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$152, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

RxCompletableTest_$152 *create_RxCompletableTest_$152_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$152, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

@implementation RxCompletableTest_$153

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:[((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_)) get] == 0];
  return nil;
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "andThenCompletableNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$153 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$153;
}

@end

void RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$153 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$153 *new_RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$153, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

RxCompletableTest_$153 *create_RxCompletableTest_$153_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$153, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

@implementation RxCompletableTest_$154

- (id)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$run_)) setWithBoolean:[((RxCompletableTest_NormalCompletable *) nil_chk(this$0_->normal_)) get] == 0];
  return JavaLangInteger_valueOfWithInt_(1);
}

- (instancetype)initWithRxCompletableTest:(RxCompletableTest *)outer$
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableTest:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxCompletableTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxCompletableTest;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxCompletableTest;", "andThenFlowableNormal", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$154 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$154;
}

@end

void RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest_$154 *self, RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$154 *new_RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$154, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

RxCompletableTest_$154 *create_RxCompletableTest_$154_initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_(RxCompletableTest *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$154, initWithRxCompletableTest_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

@implementation RxCompletableTest_$155

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$155_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingFactoryThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$155 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$155;
}

@end

void RxCompletableTest_$155_init(RxCompletableTest_$155 *self) {
  NSObject_init(self);
}

RxCompletableTest_$155 *new_RxCompletableTest_$155_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$155, init)
}

RxCompletableTest_$155 *create_RxCompletableTest_$155_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$155, init)
}

@implementation RxCompletableTest_$156

- (RxCompletable *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$156_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$156 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$156;
}

@end

void RxCompletableTest_$156_init(RxCompletableTest_$156 *self) {
  NSObject_init(self);
}

RxCompletableTest_$156 *new_RxCompletableTest_$156_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$156, init)
}

RxCompletableTest_$156 *create_RxCompletableTest_$156_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$156, init)
}

@implementation RxCompletableTest_$157

- (void)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$157_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryAndDisposerThrow", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$157 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$157;
}

@end

void RxCompletableTest_$157_init(RxCompletableTest_$157 *self) {
  NSObject_init(self);
}

RxCompletableTest_$157 *new_RxCompletableTest_$157_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$157, init)
}

RxCompletableTest_$157 *create_RxCompletableTest_$157_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$157, init)
}

@implementation RxCompletableTest_$158

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$158_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingFactoryAndDisposerThrow", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$158 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$158;
}

@end

void RxCompletableTest_$158_init(RxCompletableTest_$158 *self) {
  NSObject_init(self);
}

RxCompletableTest_$158 *new_RxCompletableTest_$158_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$158, init)
}

RxCompletableTest_$158 *create_RxCompletableTest_$158_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$158, init)
}

@implementation RxCompletableTest_$159

- (RxCompletable *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$159_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryAndDisposerThrow", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$159 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$159;
}

@end

void RxCompletableTest_$159_init(RxCompletableTest_$159 *self) {
  NSObject_init(self);
}

RxCompletableTest_$159 *new_RxCompletableTest_$159_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$159, init)
}

RxCompletableTest_$159 *create_RxCompletableTest_$159_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$159, init)
}

@implementation RxCompletableTest_$160

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$160_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingFactoryReturnsNull", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$160 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$160;
}

@end

void RxCompletableTest_$160_init(RxCompletableTest_$160 *self) {
  NSObject_init(self);
}

RxCompletableTest_$160 *new_RxCompletableTest_$160_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$160, init)
}

RxCompletableTest_$160 *create_RxCompletableTest_$160_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$160, init)
}

@implementation RxCompletableTest_$161

- (RxCompletable *)callWithId:(JavaLangInteger *)t {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$161_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryReturnsNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$161 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$161;
}

@end

void RxCompletableTest_$161_init(RxCompletableTest_$161 *self) {
  NSObject_init(self);
}

RxCompletableTest_$161 *new_RxCompletableTest_$161_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$161, init)
}

RxCompletableTest_$161 *create_RxCompletableTest_$161_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$161, init)
}

@implementation RxCompletableTest_$162

- (void)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$162_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryReturnsNullAndDisposerThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$162 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$162;
}

@end

void RxCompletableTest_$162_init(RxCompletableTest_$162 *self) {
  NSObject_init(self);
}

RxCompletableTest_$162 *new_RxCompletableTest_$162_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$162, init)
}

RxCompletableTest_$162 *create_RxCompletableTest_$162_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$162, init)
}

@implementation RxCompletableTest_$163

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$163_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "usingFactoryReturnsNullAndDisposerThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$163 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$163;
}

@end

void RxCompletableTest_$163_init(RxCompletableTest_$163 *self) {
  NSObject_init(self);
}

RxCompletableTest_$163 *new_RxCompletableTest_$163_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$163, init)
}

RxCompletableTest_$163 *create_RxCompletableTest_$163_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$163, init)
}

@implementation RxCompletableTest_$164

- (RxCompletable *)callWithId:(JavaLangInteger *)t {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$164_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxCompletableTest;", "usingFactoryReturnsNullAndDisposerThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$164 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$164;
}

@end

void RxCompletableTest_$164_init(RxCompletableTest_$164 *self) {
  NSObject_init(self);
}

RxCompletableTest_$164 *new_RxCompletableTest_$164_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$164, init)
}

RxCompletableTest_$164 *create_RxCompletableTest_$164_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$164, init)
}

@implementation RxCompletableTest_$165

- (void)call {
  if ([((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscriptionRef_)) get])) isUnsubscribed]) {
    [val$subscriptionRef_ setWithId:nil];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxCompletableTest;", "subscribeActionReportsUnsubscribedAfter" };
  static const J2ObjcClassInfo _RxCompletableTest_$165 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxCompletableTest_$165;
}

@end

void RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$165 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$subscriptionRef_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$165 *new_RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$165, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$165 *create_RxCompletableTest_$165_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$165, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$166

- (void)call {
  if ([((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscriptionRef_)) get])) isUnsubscribed]) {
    [val$subscriptionRef_ setWithId:nil];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxCompletableTest;", "subscribeAction2ReportsUnsubscribedAfter" };
  static const J2ObjcClassInfo _RxCompletableTest_$166 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxCompletableTest_$166;
}

@end

void RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$166 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$subscriptionRef_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$166 *new_RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$166, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$166 *create_RxCompletableTest_$166_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$166, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$167

- (void)callWithId:(NSException *)e {
  if ([((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscriptionRef_)) get])) isUnsubscribed]) {
    [val$subscriptionRef_ setWithId:nil];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxCompletableTest;", "subscribeAction2ReportsUnsubscribedOnErrorAfter", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$167 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$167;
}

@end

void RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(RxCompletableTest_$167 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$subscriptionRef_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$167 *new_RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$167, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxCompletableTest_$167 *create_RxCompletableTest_$167_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$167, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxCompletableTest_$168

- (void)onCompleted {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$168_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithRxSubscription:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LRxSubscription;", "LRxCompletableTest;", "safeOnCompleteThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$168 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxCompletableTest_$168;
}

@end

void RxCompletableTest_$168_init(RxCompletableTest_$168 *self) {
  NSObject_init(self);
}

RxCompletableTest_$168 *new_RxCompletableTest_$168_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$168, init)
}

RxCompletableTest_$168 *create_RxCompletableTest_$168_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$168, init)
}

@implementation RxCompletableTest_$169

- (void)onCompleted {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$169_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxCompletableTest;", "safeOnCompleteThrowsRegularSubscriber", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$169 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$169;
}

@end

void RxCompletableTest_$169_init(RxCompletableTest_$169 *self) {
  RxSubscriber_init(self);
}

RxCompletableTest_$169 *new_RxCompletableTest_$169_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$169, init)
}

RxCompletableTest_$169 *create_RxCompletableTest_$169_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$169, init)
}

@implementation RxCompletableTest_$170

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$170_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithRxSubscription:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LRxSubscription;", "LRxCompletableTest;", "safeOnErrorThrows" };
  static const J2ObjcClassInfo _RxCompletableTest_$170 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxCompletableTest_$170;
}

@end

void RxCompletableTest_$170_init(RxCompletableTest_$170 *self) {
  NSObject_init(self);
}

RxCompletableTest_$170 *new_RxCompletableTest_$170_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$170, init)
}

RxCompletableTest_$170 *create_RxCompletableTest_$170_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$170, init)
}

@implementation RxCompletableTest_$171

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

- (void)onNextWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$171_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxCompletableTest;", "safeOnErrorThrowsRegularSubscriber", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$171 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$171;
}

@end

void RxCompletableTest_$171_init(RxCompletableTest_$171 *self) {
  RxSubscriber_init(self);
}

RxCompletableTest_$171 *new_RxCompletableTest_$171_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$171, init)
}

RxCompletableTest_$171 *create_RxCompletableTest_$171_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$171, init)
}

@implementation RxCompletableTest_$172

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [((id<RxCompletableSubscriber>) nil_chk(s)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$172_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;", "testHookSubscribeStart" };
  static const J2ObjcClassInfo _RxCompletableTest_$172 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$172;
}

@end

void RxCompletableTest_$172_init(RxCompletableTest_$172 *self) {
  NSObject_init(self);
}

RxCompletableTest_$172 *new_RxCompletableTest_$172_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$172, init)
}

RxCompletableTest_$172 *create_RxCompletableTest_$172_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$172, init)
}

@implementation RxCompletableTest_$173

- (void)callWithId:(id<RxCompletableSubscriber>)s {
  [((id<RxCompletableSubscriber>) nil_chk(s)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$173_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxCompletableTest;", "testHookUnsafeSubscribeStart" };
  static const J2ObjcClassInfo _RxCompletableTest_$173 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxCompletableTest_$173;
}

@end

void RxCompletableTest_$173_init(RxCompletableTest_$173 *self) {
  NSObject_init(self);
}

RxCompletableTest_$173 *new_RxCompletableTest_$173_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$173, init)
}

RxCompletableTest_$173 *create_RxCompletableTest_$173_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$173, init)
}

@implementation RxCompletableTest_$174

- (void)onStart {
  [self onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$174_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "onStartCalledSafe", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$174 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$174;
}

@end

void RxCompletableTest_$174_init(RxCompletableTest_$174 *self) {
  RxObserversTestSubscriber_init(self);
}

RxCompletableTest_$174 *new_RxCompletableTest_$174_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$174, init)
}

RxCompletableTest_$174 *create_RxCompletableTest_$174_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$174, init)
}

@implementation RxCompletableTest_$175

- (void)onStart {
  [self onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$175_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxCompletableTest;", "onStartCalledUnsafeSafe", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$175 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxCompletableTest_$175;
}

@end

void RxCompletableTest_$175_init(RxCompletableTest_$175 *self) {
  RxObserversTestSubscriber_init(self);
}

RxCompletableTest_$175 *new_RxCompletableTest_$175_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$175, init)
}

RxCompletableTest_$175 *create_RxCompletableTest_$175_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$175, init)
}

@implementation RxCompletableTest_$176

- (JavaLangBoolean *)callWithId:(NSException *)t {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced inner failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCompletableTest_$176_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxCompletableTest;", "onErrorCompleteFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$176 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxCompletableTest_$176;
}

@end

void RxCompletableTest_$176_init(RxCompletableTest_$176 *self) {
  NSObject_init(self);
}

RxCompletableTest_$176 *new_RxCompletableTest_$176_init() {
  J2OBJC_NEW_IMPL(RxCompletableTest_$176, init)
}

RxCompletableTest_$176 *create_RxCompletableTest_$176_init() {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$176, init)
}

@implementation RxCompletableTest_$177

- (id)callWithId:(RxCompletable *)completable {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$completableRef_)) setWithId:completable];
  return val$expectedResult_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                         withId:(id)capture$1 {
  RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completableRef_);
  RELEASE_(val$expectedResult_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completableRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$expectedResult_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletable;", "LJavaUtilConcurrentAtomicAtomicReference;LNSObject;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Completable;>;Ljava/lang/Object;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Completable;>;", "LRxCompletableTest;", "toFunctionReceivesObservableReturnsResult", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$177 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxCompletableTest_$177;
}

@end

void RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(RxCompletableTest_$177 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  JreStrongAssign(&self->val$completableRef_, capture$0);
  JreStrongAssign(&self->val$expectedResult_, capture$1);
  NSObject_init(self);
}

RxCompletableTest_$177 *new_RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$177, initWithJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1)
}

RxCompletableTest_$177 *create_RxCompletableTest_$177_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$177, initWithJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1)
}

@implementation RxCompletableTest_$178

- (void)callWithId:(RxNotification *)notification {
  if ([((RxNotification *) nil_chk(notification)) isOnCompleted]) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$atomicInteger_)) incrementAndGet];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$atomicInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$atomicInteger_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<Ljava/lang/Object;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnEachCompleted", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$178 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$178;
}

@end

void RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$178 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$atomicInteger_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$178 *new_RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$178, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$178 *create_RxCompletableTest_$178_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$178, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxCompletableTest_$179

- (void)callWithId:(RxNotification *)notification {
  if ([((RxNotification *) nil_chk(notification)) isOnError]) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$atomicInteger_)) incrementAndGet];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$atomicInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$atomicInteger_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<Ljava/lang/Object;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxCompletableTest;", "doOnEachError", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxCompletableTest_$179 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxCompletableTest_$179;
}

@end

void RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxCompletableTest_$179 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$atomicInteger_, capture$0);
  NSObject_init(self);
}

RxCompletableTest_$179 *new_RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxCompletableTest_$179, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxCompletableTest_$179 *create_RxCompletableTest_$179_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxCompletableTest_$179, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
