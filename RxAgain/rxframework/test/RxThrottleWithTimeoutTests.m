//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ThrottleWithTimeoutTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "RxThrottleWithTimeoutTests.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxThrottleWithTimeoutTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxThrottleWithTimeoutTests__Annotations$1();

@implementation RxThrottleWithTimeoutTests

- (void)testThrottle {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *o = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(o)) throttleWithTimeoutWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:s])) subscribeWithRxObserver:observer];
  [s advanceTimeToWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [s advanceTimeToWithLong:501 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [s advanceTimeToWithLong:600 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [s advanceTimeToWithLong:700 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [s advanceTimeToWithLong:1300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [s advanceTimeToWithLong:1800 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)timed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) throttleWithTimeoutWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxThrottleWithTimeoutTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testThrottle);
  methods[1].selector = @selector(timed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxThrottleWithTimeoutTests__Annotations$0, (void *)&RxThrottleWithTimeoutTests__Annotations$1 };
  static const J2ObjcClassInfo _RxThrottleWithTimeoutTests = { "ThrottleWithTimeoutTests", "rx", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxThrottleWithTimeoutTests;
}

@end

void RxThrottleWithTimeoutTests_init(RxThrottleWithTimeoutTests *self) {
  NSObject_init(self);
}

RxThrottleWithTimeoutTests *new_RxThrottleWithTimeoutTests_init() {
  J2OBJC_NEW_IMPL(RxThrottleWithTimeoutTests, init)
}

RxThrottleWithTimeoutTests *create_RxThrottleWithTimeoutTests_init() {
  J2OBJC_CREATE_IMPL(RxThrottleWithTimeoutTests, init)
}

IOSObjectArray *RxThrottleWithTimeoutTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxThrottleWithTimeoutTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxThrottleWithTimeoutTests)
