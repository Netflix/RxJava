//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/SubscriberTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscriberTest.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSubscriberTest__Annotations$14();

@interface RxSubscriberTest_$1 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$r_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$1, val$r_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$1 *new_RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$1 *create_RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$2 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$r_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$2)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$2, val$r_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$2 *new_RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$2 *create_RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$3 : NSObject < RxObservable_Operator >

- (RxSubscriber *)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$3)

__attribute__((unused)) static void RxSubscriberTest_$3_init(RxSubscriberTest_$3 *self);

__attribute__((unused)) static RxSubscriberTest_$3 *new_RxSubscriberTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$3 *create_RxSubscriberTest_$3_init();

@interface RxSubscriberTest_$3_$1 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)t;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$3_$1)

__attribute__((unused)) static void RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriberTest_$3_$1 *self, RxSubscriber *arg$0);

__attribute__((unused)) static RxSubscriberTest_$3_$1 *new_RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriber *arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$3_$1 *create_RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriber *arg$0);

@interface RxSubscriberTest_$4 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$r_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$4)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$4, val$r_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$4 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$4 *new_RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$4 *create_RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$5 : NSObject < RxObservable_Operator >

- (RxSubscriber *)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$5)

__attribute__((unused)) static void RxSubscriberTest_$5_init(RxSubscriberTest_$5 *self);

__attribute__((unused)) static RxSubscriberTest_$5 *new_RxSubscriberTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$5 *create_RxSubscriberTest_$5_init();

@interface RxSubscriberTest_$5_$1 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$5_$1)

__attribute__((unused)) static void RxSubscriberTest_$5_$1_init(RxSubscriberTest_$5_$1 *self);

__attribute__((unused)) static RxSubscriberTest_$5_$1 *new_RxSubscriberTest_$5_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$5_$1 *create_RxSubscriberTest_$5_$1_init();

@interface RxSubscriberTest_$6 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$r_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$6)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$6, val$r_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$6 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$6 *new_RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$6 *create_RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$7 : NSObject < RxObservable_Operator > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$innerR_;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$7)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$7, val$innerR_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$7 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$7 *new_RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$7 *create_RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$7_$1 : NSObject < RxProducer > {
 @public
  RxSubscriberTest_$7 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriberTest_$7:(RxSubscriberTest_$7 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$7_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$7_$1, this$0_, RxSubscriberTest_$7 *)

__attribute__((unused)) static void RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7_$1 *self, RxSubscriberTest_$7 *outer$);

__attribute__((unused)) static RxSubscriberTest_$7_$1 *new_RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$7_$1 *create_RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7 *outer$);

@interface RxSubscriberTest_$7_$2 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$7_$2)

__attribute__((unused)) static void RxSubscriberTest_$7_$2_init(RxSubscriberTest_$7_$2 *self);

__attribute__((unused)) static RxSubscriberTest_$7_$2 *new_RxSubscriberTest_$7_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$7_$2 *create_RxSubscriberTest_$7_$2_init();

@interface RxSubscriberTest_$8 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$r_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$8)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$8, val$r_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$8 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$8 *new_RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$8 *create_RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$9 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$9)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$9, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$9 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$9 *new_RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$9 *create_RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$9_$1 : NSObject < RxProducer > {
 @public
  RxSubscriberTest_$9 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriberTest_$9:(RxSubscriberTest_$9 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$9_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$9_$1, this$0_, RxSubscriberTest_$9 *)

__attribute__((unused)) static void RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9_$1 *self, RxSubscriberTest_$9 *outer$);

__attribute__((unused)) static RxSubscriberTest_$9_$1 *new_RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$9_$1 *create_RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9 *outer$);

@interface RxSubscriberTest_$10 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$10)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$10, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$10 *new_RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$10 *create_RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$10_$1 : NSObject < RxProducer > {
 @public
  RxSubscriberTest_$10 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriberTest_$10:(RxSubscriberTest_$10 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$10_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$10_$1, this$0_, RxSubscriberTest_$10 *)

__attribute__((unused)) static void RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10_$1 *self, RxSubscriberTest_$10 *outer$);

__attribute__((unused)) static RxSubscriberTest_$10_$1 *new_RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$10_$1 *create_RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10 *outer$);

@interface RxSubscriberTest_$11 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$11)

__attribute__((unused)) static void RxSubscriberTest_$11_init(RxSubscriberTest_$11 *self);

__attribute__((unused)) static RxSubscriberTest_$11 *new_RxSubscriberTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$11 *create_RxSubscriberTest_$11_init();

@interface RxSubscriberTest_$12 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$12)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$12, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$12 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$12 *new_RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$12 *create_RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$12_$1 : NSObject < RxProducer > {
 @public
  RxSubscriberTest_$12 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriberTest_$12:(RxSubscriberTest_$12 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$12_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$12_$1, this$0_, RxSubscriberTest_$12 *)

__attribute__((unused)) static void RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12_$1 *self, RxSubscriberTest_$12 *outer$);

__attribute__((unused)) static RxSubscriberTest_$12_$1 *new_RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$12_$1 *create_RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12 *outer$);

@interface RxSubscriberTest_$13 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$13)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$13, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxSubscriberTest_$13 *new_RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$13 *create_RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxSubscriberTest_$13_$1 : NSObject < RxProducer > {
 @public
  RxSubscriberTest_$13 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriberTest_$13:(RxSubscriberTest_$13 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$13_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$13_$1, this$0_, RxSubscriberTest_$13 *)

__attribute__((unused)) static void RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13_$1 *self, RxSubscriberTest_$13 *outer$);

__attribute__((unused)) static RxSubscriberTest_$13_$1 *new_RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$13_$1 *create_RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13 *outer$);

@interface RxSubscriberTest_$14 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$c_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$14)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$14, val$c_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriberTest_$14 *new_RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$14 *create_RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriberTest_$15 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$c_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$15)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$15, val$c_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriberTest_$15 *new_RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$15 *create_RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriberTest_$16 : NSObject < RxObservable_Operator > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$c_;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$16)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$16, val$c_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriberTest_$16 *new_RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$16 *create_RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriberTest_$16_$1 : RxSubscriber {
 @public
  RxSubscriberTest_$16 *this$0_;
  RxSubscriber *val$child_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxSubscriberTest_$16:(RxSubscriberTest_$16 *)outer$
                            withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$16_$1)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$16_$1, this$0_, RxSubscriberTest_$16 *)
J2OBJC_FIELD_SETTER(RxSubscriberTest_$16_$1, val$child_, RxSubscriber *)

__attribute__((unused)) static void RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16_$1 *self, RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxSubscriberTest_$16_$1 *new_RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$16_$1 *create_RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0);

@interface RxSubscriberTest_$17 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$exception_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$17)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$17, val$exception_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSubscriberTest_$17, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubscriberTest_$17 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSubscriberTest_$17 *new_RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$17 *create_RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSubscriberTest_$18 : RxSubscriber {
 @public
  id<JavaUtilList> val$list_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$18)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$18, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxSubscriberTest_$18_initWithJavaUtilList_(RxSubscriberTest_$18 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSubscriberTest_$18 *new_RxSubscriberTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$18 *create_RxSubscriberTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxSubscriberTest_$19 : RxSubscriber {
 @public
  id<JavaUtilList> val$list_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriberTest_$19)

J2OBJC_FIELD_SETTER(RxSubscriberTest_$19, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxSubscriberTest_$19_initWithJavaUtilList_(RxSubscriberTest_$19 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSubscriberTest_$19 *new_RxSubscriberTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriberTest_$19 *create_RxSubscriberTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@implementation RxSubscriberTest

- (void)testRequestFromFinalSubscribeWithRequestValue {
  RxSubscriber *s = create_RxObserversTestSubscriber_init();
  [s requestWithLong:10];
  JavaUtilConcurrentAtomicAtomicLong *r = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [s setProducerWithRxProducer:create_RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(r)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [r get]);
}

- (void)testRequestFromFinalSubscribeWithoutRequestValue {
  RxSubscriber *s = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicLong *r = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [s setProducerWithRxProducer:create_RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(r)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JavaLangLong_MAX_VALUE, [r get]);
}

- (void)testRequestFromChainedOperator {
  RxSubscriber *s = create_RxObserversTestSubscriber_init();
  id<RxObservable_Operator> o = create_RxSubscriberTest_$3_init();
  [s requestWithLong:10];
  RxSubscriber *ns = [o callWithId:s];
  JavaUtilConcurrentAtomicAtomicLong *r = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxSubscriber *) nil_chk(ns)) setProducerWithRxProducer:create_RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(r)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [r get]);
}

- (void)testRequestFromDecoupledOperator {
  RxSubscriber *s = create_RxObserversTestSubscriber_init();
  id<RxObservable_Operator> o = create_RxSubscriberTest_$5_init();
  [s requestWithLong:10];
  RxSubscriber *ns = [o callWithId:s];
  JavaUtilConcurrentAtomicAtomicLong *r = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxSubscriber *) nil_chk(ns)) setProducerWithRxProducer:create_RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(r)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JavaLangLong_MAX_VALUE, [r get]);
}

- (void)testRequestFromDecoupledOperatorThatRequestsN {
  RxSubscriber *s = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicLong *innerR = create_JavaUtilConcurrentAtomicAtomicLong_init();
  id<RxObservable_Operator> o = create_RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(innerR);
  [s requestWithLong:10];
  RxSubscriber *ns = [o callWithId:s];
  JavaUtilConcurrentAtomicAtomicLong *r = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxSubscriber *) nil_chk(ns)) setProducerWithRxProducer:create_RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(r)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(99, [r get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [innerR get]);
}

- (void)testRequestToObservable {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested get]);
}

- (void)testRequestThroughMap {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) mapWithRxFunctionsFunc1:create_RxSubscriberTest_$11_init()])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested get]);
}

- (void)testRequestThroughTakeThatReducesRequest {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) takeWithInt:2])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [requested get]);
}

- (void)testRequestThroughTakeWhereRequestIsSmallerThanTake {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested get]);
}

- (void)testOnStartCalledOnceViaSubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) takeWithInt:2])) subscribeWithRxSubscriber:create_RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [c get]);
}

- (void)testOnStartCalledOnceViaUnsafeSubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) takeWithInt:2])) unsafeSubscribeWithRxSubscriber:create_RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [c get]);
}

- (void)testOnStartCalledOnceViaLift {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) liftWithRxObservable_Operator:create_RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(c)])) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [c get]);
}

- (void)testNegativeRequestThrowsIllegalArgumentException {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *exception = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) subscribeWithRxSubscriber:create_RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(exception, latch)];
  OrgJunitAssert_assertTrueWithBoolean_([latch awaitWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertTrueWithBoolean_([[exception get] isKindOfClass:[JavaLangIllegalArgumentException class]]);
}

- (void)testOnStartRequestsAreAdditive {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5)))) subscribeWithRxSubscriber:create_RxSubscriberTest_$18_initWithJavaUtilList_(list)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]), list);
}

- (void)testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5)))) subscribeWithRxSubscriber:create_RxSubscriberTest_$19_initWithJavaUtilList_(list)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]), list);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 12, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testRequestFromFinalSubscribeWithRequestValue);
  methods[1].selector = @selector(testRequestFromFinalSubscribeWithoutRequestValue);
  methods[2].selector = @selector(testRequestFromChainedOperator);
  methods[3].selector = @selector(testRequestFromDecoupledOperator);
  methods[4].selector = @selector(testRequestFromDecoupledOperatorThatRequestsN);
  methods[5].selector = @selector(testRequestToObservable);
  methods[6].selector = @selector(testRequestThroughMap);
  methods[7].selector = @selector(testRequestThroughTakeThatReducesRequest);
  methods[8].selector = @selector(testRequestThroughTakeWhereRequestIsSmallerThanTake);
  methods[9].selector = @selector(testOnStartCalledOnceViaSubscribe);
  methods[10].selector = @selector(testOnStartCalledOnceViaUnsafeSubscribe);
  methods[11].selector = @selector(testOnStartCalledOnceViaLift);
  methods[12].selector = @selector(testNegativeRequestThrowsIllegalArgumentException);
  methods[13].selector = @selector(testOnStartRequestsAreAdditive);
  methods[14].selector = @selector(testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue);
  methods[15].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSubscriberTest__Annotations$0, (void *)&RxSubscriberTest__Annotations$1, (void *)&RxSubscriberTest__Annotations$2, (void *)&RxSubscriberTest__Annotations$3, (void *)&RxSubscriberTest__Annotations$4, (void *)&RxSubscriberTest__Annotations$5, (void *)&RxSubscriberTest__Annotations$6, (void *)&RxSubscriberTest__Annotations$7, (void *)&RxSubscriberTest__Annotations$8, (void *)&RxSubscriberTest__Annotations$9, (void *)&RxSubscriberTest__Annotations$10, (void *)&RxSubscriberTest__Annotations$11, "LJavaLangInterruptedException;", (void *)&RxSubscriberTest__Annotations$12, (void *)&RxSubscriberTest__Annotations$13, (void *)&RxSubscriberTest__Annotations$14 };
  static const J2ObjcClassInfo _RxSubscriberTest = { "SubscriberTest", "rx", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_RxSubscriberTest;
}

@end

void RxSubscriberTest_init(RxSubscriberTest *self) {
  NSObject_init(self);
}

RxSubscriberTest *new_RxSubscriberTest_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest, init)
}

RxSubscriberTest *create_RxSubscriberTest_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest, init)
}

IOSObjectArray *RxSubscriberTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriberTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriberTest)

@implementation RxSubscriberTest_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$r_)) setWithLong:n];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromFinalSubscribeWithRequestValue" };
  static const J2ObjcClassInfo _RxSubscriberTest_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubscriberTest_$1;
}

@end

void RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$1 *new_RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$1 *create_RxSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$2

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$r_)) setWithLong:n];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromFinalSubscribeWithoutRequestValue" };
  static const J2ObjcClassInfo _RxSubscriberTest_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubscriberTest_$2;
}

@end

void RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$2 *new_RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$2 *create_RxSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$3

- (RxSubscriber *)callWithId:(RxSubscriber *)s {
  return create_RxSubscriberTest_$3_$1_initWithRxSubscriber_(s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)Lrx/Subscriber<-Ljava/lang/String;>;", "LRxSubscriberTest;", "testRequestFromChainedOperator", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$3 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSubscriberTest_$3;
}

@end

void RxSubscriberTest_$3_init(RxSubscriberTest_$3 *self) {
  NSObject_init(self);
}

RxSubscriberTest_$3 *new_RxSubscriberTest_$3_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$3, init)
}

RxSubscriberTest_$3 *create_RxSubscriberTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$3, init)
}

@implementation RxSubscriberTest_$3_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)t {
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)arg$0 {
  RxSubscriberTest_$3_$1_initWithRxSubscriber_(self, arg$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$3_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxSubscriber;", "(Lrx/Subscriber<*>;)V", "LRxSubscriberTest_$3;", "callWithId:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$3_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 6, -1, 7, 8, -1 };
  return &_RxSubscriberTest_$3_$1;
}

@end

void RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriberTest_$3_$1 *self, RxSubscriber *arg$0) {
  RxSubscriber_initWithRxSubscriber_(self, arg$0);
}

RxSubscriberTest_$3_$1 *new_RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriber *arg$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$3_$1, initWithRxSubscriber_, arg$0)
}

RxSubscriberTest_$3_$1 *create_RxSubscriberTest_$3_$1_initWithRxSubscriber_(RxSubscriber *arg$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$3_$1, initWithRxSubscriber_, arg$0)
}

@implementation RxSubscriberTest_$4

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$r_)) setWithLong:n];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromChainedOperator" };
  static const J2ObjcClassInfo _RxSubscriberTest_$4 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubscriberTest_$4;
}

@end

void RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$4 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$4 *new_RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$4, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$4 *create_RxSubscriberTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$4, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$5

- (RxSubscriber *)callWithId:(RxSubscriber *)s {
  return create_RxSubscriberTest_$5_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)Lrx/Subscriber<-Ljava/lang/String;>;", "LRxSubscriberTest;", "testRequestFromDecoupledOperator", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$5 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSubscriberTest_$5;
}

@end

void RxSubscriberTest_$5_init(RxSubscriberTest_$5 *self) {
  NSObject_init(self);
}

RxSubscriberTest_$5 *new_RxSubscriberTest_$5_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$5, init)
}

RxSubscriberTest_$5 *create_RxSubscriberTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$5, init)
}

@implementation RxSubscriberTest_$5_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_$5_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$5_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxSubscriberTest_$5;", "callWithId:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$5_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$5_$1;
}

@end

void RxSubscriberTest_$5_$1_init(RxSubscriberTest_$5_$1 *self) {
  RxSubscriber_init(self);
}

RxSubscriberTest_$5_$1 *new_RxSubscriberTest_$5_$1_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$5_$1, init)
}

RxSubscriberTest_$5_$1 *create_RxSubscriberTest_$5_$1_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$5_$1, init)
}

@implementation RxSubscriberTest_$6

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$r_)) setWithLong:n];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromDecoupledOperator" };
  static const J2ObjcClassInfo _RxSubscriberTest_$6 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubscriberTest_$6;
}

@end

void RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$6 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$6 *new_RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$6, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$6 *create_RxSubscriberTest_$6_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$6, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$7

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  [((RxSubscriber *) nil_chk(child)) setProducerWithRxProducer:create_RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(self)];
  RxSubscriber *as = create_RxSubscriberTest_$7_$2_init();
  [as requestWithLong:99];
  return as;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$innerR_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$innerR_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)Lrx/Subscriber<-Ljava/lang/String;>;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromDecoupledOperatorThatRequestsN", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$7 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$7;
}

@end

void RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$7 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$innerR_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$7 *new_RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$7, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$7 *create_RxSubscriberTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$7, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$7_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$innerR_)) setWithLong:n];
}

- (instancetype)initWithRxSubscriberTest_$7:(RxSubscriberTest_$7 *)outer$ {
  RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriberTest_$7:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$7;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriberTest_$7;", "callWithId:" };
  static const J2ObjcClassInfo _RxSubscriberTest_$7_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxSubscriberTest_$7_$1;
}

@end

void RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7_$1 *self, RxSubscriberTest_$7 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriberTest_$7_$1 *new_RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$7_$1, initWithRxSubscriberTest_$7_, outer$)
}

RxSubscriberTest_$7_$1 *create_RxSubscriberTest_$7_$1_initWithRxSubscriberTest_$7_(RxSubscriberTest_$7 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$7_$1, initWithRxSubscriberTest_$7_, outer$)
}

@implementation RxSubscriberTest_$7_$2

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_$7_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$7_$2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxSubscriberTest_$7;", "callWithId:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$7_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$7_$2;
}

@end

void RxSubscriberTest_$7_$2_init(RxSubscriberTest_$7_$2 *self) {
  RxSubscriber_init(self);
}

RxSubscriberTest_$7_$2 *new_RxSubscriberTest_$7_$2_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$7_$2, init)
}

RxSubscriberTest_$7_$2 *create_RxSubscriberTest_$7_$2_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$7_$2, init)
}

@implementation RxSubscriberTest_$8

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$r_)) setWithLong:n];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestFromDecoupledOperatorThatRequestsN" };
  static const J2ObjcClassInfo _RxSubscriberTest_$8 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubscriberTest_$8;
}

@end

void RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$8 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$8 *new_RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$8, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$8 *create_RxSubscriberTest_$8_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$8, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$9

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestToObservable", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$9 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$9;
}

@end

void RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$9 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$9 *new_RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$9, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$9 *create_RxSubscriberTest_$9_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$9, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$9_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxSubscriberTest_$9:(RxSubscriberTest_$9 *)outer$ {
  RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriberTest_$9:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$9;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriberTest_$9;", "callWithId:" };
  static const J2ObjcClassInfo _RxSubscriberTest_$9_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxSubscriberTest_$9_$1;
}

@end

void RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9_$1 *self, RxSubscriberTest_$9 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriberTest_$9_$1 *new_RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$9_$1, initWithRxSubscriberTest_$9_, outer$)
}

RxSubscriberTest_$9_$1 *create_RxSubscriberTest_$9_$1_initWithRxSubscriberTest_$9_(RxSubscriberTest_$9 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$9_$1, initWithRxSubscriberTest_$9_, outer$)
}

@implementation RxSubscriberTest_$10

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestThroughMap", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$10 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$10;
}

@end

void RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$10 *new_RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$10 *create_RxSubscriberTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$10_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxSubscriberTest_$10:(RxSubscriberTest_$10 *)outer$ {
  RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriberTest_$10:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$10;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriberTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxSubscriberTest_$10_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxSubscriberTest_$10_$1;
}

@end

void RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10_$1 *self, RxSubscriberTest_$10 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriberTest_$10_$1 *new_RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$10_$1, initWithRxSubscriberTest_$10_, outer$)
}

RxSubscriberTest_$10_$1 *create_RxSubscriberTest_$10_$1_initWithRxSubscriberTest_$10_(RxSubscriberTest_$10 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$10_$1, initWithRxSubscriberTest_$10_, outer$)
}

@implementation RxSubscriberTest_$11

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriberTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSubscriberTest;", "testRequestThroughMap", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$11 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSubscriberTest_$11;
}

@end

void RxSubscriberTest_$11_init(RxSubscriberTest_$11 *self) {
  NSObject_init(self);
}

RxSubscriberTest_$11 *new_RxSubscriberTest_$11_init() {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$11, init)
}

RxSubscriberTest_$11 *create_RxSubscriberTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$11, init)
}

@implementation RxSubscriberTest_$12

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestThroughTakeThatReducesRequest", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$12 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$12;
}

@end

void RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$12 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$12 *new_RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$12, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$12 *create_RxSubscriberTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$12, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$12_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxSubscriberTest_$12:(RxSubscriberTest_$12 *)outer$ {
  RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriberTest_$12:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$12;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriberTest_$12;", "callWithId:" };
  static const J2ObjcClassInfo _RxSubscriberTest_$12_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxSubscriberTest_$12_$1;
}

@end

void RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12_$1 *self, RxSubscriberTest_$12 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriberTest_$12_$1 *new_RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$12_$1, initWithRxSubscriberTest_$12_, outer$)
}

RxSubscriberTest_$12_$1 *create_RxSubscriberTest_$12_$1_initWithRxSubscriberTest_$12_(RxSubscriberTest_$12 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$12_$1, initWithRxSubscriberTest_$12_, outer$)
}

@implementation RxSubscriberTest_$13

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxSubscriberTest;", "testRequestThroughTakeWhereRequestIsSmallerThanTake", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$13 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$13;
}

@end

void RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxSubscriberTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$13 *new_RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxSubscriberTest_$13 *create_RxSubscriberTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxSubscriberTest_$13_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxSubscriberTest_$13:(RxSubscriberTest_$13 *)outer$ {
  RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriberTest_$13:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$13;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriberTest_$13;", "callWithId:" };
  static const J2ObjcClassInfo _RxSubscriberTest_$13_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxSubscriberTest_$13_$1;
}

@end

void RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13_$1 *self, RxSubscriberTest_$13 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriberTest_$13_$1 *new_RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$13_$1, initWithRxSubscriberTest_$13_, outer$)
}

RxSubscriberTest_$13_$1 *create_RxSubscriberTest_$13_$1_initWithRxSubscriberTest_$13_(RxSubscriberTest_$13 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$13_$1, initWithRxSubscriberTest_$13_, outer$)
}

@implementation RxSubscriberTest_$14

- (void)onStart {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$c_)) incrementAndGet];
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self requestWithLong:1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$14 class]);
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriberTest;", "testOnStartCalledOnceViaSubscribe", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$14 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxSubscriberTest_$14;
}

@end

void RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  RxSubscriber_init(self);
}

RxSubscriberTest_$14 *new_RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriberTest_$14 *create_RxSubscriberTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriberTest_$15

- (void)onStart {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$c_)) incrementAndGet];
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self requestWithLong:1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$15 class]);
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriberTest;", "testOnStartCalledOnceViaUnsafeSubscribe", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$15 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxSubscriberTest_$15;
}

@end

void RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  RxSubscriber_init(self);
}

RxSubscriberTest_$15 *new_RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriberTest_$15 *create_RxSubscriberTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriberTest_$16

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  return create_RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(self, child);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)Lrx/Subscriber<-Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriberTest;", "testOnStartCalledOnceViaLift", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$16 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSubscriberTest_$16;
}

@end

void RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriberTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxSubscriberTest_$16 *new_RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriberTest_$16 *create_RxSubscriberTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriberTest_$16_$1

- (void)onStart {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$c_)) incrementAndGet];
  [self requestWithLong:1];
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$child_)) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((RxSubscriber *) nil_chk(val$child_)) onNextWithId:t];
  [self requestWithLong:1];
}

- (instancetype)initWithRxSubscriberTest_$16:(RxSubscriberTest_$16 *)outer$
                            withRxSubscriber:(RxSubscriber *)capture$0 {
  RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$16_$1 class]);
  RELEASE_(this$0_);
  RELEASE_(val$child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithRxSubscriberTest_$16:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriberTest_$16;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxSubscriberTest_$16;LRxSubscriber;", "(Lrx/SubscriberTest$16;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxSubscriberTest_$16;", "callWithId:", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$16_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 2, 7, -1, 8, 9, -1 };
  return &_RxSubscriberTest_$16_$1;
}

@end

void RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16_$1 *self, RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$child_, capture$0);
  RxSubscriber_init(self);
}

RxSubscriberTest_$16_$1 *new_RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$16_$1, initWithRxSubscriberTest_$16_withRxSubscriber_, outer$, capture$0)
}

RxSubscriberTest_$16_$1 *create_RxSubscriberTest_$16_$1_initWithRxSubscriberTest_$16_withRxSubscriber_(RxSubscriberTest_$16 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$16_$1, initWithRxSubscriberTest_$16_withRxSubscriber_, outer$, capture$0)
}

@implementation RxSubscriberTest_$17

- (void)onStart {
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$exception_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self requestWithLong:-1];
  [self requestWithLong:1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$17 class]);
  RELEASE_(val$exception_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$exception_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxSubscriberTest;", "testNegativeRequestThrowsIllegalArgumentException", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$17 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 2, 7, -1, 8, 9, -1 };
  return &_RxSubscriberTest_$17;
}

@end

void RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubscriberTest_$17 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$exception_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  RxSubscriber_init(self);
}

RxSubscriberTest_$17 *new_RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$17, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSubscriberTest_$17 *create_RxSubscriberTest_$17_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$17, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSubscriberTest_$18

- (void)onStart {
  [self requestWithLong:3];
  [self requestWithLong:2];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSubscriberTest_$18_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$18 class]);
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxSubscriberTest;", "testOnStartRequestsAreAdditive", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$18 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 1, 7, -1, 8, 9, -1 };
  return &_RxSubscriberTest_$18;
}

@end

void RxSubscriberTest_$18_initWithJavaUtilList_(RxSubscriberTest_$18 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  RxSubscriber_init(self);
}

RxSubscriberTest_$18 *new_RxSubscriberTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$18, initWithJavaUtilList_, capture$0)
}

RxSubscriberTest_$18 *create_RxSubscriberTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$18, initWithJavaUtilList_, capture$0)
}

@implementation RxSubscriberTest_$19

- (void)onStart {
  [self requestWithLong:2];
  [self requestWithLong:JavaLangLong_MAX_VALUE - 1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSubscriberTest_$19_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubscriberTest_$19 class]);
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxSubscriberTest;", "testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubscriberTest_$19 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 1, 7, -1, 8, 9, -1 };
  return &_RxSubscriberTest_$19;
}

@end

void RxSubscriberTest_$19_initWithJavaUtilList_(RxSubscriberTest_$19 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  RxSubscriber_init(self);
}

RxSubscriberTest_$19 *new_RxSubscriberTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriberTest_$19, initWithJavaUtilList_, capture$0)
}

RxSubscriberTest_$19 *create_RxSubscriberTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriberTest_$19, initWithJavaUtilList_, capture$0)
}
