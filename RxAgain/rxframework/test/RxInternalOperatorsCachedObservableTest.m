//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/CachedObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsCachedObservable.h"
#include "RxInternalOperatorsCachedObservableTest.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$9();

@interface RxInternalOperatorsCachedObservableTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$1, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCachedObservableTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$1 *new_RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$1 *create_RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsCachedObservableTest_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsCachedObservableTest_$1 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsCachedObservableTest_$1:(RxInternalOperatorsCachedObservableTest_$1 *)outer$
                                                  withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$1_$1, this$0_, RxInternalOperatorsCachedObservableTest_$1 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$1_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1_$1 *self, RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$1_$1 *new_RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$1_$1 *create_RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsCachedObservableTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsCachedObservableTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$2 *new_RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$2 *create_RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsCachedObservableTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$3, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsCachedObservableTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$3 *new_RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$3 *create_RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsCachedObservableTest_$4 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$4)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$4_init(RxInternalOperatorsCachedObservableTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$4 *new_RxInternalOperatorsCachedObservableTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$4 *create_RxInternalOperatorsCachedObservableTest_$4_init();

@interface RxInternalOperatorsCachedObservableTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCachedObservableTest_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCachedObservableTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$5 *new_RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$5 *create_RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsCachedObservableTest_$6 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCachedObservableTest_$6)

__attribute__((unused)) static void RxInternalOperatorsCachedObservableTest_$6_init(RxInternalOperatorsCachedObservableTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$6 *new_RxInternalOperatorsCachedObservableTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCachedObservableTest_$6 *create_RxInternalOperatorsCachedObservableTest_$6_init();

@implementation RxInternalOperatorsCachedObservableTest

- (void)testColdReplayNoBackpressure {
  RxInternalOperatorsCachedObservable *source = RxInternalOperatorsCachedObservable_fromWithRxObservable_(RxObservable_rangeWithInt_withInt_(0, 1000));
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source is connected!", [((RxInternalOperatorsCachedObservable *) nil_chk(source)) isConnected]);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [source subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Source is not connected!", [source isConnected]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Subscribers retained!", [source hasObservers]);
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
  for (jint i = 0; i < 1000; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [onNextEvents getWithInt:i]);
  }
}

- (void)testColdReplayBackpressure {
  RxInternalOperatorsCachedObservable *source = RxInternalOperatorsCachedObservable_fromWithRxObservable_(RxObservable_rangeWithInt_withInt_(0, 1000));
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source is connected!", [((RxInternalOperatorsCachedObservable *) nil_chk(source)) isConnected]);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:10];
  [source subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Source is not connected!", [source isConnected]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Subscribers not retained!", [source hasObservers]);
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
  for (jint i = 0; i < 10; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [onNextEvents getWithInt:i]);
  }
  [ts unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Subscribers retained!", [source hasObservers]);
}

- (void)testCache {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)))) cache];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  [((RxObservable *) nil_chk(o)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  [o subscribeWithRxFunctionsAction1:create_RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  if (![latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"subscriptions did not receive values");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testUnsubscribeSource {
  id<RxFunctionsAction0> unsubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnUnsubscribeWithRxFunctionsAction0:unsubscribe])) cache];
  [((RxObservable *) nil_chk(o)) subscribe];
  [o subscribe];
  [o subscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
}

- (void)testTake {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxInternalOperatorsCachedObservable *cached = RxInternalOperatorsCachedObservable_fromWithRxObservable_(RxObservable_rangeWithInt_withInt_(1, 100));
  [((RxObservable *) nil_chk([((RxInternalOperatorsCachedObservable *) nil_chk(cached)) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  [ts assertUnsubscribed];
  OrgJunitAssert_assertFalseWithBoolean_([cached hasObservers]);
}

- (void)testAsync {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(1, 10000);
  for (jint i = 0; i < 100; i++) {
    RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
    RxInternalOperatorsCachedObservable *cached = RxInternalOperatorsCachedObservable_fromWithRxObservable_(source);
    [((RxObservable *) nil_chk([((RxInternalOperatorsCachedObservable *) nil_chk(cached)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts1];
    [ts1 awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts1 assertNoErrors];
    [ts1 assertTerminalEvent];
    OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [((id<JavaUtilList>) nil_chk([ts1 getOnNextEvents])) size]);
    RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([cached observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts2];
    [ts2 awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts2 assertNoErrors];
    [ts2 assertTerminalEvent];
    OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [((id<JavaUtilList>) nil_chk([ts2 getOnNextEvents])) size]);
  }
}

- (void)testAsyncComeAndGo {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(1, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) takeWithInt:1000])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()];
  RxInternalOperatorsCachedObservable *cached = RxInternalOperatorsCachedObservable_fromWithRxObservable_(source);
  RxObservable *output = [((RxInternalOperatorsCachedObservable *) nil_chk(cached)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 100; i++) {
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [list addWithId:ts];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(output)) skipWithInt:i * 10])) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  }
  id<JavaUtilList> expected = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 10; i++) {
    [expected addWithId:JavaLangLong_valueOfWithLong_((jlong) (i - 10))];
  }
  jint j = 0;
  for (RxObserversTestSubscriber * __strong ts in list) {
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts assertNoErrors];
    [ts assertTerminalEvent];
    for (jint i = j * 10; i < j * 10 + 10; i++) {
      [expected setWithInt:i - j * 10 withId:JavaLangLong_valueOfWithLong_((jlong) i)];
    }
    [ts assertReceivedOnNextWithJavaUtilList:expected];
    j++;
  }
}

- (void)testNoMissingBackpressureException {
  jint m = 4 * 1000 * 1000;
  RxObservable *firehose = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsCachedObservableTest_$4_init());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(firehose)) cache])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeLastWithInt:100])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testValuesAndThenError {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())])) cache];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  [source subscribeWithRxSubscriber:ts2];
  [ts2 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts2 getCompletions]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts2 getOnErrorEvents])) size]);
}

- (void)unsafeChildThrows {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) cache];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsCachedObservableTest_$6_init();
  [((RxObservable *) nil_chk(source)) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [count get]);
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCachedObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testColdReplayNoBackpressure);
  methods[1].selector = @selector(testColdReplayBackpressure);
  methods[2].selector = @selector(testCache);
  methods[3].selector = @selector(testUnsubscribeSource);
  methods[4].selector = @selector(testTake);
  methods[5].selector = @selector(testAsync);
  methods[6].selector = @selector(testAsyncComeAndGo);
  methods[7].selector = @selector(testNoMissingBackpressureException);
  methods[8].selector = @selector(testValuesAndThenError);
  methods[9].selector = @selector(unsafeChildThrows);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsCachedObservableTest__Annotations$0, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$1, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsCachedObservableTest__Annotations$2, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$3, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$4, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$5, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$6, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$7, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$8, (void *)&RxInternalOperatorsCachedObservableTest__Annotations$9 };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest = { "CachedObservableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCachedObservableTest;
}

@end

void RxInternalOperatorsCachedObservableTest_init(RxInternalOperatorsCachedObservableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest *new_RxInternalOperatorsCachedObservableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest, init)
}

RxInternalOperatorsCachedObservableTest *create_RxInternalOperatorsCachedObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest, init)
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCachedObservableTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCachedObservableTest)

@implementation RxInternalOperatorsCachedObservableTest_$1

- (void)callWithId:(RxSubscriber *)observer {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(self, observer)) start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsCachedObservableTest;", "testCache", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$1;
}

@end

void RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCachedObservableTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$1 *new_RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsCachedObservableTest_$1 *create_RxInternalOperatorsCachedObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsCachedObservableTest_$1_$1

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"published observable being executed"];
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:@"one"];
  [val$observer_ onCompleted];
}

- (instancetype)initWithRxInternalOperatorsCachedObservableTest_$1:(RxInternalOperatorsCachedObservableTest_$1 *)outer$
                                                  withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsCachedObservableTest_$1:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsCachedObservableTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsCachedObservableTest_$1;LRxSubscriber;", "(Lrx/internal/operators/CachedObservableTest$1;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsCachedObservableTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$1_$1;
}

@end

void RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1_$1 *self, RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$1_$1 *new_RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$1_$1, initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsCachedObservableTest_$1_$1 *create_RxInternalOperatorsCachedObservableTest_$1_$1_initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_(RxInternalOperatorsCachedObservableTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$1_$1, initWithRxInternalOperatorsCachedObservableTest_$1_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsCachedObservableTest_$2

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"v: ", v)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsCachedObservableTest;", "testCache", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$2;
}

@end

void RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsCachedObservableTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$2 *new_RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsCachedObservableTest_$2 *create_RxInternalOperatorsCachedObservableTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsCachedObservableTest_$3

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"v: ", v)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsCachedObservableTest;", "testCache", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$3;
}

@end

void RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsCachedObservableTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$3 *new_RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsCachedObservableTest_$3 *create_RxInternalOperatorsCachedObservableTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsCachedObservableTest_$4

- (void)callWithId:(RxSubscriber *)t {
  for (jint i = 0; i < 4000000; i++) {
    @autoreleasepool {
      [((RxSubscriber *) nil_chk(t)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  [((RxSubscriber *) nil_chk(t)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCachedObservableTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsCachedObservableTest;", "testNoMissingBackpressureException", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$4;
}

@end

void RxInternalOperatorsCachedObservableTest_$4_init(RxInternalOperatorsCachedObservableTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$4 *new_RxInternalOperatorsCachedObservableTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$4, init)
}

RxInternalOperatorsCachedObservableTest_$4 *create_RxInternalOperatorsCachedObservableTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$4, init)
}

@implementation RxInternalOperatorsCachedObservableTest_$5

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsCachedObservableTest;", "unsafeChildThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$5;
}

@end

void RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsCachedObservableTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCachedObservableTest_$5 *new_RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsCachedObservableTest_$5 *create_RxInternalOperatorsCachedObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsCachedObservableTest_$6

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCachedObservableTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsCachedObservableTest_$6 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsCachedObservableTest;", "unsafeChildThrows", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCachedObservableTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCachedObservableTest_$6;
}

@end

void RxInternalOperatorsCachedObservableTest_$6_init(RxInternalOperatorsCachedObservableTest_$6 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsCachedObservableTest_$6 *new_RxInternalOperatorsCachedObservableTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCachedObservableTest_$6, init)
}

RxInternalOperatorsCachedObservableTest_$6 *create_RxInternalOperatorsCachedObservableTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCachedObservableTest_$6, init)
}
