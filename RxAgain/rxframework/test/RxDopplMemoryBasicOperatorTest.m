//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/doppl/memory/BasicOperatorTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMemoryBasicOperatorTest.h"
#include "RxFunctionsAction1.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxDopplMemoryBasicOperatorTest__Annotations$0();

@interface RxDopplMemoryBasicOperatorTest_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMemoryBasicOperatorTest_$1)

__attribute__((unused)) static void RxDopplMemoryBasicOperatorTest_$1_init(RxDopplMemoryBasicOperatorTest_$1 *self);

__attribute__((unused)) static RxDopplMemoryBasicOperatorTest_$1 *new_RxDopplMemoryBasicOperatorTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxDopplMemoryBasicOperatorTest_$1 *create_RxDopplMemoryBasicOperatorTest_$1_init();

@interface RxDopplMemoryBasicOperatorTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMemoryBasicOperatorTest_$2)

__attribute__((unused)) static void RxDopplMemoryBasicOperatorTest_$2_init(RxDopplMemoryBasicOperatorTest_$2 *self);

__attribute__((unused)) static RxDopplMemoryBasicOperatorTest_$2 *new_RxDopplMemoryBasicOperatorTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxDopplMemoryBasicOperatorTest_$2 *create_RxDopplMemoryBasicOperatorTest_$2_init();

@implementation RxDopplMemoryBasicOperatorTest

- (void)testTake {
  RxObservable *observable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxDopplMemoryBasicOperatorTest_$1_init());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) takeWithInt:2])) subscribeWithRxFunctionsAction1:create_RxDopplMemoryBasicOperatorTest_$2_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMemoryBasicOperatorTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTake);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxDopplMemoryBasicOperatorTest__Annotations$0 };
  static const J2ObjcClassInfo _RxDopplMemoryBasicOperatorTest = { "BasicOperatorTest", "rx.doppl.memory", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxDopplMemoryBasicOperatorTest;
}

@end

void RxDopplMemoryBasicOperatorTest_init(RxDopplMemoryBasicOperatorTest *self) {
  NSObject_init(self);
}

RxDopplMemoryBasicOperatorTest *new_RxDopplMemoryBasicOperatorTest_init() {
  J2OBJC_NEW_IMPL(RxDopplMemoryBasicOperatorTest, init)
}

RxDopplMemoryBasicOperatorTest *create_RxDopplMemoryBasicOperatorTest_init() {
  J2OBJC_CREATE_IMPL(RxDopplMemoryBasicOperatorTest, init)
}

IOSObjectArray *RxDopplMemoryBasicOperatorTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMemoryBasicOperatorTest)

@implementation RxDopplMemoryBasicOperatorTest_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMemoryBasicOperatorTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxDopplMemoryBasicOperatorTest;", "testTake", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxDopplMemoryBasicOperatorTest_$1 = { "", "rx.doppl.memory", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxDopplMemoryBasicOperatorTest_$1;
}

@end

void RxDopplMemoryBasicOperatorTest_$1_init(RxDopplMemoryBasicOperatorTest_$1 *self) {
  NSObject_init(self);
}

RxDopplMemoryBasicOperatorTest_$1 *new_RxDopplMemoryBasicOperatorTest_$1_init() {
  J2OBJC_NEW_IMPL(RxDopplMemoryBasicOperatorTest_$1, init)
}

RxDopplMemoryBasicOperatorTest_$1 *create_RxDopplMemoryBasicOperatorTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxDopplMemoryBasicOperatorTest_$1, init)
}

@implementation RxDopplMemoryBasicOperatorTest_$2

- (void)callWithId:(JavaLangInteger *)integer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"called ", integer)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMemoryBasicOperatorTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxDopplMemoryBasicOperatorTest;", "testTake", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxDopplMemoryBasicOperatorTest_$2 = { "", "rx.doppl.memory", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxDopplMemoryBasicOperatorTest_$2;
}

@end

void RxDopplMemoryBasicOperatorTest_$2_init(RxDopplMemoryBasicOperatorTest_$2 *self) {
  NSObject_init(self);
}

RxDopplMemoryBasicOperatorTest_$2 *new_RxDopplMemoryBasicOperatorTest_$2_init() {
  J2OBJC_NEW_IMPL(RxDopplMemoryBasicOperatorTest_$2, init)
}

RxDopplMemoryBasicOperatorTest_$2 *create_RxDopplMemoryBasicOperatorTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxDopplMemoryBasicOperatorTest_$2, init)
}
