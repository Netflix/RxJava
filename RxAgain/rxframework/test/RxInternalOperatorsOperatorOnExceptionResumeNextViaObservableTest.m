//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorOnExceptionResumeNextViaObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$6();

@interface RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable)

@interface RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable:(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *)outer$
                                                                                        withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1, this$0_, RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init();

@interface RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  jint c_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init();

@implementation RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest

- (void)testResumeNextWithException {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"EXCEPTION", @"two", @"three" } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  RxObservable *resume = RxObservable_justWithId_withId_(@"twoResume", @"threeResume");
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onExceptionResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"threeResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testResumeNextWithRuntimeException {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"RUNTIMEEXCEPTION", @"two", @"three" } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  RxObservable *resume = RxObservable_justWithId_withId_(@"twoResume", @"threeResume");
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onExceptionResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"threeResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testThrowablePassesThru {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"THROWABLE", @"two", @"three" } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  RxObservable *resume = RxObservable_justWithId_withId_(@"twoResume", @"threeResume");
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onExceptionResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"threeResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testErrorPassesThru {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"ON_OVERFLOW_ERROR", @"two", @"three" } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  RxObservable *resume = RxObservable_justWithId_withId_(@"twoResume", @"threeResume");
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onExceptionResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"threeResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testMapResumeAsyncNext {
  RxObservable *w = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"fail", @"two", @"three", @"fail");
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"twoResume", @"threeResume" } count:2 type:NSString_class_()]);
  RxObservable *resume = RxObservable_createWithRxObservable_OnSubscribe_(f);
  w = [((RxObservable *) nil_chk(w)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init()];
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onExceptionResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    if (f->t_ != nil) {
      [f->t_ join];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"threeResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testBackpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 100000))) onExceptionResumeNextWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

- (void)normalBackpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) onExceptionResumeNextWithRxObservable:RxObservable_rangeWithInt_withInt_(3, 2)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:2];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ps onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Forced failure")];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:4 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testResumeNextWithException);
  methods[1].selector = @selector(testResumeNextWithRuntimeException);
  methods[2].selector = @selector(testThrowablePassesThru);
  methods[3].selector = @selector(testErrorPassesThru);
  methods[4].selector = @selector(testMapResumeAsyncNext);
  methods[5].selector = @selector(testBackpressure);
  methods[6].selector = @selector(normalBackpressure);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$0, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$1, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$2, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$3, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$4, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$5, (void *)&RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$6, "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest = { "OperatorOnExceptionResumeNextViaObservableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, 7, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest;
}

@end

void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_init(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest, init)
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest)

@implementation RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestObservable thread"];
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable, initWithNSStringArray_, values)
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable)

@implementation RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        if ([@"EXCEPTION" isEqual:s]) @throw create_JavaLangException_initWithNSString_(@"Forced Exception");
        else if ([@"RUNTIMEEXCEPTION" isEqual:s]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced RuntimeException");
        else if ([@"ON_OVERFLOW_ERROR" isEqual:s]) @throw create_JavaLangError_initWithNSString_(@"Forced Error");
        else if ([@"THROWABLE" isEqual:s]) @throw create_NSException_initWithNSString_(@"Forced Throwable");
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"TestObservable onCompleted"];
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"TestObservable onError: ", e)];
    [((RxSubscriber *) nil_chk(val$observer_)) onErrorWithNSException:e];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable:(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *)outer$
                                                                                        withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorOnExceptionResumeNextViaObservableTest$TestObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1;
}

@end

void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1

- (NSString *)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"BadMapper:", s)];
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest;", "testMapResumeAsyncNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1;
}

@end

void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1, init)
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$1, init)
}

@implementation RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  if (c_++ <= 1) {
    @try {
      JavaLangThread_sleepWithLong_(500);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2;
}

@end

void RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *self) {
  NSObject_init(self);
  self->c_ = 0;
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *new_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2, init)
}

RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2 *create_RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_$2, init)
}
