//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/test/OperatorTester.java
//

#include "J2ObjC_source.h"
#include "RxScheduler.h"
#include "RxTestOperatorTester.h"

@interface RxTestOperatorTester ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxTestOperatorTester_init(RxTestOperatorTester *self);

__attribute__((unused)) static RxTestOperatorTester *new_RxTestOperatorTester_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxTestOperatorTester *create_RxTestOperatorTester_init();

@interface RxTestOperatorTester_ForwardingScheduler () {
 @public
  RxScheduler *underlying_;
}

@end

J2OBJC_FIELD_SETTER(RxTestOperatorTester_ForwardingScheduler, underlying_, RxScheduler *)

@implementation RxTestOperatorTester

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxTestOperatorTester_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxScheduler *)forwardingSchedulerWithRxScheduler:(RxScheduler *)underlying {
  return RxTestOperatorTester_forwardingSchedulerWithRxScheduler_(underlying);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forwardingSchedulerWithRxScheduler:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forwardingScheduler", "LRxScheduler;", "LRxTestOperatorTester_ForwardingScheduler;" };
  static const J2ObjcClassInfo _RxTestOperatorTester = { "OperatorTester", "rx.test", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 2, -1, -1, -1 };
  return &_RxTestOperatorTester;
}

@end

void RxTestOperatorTester_init(RxTestOperatorTester *self) {
  NSObject_init(self);
}

RxTestOperatorTester *new_RxTestOperatorTester_init() {
  J2OBJC_NEW_IMPL(RxTestOperatorTester, init)
}

RxTestOperatorTester *create_RxTestOperatorTester_init() {
  J2OBJC_CREATE_IMPL(RxTestOperatorTester, init)
}

RxScheduler *RxTestOperatorTester_forwardingSchedulerWithRxScheduler_(RxScheduler *underlying) {
  RxTestOperatorTester_initialize();
  return create_RxTestOperatorTester_ForwardingScheduler_initWithRxScheduler_(underlying);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxTestOperatorTester)

@implementation RxTestOperatorTester_ForwardingScheduler

- (instancetype)initWithRxScheduler:(RxScheduler *)underlying {
  RxTestOperatorTester_ForwardingScheduler_initWithRxScheduler_(self, underlying);
  return self;
}

- (RxScheduler_Worker *)createWorker {
  return [((RxScheduler *) nil_chk(underlying_)) createWorker];
}

- (void)dealloc {
  RELEASE_(underlying_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxScheduler:);
  methods[1].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "underlying_", "LRxScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;", "LRxTestOperatorTester;" };
  static const J2ObjcClassInfo _RxTestOperatorTester_ForwardingScheduler = { "ForwardingScheduler", "rx.test", ptrTable, methods, fields, 7, 0x9, 2, 1, 1, -1, -1, -1, -1 };
  return &_RxTestOperatorTester_ForwardingScheduler;
}

@end

void RxTestOperatorTester_ForwardingScheduler_initWithRxScheduler_(RxTestOperatorTester_ForwardingScheduler *self, RxScheduler *underlying) {
  RxScheduler_init(self);
  JreStrongAssign(&self->underlying_, underlying);
}

RxTestOperatorTester_ForwardingScheduler *new_RxTestOperatorTester_ForwardingScheduler_initWithRxScheduler_(RxScheduler *underlying) {
  J2OBJC_NEW_IMPL(RxTestOperatorTester_ForwardingScheduler, initWithRxScheduler_, underlying)
}

RxTestOperatorTester_ForwardingScheduler *create_RxTestOperatorTester_ForwardingScheduler_initWithRxScheduler_(RxScheduler *underlying) {
  J2OBJC_CREATE_IMPL(RxTestOperatorTester_ForwardingScheduler, initWithRxScheduler_, underlying)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxTestOperatorTester_ForwardingScheduler)
