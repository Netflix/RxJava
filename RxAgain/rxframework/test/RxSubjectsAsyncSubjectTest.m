//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/AsyncSubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMockMObserver.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsAsyncSubject.h"
#include "RxSubjectsAsyncSubjectTest.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxSubjectsAsyncSubjectTest () {
 @public
  NSException *testException_;
}

@end

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubjectTest, testException_, NSException *)

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$18();

@interface RxSubjectsAsyncSubjectTest_SubjectObserverThread : JavaLangThread {
 @public
  RxSubjectsAsyncSubject *subject_;
  JavaUtilConcurrentAtomicAtomicReference *value_;
}

- (instancetype)initWithRxSubjectsAsyncSubject:(RxSubjectsAsyncSubject *)subject;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubjectTest_SubjectObserverThread)

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubjectTest_SubjectObserverThread, subject_, RxSubjectsAsyncSubject *)
J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubjectTest_SubjectObserverThread, value_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubjectTest_SubjectObserverThread *self, RxSubjectsAsyncSubject *subject);

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_SubjectObserverThread *new_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *subject) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_SubjectObserverThread *create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *subject);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsAsyncSubjectTest_SubjectObserverThread)

@interface RxSubjectsAsyncSubjectTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value1_;
}

- (void)callWithId:(NSString *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubjectTest_$1)

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubjectTest_$1, val$value1_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsAsyncSubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_$1 *new_RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_$1 *create_RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxSubjectsAsyncSubjectTest_$2 : NSObject < JavaLangRunnable > {
 @public
  RxSubjectsAsyncSubject *val$subject_;
}

- (void)run;

- (instancetype)initWithRxSubjectsAsyncSubject:(RxSubjectsAsyncSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubjectTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubjectTest_$2, val$subject_, RxSubjectsAsyncSubject *)

__attribute__((unused)) static void RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubjectTest_$2 *self, RxSubjectsAsyncSubject *capture$0);

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_$2 *new_RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsAsyncSubjectTest_$2 *create_RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *capture$0);

@implementation RxSubjectsAsyncSubjectTest

- (void)testNeverCompleted {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:testException_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testCompleted {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testNull {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:nil];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:nil];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSubscribeAfterCompleted {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  [subject subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSubscribeAfterError {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"failed");
  [subject onErrorWithNSException:re];
  [subject subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:re];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testError {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onErrorWithNSException:testException_];
  [subject onNextWithId:@"four"];
  [subject onErrorWithNSException:create_NSException_init()];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testUnsubscribeBeforeCompleted {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  id<RxSubscription> subscription = [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testEmptySubjectCompleted {
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:nil];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testSubscribeCompletionRaceCondition {
  for (jint i = 0; i < 50; i++) {
    RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
    JavaUtilConcurrentAtomicAtomicReference *value1 = create_JavaUtilConcurrentAtomicAtomicReference_init();
    [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxFunctionsAction1:create_RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(value1)];
    JavaLangThread *t1 = create_JavaLangThread_initWithJavaLangRunnable_(create_RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(subject));
    RxSubjectsAsyncSubjectTest_SubjectObserverThread *t2 = create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(subject);
    RxSubjectsAsyncSubjectTest_SubjectObserverThread *t3 = create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(subject);
    RxSubjectsAsyncSubjectTest_SubjectObserverThread *t4 = create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(subject);
    RxSubjectsAsyncSubjectTest_SubjectObserverThread *t5 = create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(subject);
    [t2 start];
    [t3 start];
    [t1 start];
    [t4 start];
    [t5 start];
    @try {
      [t1 join];
      [t2 join];
      [t3 join];
      [t4 join];
      [t5 join];
    }
    @catch (JavaLangInterruptedException *e) {
      @throw create_JavaLangRuntimeException_initWithNSException_(e);
    }
    OrgJunitAssert_assertEqualsWithId_withId_(@"value", [value1 get]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"value", [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(t2->value_)) get]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"value", [t3->value_ get]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"value", [t4->value_ get]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"value", [t5->value_ get]);
  }
}

- (void)testOnErrorThrowsDoesntPreventDelivery {
  RxSubjectsAsyncSubject *ps = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(ps)) subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *e) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testOnErrorThrowsDoesntPreventDelivery2 {
  RxSubjectsAsyncSubject *ps = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(ps)) subscribe];
  [ps subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  [ps subscribe];
  [ps subscribe];
  [ps subscribe];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size]);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testCurrentStateMethodsNormal {
  RxSubjectsAsyncSubject *as = RxSubjectsAsyncSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsAsyncSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertTrueWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsEmpty {
  RxSubjectsAsyncSubject *as = RxSubjectsAsyncSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsAsyncSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsError {
  RxSubjectsAsyncSubject *as = RxSubjectsAsyncSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsAsyncSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([[as getThrowable] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testAsyncSubjectValueRelay {
  RxSubjectsAsyncSubject *async = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [async onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
}

- (void)testAsyncSubjectValueEmpty {
  RxSubjectsAsyncSubject *async = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(async)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
}

- (void)testAsyncSubjectValueError {
  RxSubjectsAsyncSubject *async = RxSubjectsAsyncSubject_create();
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  [((RxSubjectsAsyncSubject *) nil_chk(async)) onErrorWithNSException:te];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertSameWithId_withId_(te, [async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
}

- (void)backpressureOnline {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) subscribeWithRxSubscriber:ts];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subject onCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)backpressureOffline {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsAsyncSubject *subject = RxSubjectsAsyncSubject_create();
  [((RxSubjectsAsyncSubject *) nil_chk(subject)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subject onCompleted];
  [subject subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsAsyncSubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(testException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testNeverCompleted);
  methods[1].selector = @selector(testCompleted);
  methods[2].selector = @selector(testNull);
  methods[3].selector = @selector(testSubscribeAfterCompleted);
  methods[4].selector = @selector(testSubscribeAfterError);
  methods[5].selector = @selector(testError);
  methods[6].selector = @selector(testUnsubscribeBeforeCompleted);
  methods[7].selector = @selector(testEmptySubjectCompleted);
  methods[8].selector = @selector(testSubscribeCompletionRaceCondition);
  methods[9].selector = @selector(testOnErrorThrowsDoesntPreventDelivery);
  methods[10].selector = @selector(testOnErrorThrowsDoesntPreventDelivery2);
  methods[11].selector = @selector(testCurrentStateMethodsNormal);
  methods[12].selector = @selector(testCurrentStateMethodsEmpty);
  methods[13].selector = @selector(testCurrentStateMethodsError);
  methods[14].selector = @selector(testAsyncSubjectValueRelay);
  methods[15].selector = @selector(testAsyncSubjectValueEmpty);
  methods[16].selector = @selector(testAsyncSubjectValueError);
  methods[17].selector = @selector(backpressureOnline);
  methods[18].selector = @selector(backpressureOffline);
  methods[19].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testException_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubjectsAsyncSubjectTest__Annotations$0, (void *)&RxSubjectsAsyncSubjectTest__Annotations$1, (void *)&RxSubjectsAsyncSubjectTest__Annotations$2, (void *)&RxSubjectsAsyncSubjectTest__Annotations$3, (void *)&RxSubjectsAsyncSubjectTest__Annotations$4, (void *)&RxSubjectsAsyncSubjectTest__Annotations$5, (void *)&RxSubjectsAsyncSubjectTest__Annotations$6, (void *)&RxSubjectsAsyncSubjectTest__Annotations$7, (void *)&RxSubjectsAsyncSubjectTest__Annotations$8, (void *)&RxSubjectsAsyncSubjectTest__Annotations$9, (void *)&RxSubjectsAsyncSubjectTest__Annotations$10, (void *)&RxSubjectsAsyncSubjectTest__Annotations$11, (void *)&RxSubjectsAsyncSubjectTest__Annotations$12, (void *)&RxSubjectsAsyncSubjectTest__Annotations$13, (void *)&RxSubjectsAsyncSubjectTest__Annotations$14, (void *)&RxSubjectsAsyncSubjectTest__Annotations$15, (void *)&RxSubjectsAsyncSubjectTest__Annotations$16, (void *)&RxSubjectsAsyncSubjectTest__Annotations$17, (void *)&RxSubjectsAsyncSubjectTest__Annotations$18, "LRxSubjectsAsyncSubjectTest_SubjectObserverThread;" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubjectTest = { "AsyncSubjectTest", "rx.subjects", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, 19, -1, -1, -1 };
  return &_RxSubjectsAsyncSubjectTest;
}

@end

void RxSubjectsAsyncSubjectTest_init(RxSubjectsAsyncSubjectTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testException_, new_NSException_init());
}

RxSubjectsAsyncSubjectTest *new_RxSubjectsAsyncSubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubjectTest, init)
}

RxSubjectsAsyncSubjectTest *create_RxSubjectsAsyncSubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubjectTest, init)
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsAsyncSubjectTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsAsyncSubjectTest)

@implementation RxSubjectsAsyncSubjectTest_SubjectObserverThread

- (instancetype)initWithRxSubjectsAsyncSubject:(RxSubjectsAsyncSubject *)subject {
  RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(self, subject);
  return self;
}

- (void)run {
  @try {
    NSString *v = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsAsyncSubject *) nil_chk(subject_)) timeoutWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) toBlocking])) single];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) setWithId:v];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(subject_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubjectsAsyncSubject:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subject_", "LRxSubjectsAsyncSubject;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsAsyncSubject;", "(Lrx/subjects/AsyncSubject<Ljava/lang/String;>;)V", "Lrx/subjects/AsyncSubject<Ljava/lang/String;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxSubjectsAsyncSubjectTest;" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubjectTest_SubjectObserverThread = { "SubjectObserverThread", "rx.subjects", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, -1, -1 };
  return &_RxSubjectsAsyncSubjectTest_SubjectObserverThread;
}

@end

void RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubjectTest_SubjectObserverThread *self, RxSubjectsAsyncSubject *subject) {
  JavaLangThread_init(self);
  JreStrongAssignAndConsume(&self->value_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->subject_, subject);
}

RxSubjectsAsyncSubjectTest_SubjectObserverThread *new_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *subject) {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubjectTest_SubjectObserverThread, initWithRxSubjectsAsyncSubject_, subject)
}

RxSubjectsAsyncSubjectTest_SubjectObserverThread *create_RxSubjectsAsyncSubjectTest_SubjectObserverThread_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *subject) {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubjectTest_SubjectObserverThread, initWithRxSubjectsAsyncSubject_, subject)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsAsyncSubjectTest_SubjectObserverThread)

@implementation RxSubjectsAsyncSubjectTest_$1

- (void)callWithId:(NSString *)t1 {
  @try {
    JavaLangThread_sleepWithLong_(50);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value1_)) setWithId:t1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value1_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxSubjectsAsyncSubjectTest;", "testSubscribeCompletionRaceCondition", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubjectTest_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxSubjectsAsyncSubjectTest_$1;
}

@end

void RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsAsyncSubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$value1_, capture$0);
  NSObject_init(self);
}

RxSubjectsAsyncSubjectTest_$1 *new_RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxSubjectsAsyncSubjectTest_$1 *create_RxSubjectsAsyncSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxSubjectsAsyncSubjectTest_$2

- (void)run {
  [((RxSubjectsAsyncSubject *) nil_chk(val$subject_)) onNextWithId:@"value"];
  [val$subject_ onCompleted];
}

- (instancetype)initWithRxSubjectsAsyncSubject:(RxSubjectsAsyncSubject *)capture$0 {
  RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubjectsAsyncSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subject_", "LRxSubjectsAsyncSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsAsyncSubject;", "(Lrx/subjects/AsyncSubject<Ljava/lang/String;>;)V", "Lrx/subjects/AsyncSubject<Ljava/lang/String;>;", "LRxSubjectsAsyncSubjectTest;", "testSubscribeCompletionRaceCondition" };
  static const J2ObjcClassInfo _RxSubjectsAsyncSubjectTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubjectsAsyncSubjectTest_$2;
}

@end

void RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubjectTest_$2 *self, RxSubjectsAsyncSubject *capture$0) {
  JreStrongAssign(&self->val$subject_, capture$0);
  NSObject_init(self);
}

RxSubjectsAsyncSubjectTest_$2 *new_RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsAsyncSubjectTest_$2, initWithRxSubjectsAsyncSubject_, capture$0)
}

RxSubjectsAsyncSubjectTest_$2 *create_RxSubjectsAsyncSubjectTest_$2_initWithRxSubjectsAsyncSubject_(RxSubjectsAsyncSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsAsyncSubjectTest_$2, initWithRxSubjectsAsyncSubject_, capture$0)
}
