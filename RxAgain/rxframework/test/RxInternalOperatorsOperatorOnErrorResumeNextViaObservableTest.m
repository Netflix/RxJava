//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$5();

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> s_;
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s
                     withNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable, s_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *self, id<RxSubscription> s, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable)

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable:(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *)outer$
                                                                                    withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1, this$0_, RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init();

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init();

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init();

@interface RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  jint c_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init();

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest

- (void)testResumeNext {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(s, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"fail", @"two", @"three" } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  RxObservable *resume = RxObservable_justWithId_withId_(@"twoResume", @"threeResume");
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onErrorResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"threeResume"];
}

- (void)testMapResumeAsyncNext {
  id<RxSubscription> sr = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxObservable *w = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"fail", @"two", @"three", @"fail");
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *f = create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(sr, [IOSObjectArray arrayWithObjects:(id[]){ @"twoResume", @"threeResume" } count:2 type:NSString_class_()]);
  RxObservable *resume = RxObservable_createWithRxObservable_OnSubscribe_(f);
  w = [((RxObservable *) nil_chk(w)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init()];
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onErrorResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"twoResume"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"threeResume"];
}

- (void)testResumeNextWithFailedOnSubscribe {
  RxObservable *testObservable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init());
  RxObservable *resume = RxObservable_justWithId_(@"resume");
  RxObservable *observable = [((RxObservable *) nil_chk(testObservable)) onErrorResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"resume"];
}

- (void)testResumeNextWithFailedOnSubscribeAsync {
  RxObservable *testObservable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init());
  RxObservable *resume = RxObservable_justWithId_(@"resume");
  RxObservable *observable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(testObservable)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()])) onErrorResumeNextWithRxObservable:resume];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(observable)) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"resume"];
}

- (void)testBackpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 100000))) onErrorResumeNextWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

- (void)normalBackpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) onErrorResumeNextWithRxObservable:RxObservable_rangeWithInt_withInt_(3, 2)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:2];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ps onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Forced failure")];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:4 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testResumeNext);
  methods[1].selector = @selector(testMapResumeAsyncNext);
  methods[2].selector = @selector(testResumeNextWithFailedOnSubscribe);
  methods[3].selector = @selector(testResumeNextWithFailedOnSubscribeAsync);
  methods[4].selector = @selector(testBackpressure);
  methods[5].selector = @selector(normalBackpressure);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$0, (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$1, (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$2, (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$3, (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$4, (void *)&RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$5, "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest = { "OperatorOnErrorResumeNextViaObservableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, 6, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest, init)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest)

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s
                     withNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(self, s, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable subscribed to ..."];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:s_];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestObservable thread"];
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscription:withNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 2, 3, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *self, id<RxSubscription> s, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->s_, s);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable, initWithRxSubscription_withNSStringArray_, s, values)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_initWithRxSubscription_withNSStringArray_(id<RxSubscription> s, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable, initWithRxSubscription_withNSStringArray_, s, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable)

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        if ([@"fail" isEqual:s]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"TestObservable onCompleted"];
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"TestObservable onError: ", e)];
    [((RxSubscriber *) nil_chk(val$observer_)) onErrorWithNSException:e];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable:(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *)outer$
                                                                                    withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorOnErrorResumeNextViaObservableTest$TestObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1

- (NSString *)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"BadMapper:", s)];
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;", "testMapResumeAsyncNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1, init)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$1, init)
}

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2

- (void)callWithId:(RxSubscriber *)t1 {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"force failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;", "testResumeNextWithFailedOnSubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2, init)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$2, init)
}

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3

- (void)callWithId:(RxSubscriber *)t1 {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"force failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;", "testResumeNextWithFailedOnSubscribeAsync", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3, init)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$3, init)
}

@implementation RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  if (c_++ <= 1) {
    @try {
      JavaLangThread_sleepWithLong_(500);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4;
}

@end

void RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *self) {
  NSObject_init(self);
  self->c_ = 0;
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *new_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4, init)
}

RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4 *create_RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_$4, init)
}
