//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorObserveOnTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorObserveOnTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/function/Consumer.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorObserveOnTest ()

+ (jint)randomIntFrom0to100;

@end

__attribute__((unused)) static jint RxInternalOperatorsOperatorObserveOnTest_randomIntFrom0to100();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$28();

@interface RxInternalOperatorsOperatorObserveOnTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  NSString *val$parentThreadName_;
}

- (void)callWithId:(NSString *)s;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$1, val$parentThreadName_, NSString *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(RxInternalOperatorsOperatorObserveOnTest_$1 *self, NSString *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(NSString *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$2_init(RxInternalOperatorsOperatorObserveOnTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$2 *new_RxInternalOperatorsOperatorObserveOnTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$2 *create_RxInternalOperatorsOperatorObserveOnTest_$2_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$completedLatch_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$3, val$completedLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$3 *new_RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$3 *create_RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$4 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$4_init(RxInternalOperatorsOperatorObserveOnTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$4 *new_RxInternalOperatorsOperatorObserveOnTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$4 *create_RxInternalOperatorsOperatorObserveOnTest_$4_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$5 *new_RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$5 *create_RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$6 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$6_init(RxInternalOperatorsOperatorObserveOnTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$6 *new_RxInternalOperatorsOperatorObserveOnTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$6 *create_RxInternalOperatorsOperatorObserveOnTest_$6_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$7, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$7 *new_RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$7 *create_RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$8 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$8_init(RxInternalOperatorsOperatorObserveOnTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$8 *new_RxInternalOperatorsOperatorObserveOnTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$8 *create_RxInternalOperatorsOperatorObserveOnTest_$8_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$9 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$9, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$9 *new_RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$9 *create_RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$10 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$completeTime_;
  JavaUtilConcurrentCountDownLatch *val$completedLatch_;
  JavaUtilConcurrentCountDownLatch *val$nextLatch_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$10, val$completeTime_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$10, val$completedLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$10, val$nextLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$10 *new_RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$10 *create_RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxInternalOperatorsOperatorObserveOnTest_$11 : NSObject < JavaLangIterable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$generated_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$11, val$generated_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$11 *new_RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$11 *create_RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$11_$1 : NSObject < JavaUtilIterator > {
 @public
  RxInternalOperatorsOperatorObserveOnTest_$11 *this$0_;
}

- (void)remove;

- (JavaLangInteger *)next;

- (jboolean)hasNext;

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$11:(RxInternalOperatorsOperatorObserveOnTest_$11 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$11_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$11_$1, this$0_, RxInternalOperatorsOperatorObserveOnTest_$11 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$11 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$11_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$11_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11 *outer$);

@interface RxInternalOperatorsOperatorObserveOnTest_$12 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$12_init(RxInternalOperatorsOperatorObserveOnTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$12 *new_RxInternalOperatorsOperatorObserveOnTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$12 *create_RxInternalOperatorsOperatorObserveOnTest_$12_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$13 : NSObject < JavaLangIterable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$generated_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$13, val$generated_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$13 *new_RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$13 *create_RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$13_$1 : NSObject < JavaUtilIterator > {
 @public
  RxInternalOperatorsOperatorObserveOnTest_$13 *this$0_;
}

- (void)remove;

- (JavaLangInteger *)next;

- (jboolean)hasNext;

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$13:(RxInternalOperatorsOperatorObserveOnTest_$13 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$13_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$13_$1, this$0_, RxInternalOperatorsOperatorObserveOnTest_$13 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$13 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$13_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$13_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13 *outer$);

@interface RxInternalOperatorsOperatorObserveOnTest_$14 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$14_init(RxInternalOperatorsOperatorObserveOnTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$14 *new_RxInternalOperatorsOperatorObserveOnTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$14 *create_RxInternalOperatorsOperatorObserveOnTest_$14_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$15 : NSObject < JavaLangIterable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$generated_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$15, val$generated_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$15 *new_RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$15 *create_RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$15_$1 : NSObject < JavaUtilIterator > {
 @public
  RxInternalOperatorsOperatorObserveOnTest_$15 *this$0_;
}

- (void)remove;

- (JavaLangInteger *)next;

- (jboolean)hasNext;

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$15:(RxInternalOperatorsOperatorObserveOnTest_$15 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$15_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$15_$1, this$0_, RxInternalOperatorsOperatorObserveOnTest_$15 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$15 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$15_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$15_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15 *outer$);

@interface RxInternalOperatorsOperatorObserveOnTest_$16 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$16, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$16 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$16 *new_RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$16 *create_RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$17 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$17, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$17 *new_RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$17 *create_RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$18 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangLong *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$18)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$18_init(RxInternalOperatorsOperatorObserveOnTest_$18 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$18 *new_RxInternalOperatorsOperatorObserveOnTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$18 *create_RxInternalOperatorsOperatorObserveOnTest_$18_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$19 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(JavaLangLong *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$19)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$19_init(RxInternalOperatorsOperatorObserveOnTest_$19 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$19 *new_RxInternalOperatorsOperatorObserveOnTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$19 *create_RxInternalOperatorsOperatorObserveOnTest_$19_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$20 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxNotification *)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$20)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$20_init(RxInternalOperatorsOperatorObserveOnTest_$20 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$20 *new_RxInternalOperatorsOperatorObserveOnTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$20 *create_RxInternalOperatorsOperatorObserveOnTest_$20_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$21 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxNotification *)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$21_init(RxInternalOperatorsOperatorObserveOnTest_$21 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$21 *new_RxInternalOperatorsOperatorObserveOnTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$21 *create_RxInternalOperatorsOperatorObserveOnTest_$21_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$22 : NSObject < RxFunctionsFunc2 >

- (JavaLangLong *)callWithId:(JavaLangLong *)t1
                      withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$22)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$22_init(RxInternalOperatorsOperatorObserveOnTest_$22 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$22 *new_RxInternalOperatorsOperatorObserveOnTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$22 *create_RxInternalOperatorsOperatorObserveOnTest_$22_init();

@interface RxInternalOperatorsOperatorObserveOnTest_$23 : RxSubscriber {
 @public
  jboolean first_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$23)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$23, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$23, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$23 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$23 *new_RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$23 *create_RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalOperatorsOperatorObserveOnTest_$24 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)n;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$24)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$24, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$24 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$24 *new_RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$24 *create_RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$25 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$25)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$25, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$25 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$25 *new_RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$25 *create_RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$26 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)v;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$26)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$26, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$26 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$26 *new_RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$26 *create_RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorObserveOnTest_$27 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)r;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOnTest_$27)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOnTest_$27, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$27 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$27 *new_RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOnTest_$27 *create_RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@implementation RxInternalOperatorsOperatorObserveOnTest

- (void)testObserveOn {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) observeOnWithRxScheduler:RxSchedulersSchedulers_immediate()])) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testOrdering {
  RxObservable *obs = RxObservable_justWithId_withId_withId_withId_withId_(@"one", nil, @"two", @"three", @"four");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(obs)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  if ([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size] > 0) {
    for (NSException * __strong t in nil_chk([ts getOnErrorEvents])) {
      [((NSException *) nil_chk(t)) printStackTrace];
    }
    OrgJunitAssert_failWithNSString_(@"failed with exception");
  }
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:nil];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testThreadName {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Main Thread: ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
  RxObservable *obs = RxObservable_justWithId_withId_withId_withId_withId_(@"one", nil, @"two", @"three", @"four");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  NSString *parentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  JavaUtilConcurrentCountDownLatch *completedLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  obs = [((RxObservable *) nil_chk(obs)) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(parentThreadName)];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(obs)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$2_init()])) doAfterTerminateWithRxFunctionsAction0:create_RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(completedLatch)])) subscribeWithRxObserver:observer];
  if (![completedLatch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"timed out waiting");
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(5)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)observeOnTheSameSchedulerTwice {
  RxScheduler *scheduler = RxSchedulersSchedulers_immediate();
  RxObservable *o = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *o2 = [((RxObservable *) nil_chk(o)) observeOnWithRxScheduler:scheduler];
  id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observer2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder1 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrder2 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2 } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(o2)) subscribeWithRxObserver:observer1];
  [o2 subscribeWithRxObserver:observer2];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder1)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [inOrder1 verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder2)) verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [inOrder2 verifyNoMoreInteractions];
}

- (void)observeSameOnMultipleSchedulers {
  RxSchedulersTestScheduler *scheduler1 = create_RxSchedulersTestScheduler_init();
  RxSchedulersTestScheduler *scheduler2 = create_RxSchedulersTestScheduler_init();
  RxObservable *o = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *o1 = [((RxObservable *) nil_chk(o)) observeOnWithRxScheduler:scheduler1];
  RxObservable *o2 = [o observeOnWithRxScheduler:scheduler2];
  id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observer2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder1 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrder2 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2 } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(o1)) subscribeWithRxObserver:observer1];
  [((RxObservable *) nil_chk(o2)) subscribeWithRxObserver:observer2];
  [scheduler1 advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [scheduler2 advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder1)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [inOrder1 verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder2)) verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:observer2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [inOrder2 verifyNoMoreInteractions];
}

- (void)testObserveOnWithNewThreadScheduler {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint _multiple = 99;
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100000))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorObserveOnTest_$4_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) toBlocking])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
}

- (void)testObserveOnWithComputationScheduler {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint _multiple = 99;
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100000))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorObserveOnTest_$6_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
}

- (void)testObserveOnOrderingConcurrency {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint _multiple = 99;
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10000))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorObserveOnTest_$8_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
}

- (void)testNonBlockingOuterWhileBlockingOnNext {
  JavaUtilConcurrentCountDownLatch *completedLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *nextLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicLong *completeTime = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxObserver:create_RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(completeTime, completedLatch, nextLatch)];
  jlong afterSubscribeTime = JavaLangSystem_nanoTime();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"After subscribe: ", [completedLatch getCount])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [completedLatch getCount]);
  [nextLatch countDown];
  [completedLatch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertTrueWithBoolean_([completeTime get] > afterSubscribeTime);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$J", @"onComplete nanos after subscribe: ", ([completeTime get] - afterSubscribeTime))];
}

+ (jint)randomIntFrom0to100 {
  return RxInternalOperatorsOperatorObserveOnTest_randomIntFrom0to100();
}

- (void)testDelayedErrorDeliveryWhenSafeSubscriberUnsubscribes {
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *source = RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()), RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) observeOnWithRxScheduler:testScheduler])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [testScheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
}

- (void)testAfterUnsubscribeCalledThenObserverOnNextNeverCalled {
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) observeOnWithRxScheduler:testScheduler])) subscribeWithRxObserver:observer];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [testScheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
}

- (void)testBackpressureWithTakeAfter {
  JavaUtilConcurrentAtomicAtomicInteger *generated = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *observable = RxObservable_fromWithJavaLangIterable_(create_RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(generated));
  RxObserversTestSubscriber *testSubscriber = create_RxInternalOperatorsOperatorObserveOnTest_$12_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:3])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber awaitTerminalEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:[testSubscriber getOnNextEvents]];
  [testSubscriber assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:3 type:JavaLangInteger_class_()])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Generated: ", [generated get])];
  OrgJunitAssert_assertTrueWithBoolean_([generated get] >= 3 && [generated get] <= JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

- (void)testBackpressureWithTakeAfterAndMultipleBatches {
  jint numForBatches = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 3 + 1;
  JavaUtilConcurrentAtomicAtomicInteger *generated = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *observable = RxObservable_fromWithJavaLangIterable_(create_RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(generated));
  RxObserversTestSubscriber *testSubscriber = create_RxInternalOperatorsOperatorObserveOnTest_$14_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:numForBatches])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber awaitTerminalEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:[testSubscriber getOnNextEvents]];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Generated: ", [generated get])];
  OrgJunitAssert_assertTrueWithBoolean_([generated get] >= numForBatches && [generated get] <= numForBatches + JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

- (void)testBackpressureWithTakeBefore {
  JavaUtilConcurrentAtomicAtomicInteger *generated = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *observable = RxObservable_fromWithJavaLangIterable_(create_RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(generated));
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) takeWithInt:7])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber awaitTerminalEvent];
  [testSubscriber assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:7 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(7, [generated get]);
}

- (void)testQueueFullEmitsError {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObservable *observable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(latch));
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_initWithRxObserver_(create_RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(latch));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber awaitTerminalEvent];
  id<JavaUtilList> errors = [testSubscriber getOnErrorEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(errors)) size]);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Errors: ", errors)];
  NSException *t = [errors getWithInt:0];
  if ([t isKindOfClass:[RxExceptionsMissingBackpressureException class]]) {
  }
  else {
    if ([[((NSException *) nil_chk(t)) getCause] isKindOfClass:[RxExceptionsMissingBackpressureException class]]) {
    }
    else {
      OrgJunitAssert_failWithNSString_(@"Expecting MissingBackpressureException");
    }
  }
}

- (void)testQueueFullEmitsErrorWithVaryingBufferSize {
  for (jint i = 1; i <= 1024; i = i * 2) {
    jint capacity = i;
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @">> testQueueFullEmitsErrorWithVaryingBufferSize @ ", i)];
    RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
    RxSchedulersTestScheduler *test = RxSchedulersSchedulers_test();
    [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) observeOnWithRxScheduler:test withInt:capacity])) subscribeWithRxSubscriber:ts];
    for (jint j = 0; j < capacity + 10; j++) {
      [ps onNextWithId:JavaLangInteger_valueOfWithInt_(j)];
    }
    [ps onCompleted];
    [((RxSchedulersTestScheduler *) nil_chk(test)) advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts assertNoValues];
    [ts assertErrorWithIOSClass:RxExceptionsMissingBackpressureException_class_()];
    [ts assertNotCompleted];
  }
}

- (void)testAsyncChild {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 100000))) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

- (void)testOnErrorCutsAheadOfOnNext {
  for (jint i = 0; i < 50; i++) {
    RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
    JavaUtilConcurrentAtomicAtomicLong *counter = create_JavaUtilConcurrentAtomicAtomicLong_init();
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(create_RxInternalOperatorsOperatorObserveOnTest_$18_init());
    [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(subject)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
    while ([counter get] < 102400) {
      [subject onNextWithId:JavaLangLong_valueOfWithLong_([counter get])];
      [counter incrementAndGet];
    }
    [ts awaitTerminalEvent];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
    OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsMissingBackpressureException class]]);
    id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk(onNextEvents)) isEmpty] || [onNextEvents size] == [((JavaLangLong *) nil_chk([onNextEvents getWithInt:[onNextEvents size] - 1])) longLongValue] + 1);
    OrgJunitAssert_assertTrueWithBoolean_([onNextEvents size] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
  }
}

- (void)testHotOperatorBackpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(0, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorObserveOnTest_$19_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Errors: ", [ts getOnErrorEvents])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxExceptionsMissingBackpressureException_class_(), [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) java_getClass]);
}

- (void)testErrorPropagatesWhenNoOutstandingRequests {
  RxObservable *timer = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(0, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)))) doOnEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$20_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) doOnEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$21_init()];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_combineLatestWithRxObservable_withRxObservable_withRxFunctionsFunc2_(timer, RxObservable_never(), create_RxInternalOperatorsOperatorObserveOnTest_$22_init()))) takeWithInt:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxExceptionsMissingBackpressureException_class_(), [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) java_getClass]);
}

- (void)testRequestOverflow {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(latch, count)];
  OrgJunitAssert_assertTrueWithBoolean_([latch awaitWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [count get]);
}

- (void)testNoMoreRequestsAfterUnsubscribe {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<JavaUtilList> requests = JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilArrayList_init());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000000))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(requests)])) observeOnWithRxScheduler:RxSchedulersSchedulers_io()])) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  OrgJunitAssert_assertTrueWithBoolean_([latch awaitWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(requests)) size]);
}

- (void)testErrorDelayed {
  RxSchedulersTestScheduler *s = RxSchedulersSchedulers_test();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) observeOnWithRxScheduler:s withBoolean:true])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [((RxSchedulersTestScheduler *) nil_chk(s)) advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [s advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:3];
  [s advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)testErrorDelayedAsync {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation() withBoolean:true])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)requestExactCompletesImmediately {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSchedulersTestScheduler *test = RxSchedulersSchedulers_test();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) observeOnWithRxScheduler:test])) subscribeWithRxSubscriber:ts];
  [((RxSchedulersTestScheduler *) nil_chk(test)) advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:10];
  [test advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueCountWithInt:10];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)fixedReplenishPattern {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSchedulersTestScheduler *test = RxSchedulersSchedulers_test();
  id<JavaUtilList> requests = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(requests)])) observeOnWithRxScheduler:test withInt:16])) subscribeWithRxSubscriber:ts];
  [((RxSchedulersTestScheduler *) nil_chk(test)) advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:20];
  [test advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts requestMoreWithLong:10];
  [test advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts requestMoreWithLong:50];
  [test advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts requestMoreWithLong:35];
  [test advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueCountWithInt:100];
  [ts assertCompleted];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(16LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL), JavaLangLong_valueOfWithLong_(12LL) } count:9 type:JavaLangLong_class_()]), requests);
}

- (void)bufferSizesWork {
  for (jint i = 1; i <= 1024; i = i * 2) {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000 * 1000))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation() withInt:i])) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEvent];
    [ts assertValueCountWithInt:1000 * 1000];
    [ts assertCompleted];
    [ts assertNoErrors];
  }
}

- (void)synchronousRebatching {
  id<JavaUtilList> requests = create_JavaUtilArrayList_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 50))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(requests)])) rebatchRequestsWithInt:20])) subscribeWithRxSubscriber:ts];
  [ts assertValueCountWithInt:50];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(20LL), JavaLangLong_valueOfWithLong_(15LL), JavaLangLong_valueOfWithLong_(15LL), JavaLangLong_valueOfWithLong_(15LL) } count:4 type:JavaLangLong_class_()]), requests);
}

- (void)rebatchRequestsArgumentCheck {
  @try {
    [((RxObservable *) nil_chk(RxObservable_never())) rebatchRequestsWithInt:-99];
    OrgJunitAssert_failWithNSString_(@"Didn't throw IAE");
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"n > 0 required but it was -99", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 9, -1 },
    { NULL, "I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testObserveOn);
  methods[1].selector = @selector(testOrdering);
  methods[2].selector = @selector(testThreadName);
  methods[3].selector = @selector(observeOnTheSameSchedulerTwice);
  methods[4].selector = @selector(observeSameOnMultipleSchedulers);
  methods[5].selector = @selector(testObserveOnWithNewThreadScheduler);
  methods[6].selector = @selector(testObserveOnWithComputationScheduler);
  methods[7].selector = @selector(testObserveOnOrderingConcurrency);
  methods[8].selector = @selector(testNonBlockingOuterWhileBlockingOnNext);
  methods[9].selector = @selector(randomIntFrom0to100);
  methods[10].selector = @selector(testDelayedErrorDeliveryWhenSafeSubscriberUnsubscribes);
  methods[11].selector = @selector(testAfterUnsubscribeCalledThenObserverOnNextNeverCalled);
  methods[12].selector = @selector(testBackpressureWithTakeAfter);
  methods[13].selector = @selector(testBackpressureWithTakeAfterAndMultipleBatches);
  methods[14].selector = @selector(testBackpressureWithTakeBefore);
  methods[15].selector = @selector(testQueueFullEmitsError);
  methods[16].selector = @selector(testQueueFullEmitsErrorWithVaryingBufferSize);
  methods[17].selector = @selector(testAsyncChild);
  methods[18].selector = @selector(testOnErrorCutsAheadOfOnNext);
  methods[19].selector = @selector(testHotOperatorBackpressure);
  methods[20].selector = @selector(testErrorPropagatesWhenNoOutstandingRequests);
  methods[21].selector = @selector(testRequestOverflow);
  methods[22].selector = @selector(testNoMoreRequestsAfterUnsubscribe);
  methods[23].selector = @selector(testErrorDelayed);
  methods[24].selector = @selector(testErrorDelayedAsync);
  methods[25].selector = @selector(requestExactCompletesImmediately);
  methods[26].selector = @selector(fixedReplenishPattern);
  methods[27].selector = @selector(bufferSizesWork);
  methods[28].selector = @selector(synchronousRebatching);
  methods[29].selector = @selector(rebatchRequestsArgumentCheck);
  methods[30].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$1, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$2, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$3, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$4, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$5, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$6, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$7, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$8, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$9, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$10, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$11, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$12, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$13, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$14, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$15, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$16, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$17, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$18, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$19, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$20, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$21, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$22, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$23, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$24, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$25, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$26, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$27, (void *)&RxInternalOperatorsOperatorObserveOnTest__Annotations$28 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest = { "OperatorObserveOnTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 31, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest;
}

@end

jint RxInternalOperatorsOperatorObserveOnTest_randomIntFrom0to100() {
  RxInternalOperatorsOperatorObserveOnTest_initialize();
  jlong x = JavaLangSystem_nanoTime();
  x ^= (JreLShift64(x, 21));
  x ^= (JreURShift64(x, 35));
  x ^= (JreLShift64(x, 4));
  return JavaLangMath_absWithInt_((jint) x % 100);
}

void RxInternalOperatorsOperatorObserveOnTest_init(RxInternalOperatorsOperatorObserveOnTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest *new_RxInternalOperatorsOperatorObserveOnTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest, init)
}

RxInternalOperatorsOperatorObserveOnTest *create_RxInternalOperatorsOperatorObserveOnTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorObserveOnTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorObserveOnTest)

@implementation RxInternalOperatorsOperatorObserveOnTest_$1

- (void)callWithId:(NSString *)s {
  NSString *threadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"Source ThreadName: ", threadName, @"  Expected => ", val$parentThreadName_)];
  OrgJunitAssert_assertEqualsWithId_withId_(val$parentThreadName_, threadName);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$parentThreadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$parentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorObserveOnTest;", "testThreadName", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$1;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(RxInternalOperatorsOperatorObserveOnTest_$1 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$parentThreadName_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$1, initWithNSString_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$1, initWithNSString_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$2

- (void)callWithId:(NSString *)t1 {
  NSString *threadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  jboolean correctThreadName = [((NSString *) nil_chk(threadName)) hasPrefix:@"RxNewThreadScheduler"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$Z", @"ObserveOn ThreadName: ", threadName, @"  Correct => ", correctThreadName)];
  OrgJunitAssert_assertTrueWithBoolean_(correctThreadName);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorObserveOnTest;", "testThreadName", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$2;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$2_init(RxInternalOperatorsOperatorObserveOnTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$2 *new_RxInternalOperatorsOperatorObserveOnTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$2, init)
}

RxInternalOperatorsOperatorObserveOnTest_$2 *create_RxInternalOperatorsOperatorObserveOnTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$2, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$3

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$completedLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completedLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completedLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorObserveOnTest;", "testThreadName" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$3;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$completedLatch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$3 *new_RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$3 *create_RxInternalOperatorsOperatorObserveOnTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$4

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 99);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnWithNewThreadScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$4;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$4_init(RxInternalOperatorsOperatorObserveOnTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$4 *new_RxInternalOperatorsOperatorObserveOnTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$4, init)
}

RxInternalOperatorsOperatorObserveOnTest_$4 *create_RxInternalOperatorsOperatorObserveOnTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$4, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$5

- (void)callWithId:(JavaLangInteger *)t1 {
  OrgJunitAssert_assertEqualsWithLong_withLong_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet] * 99, [((JavaLangInteger *) nil_chk(t1)) intValue]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxNewThreadScheduler"]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnWithNewThreadScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$5;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$5 *new_RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$5 *create_RxInternalOperatorsOperatorObserveOnTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$6

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 99);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnWithComputationScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$6;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$6_init(RxInternalOperatorsOperatorObserveOnTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$6 *new_RxInternalOperatorsOperatorObserveOnTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$6, init)
}

RxInternalOperatorsOperatorObserveOnTest_$6 *create_RxInternalOperatorsOperatorObserveOnTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$6, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$7

- (void)callWithId:(JavaLangInteger *)t1 {
  OrgJunitAssert_assertEqualsWithLong_withLong_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet] * 99, [((JavaLangInteger *) nil_chk(t1)) intValue]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxComputationScheduler"]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnWithComputationScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$7;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$7 *new_RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$7 *create_RxInternalOperatorsOperatorObserveOnTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$8

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  if (RxInternalOperatorsOperatorObserveOnTest_randomIntFrom0to100() > 98) {
    @try {
      JavaLangThread_sleepWithLong_(2);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 99);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnOrderingConcurrency", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$8;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$8_init(RxInternalOperatorsOperatorObserveOnTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$8 *new_RxInternalOperatorsOperatorObserveOnTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$8, init)
}

RxInternalOperatorsOperatorObserveOnTest_$8 *create_RxInternalOperatorsOperatorObserveOnTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$8, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$9

- (void)callWithId:(JavaLangInteger *)t1 {
  OrgJunitAssert_assertEqualsWithLong_withLong_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet] * 99, [((JavaLangInteger *) nil_chk(t1)) intValue]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxComputationScheduler"]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testObserveOnOrderingConcurrency", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$9;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$9 *new_RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$9 *create_RxInternalOperatorsOperatorObserveOnTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$10

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"onCompleted"];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$completeTime_)) setWithLong:JavaLangSystem_nanoTime()];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$completedLatch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(val$nextLatch_)) awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"it shouldn't have timed out");
    }
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"it shouldn't have failed");
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completeTime_);
  RELEASE_(val$completedLatch_);
  RELEASE_(val$nextLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completeTime_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$completedLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$nextLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicLong;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorObserveOnTest;", "testNonBlockingOuterWhileBlockingOnNext", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 3, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$10;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$completeTime_, capture$0);
  JreStrongAssign(&self->val$completedLatch_, capture$1);
  JreStrongAssign(&self->val$nextLatch_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$10 *new_RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorObserveOnTest_$10 *create_RxInternalOperatorsOperatorObserveOnTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$11

- (id<JavaUtilIterator>)iterator {
  return create_RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(self);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(val$generated_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$generated_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testBackpressureWithTakeAfter", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$11;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$generated_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$11 *new_RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$11 *create_RxInternalOperatorsOperatorObserveOnTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$11_$1

- (void)remove {
}

- (JavaLangInteger *)next {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$generated_)) getAndIncrement]);
}

- (jboolean)hasNext {
  return true;
}

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$11:(RxInternalOperatorsOperatorObserveOnTest_$11 *)outer$ {
  RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(remove);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(initWithRxInternalOperatorsOperatorObserveOnTest_$11:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorObserveOnTest_$11;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorObserveOnTest_$11;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$11_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$11_$1;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$11 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$11_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$11_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$11_, outer$)
}

RxInternalOperatorsOperatorObserveOnTest_$11_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$11_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$11_(RxInternalOperatorsOperatorObserveOnTest_$11 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$11_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$11_, outer$)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$12

- (void)onNextWithId:(JavaLangInteger *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"c t = ", t, @" thread ", JavaLangThread_currentThread())];
  [super onNextWithId:t];
  @try {
    JavaLangThread_sleepWithLong_(10);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorObserveOnTest_$12 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsOperatorObserveOnTest;", "testBackpressureWithTakeAfter", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$12;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$12_init(RxInternalOperatorsOperatorObserveOnTest_$12 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$12 *new_RxInternalOperatorsOperatorObserveOnTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$12, init)
}

RxInternalOperatorsOperatorObserveOnTest_$12 *create_RxInternalOperatorsOperatorObserveOnTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$12, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$13

- (id<JavaUtilIterator>)iterator {
  return create_RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(self);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(val$generated_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$generated_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testBackpressureWithTakeAfterAndMultipleBatches", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$13;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$generated_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$13 *new_RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$13 *create_RxInternalOperatorsOperatorObserveOnTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$13_$1

- (void)remove {
}

- (JavaLangInteger *)next {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$generated_)) getAndIncrement]);
}

- (jboolean)hasNext {
  return true;
}

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$13:(RxInternalOperatorsOperatorObserveOnTest_$13 *)outer$ {
  RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(remove);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(initWithRxInternalOperatorsOperatorObserveOnTest_$13:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorObserveOnTest_$13;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorObserveOnTest_$13;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$13_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$13_$1;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$13 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$13_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$13_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$13_, outer$)
}

RxInternalOperatorsOperatorObserveOnTest_$13_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$13_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$13_(RxInternalOperatorsOperatorObserveOnTest_$13 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$13_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$13_, outer$)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$14

- (void)onNextWithId:(JavaLangInteger *)t {
  [super onNextWithId:t];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorObserveOnTest_$14 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsOperatorObserveOnTest;", "testBackpressureWithTakeAfterAndMultipleBatches", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$14;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$14_init(RxInternalOperatorsOperatorObserveOnTest_$14 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$14 *new_RxInternalOperatorsOperatorObserveOnTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$14, init)
}

RxInternalOperatorsOperatorObserveOnTest_$14 *create_RxInternalOperatorsOperatorObserveOnTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$14, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$15

- (id<JavaUtilIterator>)iterator {
  return create_RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(self);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(val$generated_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$generated_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testBackpressureWithTakeBefore", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$15;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$generated_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$15 *new_RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$15 *create_RxInternalOperatorsOperatorObserveOnTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$15_$1

- (void)remove {
}

- (JavaLangInteger *)next {
  return JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$generated_)) getAndIncrement]);
}

- (jboolean)hasNext {
  return true;
}

- (instancetype)initWithRxInternalOperatorsOperatorObserveOnTest_$15:(RxInternalOperatorsOperatorObserveOnTest_$15 *)outer$ {
  RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(remove);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(initWithRxInternalOperatorsOperatorObserveOnTest_$15:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorObserveOnTest_$15;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorObserveOnTest_$15;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$15_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$15_$1;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15_$1 *self, RxInternalOperatorsOperatorObserveOnTest_$15 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$15_$1 *new_RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$15_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$15_, outer$)
}

RxInternalOperatorsOperatorObserveOnTest_$15_$1 *create_RxInternalOperatorsOperatorObserveOnTest_$15_$1_initWithRxInternalOperatorsOperatorObserveOnTest_$15_(RxInternalOperatorsOperatorObserveOnTest_$15 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$15_$1, initWithRxInternalOperatorsOperatorObserveOnTest_$15_, outer$)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$16

- (void)callWithId:(RxSubscriber *)o {
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) + 10; i++) {
    [((RxSubscriber *) nil_chk(o)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  [((RxSubscriber *) nil_chk(o)) onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorObserveOnTest;", "testQueueFullEmitsError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$16;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$16 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$16 *new_RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$16, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$16 *create_RxInternalOperatorsOperatorObserveOnTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$16, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$17

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) awaitWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorObserveOnTest;", "testQueueFullEmitsError", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$17;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$17 *new_RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$17, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$17 *create_RxInternalOperatorsOperatorObserveOnTest_$17_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$17, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$18

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangLong *)t {
  @try {
    JavaLangThread_sleepWithLong_(1);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangLong;", "LRxInternalOperatorsOperatorObserveOnTest;", "testOnErrorCutsAheadOfOnNext", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$18 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$18;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$18_init(RxInternalOperatorsOperatorObserveOnTest_$18 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$18 *new_RxInternalOperatorsOperatorObserveOnTest_$18_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$18, init)
}

RxInternalOperatorsOperatorObserveOnTest_$18 *create_RxInternalOperatorsOperatorObserveOnTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$18, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$19

- (NSString *)callWithId:(JavaLangLong *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:t1];
  @try {
    JavaLangThread_sleepWithLong_(100);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  return JreStrcat("@$", t1, @" slow value");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LRxInternalOperatorsOperatorObserveOnTest;", "testHotOperatorBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$19 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$19;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$19_init(RxInternalOperatorsOperatorObserveOnTest_$19 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$19 *new_RxInternalOperatorsOperatorObserveOnTest_$19_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$19, init)
}

RxInternalOperatorsOperatorObserveOnTest_$19 *create_RxInternalOperatorsOperatorObserveOnTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$19, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$20

- (void)callWithId:(RxNotification *)n {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorObserveOnTest;", "testErrorPropagatesWhenNoOutstandingRequests", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<-Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$20 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$20;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$20_init(RxInternalOperatorsOperatorObserveOnTest_$20 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$20 *new_RxInternalOperatorsOperatorObserveOnTest_$20_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$20, init)
}

RxInternalOperatorsOperatorObserveOnTest_$20 *create_RxInternalOperatorsOperatorObserveOnTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$20, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$21

- (void)callWithId:(RxNotification *)n {
  @try {
    JavaLangThread_sleepWithLong_(100);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorObserveOnTest;", "testErrorPropagatesWhenNoOutstandingRequests", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<-Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$21 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$21;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$21_init(RxInternalOperatorsOperatorObserveOnTest_$21 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$21 *new_RxInternalOperatorsOperatorObserveOnTest_$21_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$21, init)
}

RxInternalOperatorsOperatorObserveOnTest_$21 *create_RxInternalOperatorsOperatorObserveOnTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$21, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$22

- (JavaLangLong *)callWithId:(JavaLangLong *)t1
                      withId:(JavaLangInteger *)t2 {
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorObserveOnTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LJavaLangInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testErrorPropagatesWhenNoOutstandingRequests", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Long;Ljava/lang/Integer;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$22 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$22;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$22_init(RxInternalOperatorsOperatorObserveOnTest_$22 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$22 *new_RxInternalOperatorsOperatorObserveOnTest_$22_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$22, init)
}

RxInternalOperatorsOperatorObserveOnTest_$22 *create_RxInternalOperatorsOperatorObserveOnTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$22, init)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$23

- (void)onStart {
  [self requestWithLong:2];
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
  if (first_) {
    [self requestWithLong:JavaLangLong_MAX_VALUE - 1];
    [self requestWithLong:JavaLangLong_MAX_VALUE - 1];
    [self requestWithLong:10];
    first_ = false;
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorObserveOnTest_$23 class]);
  RELEASE_(val$latch_);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorObserveOnTest;", "testRequestOverflow", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$23 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 3, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$23;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorObserveOnTest_$23 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$count_, capture$1);
  RxSubscriber_init(self);
  self->first_ = true;
}

RxInternalOperatorsOperatorObserveOnTest_$23 *new_RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$23, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOperatorObserveOnTest_$23 *create_RxInternalOperatorsOperatorObserveOnTest_$23_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$23, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$24

- (void)callWithId:(JavaLangLong *)n {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:n];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorObserveOnTest;", "testNoMoreRequestsAfterUnsubscribe", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$24 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$24;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$24 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$24 *new_RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$24, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$24 *create_RxInternalOperatorsOperatorObserveOnTest_$24_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$24, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$25

- (void)onStart {
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self unsubscribe];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorObserveOnTest_$25 class]);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorObserveOnTest;", "testNoMoreRequestsAfterUnsubscribe", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$25 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$25;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorObserveOnTest_$25 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$25 *new_RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$25, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$25 *create_RxInternalOperatorsOperatorObserveOnTest_$25_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$25, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$26

- (void)callWithId:(JavaLangLong *)v {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:v];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorObserveOnTest;", "fixedReplenishPattern", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$26 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$26;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$26 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$26 *new_RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$26, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$26 *create_RxInternalOperatorsOperatorObserveOnTest_$26_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$26, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorObserveOnTest_$27

- (void)callWithId:(JavaLangLong *)r {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:r];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorObserveOnTest;", "synchronousRebatching", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOnTest_$27 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorObserveOnTest_$27;
}

@end

void RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(RxInternalOperatorsOperatorObserveOnTest_$27 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOnTest_$27 *new_RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOnTest_$27, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorObserveOnTest_$27 *create_RxInternalOperatorsOperatorObserveOnTest_$27_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOnTest_$27, initWithJavaUtilList_, capture$0)
}
