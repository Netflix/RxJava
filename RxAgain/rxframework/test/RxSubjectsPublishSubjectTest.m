//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/PublishSubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsPublishSubjectTest.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxSubjectsPublishSubjectTest () {
 @public
  NSException *testException_;
}

- (void)assertCompletedObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertNeverObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertErrorObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertNeverErrorObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertCompletedStartingWithThreeObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertObservedUntilTwoWithRxObserver:(id<RxObserver>)observer;

@end

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest, testException_, NSException *)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertCompletedObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertNeverObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertErrorObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertNeverErrorObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertCompletedStartingWithThreeObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$17();

@interface RxSubjectsPublishSubjectTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countParent_;
  RxSubjectsPublishSubject *val$s_;
  JavaUtilConcurrentAtomicAtomicInteger *val$countChildren_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$1)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$1, val$countParent_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$1, val$s_, RxSubjectsPublishSubject *)
J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$1, val$countChildren_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubjectsPublishSubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$1 *new_RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$1 *create_RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

@interface RxSubjectsPublishSubjectTest_$1_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubjectTest_$1 *this$0_;
  JavaLangInteger *val$v_;
}

- (NSString *)callWithId:(JavaLangInteger *)v2;

- (instancetype)initWithRxSubjectsPublishSubjectTest_$1:(RxSubjectsPublishSubjectTest_$1 *)outer$
                                    withJavaLangInteger:(JavaLangInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$1_$1)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$1_$1, this$0_, RxSubjectsPublishSubjectTest_$1 *)
J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$1_$1, val$v_, JavaLangInteger *)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1_$1 *self, RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$1_$1 *new_RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$1_$1 *create_RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0);

@interface RxSubjectsPublishSubjectTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countTotal_;
  JavaUtilArrayList *val$list_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                        withJavaUtilArrayList:(JavaUtilArrayList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$2, val$countTotal_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$2, val$list_, JavaUtilArrayList *)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(RxSubjectsPublishSubjectTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$2 *new_RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$2 *create_RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1);

@interface RxSubjectsPublishSubjectTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$3)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$3_init(RxSubjectsPublishSubjectTest_$3 *self);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$3 *new_RxSubjectsPublishSubjectTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$3 *create_RxSubjectsPublishSubjectTest_$3_init();

@interface RxSubjectsPublishSubjectTest_$4 : NSObject < RxObserver > {
 @public
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(NSString *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$4)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$4, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(RxSubjectsPublishSubjectTest_$4 *self, id<RxObserver> capture$0);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$4 *new_RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$4 *create_RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0);

@interface RxSubjectsPublishSubjectTest_$5 : RxObserversTestSubscriber {
 @public
  RxObserversTestSubscriber *val$ts0_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubjectTest_$5)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubjectTest_$5, val$ts0_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxSubjectsPublishSubjectTest_$5 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$5 *new_RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsPublishSubjectTest_$5 *create_RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@implementation RxSubjectsPublishSubjectTest

- (void)testCompleted {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsPublishSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  [subject onNextWithId:@"four"];
  [subject onCompleted];
  [subject onErrorWithNSException:create_NSException_init()];
  RxSubjectsPublishSubjectTest_assertCompletedObserverWithRxObserver_(self, observer);
  RxSubjectsPublishSubjectTest_assertNeverObserverWithRxObserver_(self, anotherObserver);
}

- (void)testCompletedStopsEmittingData {
  RxSubjectsPublishSubject *channel = RxSubjectsPublishSubject_create();
  id<RxObserver> observerA = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerB = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerC = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> a = [((RxSubjectsPublishSubject *) nil_chk(channel)) subscribeWithRxObserver:observerA];
  [channel subscribeWithRxObserver:observerB];
  id<OrgMockitoInOrder> inOrderA = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerA } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderB = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerB } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderC = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerC } count:1 type:NSObject_class_()]);
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderA)) verifyWithId:observerA])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderB)) verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxSubscription>) nil_chk(a)) unsubscribe];
  [inOrderA verifyNoMoreInteractions];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [channel onCompleted];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onCompleted];
  [channel subscribeWithRxObserver:observerC];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderC)) verifyWithId:observerC])) onCompleted];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(13)];
  [inOrderB verifyNoMoreInteractions];
  [inOrderC verifyNoMoreInteractions];
}

- (void)assertCompletedObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertCompletedObserverWithRxObserver_(self, observer);
}

- (void)assertNeverObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertNeverObserverWithRxObserver_(self, observer);
}

- (void)testError {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsPublishSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onErrorWithNSException:testException_];
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  [subject onNextWithId:@"four"];
  [subject onErrorWithNSException:create_NSException_init()];
  [subject onCompleted];
  RxSubjectsPublishSubjectTest_assertErrorObserverWithRxObserver_(self, observer);
  RxSubjectsPublishSubjectTest_assertNeverErrorObserverWithRxObserver_(self, anotherObserver);
}

- (void)assertErrorObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertErrorObserverWithRxObserver_(self, observer);
}

- (void)assertNeverErrorObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertNeverErrorObserverWithRxObserver_(self, observer);
}

- (void)testSubscribeMidSequence {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsPublishSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  RxSubjectsPublishSubjectTest_assertCompletedObserverWithRxObserver_(self, observer);
  RxSubjectsPublishSubjectTest_assertCompletedStartingWithThreeObserverWithRxObserver_(self, anotherObserver);
}

- (void)assertCompletedStartingWithThreeObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertCompletedStartingWithThreeObserverWithRxObserver_(self, observer);
}

- (void)testUnsubscribeFirstObserver {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxSubjectsPublishSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  RxSubjectsPublishSubjectTest_assertCompletedStartingWithThreeObserverWithRxObserver_(self, anotherObserver);
}

- (void)assertObservedUntilTwoWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
}

- (void)testNestedSubscribe {
  RxSubjectsPublishSubject *s = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicInteger *countParent = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *countChildren = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *countTotal = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(s)) flatMapWithRxFunctionsFunc1:create_RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(countParent, s, countChildren)])) subscribeWithRxFunctionsAction1:create_RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(countTotal, list)];
  for (jint i = 0; i < 10; i++) {
    [s onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [s onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(45, [list size]);
}

- (void)testReSubscribe {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  id<RxObserver> o1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> s1 = [((RxSubjectsPublishSubject *) nil_chk(ps)) subscribeWithRxObserver:o1];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<OrgMockitoInOrder> inOrder1 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o1 } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder1)) verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [inOrder1 verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> s2 = [ps subscribeWithRxObserver:o2];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  id<OrgMockitoInOrder> inOrder2 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o2 } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder2)) verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [inOrder2 verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
}

- (void)testUnsubscriptionCase {
  RxSubjectsPublishSubject *src = RxSubjectsPublishSubject_create();
  for (jint i = 0; i < 10; i++) {
    id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
    NSString *v = JreStrcat("I", i);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"Turn: %d%n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(src)) first])) flatMapWithRxFunctionsFunc1:create_RxSubjectsPublishSubjectTest_$3_init()])) subscribeWithRxObserver:create_RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(o)];
    [src onNextWithId:v];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JreStrcat("$$$", v, @", ", v)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testOnErrorThrowsDoesntPreventDelivery {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxSubjectsPublishSubject *) nil_chk(ps)) subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *e) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testOnErrorThrowsDoesntPreventDelivery2 {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxSubjectsPublishSubject *) nil_chk(ps)) subscribe];
  [ps subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  [ps subscribe];
  [ps subscribe];
  [ps subscribe];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size]);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testCurrentStateMethodsNormal {
  RxSubjectsPublishSubject *as = RxSubjectsPublishSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsEmpty {
  RxSubjectsPublishSubject *as = RxSubjectsPublishSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsError {
  RxSubjectsPublishSubject *as = RxSubjectsPublishSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([[as getThrowable] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testPublishSubjectValueRelay {
  RxSubjectsPublishSubject *async = RxSubjectsPublishSubject_create();
  [((RxSubjectsPublishSubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [async onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
}

- (void)testPublishSubjectValueEmpty {
  RxSubjectsPublishSubject *async = RxSubjectsPublishSubject_create();
  [((RxSubjectsPublishSubject *) nil_chk(async)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
}

- (void)testPublishSubjectValueError {
  RxSubjectsPublishSubject *async = RxSubjectsPublishSubject_create();
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  [((RxSubjectsPublishSubject *) nil_chk(async)) onErrorWithNSException:te];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertSameWithId_withId_(te, [async getThrowable]);
}

- (void)backpressureFailFast {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(1);
  [((RxSubjectsPublishSubject *) nil_chk(ps)) subscribeWithRxSubscriber:ts];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertErrorWithIOSClass:RxExceptionsMissingBackpressureException_class_()];
  [ts assertNotCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(@"PublishSubject: could not emit value due to lack of requests", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getMessage]);
}

- (void)crossUnsubscribe {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts0 = RxObserversTestSubscriber_create();
  RxObserversTestSubscriber *ts1 = create_RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(ts0);
  [((RxSubjectsPublishSubject *) nil_chk(ps)) subscribeWithRxSubscriber:ts1];
  [ps subscribeWithRxSubscriber:ts0];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts0)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts1 assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ps onCompleted];
  [ts0 assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts0 assertNoErrors];
  [ts0 assertNotCompleted];
  [ts0 assertUnsubscribed];
  [ts1 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts1 assertNoErrors];
  [ts1 assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsPublishSubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(testException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x2, 7, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 8, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x2, 10, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x2, 12, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testCompleted);
  methods[1].selector = @selector(testCompletedStopsEmittingData);
  methods[2].selector = @selector(assertCompletedObserverWithRxObserver:);
  methods[3].selector = @selector(assertNeverObserverWithRxObserver:);
  methods[4].selector = @selector(testError);
  methods[5].selector = @selector(assertErrorObserverWithRxObserver:);
  methods[6].selector = @selector(assertNeverErrorObserverWithRxObserver:);
  methods[7].selector = @selector(testSubscribeMidSequence);
  methods[8].selector = @selector(assertCompletedStartingWithThreeObserverWithRxObserver:);
  methods[9].selector = @selector(testUnsubscribeFirstObserver);
  methods[10].selector = @selector(assertObservedUntilTwoWithRxObserver:);
  methods[11].selector = @selector(testNestedSubscribe);
  methods[12].selector = @selector(testReSubscribe);
  methods[13].selector = @selector(testUnsubscriptionCase);
  methods[14].selector = @selector(testOnErrorThrowsDoesntPreventDelivery);
  methods[15].selector = @selector(testOnErrorThrowsDoesntPreventDelivery2);
  methods[16].selector = @selector(testCurrentStateMethodsNormal);
  methods[17].selector = @selector(testCurrentStateMethodsEmpty);
  methods[18].selector = @selector(testCurrentStateMethodsError);
  methods[19].selector = @selector(testPublishSubjectValueRelay);
  methods[20].selector = @selector(testPublishSubjectValueEmpty);
  methods[21].selector = @selector(testPublishSubjectValueError);
  methods[22].selector = @selector(backpressureFailFast);
  methods[23].selector = @selector(crossUnsubscribe);
  methods[24].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testException_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubjectsPublishSubjectTest__Annotations$0, (void *)&RxSubjectsPublishSubjectTest__Annotations$1, "assertCompletedObserver", "LRxObserver;", "(Lrx/Observer<Ljava/lang/String;>;)V", "assertNeverObserver", (void *)&RxSubjectsPublishSubjectTest__Annotations$2, "assertErrorObserver", "assertNeverErrorObserver", (void *)&RxSubjectsPublishSubjectTest__Annotations$3, "assertCompletedStartingWithThreeObserver", (void *)&RxSubjectsPublishSubjectTest__Annotations$4, "assertObservedUntilTwo", (void *)&RxSubjectsPublishSubjectTest__Annotations$5, (void *)&RxSubjectsPublishSubjectTest__Annotations$6, (void *)&RxSubjectsPublishSubjectTest__Annotations$7, (void *)&RxSubjectsPublishSubjectTest__Annotations$8, (void *)&RxSubjectsPublishSubjectTest__Annotations$9, (void *)&RxSubjectsPublishSubjectTest__Annotations$10, (void *)&RxSubjectsPublishSubjectTest__Annotations$11, (void *)&RxSubjectsPublishSubjectTest__Annotations$12, (void *)&RxSubjectsPublishSubjectTest__Annotations$13, (void *)&RxSubjectsPublishSubjectTest__Annotations$14, (void *)&RxSubjectsPublishSubjectTest__Annotations$15, (void *)&RxSubjectsPublishSubjectTest__Annotations$16, (void *)&RxSubjectsPublishSubjectTest__Annotations$17 };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest = { "PublishSubjectTest", "rx.subjects", ptrTable, methods, fields, 7, 0x1, 25, 1, -1, -1, -1, -1, -1 };
  return &_RxSubjectsPublishSubjectTest;
}

@end

void RxSubjectsPublishSubjectTest_assertCompletedObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

void RxSubjectsPublishSubjectTest_assertNeverObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

void RxSubjectsPublishSubjectTest_assertErrorObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:self->testException_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

void RxSubjectsPublishSubjectTest_assertNeverErrorObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

void RxSubjectsPublishSubjectTest_assertCompletedStartingWithThreeObserverWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

void RxSubjectsPublishSubjectTest_assertObservedUntilTwoWithRxObserver_(RxSubjectsPublishSubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

void RxSubjectsPublishSubjectTest_init(RxSubjectsPublishSubjectTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testException_, new_NSException_init());
}

RxSubjectsPublishSubjectTest *new_RxSubjectsPublishSubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest, init)
}

RxSubjectsPublishSubjectTest *create_RxSubjectsPublishSubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest, init)
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsPublishSubjectTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsPublishSubjectTest)

@implementation RxSubjectsPublishSubjectTest_$1

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countParent_)) incrementAndGet];
  return [((RxSubjectsPublishSubject *) nil_chk(val$s_)) mapWithRxFunctionsFunc1:create_RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(self, v)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2 {
  RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countParent_);
  RELEASE_(val$s_);
  RELEASE_(val$countChildren_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxSubjectsPublishSubject:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countParent_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$countChildren_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/String;>;", "LJavaUtilConcurrentAtomicAtomicInteger;LRxSubjectsPublishSubject;LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicInteger;Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubjectTest;", "testNestedSubscribe", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 3, 6, -1, 7, 8, -1 };
  return &_RxSubjectsPublishSubjectTest_$1;
}

@end

void RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(RxSubjectsPublishSubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  JreStrongAssign(&self->val$countParent_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JreStrongAssign(&self->val$countChildren_, capture$2);
  NSObject_init(self);
}

RxSubjectsPublishSubjectTest_$1 *new_RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

RxSubjectsPublishSubjectTest_$1 *create_RxSubjectsPublishSubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

@implementation RxSubjectsPublishSubjectTest_$1_$1

- (NSString *)callWithId:(JavaLangInteger *)v2 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$countChildren_)) incrementAndGet];
  return JreStrcat("$@$@", @"Parent: ", val$v_, @" Child: ", v2);
}

- (instancetype)initWithRxSubjectsPublishSubjectTest_$1:(RxSubjectsPublishSubjectTest_$1 *)outer$
                                    withJavaLangInteger:(JavaLangInteger *)capture$0 {
  RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$v_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubjectTest_$1:withJavaLangInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubjectsPublishSubjectTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$v_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSubjectsPublishSubjectTest_$1;LJavaLangInteger;", "LRxSubjectsPublishSubjectTest_$1;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$1_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxSubjectsPublishSubjectTest_$1_$1;
}

@end

void RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1_$1 *self, RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$v_, capture$0);
  NSObject_init(self);
}

RxSubjectsPublishSubjectTest_$1_$1 *new_RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$1_$1, initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_, outer$, capture$0)
}

RxSubjectsPublishSubjectTest_$1_$1 *create_RxSubjectsPublishSubjectTest_$1_$1_initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_(RxSubjectsPublishSubjectTest_$1 *outer$, JavaLangInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$1_$1, initWithRxSubjectsPublishSubjectTest_$1_withJavaLangInteger_, outer$, capture$0)
}

@implementation RxSubjectsPublishSubjectTest_$2

- (void)callWithId:(NSString *)v {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countTotal_)) incrementAndGet];
  [((JavaUtilArrayList *) nil_chk(val$list_)) addWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                        withJavaUtilArrayList:(JavaUtilArrayList *)capture$1 {
  RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countTotal_);
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countTotal_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$list_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilArrayList;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxSubjectsPublishSubjectTest;", "testNestedSubscribe", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxSubjectsPublishSubjectTest_$2;
}

@end

void RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(RxSubjectsPublishSubjectTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1) {
  JreStrongAssign(&self->val$countTotal_, capture$0);
  JreStrongAssign(&self->val$list_, capture$1);
  NSObject_init(self);
}

RxSubjectsPublishSubjectTest_$2 *new_RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_, capture$0, capture$1)
}

RxSubjectsPublishSubjectTest_$2 *create_RxSubjectsPublishSubjectTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilArrayList *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilArrayList_, capture$0, capture$1)
}

@implementation RxSubjectsPublishSubjectTest_$3

- (RxObservable *)callWithId:(NSString *)t1 {
  return RxObservable_justWithId_(JreStrcat("$$$", t1, @", ", t1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsPublishSubjectTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxSubjectsPublishSubjectTest;", "testUnsubscriptionCase", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$3 = { "", "rx.subjects", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSubjectsPublishSubjectTest_$3;
}

@end

void RxSubjectsPublishSubjectTest_$3_init(RxSubjectsPublishSubjectTest_$3 *self) {
  NSObject_init(self);
}

RxSubjectsPublishSubjectTest_$3 *new_RxSubjectsPublishSubjectTest_$3_init() {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$3, init)
}

RxSubjectsPublishSubjectTest_$3 *create_RxSubjectsPublishSubjectTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$3, init)
}

@implementation RxSubjectsPublishSubjectTest_$4

- (void)onNextWithId:(NSString *)t {
  [((id<RxObserver>) nil_chk(val$o_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0 {
  RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSString;", "onError", "LNSException;", "LRxObserver;", "(Lrx/Observer<Ljava/lang/Object;>;)V", "Lrx/Observer<Ljava/lang/Object;>;", "LRxSubjectsPublishSubjectTest;", "testUnsubscriptionCase", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$4 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxSubjectsPublishSubjectTest_$4;
}

@end

void RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(RxSubjectsPublishSubjectTest_$4 *self, id<RxObserver> capture$0) {
  JreStrongAssign(&self->val$o_, capture$0);
  NSObject_init(self);
}

RxSubjectsPublishSubjectTest_$4 *new_RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$4, initWithRxObserver_, capture$0)
}

RxSubjectsPublishSubjectTest_$4 *create_RxSubjectsPublishSubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$4, initWithRxObserver_, capture$0)
}

@implementation RxSubjectsPublishSubjectTest_$5

- (void)onNextWithId:(JavaLangInteger *)t {
  [super onNextWithId:t];
  if ([((JavaLangInteger *) nil_chk(t)) intValue] == 2) {
    [((RxObserversTestSubscriber *) nil_chk(val$ts0_)) unsubscribe];
  }
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSubjectsPublishSubjectTest_$5 class]);
  RELEASE_(val$ts0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ts0_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubjectTest;", "crossUnsubscribe" };
  static const J2ObjcClassInfo _RxSubjectsPublishSubjectTest_$5 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 5, -1 };
  return &_RxSubjectsPublishSubjectTest_$5;
}

@end

void RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxSubjectsPublishSubjectTest_$5 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$ts0_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxSubjectsPublishSubjectTest_$5 *new_RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsPublishSubjectTest_$5, initWithRxObserversTestSubscriber_, capture$0)
}

RxSubjectsPublishSubjectTest_$5 *create_RxSubjectsPublishSubjectTest_$5_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsPublishSubjectTest_$5, initWithRxObserversTestSubscriber_, capture$0)
}
