//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ObservableWindowTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservableWindowTests.h"
#include "RxObservablesBlockingObservable.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxObservableWindowTests__Annotations$0();

@interface RxObservableWindowTests_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)xs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableWindowTests_$1)

__attribute__((unused)) static void RxObservableWindowTests_$1_init(RxObservableWindowTests_$1 *self);

__attribute__((unused)) static RxObservableWindowTests_$1 *new_RxObservableWindowTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableWindowTests_$1 *create_RxObservableWindowTests_$1_init();

@interface RxObservableWindowTests_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilArrayList *val$lists_;
}

- (void)callWithId:(id<JavaUtilList>)xs;

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableWindowTests_$2)

J2OBJC_FIELD_SETTER(RxObservableWindowTests_$2, val$lists_, JavaUtilArrayList *)

__attribute__((unused)) static void RxObservableWindowTests_$2_initWithJavaUtilArrayList_(RxObservableWindowTests_$2 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static RxObservableWindowTests_$2 *new_RxObservableWindowTests_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableWindowTests_$2 *create_RxObservableWindowTests_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0);

@implementation RxObservableWindowTests

- (void)testWindow {
  JavaUtilArrayList *lists = create_JavaUtilArrayList_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6)))) windowWithInt:3])) mapWithRxFunctionsFunc1:create_RxObservableWindowTests_$1_init()]))) toBlocking])) forEachWithRxFunctionsAction1:create_RxObservableWindowTests_$2_initWithJavaUtilArrayList_(lists)];
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([((id<JavaUtilList>) nil_chk([lists getWithInt:0])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:3 type:JavaLangInteger_class_()]], [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([((id<JavaUtilList>) nil_chk([lists getWithInt:1])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:3 type:JavaLangInteger_class_()]], [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:3 type:JavaLangInteger_class_()]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [lists size]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableWindowTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWindow);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObservableWindowTests__Annotations$0 };
  static const J2ObjcClassInfo _RxObservableWindowTests = { "ObservableWindowTests", "rx", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxObservableWindowTests;
}

@end

void RxObservableWindowTests_init(RxObservableWindowTests *self) {
  NSObject_init(self);
}

RxObservableWindowTests *new_RxObservableWindowTests_init() {
  J2OBJC_NEW_IMPL(RxObservableWindowTests, init)
}

RxObservableWindowTests *create_RxObservableWindowTests_init() {
  J2OBJC_CREATE_IMPL(RxObservableWindowTests, init)
}

IOSObjectArray *RxObservableWindowTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservableWindowTests)

@implementation RxObservableWindowTests_$1

- (RxObservable *)callWithId:(RxObservable *)xs {
  return [((RxObservable *) nil_chk(xs)) toList];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableWindowTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/util/List<Ljava/lang/Integer;>;>;", "LRxObservableWindowTests;", "testWindow", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/util/List<Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxObservableWindowTests_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservableWindowTests_$1;
}

@end

void RxObservableWindowTests_$1_init(RxObservableWindowTests_$1 *self) {
  NSObject_init(self);
}

RxObservableWindowTests_$1 *new_RxObservableWindowTests_$1_init() {
  J2OBJC_NEW_IMPL(RxObservableWindowTests_$1, init)
}

RxObservableWindowTests_$1 *create_RxObservableWindowTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservableWindowTests_$1, init)
}

@implementation RxObservableWindowTests_$2

- (void)callWithId:(id<JavaUtilList>)xs {
  [((JavaUtilArrayList *) nil_chk(val$lists_)) addWithId:xs];
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  RxObservableWindowTests_$2_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lists_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lists_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/util/List<Ljava/lang/Integer;>;>;)V", "Ljava/util/ArrayList<Ljava/util/List<Ljava/lang/Integer;>;>;", "LRxObservableWindowTests;", "testWindow", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservableWindowTests_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObservableWindowTests_$2;
}

@end

void RxObservableWindowTests_$2_initWithJavaUtilArrayList_(RxObservableWindowTests_$2 *self, JavaUtilArrayList *capture$0) {
  JreStrongAssign(&self->val$lists_, capture$0);
  NSObject_init(self);
}

RxObservableWindowTests_$2 *new_RxObservableWindowTests_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableWindowTests_$2, initWithJavaUtilArrayList_, capture$0)
}

RxObservableWindowTests_$2 *create_RxObservableWindowTests_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableWindowTests_$2, initWithJavaUtilArrayList_, capture$0)
}
