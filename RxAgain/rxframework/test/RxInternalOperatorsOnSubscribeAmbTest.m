//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeAmbTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOnSubscribeAmb.h"
#include "RxInternalOperatorsOnSubscribeAmbTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOnSubscribeAmbTest () {
 @public
  RxSchedulersTestScheduler *scheduler_;
  RxScheduler_Worker *innerScheduler_;
}

- (RxObservable *)createObservableWithNSStringArray:(IOSObjectArray *)values
                                           withLong:(jlong)interval
                                    withNSException:(NSException *)e;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest, scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest, innerScheduler_, RxScheduler_Worker *)

__attribute__((unused)) static RxObservable *RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *self, IOSObjectArray *values, jlong interval, NSException *e);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$14();

@interface RxInternalOperatorsOnSubscribeAmbTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOnSubscribeAmbTest *this$0_;
  jlong val$interval_;
  IOSObjectArray *val$values_;
  NSException *val$e_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest:(RxInternalOperatorsOnSubscribeAmbTest *)outer$
                                                     withLong:(jlong)capture$0
                                            withNSStringArray:(IOSObjectArray *)capture$1
                                              withNSException:(NSException *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1, this$0_, RxInternalOperatorsOnSubscribeAmbTest *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1, val$values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1, val$e_, NSException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest_$1 *self, RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2);

@interface RxInternalOperatorsOnSubscribeAmbTest_$1_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$subscriber_;
  NSString *val$value_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
                        withNSString:(NSString *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1_$1, val$subscriber_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1_$1, val$value_, NSString *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *self, RxSubscriber *capture$0, NSString *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxSubscriber *capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxSubscriber *capture$0, NSString *capture$1);

@interface RxInternalOperatorsOnSubscribeAmbTest_$1_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOnSubscribeAmbTest_$1 *this$0_;
  RxSubscriber *val$subscriber_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$1:(RxInternalOperatorsOnSubscribeAmbTest_$1 *)outer$
                                                withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$1_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1_$2, this$0_, RxInternalOperatorsOnSubscribeAmbTest_$1 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$1_$2, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *self, RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOnSubscribeAmbTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested1_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$2, val$requested1_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$2 *new_RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$2 *create_RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOnSubscribeAmbTest_$2_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOnSubscribeAmbTest_$2 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$2:(RxInternalOperatorsOnSubscribeAmbTest_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$2_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$2_$1, this$0_, RxInternalOperatorsOnSubscribeAmbTest_$2 *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *self, RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$);

@interface RxInternalOperatorsOnSubscribeAmbTest_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested2_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$3, val$requested2_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$3 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$3 *new_RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$3 *create_RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOnSubscribeAmbTest_$3_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOnSubscribeAmbTest_$3 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$3:(RxInternalOperatorsOnSubscribeAmbTest_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$3_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$3_$1, this$0_, RxInternalOperatorsOnSubscribeAmbTest_$3 *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *self, RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$);

@interface RxInternalOperatorsOnSubscribeAmbTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$count_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeAmbTest_$4, val$count_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$4 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$4 *new_RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$4 *create_RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOnSubscribeAmbTest_$5 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$5_init(RxInternalOperatorsOnSubscribeAmbTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$5 *new_RxInternalOperatorsOnSubscribeAmbTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$5 *create_RxInternalOperatorsOnSubscribeAmbTest_$5_init();

@interface RxInternalOperatorsOnSubscribeAmbTest_$6 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeAmbTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeAmbTest_$6_init(RxInternalOperatorsOnSubscribeAmbTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$6 *new_RxInternalOperatorsOnSubscribeAmbTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeAmbTest_$6 *create_RxInternalOperatorsOnSubscribeAmbTest_$6_init();

@implementation RxInternalOperatorsOnSubscribeAmbTest

- (void)setUp {
  JreStrongAssignAndConsume(&scheduler_, new_RxSchedulersTestScheduler_init());
  JreStrongAssign(&innerScheduler_, [scheduler_ createWorker]);
}

- (RxObservable *)createObservableWithNSStringArray:(IOSObjectArray *)values
                                           withLong:(jlong)interval
                                    withNSException:(NSException *)e {
  return RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, values, interval, e);
}

- (void)testAmb {
  RxObservable *observable1 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"11", @"111", @"1111" } count:4 type:NSString_class_()], 2000, nil);
  RxObservable *observable2 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"22", @"222", @"2222" } count:4 type:NSString_class_()], 1000, nil);
  RxObservable *observable3 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"3", @"33", @"333", @"3333" } count:4 type:NSString_class_()], 3000, nil);
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(RxInternalOperatorsOnSubscribeAmb_ambWithRxObservable_withRxObservable_withRxObservable_(observable1, observable2, observable3));
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeByWithLong:100000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"2"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"22"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"222"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"2222"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testAmb2 {
  JavaIoIOException *expectedException = create_JavaIoIOException_initWithNSString_(@"fake exception");
  RxObservable *observable1 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSString_class_()], 2000, create_JavaIoIOException_initWithNSString_(@"fake exception"));
  RxObservable *observable2 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"22", @"222", @"2222" } count:4 type:NSString_class_()], 1000, expectedException);
  RxObservable *observable3 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSString_class_()], 3000, create_JavaIoIOException_initWithNSString_(@"fake exception"));
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(RxInternalOperatorsOnSubscribeAmb_ambWithRxObservable_withRxObservable_withRxObservable_(observable1, observable2, observable3));
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeByWithLong:100000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"2"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"22"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"222"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"2222"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:expectedException];
  [inOrder verifyNoMoreInteractions];
}

- (void)testAmb3 {
  RxObservable *observable1 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"1" } count:1 type:NSString_class_()], 2000, nil);
  RxObservable *observable2 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSString_class_()], 1000, nil);
  RxObservable *observable3 = RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"3" } count:1 type:NSString_class_()], 3000, nil);
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(RxInternalOperatorsOnSubscribeAmb_ambWithRxObservable_withRxObservable_withRxObservable_(observable1, observable2, observable3));
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeByWithLong:100000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testProducerRequestThroughAmb {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested1 = create_JavaUtilConcurrentAtomicAtomicLong_init();
  JavaUtilConcurrentAtomicAtomicLong *requested2 = create_JavaUtilConcurrentAtomicAtomicLong_init();
  RxObservable *o1 = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(requested1));
  RxObservable *o2 = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(requested2));
  [((RxObservable *) nil_chk(RxObservable_ambWithRxObservable_withRxObservable_(o1, o2))) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested1 get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested2 get]);
}

- (void)testBackpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2))) ambWithWithRxObservable:RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testSubscriptionOnlyHappensOnce {
  JavaUtilConcurrentAtomicAtomicLong *count = create_JavaUtilConcurrentAtomicAtomicLong_init();
  id<RxFunctionsAction0> incrementer = create_RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(count);
  RxObservable *o1 = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:incrementer])) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObservable *o2 = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:incrementer])) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_ambWithRxObservable_withRxObservable_(o1, o2))) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [ts awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [count get]);
}

- (void)testSecondaryRequestsPropagatedToChildren {
  RxObservable *o1 = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObservable *o2 = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:3 type:JavaLangInteger_class_()])))) delayWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOnSubscribeAmbTest_$5_init();
  [((RxObservable *) nil_chk(RxObservable_ambWithRxObservable_withRxObservable_(o1, o2))) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:20];
  [ts awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
}

- (void)testSynchronousSources {
  jint result = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeAmbTest_$6_init()])) ambWithWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2))])) toBlocking])) single])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, result);
}

- (void)testMultipleUse {
  RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  RxObservable *amb = [((RxObservable *) nil_chk(RxObservable_timerWithLong_withJavaUtilConcurrentTimeUnit_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) ambWithWithRxObservable:RxObservable_timerWithLong_withJavaUtilConcurrentTimeUnit_(200, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))];
  [((RxObservable *) nil_chk(amb)) subscribeWithRxSubscriber:ts1];
  [amb subscribeWithRxSubscriber:ts2];
  [ts1 awaitTerminalEvent];
  [ts2 awaitTerminalEvent];
  [ts1 assertValueWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [ts1 assertCompleted];
  [ts1 assertNoErrors];
  [ts2 assertValueWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [ts2 assertCompleted];
  [ts2 assertNoErrors];
}

- (void)ambIterable {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_ambWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ps1, ps2 } count:2 type:RxSubjectsPublishSubject_class_()])))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [((RxSubjectsPublishSubject *) nil_chk(ps1)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps1 onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([ps1 hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(ps2)) hasObservers]);
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)ambIterable2 {
  RxSubjectsPublishSubject *ps1 = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *ps2 = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_ambWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ ps1, ps2 } count:2 type:RxSubjectsPublishSubject_class_()])))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [((RxSubjectsPublishSubject *) nil_chk(ps2)) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ps2 onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(ps1)) hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ps2 hasObservers]);
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)ambMany {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, RxObservable_class_());
    IOSObjectArray *ps = [IOSObjectArray arrayWithLength:i type:RxSubjectsPublishSubject_class_()];
    for (jint j = 0; j < i; j++) {
      for (jint k = 0; k < i; k++) {
        IOSObjectArray_Set(ps, k, RxSubjectsPublishSubject_create());
      }
      JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"amb" parameterTypes:clazz];
      RxObservable *obs = (RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:nil withNSObjectArray:ps], [RxObservable class]);
      RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
      [((RxObservable *) nil_chk(obs)) subscribeWithRxSubscriber:ts];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has no observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, j))) onNextWithId:JavaLangInteger_valueOfWithInt_(j)];
      [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, j))) onCompleted];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertFalseWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(j)];
      [ts assertNoErrors];
      [ts assertCompleted];
    }
  }
}

- (void)ambManyError {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, RxObservable_class_());
    IOSObjectArray *ps = [IOSObjectArray arrayWithLength:i type:RxSubjectsPublishSubject_class_()];
    for (jint j = 0; j < i; j++) {
      for (jint k = 0; k < i; k++) {
        IOSObjectArray_Set(ps, k, RxSubjectsPublishSubject_create());
      }
      JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"amb" parameterTypes:clazz];
      RxObservable *obs = (RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:nil withNSObjectArray:ps], [RxObservable class]);
      RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
      [((RxObservable *) nil_chk(obs)) subscribeWithRxSubscriber:ts];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has no observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, j))) onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(JavaLangInteger_toStringWithInt_(j))];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertFalseWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
      [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
      [ts assertNotCompleted];
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_toStringWithInt_(j), [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getMessage]);
    }
  }
}

- (void)ambManyComplete {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, RxObservable_class_());
    IOSObjectArray *ps = [IOSObjectArray arrayWithLength:i type:RxSubjectsPublishSubject_class_()];
    for (jint j = 0; j < i; j++) {
      for (jint k = 0; k < i; k++) {
        IOSObjectArray_Set(ps, k, RxSubjectsPublishSubject_create());
      }
      JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"amb" parameterTypes:clazz];
      RxObservable *obs = (RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:nil withNSObjectArray:ps], [RxObservable class]);
      RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
      [((RxObservable *) nil_chk(obs)) subscribeWithRxSubscriber:ts];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has no observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, j))) onCompleted];
      for (jint k = 0; k < i; k++) {
        OrgJunitAssert_assertFalseWithNSString_withBoolean_(JreStrcat("CICI$", '@', i, '/', k, @" has observers?"), [((RxSubjectsPublishSubject *) nil_chk(IOSObjectArray_Get(ps, k))) hasObservers]);
      }
      [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
      [ts assertNoErrors];
      [ts assertCompleted];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeAmbTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(innerScheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LRxObservable;", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, 19, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(createObservableWithNSStringArray:withLong:withNSException:);
  methods[2].selector = @selector(testAmb);
  methods[3].selector = @selector(testAmb2);
  methods[4].selector = @selector(testAmb3);
  methods[5].selector = @selector(testProducerRequestThroughAmb);
  methods[6].selector = @selector(testBackpressure);
  methods[7].selector = @selector(testSubscriptionOnlyHappensOnce);
  methods[8].selector = @selector(testSecondaryRequestsPropagatedToChildren);
  methods[9].selector = @selector(testSynchronousSources);
  methods[10].selector = @selector(testMultipleUse);
  methods[11].selector = @selector(ambIterable);
  methods[12].selector = @selector(ambIterable2);
  methods[13].selector = @selector(ambMany);
  methods[14].selector = @selector(ambManyError);
  methods[15].selector = @selector(ambManyComplete);
  methods[16].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$0, "createObservable", "[LNSString;JLNSException;", "([Ljava/lang/String;JLjava/lang/Throwable;)Lrx/Observable<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$5, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$9, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$10, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$11, "LJavaLangException;", (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$12, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$13, (void *)&RxInternalOperatorsOnSubscribeAmbTest__Annotations$14 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest = { "OnSubscribeAmbTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest;
}

@end

RxObservable *RxInternalOperatorsOnSubscribeAmbTest_createObservableWithNSStringArray_withLong_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *self, IOSObjectArray *values, jlong interval, NSException *e) {
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(self, interval, values, e));
}

void RxInternalOperatorsOnSubscribeAmbTest_init(RxInternalOperatorsOnSubscribeAmbTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest *new_RxInternalOperatorsOnSubscribeAmbTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest, init)
}

RxInternalOperatorsOnSubscribeAmbTest *create_RxInternalOperatorsOnSubscribeAmbTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeAmbTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeAmbTest)

@implementation RxInternalOperatorsOnSubscribeAmbTest_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  RxSubscriptionsCompositeSubscription *parentSubscription = create_RxSubscriptionsCompositeSubscription_init();
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:parentSubscription];
  jlong delay = val$interval_;
  {
    IOSObjectArray *a__ = val$values_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *value = *b__++;
      [parentSubscription addWithRxSubscription:[((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(subscriber, value) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]];
      delay += val$interval_;
    }
  }
  [parentSubscription addWithRxSubscription:[((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(self, subscriber) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]];
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest:(RxInternalOperatorsOnSubscribeAmbTest *)outer$
                                                     withLong:(jlong)capture$0
                                            withNSStringArray:(IOSObjectArray *)capture$1
                                              withNSException:(NSException *)capture$2 {
  RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$values_);
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeAmbTest:withLong:withNSStringArray:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeAmbTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$interval_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$values_", "[LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$e_", "LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOnSubscribeAmbTest;J[LNSString;LNSException;", "LRxInternalOperatorsOnSubscribeAmbTest;", "createObservableWithNSStringArray:withLong:withNSException:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 4, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest_$1 *self, RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$interval_ = capture$0;
  JreStrongAssign(&self->val$values_, capture$1);
  JreStrongAssign(&self->val$e_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_, outer$, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOnSubscribeAmbTest_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_(RxInternalOperatorsOnSubscribeAmbTest *outer$, jlong capture$0, IOSObjectArray *capture$1, NSException *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_withLong_withNSStringArray_withNSException_, outer$, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$1_$1

- (void)call {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:val$value_];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
                        withNSString:(NSString *)capture$1 {
  RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriber_);
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$value_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LNSString;", "(Lrx/Subscriber<-Ljava/lang/String;>;Ljava/lang/String;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeAmbTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$1_$1;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *self, RxSubscriber *capture$0, NSString *capture$1) {
  JreStrongAssign(&self->val$subscriber_, capture$0);
  JreStrongAssign(&self->val$value_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxSubscriber *capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1_$1, initWithRxSubscriber_withNSString_, capture$0, capture$1)
}

RxInternalOperatorsOnSubscribeAmbTest_$1_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_$1_initWithRxSubscriber_withNSString_(RxSubscriber *capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1_$1, initWithRxSubscriber_withNSString_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$1_$2

- (void)call {
  if (this$0_->val$e_ == nil) {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onCompleted];
  }
  else {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:this$0_->val$e_];
  }
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$1:(RxInternalOperatorsOnSubscribeAmbTest_$1 *)outer$
                                                withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeAmbTest_$1:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeAmbTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeAmbTest_$1;LRxSubscriber;", "(Lrx/internal/operators/OnSubscribeAmbTest$1;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeAmbTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$1_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$1_$2;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *self, RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *new_RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1_$2, initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOnSubscribeAmbTest_$1_$2 *create_RxInternalOperatorsOnSubscribeAmbTest_$1_$2_initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_(RxInternalOperatorsOnSubscribeAmbTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$1_$2, initWithRxInternalOperatorsOnSubscribeAmbTest_$1_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$2

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested1_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOnSubscribeAmbTest;", "testProducerRequestThroughAmb", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$2 *new_RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOnSubscribeAmbTest_$2 *create_RxInternalOperatorsOnSubscribeAmbTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$2_$1

- (void)requestWithLong:(jlong)n {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"1-requested: ", n)];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested1_)) setWithLong:n];
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$2:(RxInternalOperatorsOnSubscribeAmbTest_$2 *)outer$ {
  RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeAmbTest_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeAmbTest_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOnSubscribeAmbTest_$2;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$2_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$2_$1;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *self, RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$2_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_$2_, outer$)
}

RxInternalOperatorsOnSubscribeAmbTest_$2_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$2_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$2_(RxInternalOperatorsOnSubscribeAmbTest_$2 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$2_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_$2_, outer$)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$3

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested2_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOnSubscribeAmbTest;", "testProducerRequestThroughAmb", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$3 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested2_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$3 *new_RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$3, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOnSubscribeAmbTest_$3 *create_RxInternalOperatorsOnSubscribeAmbTest_$3_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$3, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$3_$1

- (void)requestWithLong:(jlong)n {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"2-requested: ", n)];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested2_)) setWithLong:n];
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeAmbTest_$3:(RxInternalOperatorsOnSubscribeAmbTest_$3 *)outer$ {
  RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeAmbTest_$3:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeAmbTest_$3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOnSubscribeAmbTest_$3;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$3_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$3_$1;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *self, RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *new_RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$3_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_$3_, outer$)
}

RxInternalOperatorsOnSubscribeAmbTest_$3_$1 *create_RxInternalOperatorsOnSubscribeAmbTest_$3_$1_initWithRxInternalOperatorsOnSubscribeAmbTest_$3_(RxInternalOperatorsOnSubscribeAmbTest_$3 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$3_$1, initWithRxInternalOperatorsOnSubscribeAmbTest_$3_, outer$)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOnSubscribeAmbTest;", "testSubscriptionOnlyHappensOnce" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOnSubscribeAmbTest_$4 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$4 *new_RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$4, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOnSubscribeAmbTest_$4 *create_RxInternalOperatorsOnSubscribeAmbTest_$4_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$4, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$5

- (void)onStart {
  [self requestWithLong:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeAmbTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOnSubscribeAmbTest_$5 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeAmbTest;", "testSecondaryRequestsPropagatedToChildren", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$5_init(RxInternalOperatorsOnSubscribeAmbTest_$5 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$5 *new_RxInternalOperatorsOnSubscribeAmbTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$5, init)
}

RxInternalOperatorsOnSubscribeAmbTest_$5 *create_RxInternalOperatorsOnSubscribeAmbTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$5, init)
}

@implementation RxInternalOperatorsOnSubscribeAmbTest_$6

- (void)callWithId:(id)t {
  @try {
    JavaLangThread_sleepWithLong_(100);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeAmbTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOnSubscribeAmbTest;", "testSynchronousSources", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAmbTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeAmbTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeAmbTest_$6_init(RxInternalOperatorsOnSubscribeAmbTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeAmbTest_$6 *new_RxInternalOperatorsOnSubscribeAmbTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$6, init)
}

RxInternalOperatorsOnSubscribeAmbTest_$6 *create_RxInternalOperatorsOnSubscribeAmbTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAmbTest_$6, init)
}
