//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/SchedulerWhenTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalSchedulersSchedulerWhen.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulerWhenTest.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Test.h"

@interface RxSchedulersSchedulerWhenTest ()

- (RxObservable *)asyncWorkWithRxScheduler:(RxScheduler *)sched;

- (RxObservable *)syncWorkWithRxScheduler:(RxScheduler *)sched;

- (RxInternalSchedulersSchedulerWhen *)maxConcurrentSchedulerWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)tSched;

- (RxInternalSchedulersSchedulerWhen *)throttleSchedulerWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)tSched;

@end

__attribute__((unused)) static RxObservable *RxSchedulersSchedulerWhenTest_asyncWorkWithRxScheduler_(RxSchedulersSchedulerWhenTest *self, RxScheduler *sched);

__attribute__((unused)) static RxObservable *RxSchedulersSchedulerWhenTest_syncWorkWithRxScheduler_(RxSchedulersSchedulerWhenTest *self, RxScheduler *sched);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen *RxSchedulersSchedulerWhenTest_maxConcurrentSchedulerWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest *self, RxSchedulersTestScheduler *tSched);

__attribute__((unused)) static RxInternalSchedulersSchedulerWhen *RxSchedulersSchedulerWhenTest_throttleSchedulerWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest *self, RxSchedulersTestScheduler *tSched);

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$3();

@interface RxSchedulersSchedulerWhenTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler *val$sched_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerWhenTest_$1, val$sched_, RxScheduler *)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxSchedulersSchedulerWhenTest_$1 *self, RxScheduler *capture$0);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$1 *new_RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$1 *create_RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxScheduler *capture$0);

@interface RxSchedulersSchedulerWhenTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler *val$sched_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$2)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerWhenTest_$2, val$sched_, RxScheduler *)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxSchedulersSchedulerWhenTest_$2 *self, RxScheduler *capture$0);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$2 *new_RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$2 *create_RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxScheduler *capture$0);

@interface RxSchedulersSchedulerWhenTest_$2_$1 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$2_$1)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$2_$1_init(RxSchedulersSchedulerWhenTest_$2_$1 *self);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$2_$1 *new_RxSchedulersSchedulerWhenTest_$2_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$2_$1 *create_RxSchedulersSchedulerWhenTest_$2_$1_init();

@interface RxSchedulersSchedulerWhenTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(RxObservable *)workerActions;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$3)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$3_init(RxSchedulersSchedulerWhenTest_$3 *self);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$3 *new_RxSchedulersSchedulerWhenTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$3 *create_RxSchedulersSchedulerWhenTest_$3_init();

@interface RxSchedulersSchedulerWhenTest_$3_$1 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(RxObservable *)actions;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$3_$1)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$3_$1_init(RxSchedulersSchedulerWhenTest_$3_$1 *self);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$3_$1 *new_RxSchedulersSchedulerWhenTest_$3_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$3_$1 *create_RxSchedulersSchedulerWhenTest_$3_$1_init();

@interface RxSchedulersSchedulerWhenTest_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTestScheduler *val$tSched_;
}

- (RxCompletable *)callWithId:(RxObservable *)workerActions;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$4)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerWhenTest_$4, val$tSched_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest_$4 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4 *new_RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4 *create_RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@interface RxSchedulersSchedulerWhenTest_$4_$1 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(RxObservable *)actions;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$4_$1)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$4_$1_init(RxSchedulersSchedulerWhenTest_$4_$1 *self);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4_$1 *new_RxSchedulersSchedulerWhenTest_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4_$1 *create_RxSchedulersSchedulerWhenTest_$4_$1_init();

@interface RxSchedulersSchedulerWhenTest_$4_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersSchedulerWhenTest_$4 *this$0_;
}

- (RxCompletable *)callWithId:(RxCompletable *)worker;

- (instancetype)initWithRxSchedulersSchedulerWhenTest_$4:(RxSchedulersSchedulerWhenTest_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersSchedulerWhenTest_$4_$2)

J2OBJC_FIELD_SETTER(RxSchedulersSchedulerWhenTest_$4_$2, this$0_, RxSchedulersSchedulerWhenTest_$4 *)

__attribute__((unused)) static void RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4_$2 *self, RxSchedulersSchedulerWhenTest_$4 *outer$);

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4_$2 *new_RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersSchedulerWhenTest_$4_$2 *create_RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4 *outer$);

@implementation RxSchedulersSchedulerWhenTest

- (void)testAsyncMaxConcurrent {
  RxSchedulersTestScheduler *tSched = create_RxSchedulersTestScheduler_init();
  RxInternalSchedulersSchedulerWhen *sched = RxSchedulersSchedulerWhenTest_maxConcurrentSchedulerWithRxSchedulersTestScheduler_(self, tSched);
  RxObserversTestSubscriber *tSub = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxSchedulersSchedulerWhenTest_asyncWorkWithRxScheduler_(self, sched))) subscribeWithRxSubscriber:tSub];
  [((RxObserversTestSubscriber *) nil_chk(tSub)) assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:2];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:4];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:5];
  [tSub assertCompleted];
  [((RxInternalSchedulersSchedulerWhen *) nil_chk(sched)) unsubscribe];
}

- (void)testAsyncDelaySubscription {
  RxSchedulersTestScheduler *tSched = create_RxSchedulersTestScheduler_init();
  RxInternalSchedulersSchedulerWhen *sched = RxSchedulersSchedulerWhenTest_throttleSchedulerWithRxSchedulersTestScheduler_(self, tSched);
  RxObserversTestSubscriber *tSub = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxSchedulersSchedulerWhenTest_asyncWorkWithRxScheduler_(self, sched))) subscribeWithRxSubscriber:tSub];
  [((RxObserversTestSubscriber *) nil_chk(tSub)) assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:1];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:1];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:2];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:2];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:3];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:3];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:4];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:4];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:5];
  [tSub assertCompleted];
  [((RxInternalSchedulersSchedulerWhen *) nil_chk(sched)) unsubscribe];
}

- (void)testSyncMaxConcurrent {
  RxSchedulersTestScheduler *tSched = create_RxSchedulersTestScheduler_init();
  RxInternalSchedulersSchedulerWhen *sched = RxSchedulersSchedulerWhenTest_maxConcurrentSchedulerWithRxSchedulersTestScheduler_(self, tSched);
  RxObserversTestSubscriber *tSub = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxSchedulersSchedulerWhenTest_syncWorkWithRxScheduler_(self, sched))) subscribeWithRxSubscriber:tSub];
  [((RxObserversTestSubscriber *) nil_chk(tSub)) assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:5];
  [tSub assertCompleted];
  [((RxInternalSchedulersSchedulerWhen *) nil_chk(sched)) unsubscribe];
}

- (void)testSyncDelaySubscription {
  RxSchedulersTestScheduler *tSched = create_RxSchedulersTestScheduler_init();
  RxInternalSchedulersSchedulerWhen *sched = RxSchedulersSchedulerWhenTest_throttleSchedulerWithRxSchedulersTestScheduler_(self, tSched);
  RxObserversTestSubscriber *tSub = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxSchedulersSchedulerWhenTest_syncWorkWithRxScheduler_(self, sched))) subscribeWithRxSubscriber:tSub];
  [((RxObserversTestSubscriber *) nil_chk(tSub)) assertValueCountWithInt:0];
  [tSched advanceTimeByWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:1];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:2];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:3];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:4];
  [tSched advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [tSub assertValueCountWithInt:5];
  [tSub assertCompleted];
  [((RxInternalSchedulersSchedulerWhen *) nil_chk(sched)) unsubscribe];
}

- (RxObservable *)asyncWorkWithRxScheduler:(RxScheduler *)sched {
  return RxSchedulersSchedulerWhenTest_asyncWorkWithRxScheduler_(self, sched);
}

- (RxObservable *)syncWorkWithRxScheduler:(RxScheduler *)sched {
  return RxSchedulersSchedulerWhenTest_syncWorkWithRxScheduler_(self, sched);
}

- (RxInternalSchedulersSchedulerWhen *)maxConcurrentSchedulerWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)tSched {
  return RxSchedulersSchedulerWhenTest_maxConcurrentSchedulerWithRxSchedulersTestScheduler_(self, tSched);
}

- (RxInternalSchedulersSchedulerWhen *)throttleSchedulerWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)tSched {
  return RxSchedulersSchedulerWhenTest_throttleSchedulerWithRxSchedulersTestScheduler_(self, tSched);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerWhenTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "LRxObservable;", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "LRxObservable;", 0x2, 7, 5, -1, 6, -1, -1 },
    { NULL, "LRxInternalSchedulersSchedulerWhen;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LRxInternalSchedulersSchedulerWhen;", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testAsyncMaxConcurrent);
  methods[1].selector = @selector(testAsyncDelaySubscription);
  methods[2].selector = @selector(testSyncMaxConcurrent);
  methods[3].selector = @selector(testSyncDelaySubscription);
  methods[4].selector = @selector(asyncWorkWithRxScheduler:);
  methods[5].selector = @selector(syncWorkWithRxScheduler:);
  methods[6].selector = @selector(maxConcurrentSchedulerWithRxSchedulersTestScheduler:);
  methods[7].selector = @selector(throttleSchedulerWithRxSchedulersTestScheduler:);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersSchedulerWhenTest__Annotations$0, (void *)&RxSchedulersSchedulerWhenTest__Annotations$1, (void *)&RxSchedulersSchedulerWhenTest__Annotations$2, (void *)&RxSchedulersSchedulerWhenTest__Annotations$3, "asyncWork", "LRxScheduler;", "(Lrx/Scheduler;)Lrx/Observable<Ljava/lang/Long;>;", "syncWork", "maxConcurrentScheduler", "LRxSchedulersTestScheduler;", "throttleScheduler" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest = { "SchedulerWhenTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersSchedulerWhenTest;
}

@end

RxObservable *RxSchedulersSchedulerWhenTest_asyncWorkWithRxScheduler_(RxSchedulersSchedulerWhenTest *self, RxScheduler *sched) {
  return [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) flatMapWithRxFunctionsFunc1:create_RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(sched)];
}

RxObservable *RxSchedulersSchedulerWhenTest_syncWorkWithRxScheduler_(RxSchedulersSchedulerWhenTest *self, RxScheduler *sched) {
  return [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) flatMapWithRxFunctionsFunc1:create_RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(sched)];
}

RxInternalSchedulersSchedulerWhen *RxSchedulersSchedulerWhenTest_maxConcurrentSchedulerWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest *self, RxSchedulersTestScheduler *tSched) {
  RxInternalSchedulersSchedulerWhen *sched = create_RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(create_RxSchedulersSchedulerWhenTest_$3_init(), tSched);
  return sched;
}

RxInternalSchedulersSchedulerWhen *RxSchedulersSchedulerWhenTest_throttleSchedulerWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest *self, RxSchedulersTestScheduler *tSched) {
  RxInternalSchedulersSchedulerWhen *sched = create_RxInternalSchedulersSchedulerWhen_initWithRxFunctionsFunc1_withRxScheduler_(create_RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(tSched), tSched);
  return sched;
}

void RxSchedulersSchedulerWhenTest_init(RxSchedulersSchedulerWhenTest *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest *new_RxSchedulersSchedulerWhenTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest, init)
}

RxSchedulersSchedulerWhenTest *create_RxSchedulersSchedulerWhenTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest, init)
}

IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersSchedulerWhenTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersSchedulerWhenTest)

@implementation RxSchedulersSchedulerWhenTest_$1

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_timerWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), val$sched_);
}

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0 {
  RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sched_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sched_", "LRxScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Long;>;", "LRxScheduler;", "LRxSchedulersSchedulerWhenTest;", "asyncWorkWithRxScheduler:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersSchedulerWhenTest_$1;
}

@end

void RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxSchedulersSchedulerWhenTest_$1 *self, RxScheduler *capture$0) {
  JreStrongAssign(&self->val$sched_, capture$0);
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$1 *new_RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$1, initWithRxScheduler_, capture$0)
}

RxSchedulersSchedulerWhenTest_$1 *create_RxSchedulersSchedulerWhenTest_$1_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$1, initWithRxScheduler_, capture$0)
}

@implementation RxSchedulersSchedulerWhenTest_$2

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return [((RxObservable *) nil_chk(RxObservable_deferWithRxFunctionsFunc0_(create_RxSchedulersSchedulerWhenTest_$2_$1_init()))) subscribeOnWithRxScheduler:val$sched_];
}

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0 {
  RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sched_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sched_", "LRxScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Long;>;", "LRxScheduler;", "LRxSchedulersSchedulerWhenTest;", "syncWorkWithRxScheduler:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersSchedulerWhenTest_$2;
}

@end

void RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxSchedulersSchedulerWhenTest_$2 *self, RxScheduler *capture$0) {
  JreStrongAssign(&self->val$sched_, capture$0);
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$2 *new_RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$2, initWithRxScheduler_, capture$0)
}

RxSchedulersSchedulerWhenTest_$2 *create_RxSchedulersSchedulerWhenTest_$2_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$2, initWithRxScheduler_, capture$0)
}

@implementation RxSchedulersSchedulerWhenTest_$2_$1

- (RxObservable *)call {
  return RxObservable_justWithId_(JavaLangLong_valueOfWithLong_(0l));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerWhenTest_$2_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Long;>;", "LRxSchedulersSchedulerWhenTest_$2;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$2_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxSchedulersSchedulerWhenTest_$2_$1;
}

@end

void RxSchedulersSchedulerWhenTest_$2_$1_init(RxSchedulersSchedulerWhenTest_$2_$1 *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$2_$1 *new_RxSchedulersSchedulerWhenTest_$2_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$2_$1, init)
}

RxSchedulersSchedulerWhenTest_$2_$1 *create_RxSchedulersSchedulerWhenTest_$2_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$2_$1, init)
}

@implementation RxSchedulersSchedulerWhenTest_$3

- (RxCompletable *)callWithId:(RxObservable *)workerActions {
  RxObservable *workers = [((RxObservable *) nil_chk(workerActions)) mapWithRxFunctionsFunc1:create_RxSchedulersSchedulerWhenTest_$3_$1_init()];
  return RxCompletable_mergeWithRxObservable_withInt_(workers, 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerWhenTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Lrx/Observable<Lrx/Completable;>;>;)Lrx/Completable;", "LRxSchedulersSchedulerWhenTest;", "maxConcurrentSchedulerWithRxSchedulersTestScheduler:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Lrx/Observable<Lrx/Completable;>;>;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$3 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSchedulersSchedulerWhenTest_$3;
}

@end

void RxSchedulersSchedulerWhenTest_$3_init(RxSchedulersSchedulerWhenTest_$3 *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$3 *new_RxSchedulersSchedulerWhenTest_$3_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$3, init)
}

RxSchedulersSchedulerWhenTest_$3 *create_RxSchedulersSchedulerWhenTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$3, init)
}

@implementation RxSchedulersSchedulerWhenTest_$3_$1

- (RxCompletable *)callWithId:(RxObservable *)actions {
  return RxCompletable_concatWithRxObservable_(actions);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerWhenTest_$3_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Lrx/Completable;>;)Lrx/Completable;", "LRxSchedulersSchedulerWhenTest_$3;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Lrx/Completable;>;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$3_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSchedulersSchedulerWhenTest_$3_$1;
}

@end

void RxSchedulersSchedulerWhenTest_$3_$1_init(RxSchedulersSchedulerWhenTest_$3_$1 *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$3_$1 *new_RxSchedulersSchedulerWhenTest_$3_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$3_$1, init)
}

RxSchedulersSchedulerWhenTest_$3_$1 *create_RxSchedulersSchedulerWhenTest_$3_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$3_$1, init)
}

@implementation RxSchedulersSchedulerWhenTest_$4

- (RxCompletable *)callWithId:(RxObservable *)workerActions {
  RxObservable *workers = [((RxObservable *) nil_chk(workerActions)) mapWithRxFunctionsFunc1:create_RxSchedulersSchedulerWhenTest_$4_$1_init()];
  return RxCompletable_concatWithRxObservable_([((RxObservable *) nil_chk(workers)) mapWithRxFunctionsFunc1:create_RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(self)]);
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$tSched_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$tSched_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Lrx/Observable<Lrx/Completable;>;>;)Lrx/Completable;", "LRxSchedulersTestScheduler;", "LRxSchedulersSchedulerWhenTest;", "throttleSchedulerWithRxSchedulersTestScheduler:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Lrx/Observable<Lrx/Completable;>;>;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersSchedulerWhenTest_$4;
}

@end

void RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersSchedulerWhenTest_$4 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$tSched_, capture$0);
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$4 *new_RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$4, initWithRxSchedulersTestScheduler_, capture$0)
}

RxSchedulersSchedulerWhenTest_$4 *create_RxSchedulersSchedulerWhenTest_$4_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$4, initWithRxSchedulersTestScheduler_, capture$0)
}

@implementation RxSchedulersSchedulerWhenTest_$4_$1

- (RxCompletable *)callWithId:(RxObservable *)actions {
  return RxCompletable_concatWithRxObservable_(actions);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersSchedulerWhenTest_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Lrx/Completable;>;)Lrx/Completable;", "LRxSchedulersSchedulerWhenTest_$4;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Lrx/Completable;>;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$4_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSchedulersSchedulerWhenTest_$4_$1;
}

@end

void RxSchedulersSchedulerWhenTest_$4_$1_init(RxSchedulersSchedulerWhenTest_$4_$1 *self) {
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$4_$1 *new_RxSchedulersSchedulerWhenTest_$4_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$4_$1, init)
}

RxSchedulersSchedulerWhenTest_$4_$1 *create_RxSchedulersSchedulerWhenTest_$4_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$4_$1, init)
}

@implementation RxSchedulersSchedulerWhenTest_$4_$2

- (RxCompletable *)callWithId:(RxCompletable *)worker {
  return [((RxCompletable *) nil_chk(worker)) delayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:this$0_->val$tSched_];
}

- (instancetype)initWithRxSchedulersSchedulerWhenTest_$4:(RxSchedulersSchedulerWhenTest_$4 *)outer$ {
  RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersSchedulerWhenTest_$4:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersSchedulerWhenTest_$4;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletable;", "LRxSchedulersSchedulerWhenTest_$4;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSchedulersSchedulerWhenTest_$4_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxSchedulersSchedulerWhenTest_$4_$2;
}

@end

void RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4_$2 *self, RxSchedulersSchedulerWhenTest_$4 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersSchedulerWhenTest_$4_$2 *new_RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersSchedulerWhenTest_$4_$2, initWithRxSchedulersSchedulerWhenTest_$4_, outer$)
}

RxSchedulersSchedulerWhenTest_$4_$2 *create_RxSchedulersSchedulerWhenTest_$4_$2_initWithRxSchedulersSchedulerWhenTest_$4_(RxSchedulersSchedulerWhenTest_$4 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersSchedulerWhenTest_$4_$2, initWithRxSchedulersSchedulerWhenTest_$4_, outer$)
}
