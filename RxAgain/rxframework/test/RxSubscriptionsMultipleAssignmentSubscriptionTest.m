//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subscriptions/MultipleAssignmentSubscriptionTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxSubscription.h"
#include "RxSubscriptionsMultipleAssignmentSubscription.h"
#include "RxSubscriptionsMultipleAssignmentSubscriptionTest.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/Boolean.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$5();

@implementation RxSubscriptionsMultipleAssignmentSubscriptionTest

- (void)before {
  JreStrongAssign(&unsubscribe_, OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_()));
  JreStrongAssign(&s_, RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(unsubscribe_));
}

- (void)testNoUnsubscribeWhenReplaced {
  RxSubscriptionsMultipleAssignmentSubscription *mas = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas setWithRxSubscription:s_];
  [mas setWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
  [mas unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe_, OrgMockitoMockito_never()))) call];
}

- (void)testUnsubscribeWhenParentUnsubscribes {
  RxSubscriptionsMultipleAssignmentSubscription *mas = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas setWithRxSubscription:s_];
  [mas unsubscribe];
  [mas unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe_, OrgMockitoMockito_timesWithInt_(1)))) call];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([mas isUnsubscribed]));
}

- (void)subscribingWhenUnsubscribedCausesImmediateUnsubscription {
  RxSubscriptionsMultipleAssignmentSubscription *mas = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas unsubscribe];
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [mas setWithRxSubscription:underlying];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
}

- (void)testSubscriptionRemainsAfterUnsubscribe {
  RxSubscriptionsMultipleAssignmentSubscription *mas = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas setWithRxSubscription:s_];
  [mas unsubscribe];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([mas get] == s_));
}

- (void)subscriptionDoesntRemainAfterUnsubscribe {
  RxSubscriptionsMultipleAssignmentSubscription *mas = create_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas setWithRxSubscription:s_];
  [mas unsubscribe];
  OrgJunitAssert_assertNotEqualsWithId_withId_(s_, [mas get]);
  OrgJunitAssert_assertSameWithId_withId_([mas get], RxSubscriptionsSubscriptions_unsubscribed());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsMultipleAssignmentSubscriptionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(unsubscribe_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testNoUnsubscribeWhenReplaced);
  methods[2].selector = @selector(testUnsubscribeWhenParentUnsubscribes);
  methods[3].selector = @selector(subscribingWhenUnsubscribedCausesImmediateUnsubscription);
  methods[4].selector = @selector(testSubscriptionRemainsAfterUnsubscribe);
  methods[5].selector = @selector(subscriptionDoesntRemainAfterUnsubscribe);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unsubscribe_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$0, (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$1, (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$2, (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$3, (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$4, (void *)&RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$5 };
  static const J2ObjcClassInfo _RxSubscriptionsMultipleAssignmentSubscriptionTest = { "MultipleAssignmentSubscriptionTest", "rx.subscriptions", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsMultipleAssignmentSubscriptionTest;
}

@end

void RxSubscriptionsMultipleAssignmentSubscriptionTest_init(RxSubscriptionsMultipleAssignmentSubscriptionTest *self) {
  NSObject_init(self);
}

RxSubscriptionsMultipleAssignmentSubscriptionTest *new_RxSubscriptionsMultipleAssignmentSubscriptionTest_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsMultipleAssignmentSubscriptionTest, init)
}

RxSubscriptionsMultipleAssignmentSubscriptionTest *create_RxSubscriptionsMultipleAssignmentSubscriptionTest_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsMultipleAssignmentSubscriptionTest, init)
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0), create_OrgJunitIgnore(@"This is prone to leaks") } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsMultipleAssignmentSubscriptionTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsMultipleAssignmentSubscriptionTest)
