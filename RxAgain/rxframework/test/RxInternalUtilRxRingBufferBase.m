//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/RxRingBufferBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilRxRingBufferBase.h"
#include "RxObserversTestSubscriber.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$6();

@implementation RxInternalUtilRxRingBufferBase

- (RxInternalUtilRxRingBuffer *)createRingBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)missingBackpressureException {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [s requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE); i++) {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"one"];
  }
  @try {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"o"];
    OrgJunitAssert_failWithNSString_(@"expected failure adding beyond size");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxExceptionsMissingBackpressureException class]]);
  }
}

- (void)addAndPollFailBackpressure {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  @try {
    for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE); i++) {
      [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"one"];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  [((RxInternalUtilRxRingBuffer *) nil_chk(b)) poll];
  [b onNextWithId:@"o"];
  @try {
    [b onNextWithId:@"o"];
    OrgJunitAssert_failWithNSString_(@"expected failure adding beyond size");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxExceptionsMissingBackpressureException class]]);
  }
}

- (void)addAndPoll {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"o"];
  [b onNextWithId:@"o"];
  [b poll];
  [b poll];
  [b onNextWithId:@"o"];
  [b onNextWithId:@"o"];
}

- (void)roomForError {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [s requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE); i++) {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"one"];
  }
  @try {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"should-fail"];
    OrgJunitAssert_failWithNSString_(@"expected error");
  }
  @catch (JavaLangException *e) {
    [b onErrorWithNSException:create_RxExceptionsMissingBackpressureException_init()];
  }
}

- (void)multipleTerminalEventsOnComplete {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [s requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE); i++) {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"one"];
  }
  [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an error")];
  @try {
    [b onCompleted];
  }
  @catch (JavaLangIllegalStateException *e) {
    OrgJunitAssert_failWithNSString_(@"we will ignore duplicate terminal events");
  }
}

- (void)multipleTerminalEventsOnError {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [s requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE); i++) {
    [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:@"one"];
  }
  [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onCompleted];
  @try {
    [b onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an error")];
  }
  @catch (JavaLangIllegalStateException *e) {
    OrgJunitAssert_failWithNSString_(@"we will ignore duplicate terminal events");
  }
}

- (void)testPollingTerminalState {
  RxInternalUtilRxRingBuffer *b = [self createRingBuffer];
  [((RxInternalUtilRxRingBuffer *) nil_chk(b)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [b onCompleted];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  id o = nil;
  while ((o = [b poll]) != nil) {
    if ([b isCompletedWithId:o]) {
      [s onCompleted];
    }
    else {
      [s onNextWithId:o];
    }
  }
  [s awaitTerminalEvent];
  [s assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()])];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilRxRingBufferBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalUtilRxRingBuffer;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 7, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createRingBuffer);
  methods[1].selector = @selector(missingBackpressureException);
  methods[2].selector = @selector(addAndPollFailBackpressure);
  methods[3].selector = @selector(addAndPoll);
  methods[4].selector = @selector(roomForError);
  methods[5].selector = @selector(multipleTerminalEventsOnComplete);
  methods[6].selector = @selector(multipleTerminalEventsOnError);
  methods[7].selector = @selector(testPollingTerminalState);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxExceptionsMissingBackpressureException;", (void *)&RxInternalUtilRxRingBufferBase__Annotations$0, (void *)&RxInternalUtilRxRingBufferBase__Annotations$1, (void *)&RxInternalUtilRxRingBufferBase__Annotations$2, (void *)&RxInternalUtilRxRingBufferBase__Annotations$3, (void *)&RxInternalUtilRxRingBufferBase__Annotations$4, (void *)&RxInternalUtilRxRingBufferBase__Annotations$5, (void *)&RxInternalUtilRxRingBufferBase__Annotations$6 };
  static const J2ObjcClassInfo _RxInternalUtilRxRingBufferBase = { "RxRingBufferBase", "rx.internal.util", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilRxRingBufferBase;
}

@end

void RxInternalUtilRxRingBufferBase_init(RxInternalUtilRxRingBufferBase *self) {
  NSObject_init(self);
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilRxRingBufferBase__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 500) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilRxRingBufferBase)
