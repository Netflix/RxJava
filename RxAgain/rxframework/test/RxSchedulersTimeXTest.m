//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/TimeXTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxSchedulersTimeInterval.h"
#include "RxSchedulersTimeXTest.h"
#include "RxSchedulersTimestamped.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersTimeXTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTimeXTest__Annotations$1();

@implementation RxSchedulersTimeXTest

- (void)timestamped {
  RxSchedulersTimestamped *ts1 = create_RxSchedulersTimestamped_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimestamped *ts2 = create_RxSchedulersTimestamped_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimestamped *ts3 = create_RxSchedulersTimestamped_initWithLong_withId_(3LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimestamped *ts4 = create_RxSchedulersTimestamped_initWithLong_withId_(3LL, JavaLangInteger_valueOfWithInt_(2));
  RxSchedulersTimestamped *ts5 = create_RxSchedulersTimestamped_initWithLong_withId_(4LL, nil);
  RxSchedulersTimestamped *ts6 = create_RxSchedulersTimestamped_initWithLong_withId_(4LL, nil);
  RxSchedulersTimestamped *ts7 = create_RxSchedulersTimestamped_initWithLong_withId_(1LL, create_JavaLangInteger_initWithInt_(1));
  RxSchedulersTimestamped *ts8 = create_RxSchedulersTimestamped_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(3));
  RxSchedulersTimestamped *ts9 = create_RxSchedulersTimestamped_initWithLong_withId_(1LL, nil);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1LL, [ts1 getTimestampMillis]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangInteger *) nil_chk([ts1 getValue])) intValue]);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, nil);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, @"string");
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts1);
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts2);
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts7);
  OrgJunitAssert_assertEqualsWithId_withId_(ts7, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts3);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts4);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts8);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts8, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts9);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts9, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts5);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts5, ts1);
  OrgJunitAssert_assertEqualsWithId_withId_(ts5, ts6);
  OrgJunitAssert_assertEqualsWithId_withId_(@"Timestamped(timestampMillis = 1, value = 1)", [ts1 description]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(((jint) [ts1 hash]), ((jint) [ts2 hash]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(((jint) [ts5 hash]), ((jint) [ts6 hash]));
}

- (void)timeInterval {
  RxSchedulersTimeInterval *ts1 = create_RxSchedulersTimeInterval_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimeInterval *ts2 = create_RxSchedulersTimeInterval_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimeInterval *ts3 = create_RxSchedulersTimeInterval_initWithLong_withId_(3LL, JavaLangInteger_valueOfWithInt_(1));
  RxSchedulersTimeInterval *ts4 = create_RxSchedulersTimeInterval_initWithLong_withId_(3LL, JavaLangInteger_valueOfWithInt_(2));
  RxSchedulersTimeInterval *ts5 = create_RxSchedulersTimeInterval_initWithLong_withId_(4LL, nil);
  RxSchedulersTimeInterval *ts6 = create_RxSchedulersTimeInterval_initWithLong_withId_(4LL, nil);
  RxSchedulersTimeInterval *ts7 = create_RxSchedulersTimeInterval_initWithLong_withId_(1LL, create_JavaLangInteger_initWithInt_(1));
  RxSchedulersTimeInterval *ts8 = create_RxSchedulersTimeInterval_initWithLong_withId_(1LL, JavaLangInteger_valueOfWithInt_(3));
  RxSchedulersTimeInterval *ts9 = create_RxSchedulersTimeInterval_initWithLong_withId_(1LL, nil);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1LL, [ts1 getIntervalInMilliseconds]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangInteger *) nil_chk([ts1 getValue])) intValue]);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, nil);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, @"string");
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts1);
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts2);
  OrgJunitAssert_assertEqualsWithId_withId_(ts1, ts7);
  OrgJunitAssert_assertEqualsWithId_withId_(ts7, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts3);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts4);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts8);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts8, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts9);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts9, ts1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts1, ts5);
  OrgJunitAssert_assertNotEqualsWithId_withId_(ts5, ts1);
  OrgJunitAssert_assertEqualsWithId_withId_(ts5, ts6);
  OrgJunitAssert_assertEqualsWithId_withId_(@"TimeInterval [intervalInMilliseconds=1, value=1]", [ts1 description]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(((jint) [ts1 hash]), ((jint) [ts2 hash]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(((jint) [ts5 hash]), ((jint) [ts6 hash]));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTimeXTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(timestamped);
  methods[1].selector = @selector(timeInterval);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersTimeXTest__Annotations$0, (void *)&RxSchedulersTimeXTest__Annotations$1 };
  static const J2ObjcClassInfo _RxSchedulersTimeXTest = { "TimeXTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersTimeXTest;
}

@end

void RxSchedulersTimeXTest_init(RxSchedulersTimeXTest *self) {
  NSObject_init(self);
}

RxSchedulersTimeXTest *new_RxSchedulersTimeXTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersTimeXTest, init)
}

RxSchedulersTimeXTest *create_RxSchedulersTimeXTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersTimeXTest, init)
}

IOSObjectArray *RxSchedulersTimeXTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTimeXTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTimeXTest)
