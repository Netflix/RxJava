//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorRetryWithPredicateTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorRetryTest.h"
#include "RxInternalOperatorsOperatorRetryWithPredicateTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$12();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$1 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$2 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$3 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$4 : NSObject < RxObservable_OnSubscribe > {
 @public
  jint count_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$5 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$6 : NSObject < RxObservable_OnSubscribe > {
 @public
  jint count_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$7 : NSObject < RxObservable_OnSubscribe > {
 @public
  jint count_;
  JavaIoIOException *val$ioe_;
  RxExceptionsTestException *val$te_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)initWithJavaIoIOException:(JavaIoIOException *)capture$0
            withRxExceptionsTestException:(RxExceptionsTestException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$7, val$ioe_, JavaIoIOException *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$7, val$te_, RxExceptionsTestException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *self, JavaIoIOException *capture$0, RxExceptionsTestException *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(JavaIoIOException *capture$0, RxExceptionsTestException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(JavaIoIOException *capture$0, RxExceptionsTestException *capture$1);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$8 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$8, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$c_;
  JavaLangRuntimeException *val$e_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withJavaLangRuntimeException:(JavaLangRuntimeException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$9, val$c_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$9, val$e_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$10 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$throwException_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$10, val$throwException_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$11 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$isFirst_;
}

- (JavaLangLong *)callWithId:(JavaLangLong *)x;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$11, val$isFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$12 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init();

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$13 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$13, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$14 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$isFirst_;
}

- (JavaLangLong *)callWithId:(JavaLangLong *)x;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$14, val$isFirst_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$15 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$15, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$16 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryWithPredicateTest_$16, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorRetryWithPredicateTest_$17 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryWithPredicateTest_$17)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init();

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest

- (void)testWithNothingToRetry {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(0, 3);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:retryTwice_])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRetryTwice {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:retryTwice_])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRetryTwiceAndGiveUp {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:retryTwice_])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testRetryOnSpecificException {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:retryOnTestException_])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRetryOnSpecificExceptionAndNotOther {
  JavaIoIOException *ioe = create_JavaIoIOException_init();
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(ioe, te));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:retryOnTestException_])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:te];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:ioe];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testUnsubscribeFromRetry {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  id<RxSubscription> sub = [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(subject)) retryWithRxFunctionsFunc2:retryTwice_])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [count get]);
}

- (void)testUnsubscribeAfterError {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorRetryTest_SlowObservable *so = create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(100, 0);
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(so))) retryWithRxFunctionsFunc2:retry5_];
  RxInternalOperatorsOperatorRetryTest_AsyncObserver *async = create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:async];
  [async await];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Start 6 threads, retry 5 then fail on 6", 6, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->efforts_)) get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Only 1 active subscription", 1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->maxActive_)) get]);
}

- (void)testTimeoutWithRetry {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorRetryTest_SlowObservable *so = create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(100, 10);
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(so))) timeoutWithLong:80 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) retryWithRxFunctionsFunc2:retry5_];
  RxInternalOperatorsOperatorRetryTest_AsyncObserver *async = create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:async];
  [async await];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Start 6 threads, retry 5 then fail on 6", 6, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->efforts_)) get]);
}

- (void)testIssue2826 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(@"You shall not pass");
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(c, e)])) retryWithRxFunctionsFunc2:retry5_])) subscribeWithRxSubscriber:ts];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [c get]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilCollections_singletonListWithId_(e), [ts getOnErrorEvents]);
}

- (void)testJustAndRetry {
  JavaUtilConcurrentAtomicAtomicBoolean *throwException = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
  jint value = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(throwException)])) retryWithLong:1])) toBlocking])) single])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, value);
}

- (void)testIssue3008RetryWithPredicate {
  id<JavaUtilList> list = create_JavaUtilConcurrentCopyOnWriteArrayList_init();
  JavaUtilConcurrentAtomicAtomicBoolean *isFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(2LL), JavaLangLong_valueOfWithLong_(3LL)))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(isFirst)])) retryWithRxFunctionsFunc2:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init()])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(list)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(2LL), JavaLangLong_valueOfWithLong_(3LL) } count:4 type:JavaLangLong_class_()]), list);
}

- (void)testIssue3008RetryInfinite {
  id<JavaUtilList> list = create_JavaUtilConcurrentCopyOnWriteArrayList_init();
  JavaUtilConcurrentAtomicAtomicBoolean *isFirst = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(true);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(2LL), JavaLangLong_valueOfWithLong_(3LL)))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(isFirst)])) retry])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(list)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(2LL), JavaLangLong_valueOfWithLong_(3LL) } count:4 type:JavaLangLong_class_()]), list);
}

- (void)testBackpressure {
  id<JavaUtilList> requests = create_JavaUtilArrayList_init();
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())])) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(requests)];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(3);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) retryWithRxFunctionsFunc2:create_RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init()])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(3LL), JavaLangLong_valueOfWithLong_(2LL), JavaLangLong_valueOfWithLong_(1LL) } count:3 type:JavaLangLong_class_()]), requests);
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(retryTwice_);
  RELEASE_(retry5_);
  RELEASE_(retryOnTestException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithNothingToRetry);
  methods[1].selector = @selector(testRetryTwice);
  methods[2].selector = @selector(testRetryTwiceAndGiveUp);
  methods[3].selector = @selector(testRetryOnSpecificException);
  methods[4].selector = @selector(testRetryOnSpecificExceptionAndNotOther);
  methods[5].selector = @selector(testUnsubscribeFromRetry);
  methods[6].selector = @selector(testUnsubscribeAfterError);
  methods[7].selector = @selector(testTimeoutWithRetry);
  methods[8].selector = @selector(testIssue2826);
  methods[9].selector = @selector(testJustAndRetry);
  methods[10].selector = @selector(testIssue3008RetryWithPredicate);
  methods[11].selector = @selector(testIssue3008RetryInfinite);
  methods[12].selector = @selector(testBackpressure);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "retryTwice_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
    { "retry5_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
    { "retryOnTestException_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$0, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$1, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$2, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$3, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$4, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$5, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$6, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$7, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$8, "LJavaLangException;", (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$9, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$10, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$11, (void *)&RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$12, "Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest = { "OperatorRetryWithPredicateTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 14, 3, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_init(RxInternalOperatorsOperatorRetryWithPredicateTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->retryTwice_, new_RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init());
  JreStrongAssignAndConsume(&self->retry5_, new_RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init());
  JreStrongAssignAndConsume(&self->retryOnTestException_, new_RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init());
}

RxInternalOperatorsOperatorRetryWithPredicateTest *new_RxInternalOperatorsOperatorRetryWithPredicateTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest *create_RxInternalOperatorsOperatorRetryWithPredicateTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryWithPredicateTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryWithPredicateTest)

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] <= 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$1;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$1, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$1 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$2

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] <= 5);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$2;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$2, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$2 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$2, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$3

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2 {
  return JavaLangBoolean_valueOfWithBoolean_([t2 isKindOfClass:[JavaIoIOException class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$3;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$3, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$3 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$3, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$4

- (void)callWithId:(RxSubscriber *)t1 {
  count_++;
  [((RxSubscriber *) nil_chk(t1)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  if (count_ == 1) {
    [t1 onErrorWithNSException:create_RxExceptionsTestException_init()];
    return;
  }
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [t1 onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testRetryTwice", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$4;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$4, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$4 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$4, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$5

- (void)callWithId:(RxSubscriber *)t1 {
  [((RxSubscriber *) nil_chk(t1)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [t1 onErrorWithNSException:create_RxExceptionsTestException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testRetryTwiceAndGiveUp", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$5;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$5, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$5 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$5, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$6

- (void)callWithId:(RxSubscriber *)t1 {
  count_++;
  [((RxSubscriber *) nil_chk(t1)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  if (count_ == 1) {
    [t1 onErrorWithNSException:create_JavaIoIOException_init()];
    return;
  }
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [t1 onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testRetryOnSpecificException", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$6;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$6, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$6 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$6, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$7

- (void)callWithId:(RxSubscriber *)t1 {
  count_++;
  [((RxSubscriber *) nil_chk(t1)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  if (count_ == 1) {
    [t1 onErrorWithNSException:val$ioe_];
    return;
  }
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [t1 onErrorWithNSException:val$te_];
}

- (instancetype)initWithJavaIoIOException:(JavaIoIOException *)capture$0
            withRxExceptionsTestException:(RxExceptionsTestException *)capture$1 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ioe_);
  RELEASE_(val$te_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaIoIOException:withRxExceptionsTestException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$ioe_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$te_", "LRxExceptionsTestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaIoIOException;LRxExceptionsTestException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testRetryOnSpecificExceptionAndNotOther", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$7;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *self, JavaIoIOException *capture$0, RxExceptionsTestException *capture$1) {
  JreStrongAssign(&self->val$ioe_, capture$0);
  JreStrongAssign(&self->val$te_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(JavaIoIOException *capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$7, initWithJavaIoIOException_withRxExceptionsTestException_, capture$0, capture$1)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$7 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$7_initWithJavaIoIOException_withRxExceptionsTestException_(JavaIoIOException *capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$7, initWithJavaIoIOException_withRxExceptionsTestException_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$8

- (void)callWithId:(JavaLangInteger *)n {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testUnsubscribeFromRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$8;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$8 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$9

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$c_)) incrementAndGet];
  @throw val$e_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withJavaLangRuntimeException:(JavaLangRuntimeException *)capture$1 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$e_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaLangRuntimeException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue2826", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$9;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1) {
  JreStrongAssign(&self->val$c_, capture$0);
  JreStrongAssign(&self->val$e_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_, capture$0, capture$1)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$9 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaLangRuntimeException *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaLangRuntimeException_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$10

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$throwException_)) compareAndSetWithBoolean:true withBoolean:false]) {
    @throw create_RxExceptionsTestException_init();
  }
  return t1;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$throwException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$throwException_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testJustAndRetry", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$10;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$throwException_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$10 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$11

- (JavaLangLong *)callWithId:(JavaLangLong *)x {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"map ", x)];
  if ([((JavaLangLong *) nil_chk(x)) longLongValue] == 2 && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$isFirst_)) getAndSetWithBoolean:false]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"retryable error");
  }
  return x;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$isFirst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$isFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue3008RetryWithPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$11;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$isFirst_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$11 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$12

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2 {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue3008RetryWithPredicate", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$12;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$12, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$12 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$12, init)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$13

- (void)callWithId:(JavaLangLong *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:t];
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue3008RetryWithPredicate", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$13;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$13, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$13 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$13_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$13, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$14

- (JavaLangLong *)callWithId:(JavaLangLong *)x {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"map ", x)];
  if ([((JavaLangLong *) nil_chk(x)) longLongValue] == 2 && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$isFirst_)) getAndSetWithBoolean:false]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"retryable error");
  }
  return x;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$isFirst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$isFirst_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue3008RetryInfinite", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$14;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$isFirst_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$14, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$14 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$14, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$15

- (void)callWithId:(JavaLangLong *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:t];
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testIssue3008RetryInfinite", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$15;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$15, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$15 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$15_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$15, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$16

- (void)callWithId:(JavaLangLong *)t {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$16;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$16, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$16 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$16_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$16, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryWithPredicateTest_$17

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1
                         withId:(NSException *)t2 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxInternalOperatorsOperatorRetryWithPredicateTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryWithPredicateTest_$17 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryWithPredicateTest_$17;
}

@end

void RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init(RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *new_RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$17, init)
}

RxInternalOperatorsOperatorRetryWithPredicateTest_$17 *create_RxInternalOperatorsOperatorRetryWithPredicateTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryWithPredicateTest_$17, init)
}
