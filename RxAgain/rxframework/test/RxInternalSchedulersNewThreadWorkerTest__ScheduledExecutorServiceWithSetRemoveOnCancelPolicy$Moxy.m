//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/rx/internal/schedulers/NewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalSchedulersNewThreadWorkerTest.h"
#include "RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"

@implementation RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangReflectInvocationHandler>)getHandler {
  return $__handler_;
}

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler {
  JreStrongAssign(&$__handler_, handler);
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAllWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAll" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tasks, JavaLangLong_valueOfWithLong_(timeout), unit } count:3 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                                 withLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super invokeAllWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (id)clone {
  @try {
    if ($__handler_ == nil) {
      return [super clone];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"clone" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangCloneNotSupportedException class]]) {
      @throw (JavaLangCloneNotSupportedException *) cast_chk(__ttlive, [JavaLangCloneNotSupportedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$clone {
  return [super clone];
}

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)value {
  @try {
    if ($__handler_ == nil) {
      [super setRemoveOnCancelPolicyWithBoolean:value];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setRemoveOnCancelPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(value) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setRemoveOnCancelPolicyWithBoolean:(jboolean)value {
  [super setRemoveOnCancelPolicyWithBoolean:value];
}

- (jboolean)isShutdown {
  @try {
    if ($__handler_ == nil) {
      return [super isShutdown];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isShutdown" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isShutdown {
  return [super isShutdown];
}

- (jboolean)isTerminated {
  @try {
    if ($__handler_ == nil) {
      return [super isTerminated];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isTerminated" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isTerminated {
  return [super isTerminated];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaUtilConcurrentCallable:task];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  return [super submitWithJavaUtilConcurrentCallable:task];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAnyWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAny" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tasks, JavaLangLong_valueOfWithLong_(timeout), unit } count:3 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentExecutionException class]]) {
      @throw (JavaUtilConcurrentExecutionException *) cast_chk(__ttlive, [JavaUtilConcurrentExecutionException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentTimeoutException class]]) {
      @throw (JavaUtilConcurrentTimeoutException *) cast_chk(__ttlive, [JavaUtilConcurrentTimeoutException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super invokeAnyWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (NSUInteger)hash {
  @try {
    if ($__handler_ == nil) {
      return ((jint) [super hash]);
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"hashCode" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$hashCode {
  return ((jint) [super hash]);
}

- (jboolean)isEqual:(id)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super isEqual:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"equals" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$equalsWithId:(id)arg0 {
  return [super isEqual:arg0];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithJavaUtilConcurrentCallable:callable withLong:delay withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ callable, JavaLangLong_valueOfWithLong_(delay), unit } count:3 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                             withLong:(jlong)delay
                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super scheduleWithJavaUtilConcurrentCallable:callable withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"awaitTermination" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(timeout), unit } count:2 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$awaitTerminationWithLong:(jlong)timeout
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithJavaLangRunnable:command withLong:delay withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ command, JavaLangLong_valueOfWithLong_(delay), unit } count:3 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                   withLong:(jlong)delay
                                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super scheduleWithJavaLangRunnable:command withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAnyWithJavaUtilCollection:tasks];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAny" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tasks } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentExecutionException class]]) {
      @throw (JavaUtilConcurrentExecutionException *) cast_chk(__ttlive, [JavaUtilConcurrentExecutionException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [super invokeAnyWithJavaUtilCollection:tasks];
}

- (void)shutdown {
  @try {
    if ($__handler_ == nil) {
      [super shutdown];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"shutdown" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$shutdown {
  [super shutdown];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaLangRunnable:task];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  return [super submitWithJavaLangRunnable:task];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithFixedDelayWithJavaLangRunnable:command withLong:initialDelay withLong:delay withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"scheduleWithFixedDelay" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:4 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ command, JavaLangLong_valueOfWithLong_(initialDelay), JavaLangLong_valueOfWithLong_(delay), unit } count:4 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                 withLong:(jlong)initialDelay
                                                                                 withLong:(jlong)delay
                                                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super scheduleWithFixedDelayWithJavaLangRunnable:command withLong:initialDelay withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilList>)shutdownNow {
  @try {
    if ($__handler_ == nil) {
      return [super shutdownNow];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"shutdownNow" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$shutdownNow {
  return [super shutdownNow];
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  @try {
    if ($__handler_ == nil) {
      [super executeWithJavaLangRunnable:command];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"execute" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ command } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [super executeWithJavaLangRunnable:command];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleAtFixedRateWithJavaLangRunnable:command withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"scheduleAtFixedRate" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:4 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ command, JavaLangLong_valueOfWithLong_(initialDelay), JavaLangLong_valueOfWithLong_(period), unit } count:4 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                              withLong:(jlong)initialDelay
                                                                              withLong:(jlong)period
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super scheduleAtFixedRateWithJavaLangRunnable:command withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
}

- (NSString *)description {
  @try {
    if ($__handler_ == nil) {
      return [super description];
    }
    else {
      return (NSString *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"toString" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (NSString *)super$toString {
  return [super description];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaLangRunnable:task withId:result];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), NSObject_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task, result } count:2 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                          withId:(id)result {
  return [super submitWithJavaLangRunnable:task withId:result];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAllWithJavaUtilCollection:tasks];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAll" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tasks } count:1 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [super invokeAllWithJavaUtilCollection:tasks];
}

- (void)dealloc {
  RELEASE_($__handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectInvocationHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 3, 16, 17, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 3, 16, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 26, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 28, 4, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 23, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 26, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 32, 33, 34, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 32, 33, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 11, 35, -1, 36, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 14, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 37, 38, -1, 39, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 40, 38, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 41, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 44, 38, -1, 39, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 45, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 11, 47, -1, 48, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 14, 47, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 32, 4, 49, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 32, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getHandler);
  methods[2].selector = @selector(setHandlerWithJavaLangReflectInvocationHandler:);
  methods[3].selector = @selector(invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(super$invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(clone);
  methods[6].selector = @selector(super$clone);
  methods[7].selector = @selector(setRemoveOnCancelPolicyWithBoolean:);
  methods[8].selector = @selector(super$setRemoveOnCancelPolicyWithBoolean:);
  methods[9].selector = @selector(isShutdown);
  methods[10].selector = @selector(super$isShutdown);
  methods[11].selector = @selector(isTerminated);
  methods[12].selector = @selector(super$isTerminated);
  methods[13].selector = @selector(submitWithJavaUtilConcurrentCallable:);
  methods[14].selector = @selector(super$submitWithJavaUtilConcurrentCallable:);
  methods[15].selector = @selector(invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[16].selector = @selector(super$invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[17].selector = @selector(hash);
  methods[18].selector = @selector(super$hashCode);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(super$equalsWithId:);
  methods[21].selector = @selector(scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[22].selector = @selector(super$scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[23].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[24].selector = @selector(super$awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[25].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[26].selector = @selector(super$scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[27].selector = @selector(invokeAnyWithJavaUtilCollection:);
  methods[28].selector = @selector(super$invokeAnyWithJavaUtilCollection:);
  methods[29].selector = @selector(shutdown);
  methods[30].selector = @selector(super$shutdown);
  methods[31].selector = @selector(submitWithJavaLangRunnable:);
  methods[32].selector = @selector(super$submitWithJavaLangRunnable:);
  methods[33].selector = @selector(scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[34].selector = @selector(super$scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[35].selector = @selector(shutdownNow);
  methods[36].selector = @selector(super$shutdownNow);
  methods[37].selector = @selector(executeWithJavaLangRunnable:);
  methods[38].selector = @selector(super$executeWithJavaLangRunnable:);
  methods[39].selector = @selector(scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[40].selector = @selector(super$scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[41].selector = @selector(description);
  methods[42].selector = @selector(super$toString);
  methods[43].selector = @selector(submitWithJavaLangRunnable:withId:);
  methods[44].selector = @selector(super$submitWithJavaLangRunnable:withId:);
  methods[45].selector = @selector(invokeAllWithJavaUtilCollection:);
  methods[46].selector = @selector(super$invokeAllWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "$__handler_", "LJavaLangReflectInvocationHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setHandler", "LJavaLangReflectInvocationHandler;", "invokeAll", "LJavaUtilCollection;JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;", "super$invokeAll", "LJavaLangCloneNotSupportedException;", "setRemoveOnCancelPolicy", "Z", "super$setRemoveOnCancelPolicy", "submit", "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", "super$submit", "invokeAny", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", "super$invokeAny", "hashCode", "equals", "LNSObject;", "super$equals", "schedule", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "super$schedule", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "super$awaitTermination", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "LJavaUtilCollection;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "(Ljava/util/Collection;)Ljava/lang/Object;", "LJavaLangRunnable;", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", "scheduleWithFixedDelay", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "super$scheduleWithFixedDelay", "()Ljava/util/List;", "execute", "super$execute", "scheduleAtFixedRate", "super$scheduleAtFixedRate", "toString", "LJavaLangRunnable;LNSObject;", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", "(Ljava/util/Collection;)Ljava/util/List;" };
  static const J2ObjcClassInfo _RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy = { "NewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1, 47, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy;
}

@end

void RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *self) {
  RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init(self);
}

RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *new_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy, init)
}

RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *create_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy)
