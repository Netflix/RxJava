//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/rx/internal/schedulers/NewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy")
#ifdef RESTRICT_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy 0
#else
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy 1
#endif
#undef RESTRICT_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy

#if !defined (RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy || defined(INCLUDE_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy))
#define RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_

#define RESTRICT_RxInternalSchedulersNewThreadWorkerTest 1
#define INCLUDE_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy 1
#include "RxInternalSchedulersNewThreadWorkerTest.h"

@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangReflectInvocationHandler;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentScheduledFuture;
@protocol JavaUtilList;

@interface RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy : RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy {
 @public
  id<JavaLangReflectInvocationHandler> $__handler_;
}

#pragma mark Public

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isEqual:(id)arg0;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (id<JavaLangReflectInvocationHandler>)getHandler;

- (NSUInteger)hash;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler;

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)value;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result;

- (jboolean)super$awaitTerminationWithLong:(jlong)timeout
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)super$equalsWithId:(id)arg0;

- (void)super$executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (jint)super$hashCode;

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                                 withLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)super$isShutdown;

- (jboolean)super$isTerminated;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                             withLong:(jlong)delay
                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                   withLong:(jlong)delay
                                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                              withLong:(jlong)initialDelay
                                                                              withLong:(jlong)period
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                 withLong:(jlong)initialDelay
                                                                                 withLong:(jlong)delay
                                                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)super$setRemoveOnCancelPolicyWithBoolean:(jboolean)value;

- (void)super$shutdown;

- (id<JavaUtilList>)super$shutdownNow;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                          withId:(id)result;

- (NSString *)super$toString;

- (NSString *)description;

#pragma mark Protected

- (id)clone;

- (id)super$clone;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy)

J2OBJC_FIELD_SETTER(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy, $__handler_, id<JavaLangReflectInvocationHandler>)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *self);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *new_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy *create_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy)

@compatibility_alias RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_Moxy;

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest__ScheduledExecutorServiceWithSetRemoveOnCancelPolicy$Moxy")
