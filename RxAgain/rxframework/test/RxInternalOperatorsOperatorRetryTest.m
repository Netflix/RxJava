//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorRetryTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorRetryTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObservablesGroupedObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/Stubber.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$24();

@interface RxInternalOperatorsOperatorRetryTest_FuncWithErrors () {
 @public
  jint numFailures_;
  JavaUtilConcurrentAtomicAtomicInteger *count_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors, count_, JavaUtilConcurrentAtomicAtomicInteger *)

@interface RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOperatorRetryTest_FuncWithErrors *this$0_;
  JavaUtilConcurrentAtomicAtomicLong *req_;
  JavaUtilConcurrentAtomicAtomicInteger *path_;
  volatile_jboolean done_;
  RxSubscriber *val$o_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors:(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *)outer$
                                                           withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, this$0_, RxInternalOperatorsOperatorRetryTest_FuncWithErrors *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, req_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, path_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, val$o_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *self, RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *new_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_SlowObservable () {
 @public
  jint emitDelay_;
}

@end

@interface RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 : JavaLangThread {
 @public
  RxInternalOperatorsOperatorRetryTest_SlowObservable *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$terminate_;
  RxSubscriber *val$subscriber_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:(RxInternalOperatorsOperatorRetryTest_SlowObservable *)outer$
                                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                                           withRxSubscriber:(RxSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1, this$0_, RxInternalOperatorsOperatorRetryTest_SlowObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1, val$terminate_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *self, RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1);

@interface RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorRetryTest_SlowObservable *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$terminate_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:(RxInternalOperatorsOperatorRetryTest_SlowObservable *)outer$
                                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2, this$0_, RxInternalOperatorsOperatorRetryTest_SlowObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2, val$terminate_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *self, RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *count_;
  jlong last_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$1, count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$1_init(RxInternalOperatorsOperatorRetryTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$1 *new_RxInternalOperatorsOperatorRetryTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$1 *create_RxInternalOperatorsOperatorRetryTest_$1_init();

@interface RxInternalOperatorsOperatorRetryTest_$2 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)attempts;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$2_init(RxInternalOperatorsOperatorRetryTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2 *new_RxInternalOperatorsOperatorRetryTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2 *create_RxInternalOperatorsOperatorRetryTest_$2_init();

@interface RxInternalOperatorsOperatorRetryTest_$2_$1 : NSObject < RxFunctionsFunc1 >

- (RxInternalOperatorsOperatorRetryTest_Tuple *)callWithId:(NSException *)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$2_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$2_$1_init(RxInternalOperatorsOperatorRetryTest_$2_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$1 *new_RxInternalOperatorsOperatorRetryTest_$2_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$1 *create_RxInternalOperatorsOperatorRetryTest_$2_$1_init();

@interface RxInternalOperatorsOperatorRetryTest_$2_$2 : NSObject < RxFunctionsFunc2 >

- (RxInternalOperatorsOperatorRetryTest_Tuple *)callWithId:(RxInternalOperatorsOperatorRetryTest_Tuple *)t
                                                    withId:(RxInternalOperatorsOperatorRetryTest_Tuple *)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$2_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$2_$2_init(RxInternalOperatorsOperatorRetryTest_$2_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$2 *new_RxInternalOperatorsOperatorRetryTest_$2_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$2 *create_RxInternalOperatorsOperatorRetryTest_$2_$2_init();

@interface RxInternalOperatorsOperatorRetryTest_$2_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxInternalOperatorsOperatorRetryTest_Tuple *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$2_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$2_$3_init(RxInternalOperatorsOperatorRetryTest_$2_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$3 *new_RxInternalOperatorsOperatorRetryTest_$2_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$2_$3 *create_RxInternalOperatorsOperatorRetryTest_$2_$3_init();

@interface RxInternalOperatorsOperatorRetryTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$3_init(RxInternalOperatorsOperatorRetryTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$3 *new_RxInternalOperatorsOperatorRetryTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$3 *create_RxInternalOperatorsOperatorRetryTest_$3_init();

@interface RxInternalOperatorsOperatorRetryTest_$3_$1 : NSObject < RxFunctionsFunc1 >

- (id)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$3_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$3_$1_init(RxInternalOperatorsOperatorRetryTest_$3_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$3_$1 *new_RxInternalOperatorsOperatorRetryTest_$3_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$3_$1 *create_RxInternalOperatorsOperatorRetryTest_$3_$1_init();

@interface RxInternalOperatorsOperatorRetryTest_$4 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$4_init(RxInternalOperatorsOperatorRetryTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$4 *new_RxInternalOperatorsOperatorRetryTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$4 *create_RxInternalOperatorsOperatorRetryTest_$4_init();

@interface RxInternalOperatorsOperatorRetryTest_$4_$1 : NSObject < RxFunctionsFunc1 >

- (id)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$4_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$4_$1_init(RxInternalOperatorsOperatorRetryTest_$4_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$4_$1 *new_RxInternalOperatorsOperatorRetryTest_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$4_$1 *create_RxInternalOperatorsOperatorRetryTest_$4_$1_init();

@interface RxInternalOperatorsOperatorRetryTest_$5 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$5_init(RxInternalOperatorsOperatorRetryTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$5 *new_RxInternalOperatorsOperatorRetryTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$5 *create_RxInternalOperatorsOperatorRetryTest_$5_init();

@interface RxInternalOperatorsOperatorRetryTest_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$6_init(RxInternalOperatorsOperatorRetryTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$6 *new_RxInternalOperatorsOperatorRetryTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$6 *create_RxInternalOperatorsOperatorRetryTest_$6_init();

@interface RxInternalOperatorsOperatorRetryTest_$7 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$inc_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$7, val$inc_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$7 *new_RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$7 *create_RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$8 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)attempt;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$8_init(RxInternalOperatorsOperatorRetryTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$8 *new_RxInternalOperatorsOperatorRetryTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$8 *create_RxInternalOperatorsOperatorRetryTest_$8_init();

@interface RxInternalOperatorsOperatorRetryTest_$8_$1 : NSObject < RxFunctionsFunc2 >

- (id)callWithId:(NSException *)o
          withId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$8_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$8_$1_init(RxInternalOperatorsOperatorRetryTest_$8_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$8_$1 *new_RxInternalOperatorsOperatorRetryTest_$8_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$8_$1 *create_RxInternalOperatorsOperatorRetryTest_$8_$1_init();

@interface RxInternalOperatorsOperatorRetryTest_$9 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$9, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$9 *new_RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$9 *create_RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$10 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subsCount_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$10, val$subsCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$10 *new_RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$10 *create_RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$10_$1 : NSObject < RxSubscription > {
 @public
  RxInternalOperatorsOperatorRetryTest_$10 *this$0_;
  jboolean unsubscribed_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_$10:(RxInternalOperatorsOperatorRetryTest_$10 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$10_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$10_$1, this$0_, RxInternalOperatorsOperatorRetryTest_$10 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10_$1 *self, RxInternalOperatorsOperatorRetryTest_$10 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$10_$1 *new_RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$10_$1 *create_RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10 *outer$);

@interface RxInternalOperatorsOperatorRetryTest_$11 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subsCount_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$11, val$subsCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$11 *new_RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$11 *create_RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$12 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subsCount_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$12, val$subsCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$12 *new_RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$12 *create_RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$13 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subsCount_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$13, val$subsCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$13 *new_RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$13 *create_RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$14 : NSObject < JavaLangRunnable > {
 @public
  jint val$NUM_RETRIES_;
  id<JavaUtilMap> val$data_;
  jint val$j_;
  JavaUtilConcurrentAtomicAtomicInteger *val$timeouts_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)run;

- (instancetype)initWithInt:(jint)capture$0
            withJavaUtilMap:(id<JavaUtilMap>)capture$1
                    withInt:(jint)capture$2
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$14, val$data_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$14, val$timeouts_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$14, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorRetryTest_$14 *self, jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$14 *new_RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$14 *create_RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

@interface RxInternalOperatorsOperatorRetryTest_$15 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (NSString *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$15, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$15 *new_RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$15 *create_RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$16 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$16)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$16_init(RxInternalOperatorsOperatorRetryTest_$16 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$16 *new_RxInternalOperatorsOperatorRetryTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$16 *create_RxInternalOperatorsOperatorRetryTest_$16_init();

@interface RxInternalOperatorsOperatorRetryTest_$17 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$17)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$17_init(RxInternalOperatorsOperatorRetryTest_$17 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$17 *new_RxInternalOperatorsOperatorRetryTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$17 *create_RxInternalOperatorsOperatorRetryTest_$17_init();

@interface RxInternalOperatorsOperatorRetryTest_$18 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_$18, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$18 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$18 *new_RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$18 *create_RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRetryTest_$19 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$19)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$19_init(RxInternalOperatorsOperatorRetryTest_$19 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$19 *new_RxInternalOperatorsOperatorRetryTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$19 *create_RxInternalOperatorsOperatorRetryTest_$19_init();

@interface RxInternalOperatorsOperatorRetryTest_$20 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$20)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$20_init(RxInternalOperatorsOperatorRetryTest_$20 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$20 *new_RxInternalOperatorsOperatorRetryTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$20 *create_RxInternalOperatorsOperatorRetryTest_$20_init();

@interface RxInternalOperatorsOperatorRetryTest_$21 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$21_init(RxInternalOperatorsOperatorRetryTest_$21 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$21 *new_RxInternalOperatorsOperatorRetryTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$21 *create_RxInternalOperatorsOperatorRetryTest_$21_init();

@interface RxInternalOperatorsOperatorRetryTest_$22 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_$22)

__attribute__((unused)) static void RxInternalOperatorsOperatorRetryTest_$22_init(RxInternalOperatorsOperatorRetryTest_$22 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$22 *new_RxInternalOperatorsOperatorRetryTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRetryTest_$22 *create_RxInternalOperatorsOperatorRetryTest_$22_init();

@implementation RxInternalOperatorsOperatorRetryTest

- (void)iterativeBackoff {
  id<RxObserver> consumer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *producer = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_$1_init());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(consumer);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(producer)) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$2_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ consumer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:consumer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:consumer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"hello"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:consumer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testRetryIndefinitely {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  jint NUM_RETRIES = 20;
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_RETRIES));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) unsafeSubscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(observer)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(NUM_RETRIES + 1)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testSchedulingNotificationHandler {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  jint NUM_RETRIES = 2;
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_RETRIES));
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$3_init()])) subscribeWithRxSubscriber:subscriber];
  [subscriber awaitTerminalEvent];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1 + NUM_RETRIES)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testOnNextFromNotificationHandler {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  jint NUM_RETRIES = 2;
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_RETRIES));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$4_init()])) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(NUM_RETRIES + 1)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testOnCompletedFromNotificationHandler {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(1));
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$5_init()])) subscribeWithRxSubscriber:subscriber];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testOnErrorFromNotificationHandler {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(2));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$6_init()])) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangIllegalStateException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testSingleSubscriptionOnFirst {
  JavaUtilConcurrentAtomicAtomicInteger *inc = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(inc);
  jint first = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe))) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$8_init()])) toBlocking])) first])) intValue];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Observer did not receive the expected output", 1, first);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Subscribe was not called once", 1, [inc get]);
}

- (void)testOriginFails {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(1));
  [((RxObservable *) nil_chk(origin)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
}

- (void)testRetryFail {
  jint NUM_RETRIES = 1;
  jint NUM_FAILURES = 2;
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_FAILURES));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWithLong:NUM_RETRIES])) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1 + NUM_RETRIES)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testRetrySuccess {
  jint NUM_FAILURES = 1;
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_FAILURES));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retryWithLong:3])) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1 + NUM_FAILURES)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testInfiniteRetry {
  jint NUM_FAILURES = 20;
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_FAILURES));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1 + NUM_FAILURES)])) onNextWithId:@"beginningEveryTime"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testRetrySubscribesAgainAfterError {
  id<RxFunctionsAction1> record = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ record } count:1 type:NSObject_class_()]);
  id<RxFunctionsAction1> throwException = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  [((id<RxFunctionsAction1>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doThrowWithNSException_(create_JavaLangRuntimeException_init()))) whenWithId:throwException])) callWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(subject)) doOnNextWithRxFunctionsAction1:record])) doOnNextWithRxFunctionsAction1:throwException])) retry])) subscribe];
  [((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyNoMoreInteractions];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxFunctionsAction1>) nil_chk([inOrder verifyWithId:record])) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxFunctionsAction1>) nil_chk([inOrder verifyWithId:record])) callWithId:JavaLangInteger_valueOfWithInt_(2)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxFunctionsAction1>) nil_chk([inOrder verifyWithId:record])) callWithId:JavaLangInteger_valueOfWithInt_(3)];
  [inOrder verifyNoMoreInteractions];
}

- (void)testUnsubscribeFromRetry {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  id<RxSubscription> sub = [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(subject)) retry])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [count get]);
}

- (void)testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed {
  JavaUtilConcurrentAtomicAtomicInteger *subsCount = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(subsCount);
  RxObservable *stream = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  RxObservable *streamWithRetry = [((RxObservable *) nil_chk(stream)) retry];
  id<RxSubscription> sub = [((RxObservable *) nil_chk(streamWithRetry)) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subsCount get]);
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [subsCount get]);
  [streamWithRetry subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subsCount get]);
}

- (void)testSourceObservableCallsUnsubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *subsCount = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(subsCount);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe))) retryWithLong:3])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [subsCount get]);
}

- (void)testSourceObservableRetry1 {
  JavaUtilConcurrentAtomicAtomicInteger *subsCount = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(subsCount);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe))) retryWithLong:1])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [subsCount get]);
}

- (void)testSourceObservableRetry0 {
  JavaUtilConcurrentAtomicAtomicInteger *subsCount = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  id<RxObservable_OnSubscribe> onSubscribe = create_RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(subsCount);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe))) retryWithLong:0])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subsCount get]);
}

- (void)testUnsubscribeAfterError {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorRetryTest_SlowObservable *so = create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(100, 0);
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(so))) retryWithLong:5];
  RxInternalOperatorsOperatorRetryTest_AsyncObserver *async = create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:async];
  [async await];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Start 6 threads, retry 5 then fail on 6", 6, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->efforts_)) get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Only 1 active subscription", 1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->maxActive_)) get]);
}

- (void)testTimeoutWithRetry {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorRetryTest_SlowObservable *so = create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(100, 10);
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(so))) timeoutWithLong:80 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) retryWithLong:5];
  RxInternalOperatorsOperatorRetryTest_AsyncObserver *async = create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:async];
  [async await];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Start 6 threads, retry 5 then fail on 6", 6, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(so->efforts_)) get]);
}

- (void)testRetryWithBackpressure {
  jint NUM_LOOPS = 1;
  for (jint j = 0; j < NUM_LOOPS; j++) {
    jint NUM_RETRIES = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2;
    for (jint i = 0; i < 400; i++) {
      id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
      RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(NUM_RETRIES));
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) unsafeSubscribeWithRxSubscriber:ts];
      [ts awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
      [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
      [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(NUM_RETRIES + 1)])) onNextWithId:@"beginningEveryTime"];
      [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"onSuccessOnly"];
      [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
      [inOrder verifyNoMoreInteractions];
    }
  }
}

- (void)testRetryWithBackpressureParallel {
  jint NUM_LOOPS = 1;
  jint NUM_RETRIES = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2;
  jint ncpu = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(JavaLangMath_maxWithInt_withInt_(ncpu / 2, 2));
  @try {
    for (jint r = 0; r < NUM_LOOPS; r++) {
      if (r % 10 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"testRetryWithBackpressureParallelLoop -> ", r)];
      }
      JavaUtilConcurrentAtomicAtomicInteger *timeouts = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      id<JavaUtilMap> data = create_JavaUtilConcurrentConcurrentHashMap_init();
      jint m = 5000;
      JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(m);
      for (jint i = 0; i < m; i++) {
        jint j = i;
        [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) executeWithJavaLangRunnable:create_RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(NUM_RETRIES, data, j, timeouts, cdl)];
      }
      [cdl await];
      OrgJunitAssert_assertEqualsWithLong_withLong_(0, [timeouts get]);
      if ([data size] > 0) {
        OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Data content mismatch: ", RxInternalOperatorsOperatorRetryTest_allSequenceFrequencyWithJavaUtilMap_(data)));
      }
    }
  }
  @finally {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) shutdown];
  }
}

+ (JavaLangStringBuilder *)allSequenceFrequencyWithJavaUtilMap:(id<JavaUtilMap>)its {
  return RxInternalOperatorsOperatorRetryTest_allSequenceFrequencyWithJavaUtilMap_(its);
}

+ (JavaLangStringBuilder *)sequenceFrequencyWithJavaLangIterable:(id<JavaLangIterable>)it {
  return RxInternalOperatorsOperatorRetryTest_sequenceFrequencyWithJavaLangIterable_(it);
}

- (void)testIssue1900 {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  jint NUM_MSG = 1034;
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *origin = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, NUM_MSG))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) groupByWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$16_init()])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$17_init()])) unsafeSubscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(observer)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(NUM_MSG)])) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testIssue1900SourceNotSupportingBackpressure {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  jint NUM_MSG = 1034;
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(count));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) onBackpressureBuffer])) groupByWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$19_init()])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$20_init()])) unsafeSubscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(observer)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(NUM_MSG)])) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)retryWhenDefaultScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())])) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$21_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)retryWhenTrampolineScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())])) retryWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$22_init() withRxScheduler:RxSchedulersSchedulers_trampoline()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 22, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 23, 24, -1, 25, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterativeBackoff);
  methods[1].selector = @selector(testRetryIndefinitely);
  methods[2].selector = @selector(testSchedulingNotificationHandler);
  methods[3].selector = @selector(testOnNextFromNotificationHandler);
  methods[4].selector = @selector(testOnCompletedFromNotificationHandler);
  methods[5].selector = @selector(testOnErrorFromNotificationHandler);
  methods[6].selector = @selector(testSingleSubscriptionOnFirst);
  methods[7].selector = @selector(testOriginFails);
  methods[8].selector = @selector(testRetryFail);
  methods[9].selector = @selector(testRetrySuccess);
  methods[10].selector = @selector(testInfiniteRetry);
  methods[11].selector = @selector(testRetrySubscribesAgainAfterError);
  methods[12].selector = @selector(testUnsubscribeFromRetry);
  methods[13].selector = @selector(testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed);
  methods[14].selector = @selector(testSourceObservableCallsUnsubscribe);
  methods[15].selector = @selector(testSourceObservableRetry1);
  methods[16].selector = @selector(testSourceObservableRetry0);
  methods[17].selector = @selector(testUnsubscribeAfterError);
  methods[18].selector = @selector(testTimeoutWithRetry);
  methods[19].selector = @selector(testRetryWithBackpressure);
  methods[20].selector = @selector(testRetryWithBackpressureParallel);
  methods[21].selector = @selector(allSequenceFrequencyWithJavaUtilMap:);
  methods[22].selector = @selector(sequenceFrequencyWithJavaLangIterable:);
  methods[23].selector = @selector(testIssue1900);
  methods[24].selector = @selector(testIssue1900SourceNotSupportingBackpressure);
  methods[25].selector = @selector(retryWhenDefaultScheduler);
  methods[26].selector = @selector(retryWhenTrampolineScheduler);
  methods[27].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$0, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$1, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$2, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$3, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$4, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$5, "LJavaLangException;", (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$6, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$7, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$8, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$9, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$10, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$11, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$12, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$13, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$14, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$15, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$16, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$17, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$18, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$19, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$20, "allSequenceFrequency", "LJavaUtilMap;", "<T:Ljava/lang/Object;>(Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<TT;>;>;)Ljava/lang/StringBuilder;", "sequenceFrequency", "LJavaLangIterable;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Ljava/lang/StringBuilder;", (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$21, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$22, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$23, (void *)&RxInternalOperatorsOperatorRetryTest__Annotations$24, "LRxInternalOperatorsOperatorRetryTest_Tuple;LRxInternalOperatorsOperatorRetryTest_FuncWithErrors;LRxInternalOperatorsOperatorRetryTest_SlowObservable;LRxInternalOperatorsOperatorRetryTest_AsyncObserver;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest = { "OperatorRetryTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 28, 0, -1, 33, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest;
}

@end

JavaLangStringBuilder *RxInternalOperatorsOperatorRetryTest_allSequenceFrequencyWithJavaUtilMap_(id<JavaUtilMap> its) {
  RxInternalOperatorsOperatorRetryTest_initialize();
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(its)) entrySet])) {
    if ([b length] > 0) {
      [b appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk([b appendWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]])) appendWithNSString:@"={"];
    [b appendWithJavaLangCharSequence:RxInternalOperatorsOperatorRetryTest_sequenceFrequencyWithJavaLangIterable_([e getValue])];
    [b appendWithNSString:@"}"];
  }
  return b;
}

JavaLangStringBuilder *RxInternalOperatorsOperatorRetryTest_sequenceFrequencyWithJavaLangIterable_(id<JavaLangIterable> it) {
  RxInternalOperatorsOperatorRetryTest_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  id prev = nil;
  jint cnt = 0;
  for (id __strong curr in nil_chk(it)) {
    if ([sb length] > 0) {
      if (![nil_chk(curr) isEqual:prev]) {
        if (cnt > 1) {
          [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" x "])) appendWithInt:cnt];
          cnt = 1;
        }
        [sb appendWithNSString:@", "];
        [sb appendWithId:curr];
      }
      else {
        cnt++;
      }
    }
    else {
      [sb appendWithId:curr];
      cnt++;
    }
    prev = curr;
  }
  if (cnt > 1) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" x "])) appendWithInt:cnt];
  }
  return sb;
}

void RxInternalOperatorsOperatorRetryTest_init(RxInternalOperatorsOperatorRetryTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest *new_RxInternalOperatorsOperatorRetryTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest, init)
}

RxInternalOperatorsOperatorRetryTest *create_RxInternalOperatorsOperatorRetryTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRetryTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryTest)

@implementation RxInternalOperatorsOperatorRetryTest_Tuple

- (instancetype)initWithJavaLangLong:(JavaLangLong *)c
                     withNSException:(NSException *)n {
  RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(self, c, n);
  return self;
}

- (void)dealloc {
  RELEASE_(count_);
  RELEASE_(n_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangLong:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "LJavaLangLong;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "n_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;LNSException;", "LRxInternalOperatorsOperatorRetryTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_Tuple = { "Tuple", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 1, 2, 1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_Tuple;
}

@end

void RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(RxInternalOperatorsOperatorRetryTest_Tuple *self, JavaLangLong *c, NSException *n) {
  NSObject_init(self);
  JreStrongAssign(&self->count_, c);
  JreStrongAssign(&self->n_, n);
}

RxInternalOperatorsOperatorRetryTest_Tuple *new_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(JavaLangLong *c, NSException *n) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_Tuple, initWithJavaLangLong_withNSException_, c, n)
}

RxInternalOperatorsOperatorRetryTest_Tuple *create_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(JavaLangLong *c, NSException *n) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_Tuple, initWithJavaLangLong_withNSException_, c, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryTest_Tuple)

@implementation RxInternalOperatorsOperatorRetryTest_FuncWithErrors

- (instancetype)initWithInt:(jint)count {
  RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(self, count);
  return self;
}

- (void)callWithId:(RxSubscriber *)o {
  [((RxSubscriber *) nil_chk(o)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(self, o)];
}

- (void)dealloc {
  RELEASE_(count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numFailures_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorRetryTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_FuncWithErrors = { "FuncWithErrors", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 2, 2, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_FuncWithErrors;
}

@end

void RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *self, jint count) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->count_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  self->numFailures_ = count;
}

RxInternalOperatorsOperatorRetryTest_FuncWithErrors *new_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(jint count) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_FuncWithErrors, initWithInt_, count)
}

RxInternalOperatorsOperatorRetryTest_FuncWithErrors *create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(jint count) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_FuncWithErrors, initWithInt_, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryTest_FuncWithErrors)

@implementation RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1

- (void)requestWithLong:(jlong)n {
  if (n == JavaLangLong_MAX_VALUE && [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(path_)) compareAndSetWithInt:0 withInt:1]) {
    [((RxSubscriber *) nil_chk(val$o_)) onNextWithId:@"beginningEveryTime"];
    jint i = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->count_)) getAndIncrement];
    if (i < this$0_->numFailures_) {
      [val$o_ onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"forced failure: ", (i + 1)))];
    }
    else {
      [val$o_ onNextWithId:@"onSuccessOnly"];
      [val$o_ onCompleted];
    }
    return;
  }
  if (n > 0 && [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(req_)) getAndAddWithLong:n] == 0 && ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(path_)) get] == 2 || [path_ compareAndSetWithInt:0 withInt:2]) && !JreLoadVolatileBoolean(&done_)) {
    jint i = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->count_)) getAndIncrement];
    if (i < this$0_->numFailures_) {
      [((RxSubscriber *) nil_chk(val$o_)) onNextWithId:@"beginningEveryTime"];
      [val$o_ onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"forced failure: ", (i + 1)))];
      JreAssignVolatileBoolean(&done_, true);
    }
    else {
      do {
        if (i == this$0_->numFailures_) {
          [((RxSubscriber *) nil_chk(val$o_)) onNextWithId:@"beginningEveryTime"];
        }
        else if (i > this$0_->numFailures_) {
          [((RxSubscriber *) nil_chk(val$o_)) onNextWithId:@"onSuccessOnly"];
          [val$o_ onCompleted];
          JreAssignVolatileBoolean(&done_, true);
          break;
        }
        i = [this$0_->count_ getAndIncrement];
      }
      while ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(req_)) decrementAndGet] > 0);
    }
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors:(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *)outer$
                                                           withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(req_);
  RELEASE_(path_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorRetryTest_FuncWithErrors;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "req_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "path_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "val$o_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorRetryTest_FuncWithErrors;LRxSubscriber;", "(Lrx/internal/operators/OperatorRetryTest$FuncWithErrors;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorRetryTest_FuncWithErrors;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 5, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *self, RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$o_, capture$0);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->req_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->path_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  JreAssignVolatileBoolean(&self->done_, false);
}

RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *new_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1 *create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1_initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_FuncWithErrors_$1, initWithRxInternalOperatorsOperatorRetryTest_FuncWithErrors_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_SlowObservable

- (instancetype)initWithInt:(jint)emitDelay
                    withInt:(jint)countNext {
  RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(self, emitDelay, countNext);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  JavaUtilConcurrentAtomicAtomicBoolean *terminate = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(efforts_)) getAndIncrement];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(active_)) getAndIncrement];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxActive_)) setWithInt:JavaLangMath_maxWithInt_withInt_([active_ get], [maxActive_ get])];
  JavaLangThread *thread = create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(self, terminate, subscriber);
  [thread start];
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(self, terminate))];
}

- (void)dealloc {
  RELEASE_(efforts_);
  RELEASE_(active_);
  RELEASE_(maxActive_);
  RELEASE_(nextBeforeFailure_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "efforts_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "active_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxActive_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextBeforeFailure_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "emitDelay_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorRetryTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_SlowObservable = { "SlowObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 2, 5, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_SlowObservable;
}

@end

void RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(RxInternalOperatorsOperatorRetryTest_SlowObservable *self, jint emitDelay, jint countNext) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->efforts_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  JreStrongAssignAndConsume(&self->active_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  JreStrongAssignAndConsume(&self->maxActive_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  self->emitDelay_ = emitDelay;
  JreStrongAssignAndConsume(&self->nextBeforeFailure_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(countNext));
}

RxInternalOperatorsOperatorRetryTest_SlowObservable *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(jint emitDelay, jint countNext) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable, initWithInt_withInt_, emitDelay, countNext)
}

RxInternalOperatorsOperatorRetryTest_SlowObservable *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(jint emitDelay, jint countNext) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable, initWithInt_withInt_, emitDelay, countNext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryTest_SlowObservable)

@implementation RxInternalOperatorsOperatorRetryTest_SlowObservable_$1

- (void)run {
  jlong nr = 0;
  @try {
    while (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$terminate_)) get]) {
      JavaLangThread_sleepWithLong_(this$0_->emitDelay_);
      if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->nextBeforeFailure_)) getAndDecrement] > 0) {
        [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:JavaLangLong_valueOfWithLong_(nr++)];
      }
      else {
        [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"expected-failed")];
      }
    }
  }
  @catch (JavaLangInterruptedException *t) {
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:(RxInternalOperatorsOperatorRetryTest_SlowObservable *)outer$
                                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                                           withRxSubscriber:(RxSubscriber *)capture$1 {
  RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$terminate_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:withJavaUtilConcurrentAtomicAtomicBoolean:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorRetryTest_SlowObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$terminate_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorRetryTest_SlowObservable;LJavaUtilConcurrentAtomicAtomicBoolean;LRxSubscriber;", "(Lrx/internal/operators/OperatorRetryTest$SlowObservable;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorRetryTest_SlowObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *self, RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$terminate_, capture$0);
  JreStrongAssign(&self->val$subscriber_, capture$1);
  JavaLangThread_init(self);
}

RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1, initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_, outer$, capture$0, capture$1)
}

RxInternalOperatorsOperatorRetryTest_SlowObservable_$1 *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$1_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable_$1, initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxSubscriber_, outer$, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorRetryTest_SlowObservable_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$terminate_)) setWithBoolean:true];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->active_)) decrementAndGet];
}

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:(RxInternalOperatorsOperatorRetryTest_SlowObservable *)outer$
                                  withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$terminate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorRetryTest_SlowObservable:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorRetryTest_SlowObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$terminate_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorRetryTest_SlowObservable;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorRetryTest_SlowObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2;
}

@end

void RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *self, RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$terminate_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2, initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

RxInternalOperatorsOperatorRetryTest_SlowObservable_$2 *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_$2_initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorRetryTest_SlowObservable *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_SlowObservable_$2, initWithRxInternalOperatorsOperatorRetryTest_SlowObservable_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_AsyncObserver

- (instancetype)initWithRxObserver:(id<RxObserver>)target {
  RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(self, target);
  return self;
}

- (void)await {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_(@"Test interrupted");
  }
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(target_)) onCompleted];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)t {
  [((id<RxObserver>) nil_chk(target_)) onErrorWithNSException:t];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
}

- (void)onNextWithId:(id)v {
  [((id<RxObserver>) nil_chk(target_)) onNextWithId:v];
}

- (void)dealloc {
  RELEASE_(latch_);
  RELEASE_(target_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:);
  methods[1].selector = @selector(await);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "target_", "LRxObserver;", .constantValue.asLong = 0, 0x4, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;", "(Lrx/Observer<TT;>;)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Lrx/Observer<TT;>;", "LRxInternalOperatorsOperatorRetryTest;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_AsyncObserver = { "AsyncObserver", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 5, 2, 8, -1, -1, 9, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_AsyncObserver;
}

@end

void RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(RxInternalOperatorsOperatorRetryTest_AsyncObserver *self, id<RxObserver> target) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreStrongAssign(&self->target_, target);
}

RxInternalOperatorsOperatorRetryTest_AsyncObserver *new_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(id<RxObserver> target) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_AsyncObserver, initWithRxObserver_, target)
}

RxInternalOperatorsOperatorRetryTest_AsyncObserver *create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(id<RxObserver> target) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_AsyncObserver, initWithRxObserver_, target)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRetryTest_AsyncObserver)

@implementation RxInternalOperatorsOperatorRetryTest_$1

- (void)callWithId:(RxSubscriber *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$$", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(count_)) get], @" @ ", NSString_valueOfLong_(last_ - JavaLangSystem_currentTimeMillis()))];
  last_ = JavaLangSystem_currentTimeMillis();
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(count_)) getAndDecrement] == 0) {
    [((RxSubscriber *) nil_chk(t1)) onNextWithId:@"hello"];
    [t1 onCompleted];
  }
  else [((RxSubscriber *) nil_chk(t1)) onErrorWithNSException:create_JavaLangRuntimeException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "last_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorRetryTest;", "iterativeBackoff", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$1_init(RxInternalOperatorsOperatorRetryTest_$1 *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->count_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(4));
  self->last_ = JavaLangSystem_currentTimeMillis();
}

RxInternalOperatorsOperatorRetryTest_$1 *new_RxInternalOperatorsOperatorRetryTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$1, init)
}

RxInternalOperatorsOperatorRetryTest_$1 *create_RxInternalOperatorsOperatorRetryTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$2

- (RxObservable *)callWithId:(RxObservable *)attempts {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(attempts)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$2_$1_init()])) scanWithRxFunctionsFunc2:create_RxInternalOperatorsOperatorRetryTest_$2_$2_init()])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$2_$3_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "iterativeBackoff", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$2;
}

@end

void RxInternalOperatorsOperatorRetryTest_$2_init(RxInternalOperatorsOperatorRetryTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$2 *new_RxInternalOperatorsOperatorRetryTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$2, init)
}

RxInternalOperatorsOperatorRetryTest_$2 *create_RxInternalOperatorsOperatorRetryTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$2, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$2_$1

- (RxInternalOperatorsOperatorRetryTest_Tuple *)callWithId:(NSException *)n {
  return create_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(create_JavaLangLong_initWithLong_(1), n);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$2_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOperatorRetryTest_Tuple;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorRetryTest_$2;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/internal/operators/OperatorRetryTest$Tuple;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$2_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$2_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$2_$1_init(RxInternalOperatorsOperatorRetryTest_$2_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$2_$1 *new_RxInternalOperatorsOperatorRetryTest_$2_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$1, init)
}

RxInternalOperatorsOperatorRetryTest_$2_$1 *create_RxInternalOperatorsOperatorRetryTest_$2_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$2_$2

- (RxInternalOperatorsOperatorRetryTest_Tuple *)callWithId:(RxInternalOperatorsOperatorRetryTest_Tuple *)t
                                                    withId:(RxInternalOperatorsOperatorRetryTest_Tuple *)n {
  return create_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(((RxInternalOperatorsOperatorRetryTest_Tuple *) nil_chk(t))->count_)) longLongValue] + [((RxInternalOperatorsOperatorRetryTest_Tuple *) nil_chk(n))->count_ longLongValue]), n->n_);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$2_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxInternalOperatorsOperatorRetryTest_Tuple;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOperatorRetryTest_Tuple;LRxInternalOperatorsOperatorRetryTest_Tuple;", "LRxInternalOperatorsOperatorRetryTest_$2;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/internal/operators/OperatorRetryTest$Tuple;Lrx/internal/operators/OperatorRetryTest$Tuple;Lrx/internal/operators/OperatorRetryTest$Tuple;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$2_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$2_$2;
}

@end

void RxInternalOperatorsOperatorRetryTest_$2_$2_init(RxInternalOperatorsOperatorRetryTest_$2_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$2_$2 *new_RxInternalOperatorsOperatorRetryTest_$2_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$2, init)
}

RxInternalOperatorsOperatorRetryTest_$2_$2 *create_RxInternalOperatorsOperatorRetryTest_$2_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$2, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$2_$3

- (RxObservable *)callWithId:(RxInternalOperatorsOperatorRetryTest_Tuple *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Retry # ", ((RxInternalOperatorsOperatorRetryTest_Tuple *) nil_chk(t))->count_)];
  return [((JavaLangLong *) nil_chk(t->count_)) longLongValue] > 20 ? RxObservable_errorWithNSException_(t->n_) : RxObservable_timerWithLong_withJavaUtilConcurrentTimeUnit_([t->count_ longLongValue] * 1LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$2_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxInternalOperatorsOperatorRetryTest_Tuple;", "(Lrx/internal/operators/OperatorRetryTest$Tuple;)Lrx/Observable<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorRetryTest_$2;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/internal/operators/OperatorRetryTest$Tuple;Lrx/Observable<Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$2_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$2_$3;
}

@end

void RxInternalOperatorsOperatorRetryTest_$2_$3_init(RxInternalOperatorsOperatorRetryTest_$2_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$2_$3 *new_RxInternalOperatorsOperatorRetryTest_$2_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$3, init)
}

RxInternalOperatorsOperatorRetryTest_$2_$3 *create_RxInternalOperatorsOperatorRetryTest_$2_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$2_$3, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$3

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(t1)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$3_$1_init()])) startWithWithId:nil];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "testSchedulingNotificationHandler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$3;
}

@end

void RxInternalOperatorsOperatorRetryTest_$3_init(RxInternalOperatorsOperatorRetryTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$3 *new_RxInternalOperatorsOperatorRetryTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$3, init)
}

RxInternalOperatorsOperatorRetryTest_$3 *create_RxInternalOperatorsOperatorRetryTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$3, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$3_$1

- (id)callWithId:(NSException *)t1 {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$3_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorRetryTest_$3;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$3_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$3_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$3_$1_init(RxInternalOperatorsOperatorRetryTest_$3_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$3_$1 *new_RxInternalOperatorsOperatorRetryTest_$3_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$3_$1, init)
}

RxInternalOperatorsOperatorRetryTest_$3_$1 *create_RxInternalOperatorsOperatorRetryTest_$3_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$3_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$4

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(t1)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRetryTest_$4_$1_init()])) startWithWithId:nil];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "testOnNextFromNotificationHandler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$4;
}

@end

void RxInternalOperatorsOperatorRetryTest_$4_init(RxInternalOperatorsOperatorRetryTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$4 *new_RxInternalOperatorsOperatorRetryTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$4, init)
}

RxInternalOperatorsOperatorRetryTest_$4 *create_RxInternalOperatorsOperatorRetryTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$4, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$4_$1

- (id)callWithId:(NSException *)t1 {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorRetryTest_$4;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$4_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$4_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$4_$1_init(RxInternalOperatorsOperatorRetryTest_$4_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$4_$1 *new_RxInternalOperatorsOperatorRetryTest_$4_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$4_$1, init)
}

RxInternalOperatorsOperatorRetryTest_$4_$1 *create_RxInternalOperatorsOperatorRetryTest_$4_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$4_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$5

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return RxObservable_empty();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "testOnCompletedFromNotificationHandler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$5;
}

@end

void RxInternalOperatorsOperatorRetryTest_$5_init(RxInternalOperatorsOperatorRetryTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$5 *new_RxInternalOperatorsOperatorRetryTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$5, init)
}

RxInternalOperatorsOperatorRetryTest_$5 *create_RxInternalOperatorsOperatorRetryTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$5, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$6

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return RxObservable_errorWithNSException_(create_JavaLangRuntimeException_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "testOnErrorFromNotificationHandler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$6;
}

@end

void RxInternalOperatorsOperatorRetryTest_$6_init(RxInternalOperatorsOperatorRetryTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$6 *new_RxInternalOperatorsOperatorRetryTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$6, init)
}

RxInternalOperatorsOperatorRetryTest_$6 *create_RxInternalOperatorsOperatorRetryTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$6, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$7

- (void)callWithId:(RxSubscriber *)subscriber {
  jint emit = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$inc_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(emit)];
  [subscriber onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inc_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testSingleSubscriptionOnFirst", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$7;
}

@end

void RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$inc_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$7 *new_RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$7 *create_RxInternalOperatorsOperatorRetryTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$8

- (RxObservable *)callWithId:(RxObservable *)attempt {
  return [((RxObservable *) nil_chk(attempt)) zipWithWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)) withRxFunctionsFunc2:create_RxInternalOperatorsOperatorRetryTest_$8_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxInternalOperatorsOperatorRetryTest;", "testSingleSubscriptionOnFirst", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$8;
}

@end

void RxInternalOperatorsOperatorRetryTest_$8_init(RxInternalOperatorsOperatorRetryTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$8 *new_RxInternalOperatorsOperatorRetryTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$8, init)
}

RxInternalOperatorsOperatorRetryTest_$8 *create_RxInternalOperatorsOperatorRetryTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$8, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$8_$1

- (id)callWithId:(NSException *)o
          withId:(JavaLangInteger *)integer {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$8_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;LJavaLangInteger;", "LRxInternalOperatorsOperatorRetryTest_$8;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Throwable;Ljava/lang/Integer;Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$8_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$8_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$8_$1_init(RxInternalOperatorsOperatorRetryTest_$8_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$8_$1 *new_RxInternalOperatorsOperatorRetryTest_$8_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$8_$1, init)
}

RxInternalOperatorsOperatorRetryTest_$8_$1 *create_RxInternalOperatorsOperatorRetryTest_$8_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$8_$1, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$9

- (void)callWithId:(JavaLangInteger *)n {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testUnsubscribeFromRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$9;
}

@end

void RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$9 *new_RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$9 *create_RxInternalOperatorsOperatorRetryTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$10

- (void)callWithId:(RxSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subsCount_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(s)) addWithRxSubscription:create_RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subsCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subsCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$10;
}

@end

void RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subsCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$10 *new_RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$10 *create_RxInternalOperatorsOperatorRetryTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$10_$1

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$subsCount_)) decrementAndGet];
  unsubscribed_ = true;
}

- (jboolean)isUnsubscribed {
  return unsubscribed_;
}

- (instancetype)initWithRxInternalOperatorsOperatorRetryTest_$10:(RxInternalOperatorsOperatorRetryTest_$10 *)outer$ {
  RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxInternalOperatorsOperatorRetryTest_$10:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorRetryTest_$10;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "unsubscribed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorRetryTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$10_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 2, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$10_$1;
}

@end

void RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10_$1 *self, RxInternalOperatorsOperatorRetryTest_$10 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->unsubscribed_ = false;
}

RxInternalOperatorsOperatorRetryTest_$10_$1 *new_RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$10_$1, initWithRxInternalOperatorsOperatorRetryTest_$10_, outer$)
}

RxInternalOperatorsOperatorRetryTest_$10_$1 *create_RxInternalOperatorsOperatorRetryTest_$10_$1_initWithRxInternalOperatorsOperatorRetryTest_$10_(RxInternalOperatorsOperatorRetryTest_$10 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$10_$1, initWithRxInternalOperatorsOperatorRetryTest_$10_, outer$)
}

@implementation RxInternalOperatorsOperatorRetryTest_$11

- (void)callWithId:(RxSubscriber *)s {
  if (![((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subsCount_)) incrementAndGet];
    [s onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"failed")];
    [s unsubscribe];
  }
  else {
    [s onErrorWithNSException:create_JavaLangRuntimeException_init()];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subsCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subsCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testSourceObservableCallsUnsubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$11;
}

@end

void RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subsCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$11 *new_RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$11 *create_RxInternalOperatorsOperatorRetryTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$12

- (void)callWithId:(RxSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subsCount_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(s)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"failed")];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subsCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subsCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testSourceObservableRetry1", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$12;
}

@end

void RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subsCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$12 *new_RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$12 *create_RxInternalOperatorsOperatorRetryTest_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$13

- (void)callWithId:(RxSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subsCount_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(s)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"failed")];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subsCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subsCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testSourceObservableRetry0", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$13;
}

@end

void RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subsCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$13 *new_RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$13 *create_RxInternalOperatorsOperatorRetryTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$14

- (void)run {
  JavaUtilConcurrentAtomicAtomicInteger *nexts = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  @try {
    RxObservable *origin = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(val$NUM_RETRIES_));
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(origin)) retry])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) unsafeSubscribeWithRxSubscriber:ts];
    [ts awaitTerminalEventWithLong:2500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    id<JavaUtilList> onNextEvents = create_JavaUtilArrayList_initWithJavaUtilCollection_([ts getOnNextEvents]);
    if ([onNextEvents size] != val$NUM_RETRIES_ + 2) {
      for (NSException * __strong t in nil_chk([ts getOnErrorEvents])) {
        [onNextEvents addWithId:[((NSException *) nil_chk(t)) description]];
      }
      for (jint k = 0; k < [ts getCompletions]; k++) {
        [onNextEvents addWithId:@"onCompleted"];
      }
      [((id<JavaUtilMap>) nil_chk(val$data_)) putWithId:JavaLangInteger_valueOfWithInt_(val$j_) withId:onNextEvents];
    }
  }
  @catch (NSException *t) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$timeouts_)) incrementAndGet];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$J$I", val$j_, @" | ", [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) getCount], @" !!! ", [nexts get])];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithInt:(jint)capture$0
            withJavaUtilMap:(id<JavaUtilMap>)capture$1
                    withInt:(jint)capture$2
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4 {
  RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)dealloc {
  RELEASE_(val$data_);
  RELEASE_(val$timeouts_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithInt:withJavaUtilMap:withInt:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$NUM_RETRIES_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$data_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$j_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeouts_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilMap;ILJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "(ILjava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;ILjava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/Map<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/String;>;>;", "LRxInternalOperatorsOperatorRetryTest;", "testRetryWithBackpressureParallel" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 5, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$14;
}

@end

void RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorRetryTest_$14 *self, jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  self->val$NUM_RETRIES_ = capture$0;
  JreStrongAssign(&self->val$data_, capture$1);
  self->val$j_ = capture$2;
  JreStrongAssign(&self->val$timeouts_, capture$3);
  JreStrongAssign(&self->val$cdl_, capture$4);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$14 *new_RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$14, initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

RxInternalOperatorsOperatorRetryTest_$14 *create_RxInternalOperatorsOperatorRetryTest_$14_initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(jint capture$0, id<JavaUtilMap> capture$1, jint capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$14, initWithInt_withJavaUtilMap_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation RxInternalOperatorsOperatorRetryTest_$15

- (NSString *)callWithId:(JavaLangInteger *)t1 {
  return JreStrcat("$I", @"msg: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$15;
}

@end

void RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$15 *new_RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$15 *create_RxInternalOperatorsOperatorRetryTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$16

- (NSString *)callWithId:(NSString *)t1 {
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$16 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$16;
}

@end

void RxInternalOperatorsOperatorRetryTest_$16_init(RxInternalOperatorsOperatorRetryTest_$16 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$16 *new_RxInternalOperatorsOperatorRetryTest_$16_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$16, init)
}

RxInternalOperatorsOperatorRetryTest_$16 *create_RxInternalOperatorsOperatorRetryTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$16, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$17

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)t1 {
  return [((RxObservablesGroupedObservable *) nil_chk(t1)) takeWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesGroupedObservable;", "(Lrx/observables/GroupedObservable<Ljava/lang/String;Ljava/lang/String;>;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/observables/GroupedObservable<Ljava/lang/String;Ljava/lang/String;>;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$17 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$17;
}

@end

void RxInternalOperatorsOperatorRetryTest_$17_init(RxInternalOperatorsOperatorRetryTest_$17 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$17 *new_RxInternalOperatorsOperatorRetryTest_$17_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$17, init)
}

RxInternalOperatorsOperatorRetryTest_$17 *create_RxInternalOperatorsOperatorRetryTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$17, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$18

- (void)callWithId:(RxSubscriber *)o {
  for (jint i = 0; i < 1034; i++) {
    [((RxSubscriber *) nil_chk(o)) onNextWithId:JreStrcat("$I", @"msg:", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet])];
  }
  [((RxSubscriber *) nil_chk(o)) onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900SourceNotSupportingBackpressure", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$18;
}

@end

void RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRetryTest_$18 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$18 *new_RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$18, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRetryTest_$18 *create_RxInternalOperatorsOperatorRetryTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$18, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRetryTest_$19

- (NSString *)callWithId:(NSString *)t1 {
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900SourceNotSupportingBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$19 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$19;
}

@end

void RxInternalOperatorsOperatorRetryTest_$19_init(RxInternalOperatorsOperatorRetryTest_$19 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$19 *new_RxInternalOperatorsOperatorRetryTest_$19_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$19, init)
}

RxInternalOperatorsOperatorRetryTest_$19 *create_RxInternalOperatorsOperatorRetryTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$19, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$20

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)t1 {
  return [((RxObservablesGroupedObservable *) nil_chk(t1)) takeWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesGroupedObservable;", "(Lrx/observables/GroupedObservable<Ljava/lang/String;Ljava/lang/String;>;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorRetryTest;", "testIssue1900SourceNotSupportingBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/observables/GroupedObservable<Ljava/lang/String;Ljava/lang/String;>;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$20 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$20;
}

@end

void RxInternalOperatorsOperatorRetryTest_$20_init(RxInternalOperatorsOperatorRetryTest_$20 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$20 *new_RxInternalOperatorsOperatorRetryTest_$20_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$20, init)
}

RxInternalOperatorsOperatorRetryTest_$20 *create_RxInternalOperatorsOperatorRetryTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$20, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$21

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "LRxInternalOperatorsOperatorRetryTest;", "retryWhenDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable;Lrx/Observable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$21 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$21;
}

@end

void RxInternalOperatorsOperatorRetryTest_$21_init(RxInternalOperatorsOperatorRetryTest_$21 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$21 *new_RxInternalOperatorsOperatorRetryTest_$21_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$21, init)
}

RxInternalOperatorsOperatorRetryTest_$21 *create_RxInternalOperatorsOperatorRetryTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$21, init)
}

@implementation RxInternalOperatorsOperatorRetryTest_$22

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRetryTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "LRxInternalOperatorsOperatorRetryTest;", "retryWhenTrampolineScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable;Lrx/Observable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRetryTest_$22 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRetryTest_$22;
}

@end

void RxInternalOperatorsOperatorRetryTest_$22_init(RxInternalOperatorsOperatorRetryTest_$22 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRetryTest_$22 *new_RxInternalOperatorsOperatorRetryTest_$22_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRetryTest_$22, init)
}

RxInternalOperatorsOperatorRetryTest_$22 *create_RxInternalOperatorsOperatorRetryTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRetryTest_$22, init)
}
