//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/exceptions/OnNextValueTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxExceptionsOnNextValueTest.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$10();

@interface RxExceptionsOnNextValueTest_BadToString : NSObject {
 @public
  jboolean throwDuringToString_;
}

- (instancetype)initWithBoolean:(jboolean)throwDuringToString;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnNextValueTest_BadToString)

__attribute__((unused)) static void RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(RxExceptionsOnNextValueTest_BadToString *self, jboolean throwDuringToString);

__attribute__((unused)) static RxExceptionsOnNextValueTest_BadToString *new_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(jboolean throwDuringToString) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsOnNextValueTest_BadToString *create_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(jboolean throwDuringToString);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsOnNextValueTest_BadToString)

@interface RxExceptionsOnNextValueTest_BadToStringObserver : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnNextValueTest_BadToStringObserver)

__attribute__((unused)) static void RxExceptionsOnNextValueTest_BadToStringObserver_init(RxExceptionsOnNextValueTest_BadToStringObserver *self);

__attribute__((unused)) static RxExceptionsOnNextValueTest_BadToStringObserver *new_RxExceptionsOnNextValueTest_BadToStringObserver_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsOnNextValueTest_BadToStringObserver *create_RxExceptionsOnNextValueTest_BadToStringObserver_init();

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsOnNextValueTest_BadToStringObserver)

@interface RxExceptionsOnNextValueTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxExceptionsOnNextValueTest_BadToString *)callWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnNextValueTest_$1)

__attribute__((unused)) static void RxExceptionsOnNextValueTest_$1_init(RxExceptionsOnNextValueTest_$1 *self);

__attribute__((unused)) static RxExceptionsOnNextValueTest_$1 *new_RxExceptionsOnNextValueTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsOnNextValueTest_$1 *create_RxExceptionsOnNextValueTest_$1_init();

@interface RxExceptionsOnNextValueTest_$2 : NSObject < RxFunctionsFunc1 >

- (RxExceptionsOnNextValueTest_BadToString *)callWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnNextValueTest_$2)

__attribute__((unused)) static void RxExceptionsOnNextValueTest_$2_init(RxExceptionsOnNextValueTest_$2 *self);

__attribute__((unused)) static RxExceptionsOnNextValueTest_$2 *new_RxExceptionsOnNextValueTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsOnNextValueTest_$2 *create_RxExceptionsOnNextValueTest_$2_init();

@implementation RxExceptionsOnNextValueTest

+ (NSString *)stackTraceAsStringWithNSException:(NSException *)e {
  return RxExceptionsOnNextValueTest_stackTraceAsStringWithNSException_(e);
}

- (void)addOnNextValueExceptionAdded {
  id<RxObserver> observer = create_RxExceptionsOnNextValueTest_BadToStringObserver_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(create_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(false)))) mapWithRxFunctionsFunc1:create_RxExceptionsOnNextValueTest_$1_init()])) subscribeWithRxObserver:observer];
}

- (void)addOnNextValueExceptionNotAddedWithBadString {
  id<RxObserver> observer = create_RxExceptionsOnNextValueTest_BadToStringObserver_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(create_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(true)))) mapWithRxFunctionsFunc1:create_RxExceptionsOnNextValueTest_$2_init()])) subscribeWithRxObserver:observer];
}

- (void)testRenderInteger {
  OrgJunitAssert_assertEqualsWithId_withId_(@"123", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangInteger_valueOfWithInt_(123)));
}

- (void)testRenderByte {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangByte_valueOfWithByte_((jbyte) 10)));
}

- (void)testRenderBoolean {
  OrgJunitAssert_assertEqualsWithId_withId_(@"true", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangBoolean_valueOfWithBoolean_(true)));
}

- (void)testRenderShort {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangShort_valueOfWithShort_((jshort) 10)));
}

- (void)testRenderLong {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangLong_valueOfWithLong_(10LL)));
}

- (void)testRenderCharacter {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangLong_valueOfWithLong_(10LL)));
}

- (void)testRenderFloat {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10.0", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangFloat_valueOfWithFloat_(10.0f)));
}

- (void)testRenderDouble {
  OrgJunitAssert_assertEqualsWithId_withId_(@"10.0", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(JavaLangDouble_valueOfWithDouble_(10.0)));
}

- (void)testRenderVoid {
  OrgJunitAssert_assertEqualsWithId_withId_(@"null", RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(nil));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsOnNextValueTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(stackTraceAsStringWithNSException:);
  methods[1].selector = @selector(addOnNextValueExceptionAdded);
  methods[2].selector = @selector(addOnNextValueExceptionNotAddedWithBadString);
  methods[3].selector = @selector(testRenderInteger);
  methods[4].selector = @selector(testRenderByte);
  methods[5].selector = @selector(testRenderBoolean);
  methods[6].selector = @selector(testRenderShort);
  methods[7].selector = @selector(testRenderLong);
  methods[8].selector = @selector(testRenderCharacter);
  methods[9].selector = @selector(testRenderFloat);
  methods[10].selector = @selector(testRenderDouble);
  methods[11].selector = @selector(testRenderVoid);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "stackTraceAsString", "LNSException;", "LJavaLangException;", (void *)&RxExceptionsOnNextValueTest__Annotations$0, (void *)&RxExceptionsOnNextValueTest__Annotations$1, (void *)&RxExceptionsOnNextValueTest__Annotations$2, (void *)&RxExceptionsOnNextValueTest__Annotations$3, (void *)&RxExceptionsOnNextValueTest__Annotations$4, (void *)&RxExceptionsOnNextValueTest__Annotations$5, (void *)&RxExceptionsOnNextValueTest__Annotations$6, (void *)&RxExceptionsOnNextValueTest__Annotations$7, (void *)&RxExceptionsOnNextValueTest__Annotations$8, (void *)&RxExceptionsOnNextValueTest__Annotations$9, (void *)&RxExceptionsOnNextValueTest__Annotations$10, "LRxExceptionsOnNextValueTest_BadToString;LRxExceptionsOnNextValueTest_BadToStringObserver;" };
  static const J2ObjcClassInfo _RxExceptionsOnNextValueTest = { "OnNextValueTest", "rx.exceptions", ptrTable, methods, NULL, 7, 0x11, 13, 0, -1, 14, -1, -1, -1 };
  return &_RxExceptionsOnNextValueTest;
}

@end

NSString *RxExceptionsOnNextValueTest_stackTraceAsStringWithNSException_(NSException *e) {
  RxExceptionsOnNextValueTest_initialize();
  JavaIoStringWriter *sw = create_JavaIoStringWriter_init();
  [((NSException *) nil_chk(e)) printStackTraceWithJavaIoPrintWriter:create_JavaIoPrintWriter_initWithJavaIoWriter_(sw)];
  return [sw description];
}

void RxExceptionsOnNextValueTest_init(RxExceptionsOnNextValueTest *self) {
  NSObject_init(self);
}

RxExceptionsOnNextValueTest *new_RxExceptionsOnNextValueTest_init() {
  J2OBJC_NEW_IMPL(RxExceptionsOnNextValueTest, init)
}

RxExceptionsOnNextValueTest *create_RxExceptionsOnNextValueTest_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsOnNextValueTest, init)
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsOnNextValueTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnNextValueTest)

@implementation RxExceptionsOnNextValueTest_BadToString

- (instancetype)initWithBoolean:(jboolean)throwDuringToString {
  RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(self, throwDuringToString);
  return self;
}

- (NSString *)description {
  if (throwDuringToString_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Error Making toString");
  }
  else {
    return @"BadToString";
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "throwDuringToString_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "toString", "LRxExceptionsOnNextValueTest;" };
  static const J2ObjcClassInfo _RxExceptionsOnNextValueTest_BadToString = { "BadToString", "rx.exceptions", ptrTable, methods, fields, 7, 0x1a, 2, 1, 2, -1, -1, -1, -1 };
  return &_RxExceptionsOnNextValueTest_BadToString;
}

@end

void RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(RxExceptionsOnNextValueTest_BadToString *self, jboolean throwDuringToString) {
  NSObject_init(self);
  self->throwDuringToString_ = throwDuringToString;
}

RxExceptionsOnNextValueTest_BadToString *new_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(jboolean throwDuringToString) {
  J2OBJC_NEW_IMPL(RxExceptionsOnNextValueTest_BadToString, initWithBoolean_, throwDuringToString)
}

RxExceptionsOnNextValueTest_BadToString *create_RxExceptionsOnNextValueTest_BadToString_initWithBoolean_(jboolean throwDuringToString) {
  J2OBJC_CREATE_IMPL(RxExceptionsOnNextValueTest_BadToString, initWithBoolean_, throwDuringToString)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnNextValueTest_BadToString)

@implementation RxExceptionsOnNextValueTest_BadToStringObserver

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"On Complete"];
  OrgJunitAssert_failWithNSString_(@"OnComplete shouldn't be reached");
}

- (void)onErrorWithNSException:(NSException *)e {
  NSString *trace = RxExceptionsOnNextValueTest_stackTraceAsStringWithNSException_(e);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"On Error: ", trace)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(trace, [((NSString *) nil_chk(trace)) contains:@"OnNextValue"]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$@", @"No Cause on throwable", e), [((NSException *) nil_chk(e)) getCause] != nil);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$$", [[((NSException *) nil_chk([e getCause])) java_getClass] getSimpleName], @" no OnNextValue"), [[e getCause] isKindOfClass:[RxExceptionsOnErrorThrowable_OnNextValue class]]);
}

- (void)onNextWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"On Next"];
  OrgJunitAssert_failWithNSString_(@"OnNext shouldn't be reached");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsOnNextValueTest_BadToStringObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LRxExceptionsOnNextValueTest_BadToString;", "LRxExceptionsOnNextValueTest;", "Ljava/lang/Object;Lrx/Observer<Lrx/exceptions/OnNextValueTest$BadToString;>;" };
  static const J2ObjcClassInfo _RxExceptionsOnNextValueTest_BadToStringObserver = { "BadToStringObserver", "rx.exceptions", ptrTable, methods, NULL, 7, 0xa, 4, 0, 4, -1, -1, 5, -1 };
  return &_RxExceptionsOnNextValueTest_BadToStringObserver;
}

@end

void RxExceptionsOnNextValueTest_BadToStringObserver_init(RxExceptionsOnNextValueTest_BadToStringObserver *self) {
  NSObject_init(self);
}

RxExceptionsOnNextValueTest_BadToStringObserver *new_RxExceptionsOnNextValueTest_BadToStringObserver_init() {
  J2OBJC_NEW_IMPL(RxExceptionsOnNextValueTest_BadToStringObserver, init)
}

RxExceptionsOnNextValueTest_BadToStringObserver *create_RxExceptionsOnNextValueTest_BadToStringObserver_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsOnNextValueTest_BadToStringObserver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsOnNextValueTest_BadToStringObserver)

@implementation RxExceptionsOnNextValueTest_$1

- (RxExceptionsOnNextValueTest_BadToString *)callWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Failure while handling");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsOnNextValueTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxExceptionsOnNextValueTest_BadToString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxExceptionsOnNextValueTest_BadToString;", "LRxExceptionsOnNextValueTest;", "addOnNextValueExceptionAdded", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/exceptions/OnNextValueTest$BadToString;Lrx/exceptions/OnNextValueTest$BadToString;>;" };
  static const J2ObjcClassInfo _RxExceptionsOnNextValueTest_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsOnNextValueTest_$1;
}

@end

void RxExceptionsOnNextValueTest_$1_init(RxExceptionsOnNextValueTest_$1 *self) {
  NSObject_init(self);
}

RxExceptionsOnNextValueTest_$1 *new_RxExceptionsOnNextValueTest_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsOnNextValueTest_$1, init)
}

RxExceptionsOnNextValueTest_$1 *create_RxExceptionsOnNextValueTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsOnNextValueTest_$1, init)
}

@implementation RxExceptionsOnNextValueTest_$2

- (RxExceptionsOnNextValueTest_BadToString *)callWithId:(RxExceptionsOnNextValueTest_BadToString *)badToString {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Failure while handling");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsOnNextValueTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxExceptionsOnNextValueTest_BadToString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxExceptionsOnNextValueTest_BadToString;", "LRxExceptionsOnNextValueTest;", "addOnNextValueExceptionNotAddedWithBadString", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/exceptions/OnNextValueTest$BadToString;Lrx/exceptions/OnNextValueTest$BadToString;>;" };
  static const J2ObjcClassInfo _RxExceptionsOnNextValueTest_$2 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsOnNextValueTest_$2;
}

@end

void RxExceptionsOnNextValueTest_$2_init(RxExceptionsOnNextValueTest_$2 *self) {
  NSObject_init(self);
}

RxExceptionsOnNextValueTest_$2 *new_RxExceptionsOnNextValueTest_$2_init() {
  J2OBJC_NEW_IMPL(RxExceptionsOnNextValueTest_$2, init)
}

RxExceptionsOnNextValueTest_$2 *create_RxExceptionsOnNextValueTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsOnNextValueTest_$2, init)
}
