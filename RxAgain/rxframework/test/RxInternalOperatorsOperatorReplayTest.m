//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorReplayTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMockMAction0.h"
#include "RxDopplMockMAction1.h"
#include "RxDopplMockMObserver.h"
#include "RxDopplMockMScheduler.h"
#include "RxDopplMockMSubscription.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorReplay.h"
#include "RxInternalOperatorsOperatorReplayTest.h"
#include "RxInternalUtilPlatformDependent.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorReplayTest ()

+ (void)verifyObserverMockWithRxObserver:(id<RxObserver>)mock
                                 withInt:(jint)numSubscriptions
                                 withInt:(jint)numItemsExpected;

+ (void)verifyObserverWithRxObserver:(id<RxObserver>)mock
                             withInt:(jint)numSubscriptions
                             withInt:(jint)numItemsExpected
                     withNSException:(NSException *)error;

@end

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(id<RxObserver> mock, jint numSubscriptions, jint numItemsExpected);

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_verifyObserverWithRxObserver_withInt_withInt_withNSException_(id<RxObserver> mock, jint numSubscriptions, jint numItemsExpected, NSException *error);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$42();

@interface RxInternalOperatorsOperatorReplayTest_InprocessWorker () {
 @public
  id<RxSubscription> mockSubscription_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_InprocessWorker, mockSubscription_, id<RxSubscription>)

@interface RxInternalOperatorsOperatorReplayTest_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$1_init(RxInternalOperatorsOperatorReplayTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$1 *new_RxInternalOperatorsOperatorReplayTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$1 *create_RxInternalOperatorsOperatorReplayTest_$1_init();

@interface RxInternalOperatorsOperatorReplayTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  id<RxFunctionsFunc1> val$dbl_;
}

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$2, val$dbl_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$2 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$2 *new_RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$2 *create_RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$3_init(RxInternalOperatorsOperatorReplayTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$3 *new_RxInternalOperatorsOperatorReplayTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$3 *create_RxInternalOperatorsOperatorReplayTest_$3_init();

@interface RxInternalOperatorsOperatorReplayTest_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  id<RxFunctionsFunc1> val$dbl_;
}

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$4, val$dbl_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$4 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$4 *new_RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$4 *create_RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$5 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$5_init(RxInternalOperatorsOperatorReplayTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$5 *new_RxInternalOperatorsOperatorReplayTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$5 *create_RxInternalOperatorsOperatorReplayTest_$5_init();

@interface RxInternalOperatorsOperatorReplayTest_$6 : NSObject < RxFunctionsFunc1 > {
 @public
  id<RxFunctionsFunc1> val$dbl_;
}

- (RxObservable *)callWithId:(RxObservable *)t1;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$6, val$dbl_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$6 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$6 *new_RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$6 *create_RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$effectCounter_;
}

- (void)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$7, val$effectCounter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$7 *new_RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$7 *create_RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$8 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$8_init(RxInternalOperatorsOperatorReplayTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$8 *new_RxInternalOperatorsOperatorReplayTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$8 *create_RxInternalOperatorsOperatorReplayTest_$8_init();

@interface RxInternalOperatorsOperatorReplayTest_$9 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$9_init(RxInternalOperatorsOperatorReplayTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$9 *new_RxInternalOperatorsOperatorReplayTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$9 *create_RxInternalOperatorsOperatorReplayTest_$9_init();

@interface RxInternalOperatorsOperatorReplayTest_$10 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$10_init(RxInternalOperatorsOperatorReplayTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$10 *new_RxInternalOperatorsOperatorReplayTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$10 *create_RxInternalOperatorsOperatorReplayTest_$10_init();

@interface RxInternalOperatorsOperatorReplayTest_$11 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$11_init(RxInternalOperatorsOperatorReplayTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$11 *new_RxInternalOperatorsOperatorReplayTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$11 *create_RxInternalOperatorsOperatorReplayTest_$11_init();

@interface RxInternalOperatorsOperatorReplayTest_$12 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$12, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorReplayTest_$12 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$12 *new_RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$12 *create_RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$13 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$13, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorReplayTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$13 *new_RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$13 *create_RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$14 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$14, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$14 *new_RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$14 *create_RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$14_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorReplayTest_$14 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorReplayTest_$14:(RxInternalOperatorsOperatorReplayTest_$14 *)outer$
                                                 withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$14_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$14_$1, this$0_, RxInternalOperatorsOperatorReplayTest_$14 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$14_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14_$1 *self, RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$14_$1 *new_RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$14_$1 *create_RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$15 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$15, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorReplayTest_$15 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$15 *new_RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$15 *create_RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$16 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$16, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorReplayTest_$16 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$16 *new_RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$16 *create_RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$17 : NSObject < RxObservable_OnSubscribe > {
 @public
  jint val$m_;
}

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)initWithInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$17)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(RxInternalOperatorsOperatorReplayTest_$17 *self, jint capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$17 *new_RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$17 *create_RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(jint capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$18 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$18, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$18 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$18 *new_RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$18 *create_RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$19 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$19)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$19_init(RxInternalOperatorsOperatorReplayTest_$19 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$19 *new_RxInternalOperatorsOperatorReplayTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$19 *create_RxInternalOperatorsOperatorReplayTest_$19_init();

@interface RxInternalOperatorsOperatorReplayTest_$20 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$20)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorReplayTest_$20, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(RxInternalOperatorsOperatorReplayTest_$20 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$20 *new_RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$20 *create_RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorReplayTest_$21 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$21_init(RxInternalOperatorsOperatorReplayTest_$21 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$21 *new_RxInternalOperatorsOperatorReplayTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$21 *create_RxInternalOperatorsOperatorReplayTest_$21_init();

@interface RxInternalOperatorsOperatorReplayTest_$22 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$22)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$22_init(RxInternalOperatorsOperatorReplayTest_$22 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$22 *new_RxInternalOperatorsOperatorReplayTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$22 *create_RxInternalOperatorsOperatorReplayTest_$22_init();

@interface RxInternalOperatorsOperatorReplayTest_$23 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$23)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$23_init(RxInternalOperatorsOperatorReplayTest_$23 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$23 *new_RxInternalOperatorsOperatorReplayTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$23 *create_RxInternalOperatorsOperatorReplayTest_$23_init();

@interface RxInternalOperatorsOperatorReplayTest_$24 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$24)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$24_init(RxInternalOperatorsOperatorReplayTest_$24 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$24 *new_RxInternalOperatorsOperatorReplayTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$24 *create_RxInternalOperatorsOperatorReplayTest_$24_init();

@interface RxInternalOperatorsOperatorReplayTest_$25 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$25)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$25_init(RxInternalOperatorsOperatorReplayTest_$25 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$25 *new_RxInternalOperatorsOperatorReplayTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$25 *create_RxInternalOperatorsOperatorReplayTest_$25_init();

@interface RxInternalOperatorsOperatorReplayTest_$26 : NSObject < RxFunctionsFunc1 >

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$26)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$26_init(RxInternalOperatorsOperatorReplayTest_$26 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$26 *new_RxInternalOperatorsOperatorReplayTest_$26_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$26 *create_RxInternalOperatorsOperatorReplayTest_$26_init();

@interface RxInternalOperatorsOperatorReplayTest_$27 : NSObject < RxFunctionsFunc1 >

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$27)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$27_init(RxInternalOperatorsOperatorReplayTest_$27 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$27 *new_RxInternalOperatorsOperatorReplayTest_$27_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$27 *create_RxInternalOperatorsOperatorReplayTest_$27_init();

@interface RxInternalOperatorsOperatorReplayTest_$28 : NSObject < RxFunctionsFunc1 >

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorReplayTest_$28)

__attribute__((unused)) static void RxInternalOperatorsOperatorReplayTest_$28_init(RxInternalOperatorsOperatorReplayTest_$28 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$28 *new_RxInternalOperatorsOperatorReplayTest_$28_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorReplayTest_$28 *create_RxInternalOperatorsOperatorReplayTest_$28_init();

@implementation RxInternalOperatorsOperatorReplayTest

- (void)testBufferedReplay {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithInt:3];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [source onCompleted];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testBufferedWindowReplay {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithInt:3 withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [scheduler advanceTimeByWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
    [scheduler advanceTimeByWithLong:90 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testWindowedReplay {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onCompleted];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testReplaySelector {
  id<RxFunctionsFunc1> dbl = create_RxInternalOperatorsOperatorReplayTest_$1_init();
  id<RxFunctionsFunc1> selector = create_RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(dbl);
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithRxFunctionsFunc1:selector];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [((RxObservable *) nil_chk(co)) subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [source onCompleted];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(8)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testBufferedReplaySelector {
  id<RxFunctionsFunc1> dbl = create_RxInternalOperatorsOperatorReplayTest_$3_init();
  id<RxFunctionsFunc1> selector = create_RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(dbl);
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithRxFunctionsFunc1:selector withInt:3];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [((RxObservable *) nil_chk(co)) subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [source onCompleted];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(8)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testWindowedReplaySelector {
  id<RxFunctionsFunc1> dbl = create_RxInternalOperatorsOperatorReplayTest_$5_init();
  id<RxFunctionsFunc1> selector = create_RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(dbl);
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithRxFunctionsFunc1:selector withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [((RxObservable *) nil_chk(co)) subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onCompleted];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testBufferedReplayError {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithInt:3];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [source onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Forced failure")];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onCompleted];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onCompleted];
  }
}

- (void)testWindowedReplayError {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(source)) replayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Forced failure")];
    [scheduler advanceTimeByWithLong:60 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onCompleted];
  }
  {
    id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer1 } count:1 type:NSObject_class_()]);
    [co subscribeWithRxObserver:observer1];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
    [inOrder verifyNoMoreInteractions];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onCompleted];
  }
}

- (void)testSynchronousDisconnect {
  JavaUtilConcurrentAtomicAtomicInteger *effectCounter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(effectCounter)];
  RxObservable *result = [((RxObservable *) nil_chk(source)) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$8_init()];
  for (jint i = 1; i < 3; i++) {
    [effectCounter setWithInt:0];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"- %d -%n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]];
    [((RxObservable *) nil_chk(result)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$9_init() withRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$10_init() withRxFunctionsAction0:create_RxInternalOperatorsOperatorReplayTest_$11_init()];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [effectCounter get]);
  }
}

- (void)testIssue2191_UnsubscribeSource {
  id<RxFunctionsAction1> sourceNext = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxFunctionsAction0> sourceCompleted = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsAction0> sourceUnsubscribed = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxObserver> spiedSubscriberBeforeConnect = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> spiedSubscriberAfterConnect = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *source = RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2));
  RxObservablesConnectableObservable *replay = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) doOnNextWithRxFunctionsAction1:sourceNext])) doOnUnsubscribeWithRxFunctionsAction0:sourceUnsubscribed])) doOnCompletedWithRxFunctionsAction0:sourceCompleted])) replay];
  [((RxObservablesConnectableObservable *) nil_chk(replay)) subscribeWithRxObserver:spiedSubscriberBeforeConnect];
  [replay subscribeWithRxObserver:spiedSubscriberBeforeConnect];
  [replay connect];
  [replay subscribeWithRxObserver:spiedSubscriberAfterConnect];
  [replay subscribeWithRxObserver:spiedSubscriberAfterConnect];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceCompleted, OrgMockitoMockito_timesWithInt_(1)))) call];
  RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(spiedSubscriberBeforeConnect, 2, 4);
  RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(spiedSubscriberAfterConnect, 2, 4);
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceUnsubscribed, OrgMockitoMockito_timesWithInt_(1)))) call];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceNext } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceCompleted } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceUnsubscribed } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ spiedSubscriberBeforeConnect } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ spiedSubscriberAfterConnect } count:1 type:NSObject_class_()]);
}

- (void)testIssue2191_SchedulerUnsubscribe {
  id<RxFunctionsAction1> sourceNext = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction1_class_());
  id<RxFunctionsAction0> sourceCompleted = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
  id<RxFunctionsAction0> sourceUnsubscribed = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
  RxScheduler *mockScheduler = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMScheduler_class_());
  id<RxSubscription> mockSubscription = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMSubscription_class_());
  RxScheduler_Worker *spiedWorker = RxInternalOperatorsOperatorReplayTest_workerSpyWithRxSubscription_(mockSubscription);
  id<RxObserver> mockObserverBeforeConnect = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  id<RxObserver> mockObserverAfterConnect = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMObserver_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((RxScheduler *) nil_chk(mockScheduler)) createWorker]))) thenReturnWithId:spiedWorker];
  RxObservablesConnectableObservable *replay = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) doOnNextWithRxFunctionsAction1:sourceNext])) doOnUnsubscribeWithRxFunctionsAction0:sourceUnsubscribed])) doOnCompletedWithRxFunctionsAction0:sourceCompleted])) subscribeOnWithRxScheduler:mockScheduler])) replay];
  [((RxObservablesConnectableObservable *) nil_chk(replay)) subscribeWithRxObserver:mockObserverBeforeConnect];
  [replay subscribeWithRxObserver:mockObserverBeforeConnect];
  [replay connect];
  [replay subscribeWithRxObserver:mockObserverAfterConnect];
  [replay subscribeWithRxObserver:mockObserverAfterConnect];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceCompleted, OrgMockitoMockito_timesWithInt_(1)))) call];
  [((RxScheduler *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mockScheduler, OrgMockitoMockito_timesWithInt_(1)))) createWorker];
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(1)))) scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>) cast_check(OrgMockitoMatchers_notNull(), RxFunctionsAction0_class_())];
  RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(mockObserverBeforeConnect, 2, 6);
  RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(mockObserverAfterConnect, 2, 6);
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(1)))) isUnsubscribed];
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(2)))) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceUnsubscribed, OrgMockitoMockito_timesWithInt_(1)))) call];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceNext } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceCompleted } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceUnsubscribed } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ spiedWorker } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockSubscription } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockScheduler } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserverBeforeConnect } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserverAfterConnect } count:1 type:NSObject_class_()]);
}

- (void)testIssue2191_SchedulerUnsubscribeOnError {
  id<RxFunctionsAction1> sourceNext = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxFunctionsAction0> sourceCompleted = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsAction1> sourceError = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxFunctionsAction0> sourceUnsubscribed = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxScheduler *mockScheduler = OrgMockitoMockito_mockWithIOSClass_(RxScheduler_class_());
  id<RxSubscription> mockSubscription = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxScheduler_Worker *spiedWorker = RxInternalOperatorsOperatorReplayTest_workerSpyWithRxSubscription_(mockSubscription);
  id<RxObserver> mockObserverBeforeConnect = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> mockObserverAfterConnect = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((RxScheduler *) nil_chk(mockScheduler)) createWorker]))) thenReturnWithId:spiedWorker];
  id<RxFunctionsFunc1> mockFunc = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc1_class_());
  JavaLangIllegalArgumentException *illegalArgumentException = create_JavaLangIllegalArgumentException_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<RxFunctionsFunc1>) nil_chk(mockFunc)) callWithId:JavaLangInteger_valueOfWithInt_(1)]))) thenReturnWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([mockFunc callWithId:JavaLangInteger_valueOfWithInt_(2)]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ illegalArgumentException } count:1 type:NSException_class_()]];
  RxObservablesConnectableObservable *replay = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) mapWithRxFunctionsFunc1:mockFunc])) doOnNextWithRxFunctionsAction1:sourceNext])) doOnUnsubscribeWithRxFunctionsAction0:sourceUnsubscribed])) doOnCompletedWithRxFunctionsAction0:sourceCompleted])) doOnErrorWithRxFunctionsAction1:sourceError])) subscribeOnWithRxScheduler:mockScheduler])) replay];
  [((RxObservablesConnectableObservable *) nil_chk(replay)) subscribeWithRxObserver:mockObserverBeforeConnect];
  [replay subscribeWithRxObserver:mockObserverBeforeConnect];
  [replay connect];
  [replay subscribeWithRxObserver:mockObserverAfterConnect];
  [replay subscribeWithRxObserver:mockObserverAfterConnect];
  [((RxScheduler *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mockScheduler, OrgMockitoMockito_timesWithInt_(1)))) createWorker];
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(1)))) scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>) cast_check(OrgMockitoMatchers_notNull(), RxFunctionsAction0_class_())];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceNext, OrgMockitoMockito_timesWithInt_(1)))) callWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceError, OrgMockitoMockito_timesWithInt_(1)))) callWithId:illegalArgumentException];
  RxInternalOperatorsOperatorReplayTest_verifyObserverWithRxObserver_withInt_withInt_withNSException_(mockObserverBeforeConnect, 2, 2, illegalArgumentException);
  RxInternalOperatorsOperatorReplayTest_verifyObserverWithRxObserver_withInt_withInt_withNSException_(mockObserverAfterConnect, 2, 2, illegalArgumentException);
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(1)))) isUnsubscribed];
  [((RxScheduler_Worker *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(spiedWorker, OrgMockitoMockito_timesWithInt_(2)))) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sourceUnsubscribed, OrgMockitoMockito_timesWithInt_(1)))) call];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceNext } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceCompleted } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceError } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ sourceUnsubscribed } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ spiedWorker } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockSubscription } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockScheduler } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserverBeforeConnect } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserverAfterConnect } count:1 type:NSObject_class_()]);
}

+ (void)verifyObserverMockWithRxObserver:(id<RxObserver>)mock
                                 withInt:(jint)numSubscriptions
                                 withInt:(jint)numItemsExpected {
  RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(mock, numSubscriptions, numItemsExpected);
}

+ (void)verifyObserverWithRxObserver:(id<RxObserver>)mock
                             withInt:(jint)numSubscriptions
                             withInt:(jint)numItemsExpected
                     withNSException:(NSException *)error {
  RxInternalOperatorsOperatorReplayTest_verifyObserverWithRxObserver_withInt_withInt_withNSException_(mock, numSubscriptions, numItemsExpected, error);
}

+ (RxScheduler_Worker *)workerSpyWithRxSubscription:(id<RxSubscription>)mockSubscription {
  return RxInternalOperatorsOperatorReplayTest_workerSpyWithRxSubscription_(mockSubscription);
}

- (void)testBoundedReplayBuffer {
  RxInternalOperatorsOperatorReplay_BoundedReplayBuffer *buf = create_RxInternalOperatorsOperatorReplay_BoundedReplayBuffer_init();
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(1), 0)];
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(2), 1)];
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(3), 2)];
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(4), 3)];
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(5), 4)];
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]), values);
  [buf removeSomeWithInt:2];
  [buf removeFirst];
  [buf removeSomeWithInt:2];
  [values clear];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertTrueWithBoolean_([values isEmpty]);
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(5), 5)];
  [buf addLastWithRxInternalOperatorsOperatorReplay_Node:create_RxInternalOperatorsOperatorReplay_Node_initWithId_withLong_(JavaLangInteger_valueOfWithInt_(6), 6)];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:2 type:JavaLangInteger_class_()]), values);
}

- (void)testTimedAndSizedTruncation {
  RxSchedulersTestScheduler *test = RxSchedulersSchedulers_test();
  RxInternalOperatorsOperatorReplay_SizeAndTimeBoundReplayBuffer *buf = create_RxInternalOperatorsOperatorReplay_SizeAndTimeBoundReplayBuffer_initWithInt_withLong_withRxScheduler_(2, 2000, test);
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  [buf nextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxSchedulersTestScheduler *) nil_chk(test)) advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [buf nextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [test advanceTimeByWithLong:900 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), values);
  [values clear];
  [test advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2) } count:1 type:JavaLangInteger_class_()]), values);
  [buf nextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [buf nextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [values clear];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:2 type:JavaLangInteger_class_()]), values);
  [test advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [buf nextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [values clear];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]), values);
  [test advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [buf complete];
  [values clear];
  [buf collectWithJavaUtilCollection:values];
  OrgJunitAssert_assertTrueWithBoolean_([values isEmpty]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, buf->size_);
  OrgJunitAssert_assertTrueWithBoolean_([buf hasCompleted]);
}

- (void)testBackpressure {
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)];
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(source)) replay];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_createWithLong_(10);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithLong_(90);
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts1];
  [co subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) requestMoreWithLong:10];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValueCountWithInt:10];
  [ts1 assertNoTerminalEvent];
  [ts2 assertValueCountWithInt:100];
  [ts2 assertNoTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [requested get]);
}

- (void)testBackpressureBounded {
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)];
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(source)) replayWithInt:50];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_createWithLong_(10);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithLong_(90);
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts1];
  [co subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) requestMoreWithLong:10];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValueCountWithInt:10];
  [ts1 assertNoTerminalEvent];
  [ts2 assertValueCountWithInt:100];
  [ts2 assertNoTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [requested get]);
}

- (void)testColdReplayNoBackpressure {
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) replay])) autoConnect];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
  for (jint i = 0; i < 1000; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [onNextEvents getWithInt:i]);
  }
}

- (void)testColdReplayBackpressure {
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) replay])) autoConnect];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:10];
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
  for (jint i = 0; i < 10; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i), [onNextEvents getWithInt:i]);
  }
  [ts unsubscribe];
}

- (void)testCache {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)))) replay])) autoConnect];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  [((RxObservable *) nil_chk(o)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  [o subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  if (![latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"subscriptions did not receive values");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testUnsubscribeSource {
  id<RxFunctionsAction0> unsubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnUnsubscribeWithRxFunctionsAction0:unsubscribe])) cache];
  [((RxObservable *) nil_chk(o)) subscribe];
  [o subscribe];
  [o subscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
}

- (void)testTake {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *cached = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) replay])) autoConnect];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(cached)) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  [ts assertUnsubscribed];
}

- (void)testAsync {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(1, 10000);
  for (jint i = 0; i < 100; i++) {
    RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
    RxObservable *cached = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(source)) replay])) autoConnect];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(cached)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts1];
    [ts1 awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts1 assertNoErrors];
    [ts1 assertTerminalEvent];
    OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [((id<JavaUtilList>) nil_chk([ts1 getOnNextEvents])) size]);
    RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([cached observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts2];
    [ts2 awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts2 assertNoErrors];
    [ts2 assertTerminalEvent];
    OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [((id<JavaUtilList>) nil_chk([ts2 getOnNextEvents])) size]);
  }
}

- (void)testAsyncComeAndGo {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(1, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) takeWithInt:1000])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()];
  RxObservable *cached = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(source)) replay])) autoConnect];
  RxObservable *output = [((RxObservable *) nil_chk(cached)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 100; i++) {
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [list addWithId:ts];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(output)) skipWithInt:i * 10])) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  }
  id<JavaUtilList> expected = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 10; i++) {
    [expected addWithId:JavaLangLong_valueOfWithLong_((jlong) (i - 10))];
  }
  jint j = 0;
  for (RxObserversTestSubscriber * __strong ts in list) {
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts assertNoErrors];
    [ts assertTerminalEvent];
    for (jint i = j * 10; i < j * 10 + 10; i++) {
      [expected setWithInt:i - j * 10 withId:JavaLangLong_valueOfWithLong_((jlong) i)];
    }
    [ts assertReceivedOnNextWithJavaUtilList:expected];
    j++;
  }
}

- (void)testNoMissingBackpressureException {
  jint m;
  if (RxInternalUtilPlatformDependent_isAndroid()) {
    m = 500 * 1000;
  }
  else {
    m = 4 * 1000 * 1000;
  }
  RxObservable *firehose = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(m));
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(firehose)) replay])) autoConnect])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeLastWithInt:100])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testValuesAndThenError {
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) concatWithWithRxObservable:RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())])) replay])) autoConnect];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  [source subscribeWithRxSubscriber:ts2];
  [ts2 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts2 getCompletions]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts2 getOnErrorEvents])) size]);
}

- (void)unsafeChildThrows {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) replay])) autoConnect];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorReplayTest_$19_init();
  [((RxObservable *) nil_chk(source)) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [count get]);
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)unboundedLeavesEarly {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  id<JavaUtilList> requests = create_JavaUtilArrayList_init();
  RxObservable *out = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(requests)])) replay])) autoConnect];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_createWithLong_(5);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithLong_(10);
  [((RxObservable *) nil_chk(out)) subscribeWithRxSubscriber:ts1];
  [out subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) unsubscribe];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(5LL), JavaLangLong_valueOfWithLong_(5LL) } count:2 type:JavaLangLong_class_()]), requests);
}

- (void)testSubscribersComeAndGoAtRequestBoundaries {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) replayWithInt:1];
  [((RxObservablesConnectableObservable *) nil_chk(source)) connect];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_createWithLong_(2);
  [source subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts1 assertNoErrors];
  [ts1 unsubscribe];
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithLong_(2);
  [source subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:2 type:JavaLangInteger_class_()]];
  [ts2 assertNoErrors];
  [ts2 unsubscribe];
  RxObserversTestSubscriber *ts21 = RxObserversTestSubscriber_createWithLong_(1);
  [source subscribeWithRxSubscriber:ts21];
  [((RxObserversTestSubscriber *) nil_chk(ts21)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3) } count:1 type:JavaLangInteger_class_()]];
  [ts21 assertNoErrors];
  [ts21 unsubscribe];
  RxObserversTestSubscriber *ts22 = RxObserversTestSubscriber_createWithLong_(1);
  [source subscribeWithRxSubscriber:ts22];
  [((RxObserversTestSubscriber *) nil_chk(ts22)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3) } count:1 type:JavaLangInteger_class_()]];
  [ts22 assertNoErrors];
  [ts22 unsubscribe];
  RxObserversTestSubscriber *ts3 = RxObserversTestSubscriber_create();
  [source subscribeWithRxSubscriber:ts3];
  [((RxObserversTestSubscriber *) nil_chk(ts3)) assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts3 getOnNextEvents]];
  [ts3 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:8 type:JavaLangInteger_class_()]];
  [ts3 assertCompleted];
}

- (void)testSubscribersComeAndGoAtRequestBoundaries2 {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) replayWithInt:2];
  [((RxObservablesConnectableObservable *) nil_chk(source)) connect];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_createWithLong_(2);
  [source subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts1 assertNoErrors];
  [ts1 unsubscribe];
  RxObserversTestSubscriber *ts11 = RxObserversTestSubscriber_createWithLong_(2);
  [source subscribeWithRxSubscriber:ts11];
  [((RxObserversTestSubscriber *) nil_chk(ts11)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts11 assertNoErrors];
  [ts11 unsubscribe];
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithLong_(3);
  [source subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts2 assertNoErrors];
  [ts2 unsubscribe];
  RxObserversTestSubscriber *ts21 = RxObserversTestSubscriber_createWithLong_(1);
  [source subscribeWithRxSubscriber:ts21];
  [((RxObserversTestSubscriber *) nil_chk(ts21)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2) } count:1 type:JavaLangInteger_class_()]];
  [ts21 assertNoErrors];
  [ts21 unsubscribe];
  RxObserversTestSubscriber *ts22 = RxObserversTestSubscriber_createWithLong_(1);
  [source subscribeWithRxSubscriber:ts22];
  [((RxObserversTestSubscriber *) nil_chk(ts22)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2) } count:1 type:JavaLangInteger_class_()]];
  [ts22 assertNoErrors];
  [ts22 unsubscribe];
  RxObserversTestSubscriber *ts3 = RxObserversTestSubscriber_create();
  [source subscribeWithRxSubscriber:ts3];
  [((RxObserversTestSubscriber *) nil_chk(ts3)) assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts3 getOnNextEvents]];
  [ts3 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:9 type:JavaLangInteger_class_()]];
  [ts3 assertCompleted];
}

- (void)dontReplayOldValues {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesConnectableObservable *co = [((RxSubjectsPublishSubject *) nil_chk(ps)) replayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribe];
  [co connect];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [co subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(3)];
}

- (void)invalidBufferSize {
  @try {
    [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) replayWithInt:-1 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"bufferSize < 0", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

- (void)bufferScheduled {
  RxSchedulersTestScheduler *test = create_RxSchedulersTestScheduler_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithInt:2 withRxScheduler:test];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts1];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertNoValues];
  [ts1 assertNotCompleted];
  [test triggerActions];
  [ts1 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts1 assertNoErrors];
  [ts1 assertCompleted];
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  [co subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertNoValues];
  [ts2 assertNotCompleted];
  [test triggerActions];
  [ts2 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:2 type:JavaLangInteger_class_()]];
  [ts2 assertNoErrors];
  [ts2 assertCompleted];
}

- (void)allScheduled {
  RxSchedulersTestScheduler *test = create_RxSchedulersTestScheduler_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxScheduler:test];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts1];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertNoValues];
  [ts1 assertNotCompleted];
  [test triggerActions];
  [ts1 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts1 assertNoErrors];
  [ts1 assertCompleted];
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  [co subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertNoValues];
  [ts2 assertNotCompleted];
  [test triggerActions];
  [ts2 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts2 assertNoErrors];
  [ts2 assertCompleted];
}

- (void)replayTimedDefaultScheduler {
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)bufferTimedSelectorScheduler {
  RxObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$21_init() withInt:2 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:RxSchedulersSchedulers_computation()];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)bufferTimedSelectorSchedulerBadBuffer {
  @try {
    [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$22_init() withInt:-99 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:RxSchedulersSchedulers_computation()];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"bufferSize < 0", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

- (void)selectorSizeTimeDefaultScheduler {
  RxObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$23_init() withInt:2 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)selectorSizeScheduler {
  RxObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$24_init() withInt:2 withRxScheduler:RxSchedulersSchedulers_computation()];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)selectorScheduler {
  RxObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$25_init() withRxScheduler:RxSchedulersSchedulers_computation()];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)timeSizeDefaultScheduler {
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) replayWithInt:2 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservablesConnectableObservable *) nil_chk(co)) subscribeWithRxSubscriber:ts];
  [co connect];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)replayNoRetentionWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)replayOp {
}

- (void)replayNoRetentionUnbounded {
  [self replayNoRetentionWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$26_init()];
}

- (void)replayNoRetentionSizeBound {
  [self replayNoRetentionWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$27_init()];
}

- (void)replayNoRetentionTimebound {
  [self replayNoRetentionWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorReplayTest_$28_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 12, -1 },
    { NULL, "V", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, 18, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 49, -1 },
    { NULL, "V", 0x0, 50, 51, 27, 52, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 53, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 54, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, 55, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testBufferedReplay);
  methods[1].selector = @selector(testBufferedWindowReplay);
  methods[2].selector = @selector(testWindowedReplay);
  methods[3].selector = @selector(testReplaySelector);
  methods[4].selector = @selector(testBufferedReplaySelector);
  methods[5].selector = @selector(testWindowedReplaySelector);
  methods[6].selector = @selector(testBufferedReplayError);
  methods[7].selector = @selector(testWindowedReplayError);
  methods[8].selector = @selector(testSynchronousDisconnect);
  methods[9].selector = @selector(testIssue2191_UnsubscribeSource);
  methods[10].selector = @selector(testIssue2191_SchedulerUnsubscribe);
  methods[11].selector = @selector(testIssue2191_SchedulerUnsubscribeOnError);
  methods[12].selector = @selector(verifyObserverMockWithRxObserver:withInt:withInt:);
  methods[13].selector = @selector(verifyObserverWithRxObserver:withInt:withInt:withNSException:);
  methods[14].selector = @selector(workerSpyWithRxSubscription:);
  methods[15].selector = @selector(testBoundedReplayBuffer);
  methods[16].selector = @selector(testTimedAndSizedTruncation);
  methods[17].selector = @selector(testBackpressure);
  methods[18].selector = @selector(testBackpressureBounded);
  methods[19].selector = @selector(testColdReplayNoBackpressure);
  methods[20].selector = @selector(testColdReplayBackpressure);
  methods[21].selector = @selector(testCache);
  methods[22].selector = @selector(testUnsubscribeSource);
  methods[23].selector = @selector(testTake);
  methods[24].selector = @selector(testAsync);
  methods[25].selector = @selector(testAsyncComeAndGo);
  methods[26].selector = @selector(testNoMissingBackpressureException);
  methods[27].selector = @selector(testValuesAndThenError);
  methods[28].selector = @selector(unsafeChildThrows);
  methods[29].selector = @selector(unboundedLeavesEarly);
  methods[30].selector = @selector(testSubscribersComeAndGoAtRequestBoundaries);
  methods[31].selector = @selector(testSubscribersComeAndGoAtRequestBoundaries2);
  methods[32].selector = @selector(dontReplayOldValues);
  methods[33].selector = @selector(invalidBufferSize);
  methods[34].selector = @selector(bufferScheduled);
  methods[35].selector = @selector(allScheduled);
  methods[36].selector = @selector(replayTimedDefaultScheduler);
  methods[37].selector = @selector(bufferTimedSelectorScheduler);
  methods[38].selector = @selector(bufferTimedSelectorSchedulerBadBuffer);
  methods[39].selector = @selector(selectorSizeTimeDefaultScheduler);
  methods[40].selector = @selector(selectorSizeScheduler);
  methods[41].selector = @selector(selectorScheduler);
  methods[42].selector = @selector(timeSizeDefaultScheduler);
  methods[43].selector = @selector(replayNoRetentionWithRxFunctionsFunc1:);
  methods[44].selector = @selector(replayNoRetentionUnbounded);
  methods[45].selector = @selector(replayNoRetentionSizeBound);
  methods[46].selector = @selector(replayNoRetentionTimebound);
  methods[47].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$0, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$1, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$2, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$3, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$4, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$5, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$6, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$7, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$8, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$9, "LJavaLangException;", (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$10, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$11, "verifyObserverMock", "LRxObserver;II", "(Lrx/Observer<Ljava/lang/Integer;>;II)V", "verifyObserver", "LRxObserver;IILNSException;", "(Lrx/Observer<Ljava/lang/Integer;>;IILjava/lang/Throwable;)V", "workerSpy", "LRxSubscription;", (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$12, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$13, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$14, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$15, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$16, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$17, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$18, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$19, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$20, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$21, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$22, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$23, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$24, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$25, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$26, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$27, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$28, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$29, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$30, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$31, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$32, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$33, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$34, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$35, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$36, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$37, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$38, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$39, "replayNoRetention", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;>;)V", (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$40, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$41, (void *)&RxInternalOperatorsOperatorReplayTest__Annotations$42, "LRxInternalOperatorsOperatorReplayTest_InprocessWorker;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest = { "OperatorReplayTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 48, 0, -1, 56, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorReplayTest;
}

@end

void RxInternalOperatorsOperatorReplayTest_verifyObserverMockWithRxObserver_withInt_withInt_(id<RxObserver> mock, jint numSubscriptions, jint numItemsExpected) {
  RxInternalOperatorsOperatorReplayTest_initialize();
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mock, OrgMockitoMockito_timesWithInt_(numItemsExpected)))) onNextWithId:(JavaLangInteger *) cast_chk(OrgMockitoMatchers_notNull(), [JavaLangInteger class])];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mock, OrgMockitoMockito_timesWithInt_(numSubscriptions)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mock } count:1 type:NSObject_class_()]);
}

void RxInternalOperatorsOperatorReplayTest_verifyObserverWithRxObserver_withInt_withInt_withNSException_(id<RxObserver> mock, jint numSubscriptions, jint numItemsExpected, NSException *error) {
  RxInternalOperatorsOperatorReplayTest_initialize();
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mock, OrgMockitoMockito_timesWithInt_(numItemsExpected)))) onNextWithId:(JavaLangInteger *) cast_chk(OrgMockitoMatchers_notNull(), [JavaLangInteger class])];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mock, OrgMockitoMockito_timesWithInt_(numSubscriptions)))) onErrorWithNSException:error];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mock } count:1 type:NSObject_class_()]);
}

RxScheduler_Worker *RxInternalOperatorsOperatorReplayTest_workerSpyWithRxSubscription_(id<RxSubscription> mockSubscription) {
  RxInternalOperatorsOperatorReplayTest_initialize();
  return OrgMockitoMockito_spyWithId_(create_RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(mockSubscription));
}

void RxInternalOperatorsOperatorReplayTest_init(RxInternalOperatorsOperatorReplayTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest *new_RxInternalOperatorsOperatorReplayTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest, init)
}

RxInternalOperatorsOperatorReplayTest *create_RxInternalOperatorsOperatorReplayTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorReplayTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorReplayTest)

@implementation RxInternalOperatorsOperatorReplayTest_InprocessWorker

- (instancetype)initWithRxSubscription:(id<RxSubscription>)mockSubscription {
  RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(self, mockSubscription);
  return self;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  [((id<RxFunctionsAction0>) nil_chk(action)) call];
  return mockSubscription_;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((id<RxFunctionsAction0>) nil_chk(action)) call];
  return mockSubscription_;
}

- (void)unsubscribe {
  unsubscribed_ = true;
}

- (jboolean)isUnsubscribed {
  return unsubscribed_;
}

- (void)dealloc {
  RELEASE_(mockSubscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscription:);
  methods[1].selector = @selector(scheduleWithRxFunctionsAction0:);
  methods[2].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(unsubscribe);
  methods[4].selector = @selector(isUnsubscribed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mockSubscription_", "LRxSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unsubscribed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;", "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "LRxInternalOperatorsOperatorReplayTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_InprocessWorker = { "InprocessWorker", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 5, 2, 4, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_InprocessWorker;
}

@end

void RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(RxInternalOperatorsOperatorReplayTest_InprocessWorker *self, id<RxSubscription> mockSubscription) {
  RxScheduler_Worker_init(self);
  JreStrongAssign(&self->mockSubscription_, mockSubscription);
}

RxInternalOperatorsOperatorReplayTest_InprocessWorker *new_RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(id<RxSubscription> mockSubscription) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_InprocessWorker, initWithRxSubscription_, mockSubscription)
}

RxInternalOperatorsOperatorReplayTest_InprocessWorker *create_RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(id<RxSubscription> mockSubscription) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_InprocessWorker, initWithRxSubscription_, mockSubscription)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorReplayTest_InprocessWorker)

@implementation RxInternalOperatorsOperatorReplayTest_$1

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$1;
}

@end

void RxInternalOperatorsOperatorReplayTest_$1_init(RxInternalOperatorsOperatorReplayTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$1 *new_RxInternalOperatorsOperatorReplayTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$1, init)
}

RxInternalOperatorsOperatorReplayTest_$1 *create_RxInternalOperatorsOperatorReplayTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$1, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$2

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return [((RxObservable *) nil_chk(t1)) mapWithRxFunctionsFunc1:val$dbl_];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$dbl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dbl_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "testReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$2;
}

@end

void RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$2 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$dbl_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$2 *new_RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$2, initWithRxFunctionsFunc1_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$2 *create_RxInternalOperatorsOperatorReplayTest_$2_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$2, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$3

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testBufferedReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$3;
}

@end

void RxInternalOperatorsOperatorReplayTest_$3_init(RxInternalOperatorsOperatorReplayTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$3 *new_RxInternalOperatorsOperatorReplayTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$3, init)
}

RxInternalOperatorsOperatorReplayTest_$3 *create_RxInternalOperatorsOperatorReplayTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$3, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$4

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return [((RxObservable *) nil_chk(t1)) mapWithRxFunctionsFunc1:val$dbl_];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$dbl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dbl_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "testBufferedReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$4;
}

@end

void RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$4 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$dbl_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$4 *new_RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$4, initWithRxFunctionsFunc1_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$4 *create_RxInternalOperatorsOperatorReplayTest_$4_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$4, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$5

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testWindowedReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$5;
}

@end

void RxInternalOperatorsOperatorReplayTest_$5_init(RxInternalOperatorsOperatorReplayTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$5 *new_RxInternalOperatorsOperatorReplayTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$5, init)
}

RxInternalOperatorsOperatorReplayTest_$5 *create_RxInternalOperatorsOperatorReplayTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$5, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$6

- (RxObservable *)callWithId:(RxObservable *)t1 {
  return [((RxObservable *) nil_chk(t1)) mapWithRxFunctionsFunc1:val$dbl_];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$dbl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dbl_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "testWindowedReplaySelector", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$6;
}

@end

void RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorReplayTest_$6 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$dbl_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$6 *new_RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$6, initWithRxFunctionsFunc1_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$6 *create_RxInternalOperatorsOperatorReplayTest_$6_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$6, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$7

- (void)callWithId:(JavaLangInteger *)v {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$effectCounter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Sideeffect #", v)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$effectCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$effectCounter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testSynchronousDisconnect", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$7;
}

@end

void RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$effectCounter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$7 *new_RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$7 *create_RxInternalOperatorsOperatorReplayTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$8

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "testSynchronousDisconnect", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$8;
}

@end

void RxInternalOperatorsOperatorReplayTest_$8_init(RxInternalOperatorsOperatorReplayTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$8 *new_RxInternalOperatorsOperatorReplayTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$8, init)
}

RxInternalOperatorsOperatorReplayTest_$8 *create_RxInternalOperatorsOperatorReplayTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$8, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$9

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:t1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testSynchronousDisconnect", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$9;
}

@end

void RxInternalOperatorsOperatorReplayTest_$9_init(RxInternalOperatorsOperatorReplayTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$9 *new_RxInternalOperatorsOperatorReplayTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$9, init)
}

RxInternalOperatorsOperatorReplayTest_$9 *create_RxInternalOperatorsOperatorReplayTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$9, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$10

- (void)callWithId:(NSException *)t1 {
  [((NSException *) nil_chk(t1)) printStackTrace];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorReplayTest;", "testSynchronousDisconnect", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$10;
}

@end

void RxInternalOperatorsOperatorReplayTest_$10_init(RxInternalOperatorsOperatorReplayTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$10 *new_RxInternalOperatorsOperatorReplayTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$10, init)
}

RxInternalOperatorsOperatorReplayTest_$10 *create_RxInternalOperatorsOperatorReplayTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$10, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$11

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Done"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorReplayTest;", "testSynchronousDisconnect" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$11;
}

@end

void RxInternalOperatorsOperatorReplayTest_$11_init(RxInternalOperatorsOperatorReplayTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$11 *new_RxInternalOperatorsOperatorReplayTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$11, init)
}

RxInternalOperatorsOperatorReplayTest_$11 *create_RxInternalOperatorsOperatorReplayTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$11, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$12

- (void)callWithId:(JavaLangLong *)t {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requested_)) addAndGetWithLong:[((JavaLangLong *) nil_chk(t)) longLongValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorReplayTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$12;
}

@end

void RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorReplayTest_$12 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$12 *new_RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$12, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$12 *create_RxInternalOperatorsOperatorReplayTest_$12_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$12, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$13

- (void)callWithId:(JavaLangLong *)t {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requested_)) addAndGetWithLong:[((JavaLangLong *) nil_chk(t)) longLongValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorReplayTest;", "testBackpressureBounded", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$13;
}

@end

void RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorReplayTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$13 *new_RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$13 *create_RxInternalOperatorsOperatorReplayTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$14

- (void)callWithId:(RxSubscriber *)observer {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(self, observer)) start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorReplayTest;", "testCache", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$14;
}

@end

void RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$14 *new_RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$14 *create_RxInternalOperatorsOperatorReplayTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$14_$1

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"published observable being executed"];
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:@"one"];
  [val$observer_ onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorReplayTest_$14:(RxInternalOperatorsOperatorReplayTest_$14 *)outer$
                                                 withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorReplayTest_$14:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorReplayTest_$14;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorReplayTest_$14;LRxSubscriber;", "(Lrx/internal/operators/OperatorReplayTest$14;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorReplayTest_$14;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$14_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$14_$1;
}

@end

void RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14_$1 *self, RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$14_$1 *new_RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$14_$1, initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$14_$1 *create_RxInternalOperatorsOperatorReplayTest_$14_$1_initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_(RxInternalOperatorsOperatorReplayTest_$14 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$14_$1, initWithRxInternalOperatorsOperatorReplayTest_$14_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$15

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"v: ", v)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorReplayTest;", "testCache", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$15;
}

@end

void RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorReplayTest_$15 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$15 *new_RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$15, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$15 *create_RxInternalOperatorsOperatorReplayTest_$15_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$15, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$16

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"v: ", v)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorReplayTest;", "testCache", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$16;
}

@end

void RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorReplayTest_$16 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$16 *new_RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$16, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$16 *create_RxInternalOperatorsOperatorReplayTest_$16_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$16, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$17

- (void)callWithId:(RxSubscriber *)t {
  for (jint i = 0; i < val$m_; i++) {
    [((RxSubscriber *) nil_chk(t)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxSubscriber *) nil_chk(t)) onCompleted];
}

- (instancetype)initWithInt:(jint)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$m_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "I", "LRxInternalOperatorsOperatorReplayTest;", "testNoMissingBackpressureException", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$17;
}

@end

void RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(RxInternalOperatorsOperatorReplayTest_$17 *self, jint capture$0) {
  self->val$m_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$17 *new_RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$17, initWithInt_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$17 *create_RxInternalOperatorsOperatorReplayTest_$17_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$17, initWithInt_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$18

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorReplayTest;", "unsafeChildThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$18;
}

@end

void RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorReplayTest_$18 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$18 *new_RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$18, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$18 *create_RxInternalOperatorsOperatorReplayTest_$18_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$18, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$19

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorReplayTest_$19 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsOperatorReplayTest;", "unsafeChildThrows", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$19 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$19;
}

@end

void RxInternalOperatorsOperatorReplayTest_$19_init(RxInternalOperatorsOperatorReplayTest_$19 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorReplayTest_$19 *new_RxInternalOperatorsOperatorReplayTest_$19_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$19, init)
}

RxInternalOperatorsOperatorReplayTest_$19 *create_RxInternalOperatorsOperatorReplayTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$19, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$20

- (void)callWithId:(JavaLangLong *)t {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorReplayTest;", "unboundedLeavesEarly", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$20 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$20;
}

@end

void RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(RxInternalOperatorsOperatorReplayTest_$20 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$20 *new_RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$20, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorReplayTest_$20 *create_RxInternalOperatorsOperatorReplayTest_$20_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$20, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorReplayTest_$21

- (RxObservable *)callWithId:(RxObservable *)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "bufferTimedSelectorScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$21 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$21;
}

@end

void RxInternalOperatorsOperatorReplayTest_$21_init(RxInternalOperatorsOperatorReplayTest_$21 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$21 *new_RxInternalOperatorsOperatorReplayTest_$21_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$21, init)
}

RxInternalOperatorsOperatorReplayTest_$21 *create_RxInternalOperatorsOperatorReplayTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$21, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$22

- (RxObservable *)callWithId:(RxObservable *)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "bufferTimedSelectorSchedulerBadBuffer", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$22 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$22;
}

@end

void RxInternalOperatorsOperatorReplayTest_$22_init(RxInternalOperatorsOperatorReplayTest_$22 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$22 *new_RxInternalOperatorsOperatorReplayTest_$22_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$22, init)
}

RxInternalOperatorsOperatorReplayTest_$22 *create_RxInternalOperatorsOperatorReplayTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$22, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$23

- (RxObservable *)callWithId:(RxObservable *)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "selectorSizeTimeDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$23 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$23;
}

@end

void RxInternalOperatorsOperatorReplayTest_$23_init(RxInternalOperatorsOperatorReplayTest_$23 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$23 *new_RxInternalOperatorsOperatorReplayTest_$23_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$23, init)
}

RxInternalOperatorsOperatorReplayTest_$23 *create_RxInternalOperatorsOperatorReplayTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$23, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$24

- (RxObservable *)callWithId:(RxObservable *)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "selectorSizeScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$24 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$24;
}

@end

void RxInternalOperatorsOperatorReplayTest_$24_init(RxInternalOperatorsOperatorReplayTest_$24 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$24 *new_RxInternalOperatorsOperatorReplayTest_$24_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$24, init)
}

RxInternalOperatorsOperatorReplayTest_$24 *create_RxInternalOperatorsOperatorReplayTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$24, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$25

- (RxObservable *)callWithId:(RxObservable *)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "selectorScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$25 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$25;
}

@end

void RxInternalOperatorsOperatorReplayTest_$25_init(RxInternalOperatorsOperatorReplayTest_$25 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$25 *new_RxInternalOperatorsOperatorReplayTest_$25_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$25, init)
}

RxInternalOperatorsOperatorReplayTest_$25 *create_RxInternalOperatorsOperatorReplayTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$25, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$26

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) replay];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$26_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesConnectableObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "replayNoRetentionUnbounded", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$26 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$26;
}

@end

void RxInternalOperatorsOperatorReplayTest_$26_init(RxInternalOperatorsOperatorReplayTest_$26 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$26 *new_RxInternalOperatorsOperatorReplayTest_$26_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$26, init)
}

RxInternalOperatorsOperatorReplayTest_$26 *create_RxInternalOperatorsOperatorReplayTest_$26_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$26, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$27

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) replayWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$27_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesConnectableObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "replayNoRetentionSizeBound", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$27 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$27;
}

@end

void RxInternalOperatorsOperatorReplayTest_$27_init(RxInternalOperatorsOperatorReplayTest_$27 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$27 *new_RxInternalOperatorsOperatorReplayTest_$27_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$27, init)
}

RxInternalOperatorsOperatorReplayTest_$27 *create_RxInternalOperatorsOperatorReplayTest_$27_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$27, init)
}

@implementation RxInternalOperatorsOperatorReplayTest_$28

- (RxObservablesConnectableObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) replayWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorReplayTest_$28_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesConnectableObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorReplayTest;", "replayNoRetentionTimebound", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/observables/ConnectableObservable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest_$28 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorReplayTest_$28;
}

@end

void RxInternalOperatorsOperatorReplayTest_$28_init(RxInternalOperatorsOperatorReplayTest_$28 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorReplayTest_$28 *new_RxInternalOperatorsOperatorReplayTest_$28_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest_$28, init)
}

RxInternalOperatorsOperatorReplayTest_$28 *create_RxInternalOperatorsOperatorReplayTest_$28_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest_$28, init)
}
