//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorWindowWithSizeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorWindowWithSizeTest.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorWindowWithSizeTest ()

+ (id<JavaUtilList>)toListsWithRxObservable:(RxObservable *)observables;

- (id<JavaUtilList>)listWithNSStringArray:(IOSObjectArray *)args;

@end

__attribute__((unused)) static id<JavaUtilList> RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(RxObservable *observables);

__attribute__((unused)) static id<JavaUtilList> RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(RxInternalOperatorsOperatorWindowWithSizeTest *self, IOSObjectArray *args);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$14();

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)xs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$1_init(RxInternalOperatorsOperatorWindowWithSizeTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$1 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$1 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$1_init();

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$lists_;
}

- (void)callWithId:(id<JavaUtilList>)xs;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$2, val$lists_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(RxInternalOperatorsOperatorWindowWithSizeTest_$2 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$2 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$2 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$3, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$3 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$3 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$4, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$4 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$4 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$5 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$5 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$6, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$6 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$6 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$7 : RxSubscriber {
 @public
  id<JavaUtilList> val$list_;
  id<RxObserver> val$o_;
}

- (void)onStart;

- (void)onNextWithId:(RxObservable *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$7, val$list_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$7, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$7 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$7 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 : NSObject < RxObserver > {
 @public
  RxInternalOperatorsOperatorWindowWithSizeTest_$7 *this$0_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7:(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1, this$0_, RxInternalOperatorsOperatorWindowWithSizeTest_$7 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *self, RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$);

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$8 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$8_init(RxInternalOperatorsOperatorWindowWithSizeTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$8 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$8 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$8_init();

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$9 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)w;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$9_init(RxInternalOperatorsOperatorWindowWithSizeTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$9 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$9 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$9_init();

@interface RxInternalOperatorsOperatorWindowWithSizeTest_$10 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithSizeTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithSizeTest_$10_init(RxInternalOperatorsOperatorWindowWithSizeTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$10 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithSizeTest_$10 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$10_init();

@implementation RxInternalOperatorsOperatorWindowWithSizeTest

+ (id<JavaUtilList>)toListsWithRxObservable:(RxObservable *)observables {
  return RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(observables);
}

- (void)testNonOverlappingWindows {
  RxObservable *subject = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"two", @"three", @"four", @"five");
  RxObservable *windowed = [((RxObservable *) nil_chk(subject)) windowWithInt:3];
  id<JavaUtilList> windows = RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(windowed);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(windows)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]), [windows getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five" } count:2 type:NSString_class_()]), [windows getWithInt:1]);
}

- (void)testSkipAndCountGaplessWindows {
  RxObservable *subject = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"two", @"three", @"four", @"five");
  RxObservable *windowed = [((RxObservable *) nil_chk(subject)) windowWithInt:3 withInt:3];
  id<JavaUtilList> windows = RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(windowed);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(windows)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]), [windows getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five" } count:2 type:NSString_class_()]), [windows getWithInt:1]);
}

- (void)testOverlappingWindows {
  RxObservable *subject = RxObservable_fromWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"zero", @"one", @"two", @"three", @"four", @"five" } count:6 type:NSString_class_()]);
  RxObservable *windowed = [((RxObservable *) nil_chk(subject)) windowWithInt:3 withInt:1];
  id<JavaUtilList> windows = RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(windowed);
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [((id<JavaUtilList>) nil_chk(windows)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"zero", @"one", @"two" } count:3 type:NSString_class_()]), [windows getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]), [windows getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"two", @"three", @"four" } count:3 type:NSString_class_()]), [windows getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"three", @"four", @"five" } count:3 type:NSString_class_()]), [windows getWithInt:3]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five" } count:2 type:NSString_class_()]), [windows getWithInt:4]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"five" } count:1 type:NSString_class_()]), [windows getWithInt:5]);
}

- (void)testSkipAndCountWindowsWithGaps {
  RxObservable *subject = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"two", @"three", @"four", @"five");
  RxObservable *windowed = [((RxObservable *) nil_chk(subject)) windowWithInt:2 withInt:3];
  id<JavaUtilList> windows = RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(windowed);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(windows)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two" } count:2 type:NSString_class_()]), [windows getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five" } count:2 type:NSString_class_()]), [windows getWithInt:1]);
}

- (void)testWindowUnsubscribeNonOverlapping {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10000))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) windowWithInt:5])) takeWithInt:2]))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [count get]);
}

- (void)testWindowUnsubscribeNonOverlappingAsyncSource {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100000))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) windowWithInt:5])) takeWithInt:2]))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertTrueWithBoolean_([count get] < 100000);
}

- (void)testWindowUnsubscribeOverlapping {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10000))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) windowWithInt:5 withInt:4])) takeWithInt:2]))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(9, [count get]);
}

- (void)testWindowUnsubscribeOverlappingAsyncSource {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100000))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) windowWithInt:5 withInt:4])) takeWithInt:2]))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertTrueWithBoolean_([count get] < 100000);
}

- (id<JavaUtilList>)listWithNSStringArray:(IOSObjectArray *)args {
  return RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(self, args);
}

- (void)testBackpressureOuter {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithInt:3];
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(list, o)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]), list);
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

+ (RxObservable *)hotStream {
  return RxInternalOperatorsOperatorWindowWithSizeTest_hotStream();
}

- (void)testTakeFlatMapCompletes {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  jint indicator = 999999999;
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorWindowWithSizeTest_hotStream())) windowWithInt:10])) takeWithInt:2])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$9_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) isEmpty]);
}

- (void)testBackpressureOuterInexact {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) windowWithInt:2 withInt:1])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$10_init()])) concatMapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:2 type:JavaLangInteger_class_()]) } count:2 type:JavaUtilList_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:5];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts getOnNextEvents]];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:2 type:JavaLangInteger_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:2 type:JavaLangInteger_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:2 type:JavaLangInteger_class_()]), JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]) } count:5 type:JavaUtilList_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)testBackpressureOuterOverlap {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithInt:3 withInt:1];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0LL);
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [ts assertValueCountWithInt:1];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:7];
  [ts assertValueCountWithInt:8];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:3];
  [ts assertValueCountWithInt:10];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)testCountInvalid {
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithInt:0 withInt:1];
}

- (void)testSkipInvalid {
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithInt:3 withInt:0];
}

- (void)testTake1Overlapping {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithInt:3 withInt:1])) takeWithInt:1];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0LL);
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValueCountWithInt:1];
  [ts assertCompleted];
  [ts assertNoErrors];
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:0])) subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts1 assertCompleted];
  [ts1 assertNoErrors];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithSizeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "LJavaUtilList;", 0x82, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "LRxObservable;", 0x9, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toListsWithRxObservable:);
  methods[1].selector = @selector(testNonOverlappingWindows);
  methods[2].selector = @selector(testSkipAndCountGaplessWindows);
  methods[3].selector = @selector(testOverlappingWindows);
  methods[4].selector = @selector(testSkipAndCountWindowsWithGaps);
  methods[5].selector = @selector(testWindowUnsubscribeNonOverlapping);
  methods[6].selector = @selector(testWindowUnsubscribeNonOverlappingAsyncSource);
  methods[7].selector = @selector(testWindowUnsubscribeOverlapping);
  methods[8].selector = @selector(testWindowUnsubscribeOverlappingAsyncSource);
  methods[9].selector = @selector(listWithNSStringArray:);
  methods[10].selector = @selector(testBackpressureOuter);
  methods[11].selector = @selector(hotStream);
  methods[12].selector = @selector(testTakeFlatMapCompletes);
  methods[13].selector = @selector(testBackpressureOuterInexact);
  methods[14].selector = @selector(testBackpressureOuterOverlap);
  methods[15].selector = @selector(testCountInvalid);
  methods[16].selector = @selector(testSkipInvalid);
  methods[17].selector = @selector(testTake1Overlapping);
  methods[18].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toLists", "LRxObservable;", "<T:Ljava/lang/Object;>(Lrx/Observable<Lrx/Observable<TT;>;>;)Ljava/util/List<Ljava/util/List<TT;>;>;", (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$2, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$3, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$4, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$5, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$6, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$7, "list", "[LNSString;", "([Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$8, "()Lrx/Observable<Ljava/lang/Integer;>;", (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$9, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$10, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$11, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$12, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$13, (void *)&RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$14 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest = { "OperatorWindowWithSizeTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 19, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest;
}

@end

id<JavaUtilList> RxInternalOperatorsOperatorWindowWithSizeTest_toListsWithRxObservable_(RxObservable *observables) {
  RxInternalOperatorsOperatorWindowWithSizeTest_initialize();
  id<JavaUtilList> lists = create_JavaUtilArrayList_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_([((RxObservable *) nil_chk(observables)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$1_init()]))) toBlocking])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(lists)];
  return lists;
}

id<JavaUtilList> RxInternalOperatorsOperatorWindowWithSizeTest_listWithNSStringArray_(RxInternalOperatorsOperatorWindowWithSizeTest *self, IOSObjectArray *args) {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      [list addWithId:arg];
    }
  }
  return list;
}

RxObservable *RxInternalOperatorsOperatorWindowWithSizeTest_hotStream() {
  RxInternalOperatorsOperatorWindowWithSizeTest_initialize();
  return [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorWindowWithSizeTest_$8_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
}

void RxInternalOperatorsOperatorWindowWithSizeTest_init(RxInternalOperatorsOperatorWindowWithSizeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest *new_RxInternalOperatorsOperatorWindowWithSizeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest, init)
}

RxInternalOperatorsOperatorWindowWithSizeTest *create_RxInternalOperatorsOperatorWindowWithSizeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitIgnore(@"Requires #3678"), create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithSizeTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorWindowWithSizeTest)

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$1

- (RxObservable *)callWithId:(RxObservable *)xs {
  return [((RxObservable *) nil_chk(xs)) toList];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithSizeTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<TT;>;)Lrx/Observable<Ljava/util/List<TT;>;>;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "toListsWithRxObservable:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<TT;>;Lrx/Observable<Ljava/util/List<TT;>;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$1;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$1_init(RxInternalOperatorsOperatorWindowWithSizeTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$1 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$1, init)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$1 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$1, init)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$2

- (void)callWithId:(id<JavaUtilList>)xs {
  [((id<JavaUtilList>) nil_chk(val$lists_)) addWithId:xs];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lists_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lists_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "(Ljava/util/List<Ljava/util/List<TT;>;>;)V", "Ljava/util/List<Ljava/util/List<TT;>;>;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "toListsWithRxObservable:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$2;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(RxInternalOperatorsOperatorWindowWithSizeTest_$2 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$lists_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$2 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$2, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$2 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$2, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$3

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testWindowUnsubscribeNonOverlapping", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$3;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$3 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$3 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$4

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testWindowUnsubscribeNonOverlappingAsyncSource", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$4;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$4 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$4 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$5

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testWindowUnsubscribeOverlapping", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$5;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$5 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$5 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$6

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testWindowUnsubscribeOverlappingAsyncSource", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$6;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorWindowWithSizeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$6 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$6 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$7

- (void)onStart {
  [self requestWithLong:1];
}

- (void)onNextWithId:(RxObservable *)t {
  [((RxObservable *) nil_chk(t)) subscribeWithRxObserver:create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(self)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorWindowWithSizeTest_$7 class]);
  RELEASE_(val$list_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(initWithJavaUtilList:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "onError", "LNSException;", "LJavaUtilList;LRxObserver;", "(Ljava/util/List<Ljava/lang/Integer;>;Lrx/Observer<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "Lrx/Observer<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testBackpressureOuter", "Lrx/Subscriber<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$7;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$o_, capture$1);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$7 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$7, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$7 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$7, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<JavaUtilList>) nil_chk(this$0_->val$list_)) addWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(this$0_->val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(this$0_->val$o_)) onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7:(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *)outer$ {
  RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorWindowWithSizeTest_$7;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LRxInternalOperatorsOperatorWindowWithSizeTest_$7;", "onNextWithId:", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *self, RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1, initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_, outer$)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1_initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_(RxInternalOperatorsOperatorWindowWithSizeTest_$7 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$7_$1, initWithRxInternalOperatorsOperatorWindowWithSizeTest_$7_, outer$)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$8

- (void)callWithId:(RxSubscriber *)s {
  while (![((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    for (jint i = 0; i < JavaLangMath_random() * 20; i++) {
      [s onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
    @try {
      JavaLangThread_sleepWithLong_(JreFpToLong((JavaLangMath_random() * 200)));
    }
    @catch (JavaLangException *e) {
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Hot done."];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithSizeTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "hotStream", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$8;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$8_init(RxInternalOperatorsOperatorWindowWithSizeTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$8 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$8, init)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$8 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$8, init)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$9

- (RxObservable *)callWithId:(RxObservable *)w {
  return [((RxObservable *) nil_chk(w)) startWithWithId:JavaLangInteger_valueOfWithInt_(999999999)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithSizeTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testTakeFlatMapCompletes", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$9;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$9_init(RxInternalOperatorsOperatorWindowWithSizeTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$9 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$9, init)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$9 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$9, init)
}

@implementation RxInternalOperatorsOperatorWindowWithSizeTest_$10

- (RxObservable *)callWithId:(RxObservable *)t {
  return [((RxObservable *) nil_chk(t)) toList];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithSizeTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/util/List<Ljava/lang/Integer;>;>;", "LRxInternalOperatorsOperatorWindowWithSizeTest;", "testBackpressureOuterInexact", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/util/List<Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithSizeTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithSizeTest_$10;
}

@end

void RxInternalOperatorsOperatorWindowWithSizeTest_$10_init(RxInternalOperatorsOperatorWindowWithSizeTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithSizeTest_$10 *new_RxInternalOperatorsOperatorWindowWithSizeTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$10, init)
}

RxInternalOperatorsOperatorWindowWithSizeTest_$10 *create_RxInternalOperatorsOperatorWindowWithSizeTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithSizeTest_$10, init)
}
