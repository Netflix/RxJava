//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeDeferTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc0.h"
#include "RxInternalOperatorsOnSubscribeDeferTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscription.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDeferTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDeferTest__Annotations$1();

@implementation RxInternalOperatorsOnSubscribeDeferTest

- (void)testDefer {
  id<RxFunctionsFunc0> factory = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc0_class_());
  RxObservable *firstObservable = RxObservable_justWithId_withId_(@"one", @"two");
  RxObservable *secondObservable = RxObservable_justWithId_withId_(@"three", @"four");
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<RxFunctionsFunc0>) nil_chk(factory)) call]))) thenReturnWithId:firstObservable withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ secondObservable } count:1 type:RxObservable_class_()]];
  RxObservable *deferred = RxObservable_deferWithRxFunctionsFunc0_(factory);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ factory } count:1 type:NSObject_class_()]);
  id<RxObserver> firstObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(deferred)) subscribeWithRxObserver:firstObserver];
  [((id<RxFunctionsFunc0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(factory, OrgMockitoMockito_timesWithInt_(1)))) call];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(firstObserver, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(firstObserver, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(firstObserver, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(firstObserver, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(firstObserver, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  id<RxObserver> secondObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [deferred subscribeWithRxObserver:secondObserver];
  [((id<RxFunctionsFunc0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(factory, OrgMockitoMockito_timesWithInt_(2)))) call];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(secondObserver, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(secondObserver, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(secondObserver, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(secondObserver, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(secondObserver, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testDeferFunctionThrows {
  id<RxFunctionsFunc0> factory = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc0_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<RxFunctionsFunc0>) nil_chk(factory)) call]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RxExceptionsTestException_init() } count:1 type:NSException_class_()]];
  RxObservable *result = RxObservable_deferWithRxFunctionsFunc0_(factory);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDeferTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testDefer);
  methods[1].selector = @selector(testDeferFunctionThrows);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSException;", (void *)&RxInternalOperatorsOnSubscribeDeferTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeDeferTest__Annotations$1 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDeferTest = { "OnSubscribeDeferTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDeferTest;
}

@end

void RxInternalOperatorsOnSubscribeDeferTest_init(RxInternalOperatorsOnSubscribeDeferTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDeferTest *new_RxInternalOperatorsOnSubscribeDeferTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDeferTest, init)
}

RxInternalOperatorsOnSubscribeDeferTest *create_RxInternalOperatorsOnSubscribeDeferTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDeferTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDeferTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDeferTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeDeferTest)
