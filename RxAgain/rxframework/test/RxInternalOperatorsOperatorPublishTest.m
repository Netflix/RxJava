//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorPublishTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorPublish.h"
#include "RxInternalOperatorsOperatorPublishTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$12();

@interface RxInternalOperatorsOperatorPublishTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$1, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$1 *new_RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$1 *create_RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorPublishTest_$1 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorPublishTest_$1:(RxInternalOperatorsOperatorPublishTest_$1 *)outer$
                                                 withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$1_$1, this$0_, RxInternalOperatorsOperatorPublishTest_$1 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$1_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1_$1 *self, RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$1_$1 *new_RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$1_$1 *create_RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorPublishTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$2 *new_RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$2 *create_RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$3, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorPublishTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$3 *new_RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$3 *create_RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$4 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$4_init(RxInternalOperatorsOperatorPublishTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$4 *new_RxInternalOperatorsOperatorPublishTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$4 *create_RxInternalOperatorsOperatorPublishTest_$4_init();

@interface RxInternalOperatorsOperatorPublishTest_$5 : NSObject < RxFunctionsFunc1 > {
 @public
  jint c_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$5_init(RxInternalOperatorsOperatorPublishTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$5 *new_RxInternalOperatorsOperatorPublishTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$5 *create_RxInternalOperatorsOperatorPublishTest_$5_init();

@interface RxInternalOperatorsOperatorPublishTest_$6 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$6_init(RxInternalOperatorsOperatorPublishTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$6 *new_RxInternalOperatorsOperatorPublishTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$6 *create_RxInternalOperatorsOperatorPublishTest_$6_init();

@interface RxInternalOperatorsOperatorPublishTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$emitted_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$7, val$emitted_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$7 *new_RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$7 *create_RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$8 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)xs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$8_init(RxInternalOperatorsOperatorPublishTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$8 *new_RxInternalOperatorsOperatorPublishTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$8 *create_RxInternalOperatorsOperatorPublishTest_$8_init();

@interface RxInternalOperatorsOperatorPublishTest_$8_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$8_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$8_$1_init(RxInternalOperatorsOperatorPublishTest_$8_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$8_$1 *new_RxInternalOperatorsOperatorPublishTest_$8_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$8_$1 *create_RxInternalOperatorsOperatorPublishTest_$8_$1_init();

@interface RxInternalOperatorsOperatorPublishTest_$9 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$9_init(RxInternalOperatorsOperatorPublishTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$9 *new_RxInternalOperatorsOperatorPublishTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$9 *create_RxInternalOperatorsOperatorPublishTest_$9_init();

@interface RxInternalOperatorsOperatorPublishTest_$10 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$sourceEmission_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$10, val$sourceEmission_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$10 *new_RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$10 *create_RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$11 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$sourceUnsubscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$11, val$sourceUnsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorPublishTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$11 *new_RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$11 *create_RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$12 : RxObserversTestSubscriber {
 @public
  RxObservable *val$source_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$child2Unsubscribed_;
  RxObserversTestSubscriber *val$ts2_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxObservable:(RxObservable *)capture$0
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
       withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$12, val$source_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$12, val$child2Unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$12, val$ts2_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorPublishTest_$12 *self, RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$12 *new_RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$12 *create_RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2);

@interface RxInternalOperatorsOperatorPublishTest_$12_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorPublishTest_$12 *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOperatorPublishTest_$12:(RxInternalOperatorsOperatorPublishTest_$12 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$12_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$12_$1, this$0_, RxInternalOperatorsOperatorPublishTest_$12 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12_$1 *self, RxInternalOperatorsOperatorPublishTest_$12 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$12_$1 *new_RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$12_$1 *create_RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12 *outer$);

@interface RxInternalOperatorsOperatorPublishTest_$13 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$child1Unsubscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$13, val$child1Unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorPublishTest_$13 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$13 *new_RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$13 *create_RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorPublishTest_$14 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$14_init(RxInternalOperatorsOperatorPublishTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$14 *new_RxInternalOperatorsOperatorPublishTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$14 *create_RxInternalOperatorsOperatorPublishTest_$14_init();

@interface RxInternalOperatorsOperatorPublishTest_$15 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishTest_$15, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$15 *new_RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishTest_$15 *create_RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxInternalOperatorsOperatorPublishTest

- (void)testPublish {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservablesConnectableObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)))) publish];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  [((RxObservablesConnectableObservable *) nil_chk(o)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  [o subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(latch)];
  id<RxSubscription> s = [o connect];
  @try {
    if (![latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
      OrgJunitAssert_failWithNSString_(@"subscriptions did not receive values");
    }
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
  }
  @finally {
    [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  }
}

- (void)testBackpressureFastSlow {
  RxObservablesConnectableObservable *is = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2))) publish];
  RxObservable *fast = [((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk(is)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) doOnCompletedWithRxFunctionsAction0:create_RxInternalOperatorsOperatorPublishTest_$4_init()];
  RxObservable *slow = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([is observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishTest_$5_init()])) doOnCompletedWithRxFunctionsAction0:create_RxInternalOperatorsOperatorPublishTest_$6_init()];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(fast, slow))) subscribeWithRxSubscriber:ts];
  [is connect];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testTakeUntilWithPublishedStreamUsingSelector {
  JavaUtilConcurrentAtomicAtomicInteger *emitted = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *xs = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(emitted)];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(xs)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishTest_$8_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:4 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [emitted get]);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts getOnNextEvents]];
}

- (void)testTakeUntilWithPublishedStream {
  RxObservable *xs = RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservablesConnectableObservable *xsp = [((RxObservable *) nil_chk(xs)) publish];
  [((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk(xsp)) takeUntilWithRxObservable:[xsp skipWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishTest_$9_init()]])) subscribeWithRxSubscriber:ts];
  [xsp connect];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts getOnNextEvents]];
}

- (void)testBackpressureTwoConsumers {
  JavaUtilConcurrentAtomicAtomicInteger *sourceEmission = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicBoolean *sourceUnsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(sourceEmission)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(sourceUnsubscribed)])) share];
  JavaUtilConcurrentAtomicAtomicBoolean *child1Unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *child2Unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *ts1 = create_RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(source, child2Unsubscribed, ts2);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(child1Unsubscribed)])) takeWithInt:5])) subscribeWithRxSubscriber:ts1];
  [ts1 awaitTerminalEvent];
  [ts2 awaitTerminalEvent];
  [ts1 assertNoErrors];
  [ts2 assertNoErrors];
  OrgJunitAssert_assertTrueWithBoolean_([sourceUnsubscribed get]);
  OrgJunitAssert_assertTrueWithBoolean_([child1Unsubscribed get]);
  OrgJunitAssert_assertTrueWithBoolean_([child2Unsubscribed get]);
  [ts1 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()])];
  [ts2 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8) } count:5 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(8, [sourceEmission get]);
}

- (void)testConnectWithNoSubscriber {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(10, 10, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), scheduler))) takeWithInt:3])) publish];
  [((RxObservablesConnectableObservable *) nil_chk(co)) connect];
  [scheduler advanceTimeByWithLong:15 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
  [co subscribeWithRxSubscriber:subscriber];
  [scheduler advanceTimeByWithLong:50 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [subscriber assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(1LL), JavaLangLong_valueOfWithLong_(2LL) } count:2 type:JavaLangLong_class_()])];
  [subscriber assertNoErrors];
  [subscriber assertTerminalEvent];
}

- (void)testSubscribeAfterDisconnectThenConnect {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) publish];
  RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
  [((RxObservablesConnectableObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts1];
  id<RxSubscription> s = [source connect];
  [ts1 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts1 assertNoErrors];
  [ts1 assertTerminalEvent];
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  [source subscribeWithRxSubscriber:ts2];
  id<RxSubscription> s2 = [source connect];
  [ts2 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts2 assertNoErrors];
  [ts2 assertTerminalEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:s];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:s2];
}

- (void)testNoSubscriberRetentionOnCompleted {
  RxInternalOperatorsOperatorPublish *source = (RxInternalOperatorsOperatorPublish *) cast_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) publish], [RxInternalOperatorsOperatorPublish class]);
  RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
  [((RxInternalOperatorsOperatorPublish *) nil_chk(source)) unsafeSubscribeWithRxSubscriber:ts1];
  [ts1 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()])];
  [ts1 assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts1 getCompletions]);
  [source connect];
  [ts1 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts1 assertNoErrors];
  [ts1 assertTerminalEvent];
  OrgJunitAssert_assertNullWithId_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(source->current_)) get]);
}

- (void)testNonNullConnection {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_never())) publish];
  OrgJunitAssert_assertNotNullWithId_([((RxObservablesConnectableObservable *) nil_chk(source)) connect]);
  OrgJunitAssert_assertNotNullWithId_([source connect]);
}

- (void)testNoDisconnectSomeoneElse {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_never())) publish];
  id<RxSubscription> s1 = [((RxObservablesConnectableObservable *) nil_chk(source)) connect];
  id<RxSubscription> s2 = [source connect];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  id<RxSubscription> s3 = [source connect];
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([s1 isUnsubscribed]);
  OrgJunitAssert_assertTrueWithBoolean_([s2 isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(s3)) isUnsubscribed]);
}

- (void)testZeroRequested {
  RxObservablesConnectableObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) publish];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorPublishTest_$14_init();
  [((RxObservablesConnectableObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  [source connect];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  [ts requestMoreWithLong:5];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
}

- (void)testConnectIsIdempotent {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls));
  RxObservablesConnectableObservable *conn = [((RxObservable *) nil_chk(source)) publish];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
  [((RxObservablesConnectableObservable *) nil_chk(conn)) connect];
  [conn connect];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calls get]);
  [((id<RxSubscription>) nil_chk([conn connect])) unsubscribe];
  [conn connect];
  [conn connect];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [calls get]);
}

- (void)testObserveOn {
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) publish];
  RxObservable *obs = [((RxObservablesConnectableObservable *) nil_chk(co)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  for (jint i = 0; i < 1000; i++) {
    @autoreleasepool {
      for (jint j = 1; j < 3; j++) {
        id<JavaUtilList> tss = create_JavaUtilArrayList_init();
        for (jint k = 1; k < j; k++) {
          RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
          [tss addWithId:ts];
          [((RxObservable *) nil_chk(obs)) subscribeWithRxSubscriber:ts];
        }
        id<RxSubscription> s = [co connect];
        for (RxObserversTestSubscriber * __strong ts in tss) {
          [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:4 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
          [ts assertTerminalEvent];
          [ts assertNoErrors];
          OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
        }
        [((id<RxSubscription>) nil_chk(s)) unsubscribe];
      }
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testPublish);
  methods[1].selector = @selector(testBackpressureFastSlow);
  methods[2].selector = @selector(testTakeUntilWithPublishedStreamUsingSelector);
  methods[3].selector = @selector(testTakeUntilWithPublishedStream);
  methods[4].selector = @selector(testBackpressureTwoConsumers);
  methods[5].selector = @selector(testConnectWithNoSubscriber);
  methods[6].selector = @selector(testSubscribeAfterDisconnectThenConnect);
  methods[7].selector = @selector(testNoSubscriberRetentionOnCompleted);
  methods[8].selector = @selector(testNonNullConnection);
  methods[9].selector = @selector(testNoDisconnectSomeoneElse);
  methods[10].selector = @selector(testZeroRequested);
  methods[11].selector = @selector(testConnectIsIdempotent);
  methods[12].selector = @selector(testObserveOn);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$0, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$1, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$2, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$3, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$4, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$5, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$6, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$7, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$8, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$9, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$10, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$11, (void *)&RxInternalOperatorsOperatorPublishTest__Annotations$12 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest = { "OperatorPublishTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 14, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest;
}

@end

void RxInternalOperatorsOperatorPublishTest_init(RxInternalOperatorsOperatorPublishTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest *new_RxInternalOperatorsOperatorPublishTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest, init)
}

RxInternalOperatorsOperatorPublishTest *create_RxInternalOperatorsOperatorPublishTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorPublishTest)

@implementation RxInternalOperatorsOperatorPublishTest_$1

- (void)callWithId:(RxSubscriber *)observer {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(self, observer)) start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testPublish", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$1;
}

@end

void RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$1 *new_RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$1 *create_RxInternalOperatorsOperatorPublishTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$1_$1

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:@"one"];
  [val$observer_ onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorPublishTest_$1:(RxInternalOperatorsOperatorPublishTest_$1 *)outer$
                                                 withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorPublishTest_$1:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorPublishTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublishTest_$1;LRxSubscriber;", "(Lrx/internal/operators/OperatorPublishTest$1;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorPublishTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$1_$1;
}

@end

void RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1_$1 *self, RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$1_$1 *new_RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$1_$1, initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$1_$1 *create_RxInternalOperatorsOperatorPublishTest_$1_$1_initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_(RxInternalOperatorsOperatorPublishTest_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$1_$1, initWithRxInternalOperatorsOperatorPublishTest_$1_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$2

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorPublishTest;", "testPublish", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$2;
}

@end

void RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorPublishTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$2 *new_RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$2 *create_RxInternalOperatorsOperatorPublishTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$3

- (void)callWithId:(NSString *)v {
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorPublishTest;", "testPublish", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$3;
}

@end

void RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorPublishTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$3 *new_RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$3 *create_RxInternalOperatorsOperatorPublishTest_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$4

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"^^^^^^^^^^^^^ completed FAST"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureFastSlow" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$4;
}

@end

void RxInternalOperatorsOperatorPublishTest_$4_init(RxInternalOperatorsOperatorPublishTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$4 *new_RxInternalOperatorsOperatorPublishTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$4, init)
}

RxInternalOperatorsOperatorPublishTest_$4 *create_RxInternalOperatorsOperatorPublishTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$4, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$5

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i {
  if (c_ == 0) {
    @try {
      JavaLangThread_sleepWithLong_(500);
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  c_++;
  return i;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureFastSlow", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$5;
}

@end

void RxInternalOperatorsOperatorPublishTest_$5_init(RxInternalOperatorsOperatorPublishTest_$5 *self) {
  NSObject_init(self);
  self->c_ = 0;
}

RxInternalOperatorsOperatorPublishTest_$5 *new_RxInternalOperatorsOperatorPublishTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$5, init)
}

RxInternalOperatorsOperatorPublishTest_$5 *create_RxInternalOperatorsOperatorPublishTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$5, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$6

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"^^^^^^^^^^^^^ completed SLOW"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureFastSlow" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$6;
}

@end

void RxInternalOperatorsOperatorPublishTest_$6_init(RxInternalOperatorsOperatorPublishTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$6 *new_RxInternalOperatorsOperatorPublishTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$6, init)
}

RxInternalOperatorsOperatorPublishTest_$6 *create_RxInternalOperatorsOperatorPublishTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$6, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$7

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$emitted_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$emitted_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$emitted_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testTakeUntilWithPublishedStreamUsingSelector", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$7;
}

@end

void RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$emitted_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$7 *new_RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$7 *create_RxInternalOperatorsOperatorPublishTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$8

- (RxObservable *)callWithId:(RxObservable *)xs {
  return [((RxObservable *) nil_chk(xs)) takeUntilWithRxObservable:[xs skipWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishTest_$8_$1_init()]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishTest;", "testTakeUntilWithPublishedStreamUsingSelector", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$8;
}

@end

void RxInternalOperatorsOperatorPublishTest_$8_init(RxInternalOperatorsOperatorPublishTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$8 *new_RxInternalOperatorsOperatorPublishTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$8, init)
}

RxInternalOperatorsOperatorPublishTest_$8 *create_RxInternalOperatorsOperatorPublishTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$8, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$8_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(i)) intValue] <= 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$8_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorPublishTest_$8;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$8_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$8_$1;
}

@end

void RxInternalOperatorsOperatorPublishTest_$8_$1_init(RxInternalOperatorsOperatorPublishTest_$8_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$8_$1 *new_RxInternalOperatorsOperatorPublishTest_$8_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$8_$1, init)
}

RxInternalOperatorsOperatorPublishTest_$8_$1 *create_RxInternalOperatorsOperatorPublishTest_$8_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$8_$1, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$9

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(i)) intValue] <= 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testTakeUntilWithPublishedStream", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$9;
}

@end

void RxInternalOperatorsOperatorPublishTest_$9_init(RxInternalOperatorsOperatorPublishTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$9 *new_RxInternalOperatorsOperatorPublishTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$9, init)
}

RxInternalOperatorsOperatorPublishTest_$9 *create_RxInternalOperatorsOperatorPublishTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$9, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$10

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$sourceEmission_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sourceEmission_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sourceEmission_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureTwoConsumers", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$10;
}

@end

void RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$sourceEmission_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$10 *new_RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$10 *create_RxInternalOperatorsOperatorPublishTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$11

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$sourceUnsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sourceUnsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sourceUnsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureTwoConsumers" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$11;
}

@end

void RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorPublishTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$sourceUnsubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$11 *new_RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$11 *create_RxInternalOperatorsOperatorPublishTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$12

- (void)onNextWithId:(JavaLangInteger *)t {
  if ([((id<JavaUtilList>) nil_chk([self getOnNextEvents])) size] == 2) {
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(val$source_)) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(self)])) takeWithInt:5])) subscribeWithRxSubscriber:val$ts2_];
  }
  [super onNextWithId:t];
}

- (instancetype)initWithRxObservable:(RxObservable *)capture$0
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
       withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$2 {
  RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$source_);
  RELEASE_(val$child2Unsubscribed_);
  RELEASE_(val$ts2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithRxObservable:withJavaUtilConcurrentAtomicAtomicBoolean:withRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$source_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$child2Unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ts2_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxObservable;LJavaUtilConcurrentAtomicAtomicBoolean;LRxObserversTestSubscriber;", "(Lrx/Observable<Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/Observable<Ljava/lang/Integer;>;", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureTwoConsumers" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 7, -1, 8, 6, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$12;
}

@end

void RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorPublishTest_$12 *self, RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2) {
  JreStrongAssign(&self->val$source_, capture$0);
  JreStrongAssign(&self->val$child2Unsubscribed_, capture$1);
  JreStrongAssign(&self->val$ts2_, capture$2);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorPublishTest_$12 *new_RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$12, initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorPublishTest_$12 *create_RxInternalOperatorsOperatorPublishTest_$12_initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxObservable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, RxObserversTestSubscriber *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$12, initWithRxObservable_withJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorPublishTest_$12_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$child2Unsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithRxInternalOperatorsOperatorPublishTest_$12:(RxInternalOperatorsOperatorPublishTest_$12 *)outer$ {
  RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorPublishTest_$12:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorPublishTest_$12;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublishTest_$12;", "onNextWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$12_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$12_$1;
}

@end

void RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12_$1 *self, RxInternalOperatorsOperatorPublishTest_$12 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$12_$1 *new_RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$12_$1, initWithRxInternalOperatorsOperatorPublishTest_$12_, outer$)
}

RxInternalOperatorsOperatorPublishTest_$12_$1 *create_RxInternalOperatorsOperatorPublishTest_$12_$1_initWithRxInternalOperatorsOperatorPublishTest_$12_(RxInternalOperatorsOperatorPublishTest_$12 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$12_$1, initWithRxInternalOperatorsOperatorPublishTest_$12_, outer$)
}

@implementation RxInternalOperatorsOperatorPublishTest_$13

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$child1Unsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$child1Unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$child1Unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorPublishTest;", "testBackpressureTwoConsumers" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$13;
}

@end

void RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorPublishTest_$13 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$child1Unsubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$13 *new_RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$13, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$13 *create_RxInternalOperatorsOperatorPublishTest_$13_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$13, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishTest_$14

- (void)onStart {
  [self requestWithLong:0];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorPublishTest;", "testZeroRequested", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$14;
}

@end

void RxInternalOperatorsOperatorPublishTest_$14_init(RxInternalOperatorsOperatorPublishTest_$14 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorPublishTest_$14 *new_RxInternalOperatorsOperatorPublishTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$14, init)
}

RxInternalOperatorsOperatorPublishTest_$14 *create_RxInternalOperatorsOperatorPublishTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$14, init)
}

@implementation RxInternalOperatorsOperatorPublishTest_$15

- (void)callWithId:(RxSubscriber *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorPublishTest;", "testConnectIsIdempotent", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorPublishTest_$15;
}

@end

void RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishTest_$15 *new_RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorPublishTest_$15 *create_RxInternalOperatorsOperatorPublishTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
