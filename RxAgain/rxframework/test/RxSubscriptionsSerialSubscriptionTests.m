//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subscriptions/SerialSubscriptionTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSerialSubscription.h"
#include "RxSubscriptionsSerialSubscriptionTests.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

@interface RxSubscriptionsSerialSubscriptionTests () {
 @public
  RxSubscriptionsSerialSubscription *serialSubscription_;
}

@end

J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests, serialSubscription_, RxSubscriptionsSerialSubscription *)

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$10();

@interface RxSubscriptionsSerialSubscriptionTests_$1 : JavaLangThread {
 @public
  RxSubscriptionsSerialSubscriptionTests *this$0_;
  JavaUtilConcurrentCountDownLatch *val$start_;
  JavaUtilConcurrentCountDownLatch *val$end_;
}

- (void)run;

- (instancetype)initWithRxSubscriptionsSerialSubscriptionTests:(RxSubscriptionsSerialSubscriptionTests *)outer$
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsSerialSubscriptionTests_$1)

J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$1, this$0_, RxSubscriptionsSerialSubscriptionTests *)
J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$1, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$1, val$end_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests_$1 *self, RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSubscriptionsSerialSubscriptionTests_$1 *new_RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsSerialSubscriptionTests_$1 *create_RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSubscriptionsSerialSubscriptionTests_$2 : JavaLangThread {
 @public
  RxSubscriptionsSerialSubscriptionTests *this$0_;
  JavaUtilConcurrentCountDownLatch *val$start_;
  id<RxSubscription> val$subscription_;
  JavaUtilConcurrentCountDownLatch *val$end_;
}

- (void)run;

- (instancetype)initWithRxSubscriptionsSerialSubscriptionTests:(RxSubscriptionsSerialSubscriptionTests *)outer$
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                            withRxSubscription:(id<RxSubscription>)capture$1
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsSerialSubscriptionTests_$2)

J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$2, this$0_, RxSubscriptionsSerialSubscriptionTests *)
J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$2, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$2, val$subscription_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscriptionTests_$2, val$end_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests_$2 *self, RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSubscriptionsSerialSubscriptionTests_$2 *new_RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsSerialSubscriptionTests_$2 *create_RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@implementation RxSubscriptionsSerialSubscriptionTests

- (void)setUp {
  JreStrongAssignAndConsume(&serialSubscription_, new_RxSubscriptionsSerialSubscription_init());
}

- (void)unsubscribingWithoutUnderlyingDoesNothing {
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
}

- (void)getSubscriptionShouldReturnSet {
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  OrgJunitAssert_assertSameWithId_withId_(underlying, [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) get]);
  id<RxSubscription> another = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:another];
  OrgJunitAssert_assertSameWithId_withId_(another, [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) get]);
}

- (void)unsubscribingTwiceDoesUnsubscribeOnce {
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ underlying } count:1 type:NSObject_class_()]);
}

- (void)settingSameSubscriptionTwiceDoesUnsubscribeIt {
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ underlying } count:1 type:NSObject_class_()]);
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
}

- (void)unsubscribingWithSingleUnderlyingUnsubscribes {
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  [((id<RxSubscription>) nil_chk(underlying)) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
}

- (void)replacingFirstUnderlyingCausesUnsubscription {
  id<RxSubscription> first = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:first];
  id<RxSubscription> second = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:second];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(first))) unsubscribe];
}

- (void)whenUnsubscribingSecondUnderlyingUnsubscribed {
  id<RxSubscription> first = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:first];
  id<RxSubscription> second = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:second];
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(second))) unsubscribe];
}

- (void)settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription {
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
}

- (void)settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscriptionConcurrently {
  id<RxSubscription> firstSet = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:firstSet];
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *end = create_JavaUtilConcurrentCountDownLatch_initWithInt_(count);
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, start, end);
    [t start];
    [threads addWithId:t];
  }
  id<RxSubscription> underlying = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  [start countDown];
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) setWithRxSubscription:underlying];
  [end await];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(firstSet))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(underlying))) unsubscribe];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
}

- (void)concurrentSetSubscriptionShouldNotInterleave {
  jint count = 10;
  id<JavaUtilList> subscriptions = create_JavaUtilArrayList_init();
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *end = create_JavaUtilConcurrentCountDownLatch_initWithInt_(count);
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    id<RxSubscription> subscription = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
    [subscriptions addWithId:subscription];
    JavaLangThread *t = create_RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(self, start, subscription, end);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  [end await];
  [((RxSubscriptionsSerialSubscription *) nil_chk(serialSubscription_)) unsubscribe];
  for (id<RxSubscription> __strong subscription in subscriptions) {
    [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(subscription))) unsubscribe];
  }
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsSerialSubscriptionTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(serialSubscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 11, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(unsubscribingWithoutUnderlyingDoesNothing);
  methods[2].selector = @selector(getSubscriptionShouldReturnSet);
  methods[3].selector = @selector(unsubscribingTwiceDoesUnsubscribeOnce);
  methods[4].selector = @selector(settingSameSubscriptionTwiceDoesUnsubscribeIt);
  methods[5].selector = @selector(unsubscribingWithSingleUnderlyingUnsubscribes);
  methods[6].selector = @selector(replacingFirstUnderlyingCausesUnsubscription);
  methods[7].selector = @selector(whenUnsubscribingSecondUnderlyingUnsubscribed);
  methods[8].selector = @selector(settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription);
  methods[9].selector = @selector(settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscriptionConcurrently);
  methods[10].selector = @selector(concurrentSetSubscriptionShouldNotInterleave);
  methods[11].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialSubscription_", "LRxSubscriptionsSerialSubscription;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$0, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$1, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$2, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$3, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$4, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$5, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$6, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$7, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$8, "LJavaLangInterruptedException;", (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$9, (void *)&RxSubscriptionsSerialSubscriptionTests__Annotations$10 };
  static const J2ObjcClassInfo _RxSubscriptionsSerialSubscriptionTests = { "SerialSubscriptionTests", "rx.subscriptions", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsSerialSubscriptionTests;
}

@end

void RxSubscriptionsSerialSubscriptionTests_init(RxSubscriptionsSerialSubscriptionTests *self) {
  NSObject_init(self);
}

RxSubscriptionsSerialSubscriptionTests *new_RxSubscriptionsSerialSubscriptionTests_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsSerialSubscriptionTests, init)
}

RxSubscriptionsSerialSubscriptionTests *create_RxSubscriptionsSerialSubscriptionTests_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSerialSubscriptionTests, init)
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSerialSubscriptionTests__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsSerialSubscriptionTests)

@implementation RxSubscriptionsSerialSubscriptionTests_$1

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxSubscriptionsSerialSubscription *) nil_chk(this$0_->serialSubscription_)) unsubscribe];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$end_)) countDown];
  }
}

- (instancetype)initWithRxSubscriptionsSerialSubscriptionTests:(RxSubscriptionsSerialSubscriptionTests *)outer$
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$start_);
  RELEASE_(val$end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubscriptionsSerialSubscriptionTests:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriptionsSerialSubscriptionTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$end_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsSerialSubscriptionTests;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxSubscriptionsSerialSubscriptionTests;", "settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscriptionConcurrently" };
  static const J2ObjcClassInfo _RxSubscriptionsSerialSubscriptionTests_$1 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsSerialSubscriptionTests_$1;
}

@end

void RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests_$1 *self, RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$end_, capture$1);
  JavaLangThread_init(self);
}

RxSubscriptionsSerialSubscriptionTests_$1 *new_RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSubscriptionsSerialSubscriptionTests_$1, initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1)
}

RxSubscriptionsSerialSubscriptionTests_$1 *create_RxSubscriptionsSerialSubscriptionTests_$1_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSerialSubscriptionTests_$1, initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1)
}

@implementation RxSubscriptionsSerialSubscriptionTests_$2

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxSubscriptionsSerialSubscription *) nil_chk(this$0_->serialSubscription_)) setWithRxSubscription:val$subscription_];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$end_)) countDown];
  }
}

- (instancetype)initWithRxSubscriptionsSerialSubscriptionTests:(RxSubscriptionsSerialSubscriptionTests *)outer$
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                            withRxSubscription:(id<RxSubscription>)capture$1
                          withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$start_);
  RELEASE_(val$subscription_);
  RELEASE_(val$end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubscriptionsSerialSubscriptionTests:withJavaUtilConcurrentCountDownLatch:withRxSubscription:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriptionsSerialSubscriptionTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscription_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$end_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsSerialSubscriptionTests;LJavaUtilConcurrentCountDownLatch;LRxSubscription;LJavaUtilConcurrentCountDownLatch;", "LRxSubscriptionsSerialSubscriptionTests;", "concurrentSetSubscriptionShouldNotInterleave" };
  static const J2ObjcClassInfo _RxSubscriptionsSerialSubscriptionTests_$2 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsSerialSubscriptionTests_$2;
}

@end

void RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests_$2 *self, RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$subscription_, capture$1);
  JreStrongAssign(&self->val$end_, capture$2);
  JavaLangThread_init(self);
}

RxSubscriptionsSerialSubscriptionTests_$2 *new_RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSubscriptionsSerialSubscriptionTests_$2, initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}

RxSubscriptionsSerialSubscriptionTests_$2 *create_RxSubscriptionsSerialSubscriptionTests_$2_initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsSerialSubscriptionTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSerialSubscriptionTests_$2, initWithRxSubscriptionsSerialSubscriptionTests_withJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0, capture$1, capture$2)
}
