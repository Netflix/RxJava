//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/plugins/RxJavaPluginsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxPluginsRxJavaCompletableExecutionHook.h"
#include "RxPluginsRxJavaErrorHandler.h"
#include "RxPluginsRxJavaObservableExecutionHook.h"
#include "RxPluginsRxJavaObservableExecutionHookDefault.h"
#include "RxPluginsRxJavaPlugins.h"
#include "RxPluginsRxJavaPluginsTest.h"
#include "RxPluginsRxJavaSingleExecutionHook.h"
#include "RxSingle.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

@interface RxPluginsRxJavaPluginsTest ()

+ (NSString *)getFullClassNameForTestClassWithIOSClass:(IOSClass *)cls;

@end

__attribute__((unused)) static NSString *RxPluginsRxJavaPluginsTest_getFullClassNameForTestClassWithIOSClass_(IOSClass *cls);

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$19();

@interface RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl () {
 @public
  volatile_id e_;
  volatile_jint count_;
}

@end

J2OBJC_VOLATILE_FIELD_SETTER(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl, e_, NSException *)

@interface RxPluginsRxJavaPluginsTest_$1 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPluginsTest_$1)

__attribute__((unused)) static void RxPluginsRxJavaPluginsTest_$1_init(RxPluginsRxJavaPluginsTest_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$1 *new_RxPluginsRxJavaPluginsTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$1 *create_RxPluginsRxJavaPluginsTest_$1_init();

@interface RxPluginsRxJavaPluginsTest_$2 : NSObject < RxFunctionsFunc1 >

- (JavaUtilDate *)callWithId:(JavaUtilDate *)date;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPluginsTest_$2)

__attribute__((unused)) static void RxPluginsRxJavaPluginsTest_$2_init(RxPluginsRxJavaPluginsTest_$2 *self);

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$2 *new_RxPluginsRxJavaPluginsTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$2 *create_RxPluginsRxJavaPluginsTest_$2_init();

@interface RxPluginsRxJavaPluginsTest_$3 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPluginsTest_$3)

__attribute__((unused)) static void RxPluginsRxJavaPluginsTest_$3_init(RxPluginsRxJavaPluginsTest_$3 *self);

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$3 *new_RxPluginsRxJavaPluginsTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$3 *create_RxPluginsRxJavaPluginsTest_$3_init();

@interface RxPluginsRxJavaPluginsTest_$4 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaPluginsTest_$4)

__attribute__((unused)) static void RxPluginsRxJavaPluginsTest_$4_init(RxPluginsRxJavaPluginsTest_$4 *self);

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$4 *new_RxPluginsRxJavaPluginsTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaPluginsTest_$4 *create_RxPluginsRxJavaPluginsTest_$4_init();

@implementation RxPluginsRxJavaPluginsTest

- (void)resetBefore {
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
}

- (void)resetAfter {
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
}

- (void)testErrorHandlerDefaultImpl {
  RxPluginsRxJavaErrorHandler *impl = [create_RxPluginsRxJavaPlugins_init() getErrorHandler];
  OrgJunitAssert_assertSameWithId_withId_(JreLoadStatic(RxPluginsRxJavaPlugins, DEFAULT_ERROR_HANDLER), impl);
}

- (void)testErrorHandlerViaRegisterMethod {
  RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
  [p registerErrorHandlerWithRxPluginsRxJavaErrorHandler:create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init()];
  RxPluginsRxJavaErrorHandler *impl = [p getErrorHandler];
  OrgJunitAssert_assertTrueWithBoolean_([impl isKindOfClass:[RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl class]]);
}

- (void)testErrorHandlerViaProperty {
  @try {
    RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
    NSString *fullClass = RxPluginsRxJavaPluginsTest_getFullClassNameForTestClassWithIOSClass_(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_class_());
    JavaLangSystem_setPropertyWithNSString_withNSString_(@"rxjava.plugin.RxJavaErrorHandler.implementation", fullClass);
    RxPluginsRxJavaErrorHandler *impl = [p getErrorHandler];
    OrgJunitAssert_assertTrueWithBoolean_([impl isKindOfClass:[RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl class]]);
  }
  @finally {
    JavaLangSystem_clearPropertyWithNSString_(@"rxjava.plugin.RxJavaErrorHandler.implementation");
  }
}

- (void)testObservableExecutionHookDefaultImpl {
  RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
  RxPluginsRxJavaObservableExecutionHook *impl = [p getObservableExecutionHook];
  OrgJunitAssert_assertTrueWithBoolean_([impl isKindOfClass:[RxPluginsRxJavaObservableExecutionHookDefault class]]);
}

- (void)testObservableExecutionHookViaRegisterMethod {
  RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
  [p registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:create_RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_init()];
  RxPluginsRxJavaObservableExecutionHook *impl = [p getObservableExecutionHook];
  OrgJunitAssert_assertTrueWithBoolean_([impl isKindOfClass:[RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl class]]);
}

- (void)testSingleExecutionHookViaRegisterMethod {
  RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
  RxPluginsRxJavaSingleExecutionHook *customHook = OrgMockitoMockito_mockWithIOSClass_(RxPluginsRxJavaSingleExecutionHook_class_());
  [p registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:customHook];
  RxPluginsRxJavaSingleExecutionHook *impl = [p getSingleExecutionHook];
  OrgJunitAssert_assertSameWithId_withId_(impl, customHook);
}

- (void)testObservableExecutionHookViaProperty {
  @try {
    RxPluginsRxJavaPlugins *p = create_RxPluginsRxJavaPlugins_init();
    NSString *fullClass = RxPluginsRxJavaPluginsTest_getFullClassNameForTestClassWithIOSClass_(RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_class_());
    JavaLangSystem_setPropertyWithNSString_withNSString_(@"rxjava.plugin.RxJavaObservableExecutionHook.implementation", fullClass);
    RxPluginsRxJavaObservableExecutionHook *impl = [p getObservableExecutionHook];
    OrgJunitAssert_assertTrueWithBoolean_([impl isKindOfClass:[RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl class]]);
  }
  @finally {
    JavaLangSystem_clearPropertyWithNSString_(@"rxjava.plugin.RxJavaObservableExecutionHook.implementation");
  }
}

- (void)testOnErrorWhenImplementedViaSubscribe {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"test onError");
  [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(re))) subscribeWithRxSubscriber:create_RxPluginsRxJavaPluginsTest_$1_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(re, JreLoadVolatileId(&errorHandler->e_));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, JreLoadVolatileInt(&errorHandler->count_));
}

- (void)testOnErrorWhenNotImplemented {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"test onError");
  @try {
    [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(re))) subscribe];
    OrgJunitAssert_failWithNSString_(@"should fail");
  }
  @catch (NSException *e) {
  }
  OrgJunitAssert_assertEqualsWithId_withId_(re, JreLoadVolatileId(&errorHandler->e_));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, JreLoadVolatileInt(&errorHandler->count_));
}

- (void)testOnNextValueRenderingWhenNotImplemented {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  NSString *rendering = [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleOnNextValueRenderingWithId:create_JavaUtilDate_init()];
  OrgJunitAssert_assertNullWithId_(rendering);
}

- (void)testOnNextValueRenderingWhenImplementedAndNotManaged {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  NSString *rendering = [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleOnNextValueRenderingWithId:JavaUtilCollections_emptyList()];
  OrgJunitAssert_assertNullWithId_(rendering);
}

- (void)testOnNextValueRenderingWhenImplementedAndManaged {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  jlong time = 1234LL;
  JavaUtilDate *date = create_JavaUtilDate_initWithLong_(time);
  NSString *rendering = [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleOnNextValueRenderingWithId:date];
  OrgJunitAssert_assertNotNullWithId_(rendering);
  OrgJunitAssert_assertEqualsWithId_withId_(NSString_valueOfLong_(time), rendering);
}

- (void)testOnNextValueRenderingWhenImplementedAndThrows {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  NSString *rendering = [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleOnNextValueRenderingWithId:cal];
  OrgJunitAssert_assertNotNullWithId_(rendering);
  OrgJunitAssert_assertEqualsWithId_withId_(JreStrcat("$$", [[((JavaUtilCalendar *) nil_chk(cal)) java_getClass] getName], RxPluginsRxJavaErrorHandler_ERROR_IN_RENDERING_SUFFIX), rendering);
}

- (void)testOnNextValueCallsPlugin {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  jlong time = 456LL;
  JavaUtilDate *date = create_JavaUtilDate_initWithLong_(time);
  @try {
    JavaUtilDate *notExpected = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(date))) mapWithRxFunctionsFunc1:create_RxPluginsRxJavaPluginsTest_$2_init()])) timeoutWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) toBlocking])) first];
    OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Did not expect onNext/onCompleted, got ", notExpected));
  }
  @catch (JavaLangIllegalStateException *e) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Trigger OnNextValue", [((JavaLangIllegalStateException *) nil_chk(e)) getMessage]);
    OrgJunitAssert_assertNotNullWithId_([e getCause]);
    OrgJunitAssert_assertTrueWithBoolean_([[e getCause] isKindOfClass:[RxExceptionsOnErrorThrowable_OnNextValue class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(JreStrcat("$J", @"OnError while emitting onNext value: ", time), [((NSException *) nil_chk([e getCause])) getMessage]);
  }
}

+ (NSString *)getFullClassNameForTestClassWithIOSClass:(IOSClass *)cls {
  return RxPluginsRxJavaPluginsTest_getFullClassNameForTestClassWithIOSClass_(cls);
}

- (void)testShortPluginDiscovery {
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:@"rxjava.plugin.1.class" withNSString:@"Map"];
  [props setPropertyWithNSString:@"rxjava.plugin.1.impl" withNSString:@"java.util.HashMap"];
  [props setPropertyWithNSString:@"rxjava.plugin.xyz.class" withNSString:@"List"];
  [props setPropertyWithNSString:@"rxjava.plugin.xyz.impl" withNSString:@"java.util.ArrayList"];
  id o = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(JavaUtilMap_class_(), props);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", o), [o isKindOfClass:[JavaUtilHashMap class]]);
  o = RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(JavaUtilList_class_(), props);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", o), [o isKindOfClass:[JavaUtilArrayList class]]);
}

- (void)testShortPluginDiscoveryMissing {
  JavaUtilProperties *props = create_JavaUtilProperties_init();
  [props setPropertyWithNSString:@"rxjava.plugin.1.class" withNSString:@"Map"];
  RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(JavaUtilMap_class_(), props);
}

- (void)testOnErrorWhenUsingCompletable {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"test onError");
  [((RxCompletable *) nil_chk(RxCompletable_errorWithNSException_(re))) subscribeWithRxSubscriber:create_RxPluginsRxJavaPluginsTest_$3_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(re, JreLoadVolatileId(&errorHandler->e_));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, JreLoadVolatileInt(&errorHandler->count_));
}

- (void)testOnErrorWhenUsingSingle {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *errorHandler = create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerErrorHandlerWithRxPluginsRxJavaErrorHandler:errorHandler];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"test onError");
  [((RxSingle *) nil_chk(RxSingle_errorWithNSException_(re))) subscribeWithRxSubscriber:create_RxPluginsRxJavaPluginsTest_$4_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(re, JreLoadVolatileId(&errorHandler->e_));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, JreLoadVolatileInt(&errorHandler->count_));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "LNSString;", 0xa, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(resetBefore);
  methods[1].selector = @selector(resetAfter);
  methods[2].selector = @selector(testErrorHandlerDefaultImpl);
  methods[3].selector = @selector(testErrorHandlerViaRegisterMethod);
  methods[4].selector = @selector(testErrorHandlerViaProperty);
  methods[5].selector = @selector(testObservableExecutionHookDefaultImpl);
  methods[6].selector = @selector(testObservableExecutionHookViaRegisterMethod);
  methods[7].selector = @selector(testSingleExecutionHookViaRegisterMethod);
  methods[8].selector = @selector(testObservableExecutionHookViaProperty);
  methods[9].selector = @selector(testOnErrorWhenImplementedViaSubscribe);
  methods[10].selector = @selector(testOnErrorWhenNotImplemented);
  methods[11].selector = @selector(testOnNextValueRenderingWhenNotImplemented);
  methods[12].selector = @selector(testOnNextValueRenderingWhenImplementedAndNotManaged);
  methods[13].selector = @selector(testOnNextValueRenderingWhenImplementedAndManaged);
  methods[14].selector = @selector(testOnNextValueRenderingWhenImplementedAndThrows);
  methods[15].selector = @selector(testOnNextValueCallsPlugin);
  methods[16].selector = @selector(getFullClassNameForTestClassWithIOSClass:);
  methods[17].selector = @selector(testShortPluginDiscovery);
  methods[18].selector = @selector(testShortPluginDiscoveryMissing);
  methods[19].selector = @selector(testOnErrorWhenUsingCompletable);
  methods[20].selector = @selector(testOnErrorWhenUsingSingle);
  methods[21].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxPluginsRxJavaPluginsTest__Annotations$0, (void *)&RxPluginsRxJavaPluginsTest__Annotations$1, (void *)&RxPluginsRxJavaPluginsTest__Annotations$2, (void *)&RxPluginsRxJavaPluginsTest__Annotations$3, (void *)&RxPluginsRxJavaPluginsTest__Annotations$4, (void *)&RxPluginsRxJavaPluginsTest__Annotations$5, (void *)&RxPluginsRxJavaPluginsTest__Annotations$6, (void *)&RxPluginsRxJavaPluginsTest__Annotations$7, (void *)&RxPluginsRxJavaPluginsTest__Annotations$8, (void *)&RxPluginsRxJavaPluginsTest__Annotations$9, (void *)&RxPluginsRxJavaPluginsTest__Annotations$10, (void *)&RxPluginsRxJavaPluginsTest__Annotations$11, (void *)&RxPluginsRxJavaPluginsTest__Annotations$12, (void *)&RxPluginsRxJavaPluginsTest__Annotations$13, (void *)&RxPluginsRxJavaPluginsTest__Annotations$14, (void *)&RxPluginsRxJavaPluginsTest__Annotations$15, "getFullClassNameForTestClass", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/String;", (void *)&RxPluginsRxJavaPluginsTest__Annotations$16, (void *)&RxPluginsRxJavaPluginsTest__Annotations$17, (void *)&RxPluginsRxJavaPluginsTest__Annotations$18, (void *)&RxPluginsRxJavaPluginsTest__Annotations$19, "LRxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl;LRxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender;LRxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl;LRxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl;LRxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest = { "RxJavaPluginsTest", "rx.plugins", ptrTable, methods, NULL, 7, 0x1, 22, 0, -1, 23, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest;
}

@end

NSString *RxPluginsRxJavaPluginsTest_getFullClassNameForTestClassWithIOSClass_(IOSClass *cls) {
  RxPluginsRxJavaPluginsTest_initialize();
  return JreStrcat("$C$C$", [((JavaLangPackage *) nil_chk([RxPluginsRxJavaPlugins_class_() getPackage])) getName], '.', [RxPluginsRxJavaPluginsTest_class_() getSimpleName], '$', [((IOSClass *) nil_chk(cls)) getSimpleName]);
}

void RxPluginsRxJavaPluginsTest_init(RxPluginsRxJavaPluginsTest *self) {
  NSObject_init(self);
}

RxPluginsRxJavaPluginsTest *new_RxPluginsRxJavaPluginsTest_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest, init)
}

RxPluginsRxJavaPluginsTest *create_RxPluginsRxJavaPluginsTest_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest, init)
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangRuntimeException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaPluginsTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest)

@implementation RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl

- (void)handleErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
  JreVolatileStrongAssign(&self->e_, e);
  count_++;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)__javaClone:(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&e_, &original->e_);
}

- (void)dealloc {
  JreReleaseVolatile(&e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(handleErrorWithNSException:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "e_", "LNSException;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "handleError", "LNSException;", "LRxPluginsRxJavaPluginsTest;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl = { "RxJavaErrorHandlerTestImpl", "rx.plugins", ptrTable, methods, fields, 7, 0x9, 2, 2, 2, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl;
}

@end

void RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *self) {
  RxPluginsRxJavaErrorHandler_init(self);
  JreAssignVolatileInt(&self->count_, 0);
}

RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *new_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl, init)
}

RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl *create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImpl)

@implementation RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender

- (NSString *)renderWithId:(id)item {
  if ([item isKindOfClass:[JavaUtilCalendar class]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"calendar");
  }
  else if ([item isKindOfClass:[JavaUtilDate class]]) {
    return NSString_valueOfLong_([((JavaUtilDate *) nil_chk(((JavaUtilDate *) cast_chk(item, [JavaUtilDate class])))) getTime]);
  }
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(renderWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "render", "LNSObject;", "LRxPluginsRxJavaPluginsTest;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender = { "RxJavaErrorHandlerTestImplWithRender", "rx.plugins", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender;
}

@end

void RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *self) {
  RxPluginsRxJavaErrorHandler_init(self);
}

RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *new_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender, init)
}

RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender *create_RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest_RxJavaErrorHandlerTestImplWithRender)

@implementation RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaPluginsTest;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl = { "RxJavaObservableExecutionHookTestImpl", "rx.plugins", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl;
}

@end

void RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_init(RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl *self) {
  RxPluginsRxJavaObservableExecutionHook_init(self);
}

RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl *new_RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl, init)
}

RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl *create_RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest_RxJavaObservableExecutionHookTestImpl)

@implementation RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaPluginsTest;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl = { "RxJavaSingleExecutionHookTestImpl", "rx.plugins", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl;
}

@end

void RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl_init(RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl *self) {
  RxPluginsRxJavaSingleExecutionHook_init(self);
}

RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl *new_RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl, init)
}

RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl *create_RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest_RxJavaSingleExecutionHookTestImpl)

@implementation RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaPluginsTest;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl = { "RxJavaCompletableExecutionHookTestImpl", "rx.plugins", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl;
}

@end

void RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl_init(RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl *self) {
  RxPluginsRxJavaCompletableExecutionHook_init(self);
}

RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl *new_RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl, init)
}

RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl *create_RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaPluginsTest_RxJavaCompletableExecutionHookTestImpl)

@implementation RxPluginsRxJavaPluginsTest_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)args {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxPluginsRxJavaPluginsTest_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxPluginsRxJavaPluginsTest;", "testOnErrorWhenImplementedViaSubscribe", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxPluginsRxJavaPluginsTest_$1;
}

@end

void RxPluginsRxJavaPluginsTest_$1_init(RxPluginsRxJavaPluginsTest_$1 *self) {
  RxSubscriber_init(self);
}

RxPluginsRxJavaPluginsTest_$1 *new_RxPluginsRxJavaPluginsTest_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_$1, init)
}

RxPluginsRxJavaPluginsTest_$1 *create_RxPluginsRxJavaPluginsTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_$1, init)
}

@implementation RxPluginsRxJavaPluginsTest_$2

- (JavaUtilDate *)callWithId:(JavaUtilDate *)date {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Trigger OnNextValue");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilDate;", "LRxPluginsRxJavaPluginsTest;", "testOnNextValueCallsPlugin", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/util/Date;Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_$2 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaPluginsTest_$2;
}

@end

void RxPluginsRxJavaPluginsTest_$2_init(RxPluginsRxJavaPluginsTest_$2 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaPluginsTest_$2 *new_RxPluginsRxJavaPluginsTest_$2_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_$2, init)
}

RxPluginsRxJavaPluginsTest_$2 *create_RxPluginsRxJavaPluginsTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_$2, init)
}

@implementation RxPluginsRxJavaPluginsTest_$3

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)o {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxPluginsRxJavaPluginsTest_$3 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxPluginsRxJavaPluginsTest;", "testOnErrorWhenUsingCompletable", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_$3 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxPluginsRxJavaPluginsTest_$3;
}

@end

void RxPluginsRxJavaPluginsTest_$3_init(RxPluginsRxJavaPluginsTest_$3 *self) {
  RxSubscriber_init(self);
}

RxPluginsRxJavaPluginsTest_$3 *new_RxPluginsRxJavaPluginsTest_$3_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_$3, init)
}

RxPluginsRxJavaPluginsTest_$3 *create_RxPluginsRxJavaPluginsTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_$3, init)
}

@implementation RxPluginsRxJavaPluginsTest_$4

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)o {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaPluginsTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxPluginsRxJavaPluginsTest_$4 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxPluginsRxJavaPluginsTest;", "testOnErrorWhenUsingSingle", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaPluginsTest_$4 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxPluginsRxJavaPluginsTest_$4;
}

@end

void RxPluginsRxJavaPluginsTest_$4_init(RxPluginsRxJavaPluginsTest_$4 *self) {
  RxSubscriber_init(self);
}

RxPluginsRxJavaPluginsTest_$4 *new_RxPluginsRxJavaPluginsTest_$4_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaPluginsTest_$4, init)
}

RxPluginsRxJavaPluginsTest_$4 *create_RxPluginsRxJavaPluginsTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaPluginsTest_$4, init)
}
