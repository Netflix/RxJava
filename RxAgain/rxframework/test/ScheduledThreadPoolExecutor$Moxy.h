//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/java/util/concurrent/ScheduledThreadPoolExecutor$Moxy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ScheduledThreadPoolExecutor$Moxy")
#ifdef RESTRICT_ScheduledThreadPoolExecutor$Moxy
#define INCLUDE_ALL_ScheduledThreadPoolExecutor$Moxy 0
#else
#define INCLUDE_ALL_ScheduledThreadPoolExecutor$Moxy 1
#endif
#undef RESTRICT_ScheduledThreadPoolExecutor$Moxy

#if !defined (JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_) && (INCLUDE_ALL_ScheduledThreadPoolExecutor$Moxy || defined(INCLUDE_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy))
#define JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_

#define RESTRICT_JavaUtilConcurrentScheduledThreadPoolExecutor 1
#define INCLUDE_JavaUtilConcurrentScheduledThreadPoolExecutor 1
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"

@class JavaLangThread;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangReflectInvocationHandler;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentRejectedExecutionHandler;
@protocol JavaUtilConcurrentRunnableFuture;
@protocol JavaUtilConcurrentRunnableScheduledFuture;
@protocol JavaUtilConcurrentScheduledFuture;
@protocol JavaUtilConcurrentThreadFactory;
@protocol JavaUtilList;

@interface JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy : JavaUtilConcurrentScheduledThreadPoolExecutor {
 @public
  id<JavaLangReflectInvocationHandler> $__handler_;
}

#pragma mark Public

- (void)allowCoreThreadTimeOutWithBoolean:(jboolean)arg0;

- (jboolean)allowsCoreThreadTimeOut;

- (jboolean)awaitTerminationWithLong:(jlong)arg0
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

- (jboolean)isEqual:(id)arg0;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (jint)getActiveCount;

- (jlong)getCompletedTaskCount;

- (jboolean)getContinueExistingPeriodicTasksAfterShutdownPolicy;

- (jint)getCorePoolSize;

- (jboolean)getExecuteExistingDelayedTasksAfterShutdownPolicy;

- (id<JavaLangReflectInvocationHandler>)getHandler;

- (jlong)getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg0;

- (jint)getLargestPoolSize;

- (jint)getMaximumPoolSize;

- (jint)getPoolSize;

- (id<JavaUtilConcurrentBlockingQueue>)getQueue;

- (id<JavaUtilConcurrentRejectedExecutionHandler>)getRejectedExecutionHandler;

- (jboolean)getRemoveOnCancelPolicy;

- (jlong)getTaskCount;

- (id<JavaUtilConcurrentThreadFactory>)getThreadFactory;

- (NSUInteger)hash;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                           withLong:(jlong)arg1
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                             withLong:(jlong)arg1
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (jboolean)isTerminating;

- (jint)prestartAllCoreThreads;

- (jboolean)prestartCoreThread;

- (void)purge;

- (jboolean)removeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                                       withLong:(jlong)arg1
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                             withLong:(jlong)arg1
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                        withLong:(jlong)arg1
                                                                        withLong:(jlong)arg2
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                           withLong:(jlong)arg1
                                                                           withLong:(jlong)arg2
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3;

- (void)setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0;

- (void)setCorePoolSizeWithInt:(jint)arg0;

- (void)setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0;

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler;

- (void)setKeepAliveTimeWithLong:(jlong)arg0
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

- (void)setMaximumPoolSizeWithInt:(jint)arg0;

- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)arg0;

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)arg0;

- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)arg0;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                    withId:(id)arg1;

- (void)super$allowCoreThreadTimeOutWithBoolean:(jboolean)arg0;

- (jboolean)super$allowsCoreThreadTimeOut;

- (jboolean)super$awaitTerminationWithLong:(jlong)arg0
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

- (jboolean)super$equalsWithId:(id)arg0;

- (void)super$executeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (jint)super$getActiveCount;

- (jlong)super$getCompletedTaskCount;

- (jboolean)super$getContinueExistingPeriodicTasksAfterShutdownPolicy;

- (jint)super$getCorePoolSize;

- (jboolean)super$getExecuteExistingDelayedTasksAfterShutdownPolicy;

- (jlong)super$getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg0;

- (jint)super$getLargestPoolSize;

- (jint)super$getMaximumPoolSize;

- (jint)super$getPoolSize;

- (id<JavaUtilConcurrentBlockingQueue>)super$getQueue;

- (id<JavaUtilConcurrentRejectedExecutionHandler>)super$getRejectedExecutionHandler;

- (jboolean)super$getRemoveOnCancelPolicy;

- (jlong)super$getTaskCount;

- (id<JavaUtilConcurrentThreadFactory>)super$getThreadFactory;

- (jint)super$hashCode;

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                                 withLong:(jlong)arg1
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0;

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                   withLong:(jlong)arg1
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (jboolean)super$isShutdown;

- (jboolean)super$isTerminated;

- (jboolean)super$isTerminating;

- (jint)super$prestartAllCoreThreads;

- (jboolean)super$prestartCoreThread;

- (void)super$purge;

- (jboolean)super$removeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                                             withLong:(jlong)arg1
                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                   withLong:(jlong)arg1
                                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                              withLong:(jlong)arg1
                                                                              withLong:(jlong)arg2
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3;

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                                 withLong:(jlong)arg1
                                                                                 withLong:(jlong)arg2
                                                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3;

- (void)super$setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0;

- (void)super$setCorePoolSizeWithInt:(jint)arg0;

- (void)super$setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0;

- (void)super$setKeepAliveTimeWithLong:(jlong)arg0
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

- (void)super$setMaximumPoolSizeWithInt:(jint)arg0;

- (void)super$setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)arg0;

- (void)super$setRemoveOnCancelPolicyWithBoolean:(jboolean)arg0;

- (void)super$setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)arg0;

- (void)super$shutdown;

- (id<JavaUtilList>)super$shutdownNow;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                          withId:(id)arg1;

- (NSString *)super$toString;

- (NSString *)description;

#pragma mark Protected

- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                         withNSException:(NSException *)arg1;

- (void)beforeExecuteWithJavaLangThread:(JavaLangThread *)arg0
                   withJavaLangRunnable:(id<JavaLangRunnable>)arg1;

- (id)clone;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                              withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                    withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1;

- (id<JavaUtilConcurrentRunnableFuture>)newTaskForWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0 OBJC_METHOD_FAMILY_NONE;

- (id<JavaUtilConcurrentRunnableFuture>)newTaskForWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                withId:(id)arg1 OBJC_METHOD_FAMILY_NONE;

- (void)super$afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                               withNSException:(NSException *)arg1;

- (void)super$beforeExecuteWithJavaLangThread:(JavaLangThread *)arg0
                         withJavaLangRunnable:(id<JavaLangRunnable>)arg1;

- (id)super$clone;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)super$decorateTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                    withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1;

- (id<JavaUtilConcurrentRunnableScheduledFuture>)super$decorateTaskWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                          withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1;

- (id<JavaUtilConcurrentRunnableFuture>)super$newTaskForWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0;

- (id<JavaUtilConcurrentRunnableFuture>)super$newTaskForWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                      withId:(id)arg1;

- (void)super$terminated;

- (void)terminated;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)a0;

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)a1;

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)a1;

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)a1
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)a2;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, $__handler_, id<JavaLangReflectInvocationHandler>)

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(jint a0) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(jint a0);

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentThreadFactory> a1);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(jint a0, id<JavaUtilConcurrentThreadFactory> a1) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(jint a0, id<JavaUtilConcurrentThreadFactory> a1);

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1);

FOUNDATION_EXPORT void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2);

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy)

@compatibility_alias JavaUtilConcurrentScheduledThreadPoolExecutor$Moxy JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy;

#endif

#pragma pop_macro("INCLUDE_ALL_ScheduledThreadPoolExecutor$Moxy")
