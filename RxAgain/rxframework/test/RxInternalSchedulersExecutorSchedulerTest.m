//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/schedulers/ExecutorSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalSchedulersExecutorScheduler.h"
#include "RxInternalSchedulersExecutorSchedulerTest.h"
#include "RxInternalUtilRxThreadFactory.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"
#include "RxSchedulersSchedulerTests.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$8();

@interface RxInternalSchedulersExecutorSchedulerTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$1)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_$1, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersExecutorSchedulerTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$1 *new_RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$1 *create_RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalSchedulersExecutorSchedulerTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$2)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_$2, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersExecutorSchedulerTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$2 *new_RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$2 *create_RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalSchedulersExecutorSchedulerTest_$3 : NSObject < JavaUtilConcurrentExecutor >

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$3)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$3_init(RxInternalSchedulersExecutorSchedulerTest_$3 *self);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$3 *new_RxInternalSchedulersExecutorSchedulerTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$3 *create_RxInternalSchedulersExecutorSchedulerTest_$3_init();

@interface RxInternalSchedulersExecutorSchedulerTest_$4 : NSObject < JavaUtilConcurrentExecutor >

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$4)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$4_init(RxInternalSchedulersExecutorSchedulerTest_$4 *self);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$4 *new_RxInternalSchedulersExecutorSchedulerTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$4 *create_RxInternalSchedulersExecutorSchedulerTest_$4_init();

@interface RxInternalSchedulersExecutorSchedulerTest_$5 : NSObject < JavaUtilConcurrentExecutor >

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$5)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$5_init(RxInternalSchedulersExecutorSchedulerTest_$5 *self);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$5 *new_RxInternalSchedulersExecutorSchedulerTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$5 *create_RxInternalSchedulersExecutorSchedulerTest_$5_init();

@interface RxInternalSchedulersExecutorSchedulerTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$6)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_$6, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(RxInternalSchedulersExecutorSchedulerTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$6 *new_RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$6 *create_RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalSchedulersExecutorSchedulerTest_$7 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$call_;
}

- (id<RxFunctionsAction0>)callWithId:(id<RxFunctionsAction0>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$7)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_$7, val$call_, IOSIntArray *)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(RxInternalSchedulersExecutorSchedulerTest_$7 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$7 *new_RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$7 *create_RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(IOSIntArray *capture$0);

@interface RxInternalSchedulersExecutorSchedulerTest_$8 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_$8)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_$8, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(RxInternalSchedulersExecutorSchedulerTest_$8 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$8 *new_RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersExecutorSchedulerTest_$8 *create_RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

J2OBJC_INITIALIZED_DEFN(RxInternalSchedulersExecutorSchedulerTest)

id<JavaUtilConcurrentExecutor> RxInternalSchedulersExecutorSchedulerTest_executor;

@implementation RxInternalSchedulersExecutorSchedulerTest

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(RxInternalSchedulersExecutorSchedulerTest_executor);
}

- (void)testUnhandledErrorIsDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testUnhandledErrorIsDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testHandledErrorIsNotDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testHandledErrorIsNotDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testCancelledTaskRetention {
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  RxScheduler *s = RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(exec);
  @try {
    RxScheduler_Worker *w = [((RxScheduler *) nil_chk(s)) createWorker];
    @try {
      RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, false);
    }
    @finally {
      [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
    }
    w = [s createWorker];
    @try {
      RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, true);
    }
    @finally {
      [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
    }
  }
  @finally {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) shutdownNow];
  }
}

- (void)testCancelledTasksDontRun {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction0> task = create_RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls);
  RxInternalSchedulersExecutorSchedulerTest_TestExecutor *exec = create_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init();
  RxScheduler *custom = RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(exec);
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(custom)) createWorker];
  @try {
    id<RxSubscription> s1 = [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:task];
    id<RxSubscription> s2 = [w scheduleWithRxFunctionsAction0:task];
    id<RxSubscription> s3 = [w scheduleWithRxFunctionsAction0:task];
    [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
    [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
    [((id<RxSubscription>) nil_chk(s3)) unsubscribe];
    [exec executeAll];
    OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
  }
  @finally {
    [w unsubscribe];
  }
}

- (void)testCancelledWorkerDoesntRunTasks {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction0> task = create_RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(calls);
  RxInternalSchedulersExecutorSchedulerTest_TestExecutor *exec = create_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init();
  RxScheduler *custom = RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(exec);
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(custom)) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:task];
    [w scheduleWithRxFunctionsAction0:task];
    [w scheduleWithRxFunctionsAction0:task];
  }
  @finally {
    [w unsubscribe];
  }
  [exec executeAll];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [calls get]);
}

- (void)testNoTimedTaskAfterScheduleRetention {
  id<JavaUtilConcurrentExecutor> e = create_RxInternalSchedulersExecutorSchedulerTest_$3_init();
  RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *w = (RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) cast_chk([((RxScheduler *) nil_chk(RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(e))) createWorker], [RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker class]);
  [((RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) nil_chk(w)) scheduleWithRxFunctionsAction0:RxFunctionsActions_empty() withLong:50 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubscriptionsCompositeSubscription *) nil_chk(w->tasks_)) hasSubscriptions]);
  JavaLangThread_sleepWithLong_(150);
  OrgJunitAssert_assertFalseWithBoolean_([w->tasks_ hasSubscriptions]);
}

- (void)testNoTimedTaskPartRetention {
  id<JavaUtilConcurrentExecutor> e = create_RxInternalSchedulersExecutorSchedulerTest_$4_init();
  RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *w = (RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) cast_chk([((RxScheduler *) nil_chk(RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(e))) createWorker], [RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker class]);
  id<RxSubscription> s = [((RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) nil_chk(w)) scheduleWithRxFunctionsAction0:RxFunctionsActions_empty() withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubscriptionsCompositeSubscription *) nil_chk(w->tasks_)) hasSubscriptions]);
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertFalseWithBoolean_([w->tasks_ hasSubscriptions]);
}

- (void)testNoPeriodicTimedTaskPartRetention {
  id<JavaUtilConcurrentExecutor> e = create_RxInternalSchedulersExecutorSchedulerTest_$5_init();
  RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *w = (RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) cast_chk([((RxScheduler *) nil_chk(RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(e))) createWorker], [RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker class]);
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxFunctionsAction0> action = create_RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(cdl);
  id<RxSubscription> s = [((RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *) nil_chk(w)) schedulePeriodicallyWithRxFunctionsAction0:action withLong:0 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubscriptionsCompositeSubscription *) nil_chk(w->tasks_)) hasSubscriptions]);
  [cdl await];
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertFalseWithBoolean_([w->tasks_ hasSubscriptions]);
}

- (void)actionHookCalled {
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  @try {
    IOSIntArray *call = [IOSIntArray arrayWithInts:(jint[]){ 0 } count:1];
    RxPluginsRxJavaHooks_setOnScheduleActionWithRxFunctionsFunc1_(create_RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(call));
    RxScheduler *s = RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(exec);
    RxScheduler_Worker *w = [((RxScheduler *) nil_chk(s)) createWorker];
    JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    @try {
      [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(cdl)];
      OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Action timed out", [cdl awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
    }
    @finally {
      [w unsubscribe];
    }
    OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Hook not called!", 1, IOSIntArray_Get(call, 0));
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) shutdown];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersExecutorSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, 10, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testUnhandledErrorIsDeliveredToThreadHandler);
  methods[2].selector = @selector(testHandledErrorIsNotDeliveredToThreadHandler);
  methods[3].selector = @selector(testCancelledTaskRetention);
  methods[4].selector = @selector(testCancelledTasksDontRun);
  methods[5].selector = @selector(testCancelledWorkerDoesntRunTasks);
  methods[6].selector = @selector(testNoTimedTaskAfterScheduleRetention);
  methods[7].selector = @selector(testNoTimedTaskPartRetention);
  methods[8].selector = @selector(testNoPeriodicTimedTaskPartRetention);
  methods[9].selector = @selector(actionHookCalled);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$0, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$1, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$2, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$3, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$4, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$5, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$6, (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$7, "LJavaLangException;", (void *)&RxInternalSchedulersExecutorSchedulerTest__Annotations$8, &RxInternalSchedulersExecutorSchedulerTest_executor, "LRxInternalSchedulersExecutorSchedulerTest_TestExecutor;" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest = { "ExecutorSchedulerTest", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, 12, -1, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest;
}

+ (void)initialize {
  if (self == [RxInternalSchedulersExecutorSchedulerTest class]) {
    JreStrongAssign(&RxInternalSchedulersExecutorSchedulerTest_executor, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(2, create_RxInternalUtilRxThreadFactory_initWithNSString_(@"TestCustomPool-")));
    J2OBJC_SET_INITIALIZED(RxInternalSchedulersExecutorSchedulerTest)
  }
}

@end

void RxInternalSchedulersExecutorSchedulerTest_init(RxInternalSchedulersExecutorSchedulerTest *self) {
  RxSchedulersAbstractSchedulerConcurrencyTests_init(self);
}

RxInternalSchedulersExecutorSchedulerTest *new_RxInternalSchedulersExecutorSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest, init)
}

RxInternalSchedulersExecutorSchedulerTest *create_RxInternalSchedulersExecutorSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest, init)
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 60000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersExecutorSchedulerTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersExecutorSchedulerTest)

@implementation RxInternalSchedulersExecutorSchedulerTest_TestExecutor

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) offerWithId:command];
}

- (void)executeOne {
  id<JavaLangRunnable> r = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) poll];
  if (r != nil) {
    [r run];
  }
}

- (void)executeAll {
  id<JavaLangRunnable> r;
  while ((r = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) poll]) != nil) {
    [((id<JavaLangRunnable>) nil_chk(r)) run];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(executeWithJavaLangRunnable:);
  methods[1].selector = @selector(executeOne);
  methods[2].selector = @selector(executeAll);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Runnable;>;", "LRxInternalSchedulersExecutorSchedulerTest;" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_TestExecutor = { "TestExecutor", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x18, 4, 1, 3, -1, -1, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_TestExecutor;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init(RxInternalSchedulersExecutorSchedulerTest_TestExecutor *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
}

RxInternalSchedulersExecutorSchedulerTest_TestExecutor *new_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_TestExecutor, init)
}

RxInternalSchedulersExecutorSchedulerTest_TestExecutor *create_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_TestExecutor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersExecutorSchedulerTest_TestExecutor)

@implementation RxInternalSchedulersExecutorSchedulerTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalSchedulersExecutorSchedulerTest;", "testCancelledTasksDontRun" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$1;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersExecutorSchedulerTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$1 *new_RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalSchedulersExecutorSchedulerTest_$1 *create_RxInternalSchedulersExecutorSchedulerTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalSchedulersExecutorSchedulerTest;", "testCancelledWorkerDoesntRunTasks" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$2 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$2;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalSchedulersExecutorSchedulerTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$2 *new_RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalSchedulersExecutorSchedulerTest_$2 *create_RxInternalSchedulersExecutorSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$3

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaLangRunnable>) nil_chk(command)) run];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersExecutorSchedulerTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(executeWithJavaLangRunnable:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LRxInternalSchedulersExecutorSchedulerTest;", "testNoTimedTaskAfterScheduleRetention" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$3 = { "", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$3;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$3_init(RxInternalSchedulersExecutorSchedulerTest_$3 *self) {
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$3 *new_RxInternalSchedulersExecutorSchedulerTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$3, init)
}

RxInternalSchedulersExecutorSchedulerTest_$3 *create_RxInternalSchedulersExecutorSchedulerTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$3, init)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$4

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersExecutorSchedulerTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(executeWithJavaLangRunnable:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LRxInternalSchedulersExecutorSchedulerTest;", "testNoTimedTaskPartRetention" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$4 = { "", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$4;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$4_init(RxInternalSchedulersExecutorSchedulerTest_$4 *self) {
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$4 *new_RxInternalSchedulersExecutorSchedulerTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$4, init)
}

RxInternalSchedulersExecutorSchedulerTest_$4 *create_RxInternalSchedulersExecutorSchedulerTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$4, init)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$5

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaLangRunnable>) nil_chk(command)) run];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersExecutorSchedulerTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(executeWithJavaLangRunnable:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LRxInternalSchedulersExecutorSchedulerTest;", "testNoPeriodicTimedTaskPartRetention" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$5 = { "", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$5;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$5_init(RxInternalSchedulersExecutorSchedulerTest_$5 *self) {
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$5 *new_RxInternalSchedulersExecutorSchedulerTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$5, init)
}

RxInternalSchedulersExecutorSchedulerTest_$5 *create_RxInternalSchedulersExecutorSchedulerTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$5, init)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$6

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalSchedulersExecutorSchedulerTest;", "testNoPeriodicTimedTaskPartRetention" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$6 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$6;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(RxInternalSchedulersExecutorSchedulerTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$cdl_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$6 *new_RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalSchedulersExecutorSchedulerTest_$6 *create_RxInternalSchedulersExecutorSchedulerTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$7

- (id<RxFunctionsAction0>)callWithId:(id<RxFunctionsAction0>)t {
  (*IOSIntArray_GetRef(nil_chk(val$call_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$call_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxFunctionsAction0;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$call_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxFunctionsAction0;", "[I", "LRxInternalSchedulersExecutorSchedulerTest;", "actionHookCalled", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/functions/Action0;Lrx/functions/Action0;>;" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$7 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$7;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(RxInternalSchedulersExecutorSchedulerTest_$7 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$call_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$7 *new_RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$7, initWithIntArray_, capture$0)
}

RxInternalSchedulersExecutorSchedulerTest_$7 *create_RxInternalSchedulersExecutorSchedulerTest_$7_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$7, initWithIntArray_, capture$0)
}

@implementation RxInternalSchedulersExecutorSchedulerTest_$8

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalSchedulersExecutorSchedulerTest;", "actionHookCalled" };
  static const J2ObjcClassInfo _RxInternalSchedulersExecutorSchedulerTest_$8 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersExecutorSchedulerTest_$8;
}

@end

void RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(RxInternalSchedulersExecutorSchedulerTest_$8 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$cdl_, capture$0);
  NSObject_init(self);
}

RxInternalSchedulersExecutorSchedulerTest_$8 *new_RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersExecutorSchedulerTest_$8, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalSchedulersExecutorSchedulerTest_$8 *create_RxInternalSchedulersExecutorSchedulerTest_$8_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersExecutorSchedulerTest_$8, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}
