//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/ImmediateSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerTests.h"
#include "RxSchedulersImmediateSchedulerTest.h"
#include "RxSchedulersSchedulers.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$4();

@interface RxSchedulersImmediateSchedulerTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  NSString *val$currentThreadName_;
}

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersImmediateSchedulerTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersImmediateSchedulerTest_$1, val$currentThreadName_, NSString *)

__attribute__((unused)) static void RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(RxSchedulersImmediateSchedulerTest_$1 *self, NSString *capture$0);

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$1 *new_RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$1 *create_RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(NSString *capture$0);

@interface RxSchedulersImmediateSchedulerTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersImmediateSchedulerTest_$2)

__attribute__((unused)) static void RxSchedulersImmediateSchedulerTest_$2_init(RxSchedulersImmediateSchedulerTest_$2 *self);

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$2 *new_RxSchedulersImmediateSchedulerTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$2 *create_RxSchedulersImmediateSchedulerTest_$2_init();

@interface RxSchedulersImmediateSchedulerTest_$3 : NSObject < RxFunctionsFunc1 > {
 @public
  NSString *val$currentThreadName_;
}

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersImmediateSchedulerTest_$3)

J2OBJC_FIELD_SETTER(RxSchedulersImmediateSchedulerTest_$3, val$currentThreadName_, NSString *)

__attribute__((unused)) static void RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(RxSchedulersImmediateSchedulerTest_$3 *self, NSString *capture$0);

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$3 *new_RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$3 *create_RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(NSString *capture$0);

@interface RxSchedulersImmediateSchedulerTest_$4 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersImmediateSchedulerTest_$4)

__attribute__((unused)) static void RxSchedulersImmediateSchedulerTest_$4_init(RxSchedulersImmediateSchedulerTest_$4 *self);

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$4 *new_RxSchedulersImmediateSchedulerTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersImmediateSchedulerTest_$4 *create_RxSchedulersImmediateSchedulerTest_$4_init();

@implementation RxSchedulersImmediateSchedulerTest

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_immediate();
}

- (void)testNestedActions {
}

- (void)testSequenceOfDelayedActions {
}

- (void)testMixOfDelayedAndNonDelayedActions {
}

- (void)testMergeWithoutScheduler {
  NSString *currentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) mapWithRxFunctionsFunc1:create_RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(currentThreadName)];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(o)) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersImmediateSchedulerTest_$2_init()];
}

- (void)testMergeWithImmediateScheduler1 {
  NSString *currentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_immediate()])) mapWithRxFunctionsFunc1:create_RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(currentThreadName)];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(o)) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersImmediateSchedulerTest_$4_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersImmediateSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testNestedActions);
  methods[2].selector = @selector(testSequenceOfDelayedActions);
  methods[3].selector = @selector(testMixOfDelayedAndNonDelayedActions);
  methods[4].selector = @selector(testMergeWithoutScheduler);
  methods[5].selector = @selector(testMergeWithImmediateScheduler1);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersImmediateSchedulerTest__Annotations$0, (void *)&RxSchedulersImmediateSchedulerTest__Annotations$1, (void *)&RxSchedulersImmediateSchedulerTest__Annotations$2, (void *)&RxSchedulersImmediateSchedulerTest__Annotations$3, (void *)&RxSchedulersImmediateSchedulerTest__Annotations$4 };
  static const J2ObjcClassInfo _RxSchedulersImmediateSchedulerTest = { "ImmediateSchedulerTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersImmediateSchedulerTest;
}

@end

void RxSchedulersImmediateSchedulerTest_init(RxSchedulersImmediateSchedulerTest *self) {
  RxSchedulersAbstractSchedulerTests_init(self);
}

RxSchedulersImmediateSchedulerTest *new_RxSchedulersImmediateSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersImmediateSchedulerTest, init)
}

RxSchedulersImmediateSchedulerTest *create_RxSchedulersImmediateSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersImmediateSchedulerTest, init)
}

IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersImmediateSchedulerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersImmediateSchedulerTest)

@implementation RxSchedulersImmediateSchedulerTest_$1

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) isEqual:val$currentThreadName_]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$currentThreadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$currentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LNSString;", "LRxSchedulersImmediateSchedulerTest;", "testMergeWithoutScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersImmediateSchedulerTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersImmediateSchedulerTest_$1;
}

@end

void RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(RxSchedulersImmediateSchedulerTest_$1 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$currentThreadName_, capture$0);
  NSObject_init(self);
}

RxSchedulersImmediateSchedulerTest_$1 *new_RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersImmediateSchedulerTest_$1, initWithNSString_, capture$0)
}

RxSchedulersImmediateSchedulerTest_$1 *create_RxSchedulersImmediateSchedulerTest_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersImmediateSchedulerTest_$1, initWithNSString_, capture$0)
}

@implementation RxSchedulersImmediateSchedulerTest_$2

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersImmediateSchedulerTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersImmediateSchedulerTest;", "testMergeWithoutScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersImmediateSchedulerTest_$2 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersImmediateSchedulerTest_$2;
}

@end

void RxSchedulersImmediateSchedulerTest_$2_init(RxSchedulersImmediateSchedulerTest_$2 *self) {
  NSObject_init(self);
}

RxSchedulersImmediateSchedulerTest_$2 *new_RxSchedulersImmediateSchedulerTest_$2_init() {
  J2OBJC_NEW_IMPL(RxSchedulersImmediateSchedulerTest_$2, init)
}

RxSchedulersImmediateSchedulerTest_$2 *create_RxSchedulersImmediateSchedulerTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersImmediateSchedulerTest_$2, init)
}

@implementation RxSchedulersImmediateSchedulerTest_$3

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) isEqual:val$currentThreadName_]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$currentThreadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$currentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LNSString;", "LRxSchedulersImmediateSchedulerTest;", "testMergeWithImmediateScheduler1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersImmediateSchedulerTest_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersImmediateSchedulerTest_$3;
}

@end

void RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(RxSchedulersImmediateSchedulerTest_$3 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$currentThreadName_, capture$0);
  NSObject_init(self);
}

RxSchedulersImmediateSchedulerTest_$3 *new_RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersImmediateSchedulerTest_$3, initWithNSString_, capture$0)
}

RxSchedulersImmediateSchedulerTest_$3 *create_RxSchedulersImmediateSchedulerTest_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersImmediateSchedulerTest_$3, initWithNSString_, capture$0)
}

@implementation RxSchedulersImmediateSchedulerTest_$4

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersImmediateSchedulerTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersImmediateSchedulerTest;", "testMergeWithImmediateScheduler1", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersImmediateSchedulerTest_$4 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersImmediateSchedulerTest_$4;
}

@end

void RxSchedulersImmediateSchedulerTest_$4_init(RxSchedulersImmediateSchedulerTest_$4 *self) {
  NSObject_init(self);
}

RxSchedulersImmediateSchedulerTest_$4 *new_RxSchedulersImmediateSchedulerTest_$4_init() {
  J2OBJC_NEW_IMPL(RxSchedulersImmediateSchedulerTest_$4, init)
}

RxSchedulersImmediateSchedulerTest_$4 *create_RxSchedulersImmediateSchedulerTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersImmediateSchedulerTest_$4, init)
}
