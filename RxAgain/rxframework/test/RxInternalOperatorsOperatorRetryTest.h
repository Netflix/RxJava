//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorRetryTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest")
#ifdef RESTRICT_RxInternalOperatorsOperatorRetryTest
#define INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorRetryTest

#if !defined (RxInternalOperatorsOperatorRetryTest_) && (INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest || defined(INCLUDE_RxInternalOperatorsOperatorRetryTest))
#define RxInternalOperatorsOperatorRetryTest_

@class JavaLangStringBuilder;
@protocol JavaLangIterable;
@protocol JavaUtilMap;

@interface RxInternalOperatorsOperatorRetryTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)iterativeBackoff;

- (void)retryWhenDefaultScheduler;

- (void)retryWhenTrampolineScheduler;

- (void)testInfiniteRetry;

- (void)testIssue1900;

- (void)testIssue1900SourceNotSupportingBackpressure;

- (void)testOnCompletedFromNotificationHandler;

- (void)testOnErrorFromNotificationHandler;

- (void)testOnNextFromNotificationHandler;

- (void)testOriginFails;

- (void)testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed;

- (void)testRetryFail;

- (void)testRetryIndefinitely;

- (void)testRetrySubscribesAgainAfterError;

- (void)testRetrySuccess;

- (void)testRetryWithBackpressure;

- (void)testRetryWithBackpressureParallel;

- (void)testSchedulingNotificationHandler;

- (void)testSingleSubscriptionOnFirst;

- (void)testSourceObservableCallsUnsubscribe;

- (void)testSourceObservableRetry0;

- (void)testSourceObservableRetry1;

- (void)testTimeoutWithRetry;

- (void)testUnsubscribeAfterError;

- (void)testUnsubscribeFromRetry;

#pragma mark Package-Private

+ (JavaLangStringBuilder *)allSequenceFrequencyWithJavaUtilMap:(id<JavaUtilMap>)its;

+ (JavaLangStringBuilder *)sequenceFrequencyWithJavaLangIterable:(id<JavaLangIterable>)it;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest)

FOUNDATION_EXPORT JavaLangStringBuilder *RxInternalOperatorsOperatorRetryTest_allSequenceFrequencyWithJavaUtilMap_(id<JavaUtilMap> its);

FOUNDATION_EXPORT JavaLangStringBuilder *RxInternalOperatorsOperatorRetryTest_sequenceFrequencyWithJavaLangIterable_(id<JavaLangIterable> it);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorRetryTest_init(RxInternalOperatorsOperatorRetryTest *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest *new_RxInternalOperatorsOperatorRetryTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest *create_RxInternalOperatorsOperatorRetryTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorRetryTest)

#endif

#if !defined (RxInternalOperatorsOperatorRetryTest_Tuple_) && (INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest || defined(INCLUDE_RxInternalOperatorsOperatorRetryTest_Tuple))
#define RxInternalOperatorsOperatorRetryTest_Tuple_

@class JavaLangLong;

@interface RxInternalOperatorsOperatorRetryTest_Tuple : NSObject {
 @public
  JavaLangLong *count_;
  NSException *n_;
}

#pragma mark Package-Private

- (instancetype)initWithJavaLangLong:(JavaLangLong *)c
                     withNSException:(NSException *)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_Tuple)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_Tuple, count_, JavaLangLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_Tuple, n_, NSException *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(RxInternalOperatorsOperatorRetryTest_Tuple *self, JavaLangLong *c, NSException *n);

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_Tuple *new_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(JavaLangLong *c, NSException *n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_Tuple *create_RxInternalOperatorsOperatorRetryTest_Tuple_initWithJavaLangLong_withNSException_(JavaLangLong *c, NSException *n);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorRetryTest_Tuple)

#endif

#if !defined (RxInternalOperatorsOperatorRetryTest_FuncWithErrors_) && (INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest || defined(INCLUDE_RxInternalOperatorsOperatorRetryTest_FuncWithErrors))
#define RxInternalOperatorsOperatorRetryTest_FuncWithErrors_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class RxSubscriber;

@interface RxInternalOperatorsOperatorRetryTest_FuncWithErrors : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (void)callWithId:(RxSubscriber *)o;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_FuncWithErrors)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(RxInternalOperatorsOperatorRetryTest_FuncWithErrors *self, jint count);

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_FuncWithErrors *new_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_FuncWithErrors *create_RxInternalOperatorsOperatorRetryTest_FuncWithErrors_initWithInt_(jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorRetryTest_FuncWithErrors)

#endif

#if !defined (RxInternalOperatorsOperatorRetryTest_SlowObservable_) && (INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest || defined(INCLUDE_RxInternalOperatorsOperatorRetryTest_SlowObservable))
#define RxInternalOperatorsOperatorRetryTest_SlowObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "RxObservable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class RxSubscriber;

@interface RxInternalOperatorsOperatorRetryTest_SlowObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *efforts_;
  JavaUtilConcurrentAtomicAtomicInteger *active_, *maxActive_;
  JavaUtilConcurrentAtomicAtomicInteger *nextBeforeFailure_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)emitDelay
                    withInt:(jint)countNext;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_SlowObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable, efforts_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable, active_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable, maxActive_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_SlowObservable, nextBeforeFailure_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(RxInternalOperatorsOperatorRetryTest_SlowObservable *self, jint emitDelay, jint countNext);

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_SlowObservable *new_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(jint emitDelay, jint countNext) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_SlowObservable *create_RxInternalOperatorsOperatorRetryTest_SlowObservable_initWithInt_withInt_(jint emitDelay, jint countNext);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorRetryTest_SlowObservable)

#endif

#if !defined (RxInternalOperatorsOperatorRetryTest_AsyncObserver_) && (INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest || defined(INCLUDE_RxInternalOperatorsOperatorRetryTest_AsyncObserver))
#define RxInternalOperatorsOperatorRetryTest_AsyncObserver_

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "RxObserver.h"

@class JavaUtilConcurrentCountDownLatch;

@interface RxInternalOperatorsOperatorRetryTest_AsyncObserver : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentCountDownLatch *latch_;
  id<RxObserver> target_;
}

#pragma mark Public

- (instancetype)initWithRxObserver:(id<RxObserver>)target;

- (void)await;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRetryTest_AsyncObserver)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_AsyncObserver, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRetryTest_AsyncObserver, target_, id<RxObserver>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(RxInternalOperatorsOperatorRetryTest_AsyncObserver *self, id<RxObserver> target);

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_AsyncObserver *new_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(id<RxObserver> target) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorRetryTest_AsyncObserver *create_RxInternalOperatorsOperatorRetryTest_AsyncObserver_initWithRxObserver_(id<RxObserver> target);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorRetryTest_AsyncObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorRetryTest")
