//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeFromArrayTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOnSubscribeFromArray.h"
#include "RxInternalOperatorsOnSubscribeFromArrayTest.h"
#include "RxInternalUtilScalarSynchronousObservable.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$3();

@implementation RxInternalOperatorsOnSubscribeFromArrayTest

- (RxObservable *)createWithInt:(jint)n {
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:n type:JavaLangInteger_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_Set(array, i, JavaLangInteger_valueOfWithInt_(i));
  }
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeFromArray_initWithNSObjectArray_(array));
}

- (void)simple {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([self createWithInt:1000])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1000];
  [ts assertCompleted];
}

- (void)backpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([self createWithInt:1000])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoErrors];
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:10];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:10];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1000];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1000];
  [ts assertCompleted];
}

- (void)empty {
  OrgJunitAssert_assertSameWithId_withId_(RxObservable_empty(), RxObservable_fromWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
}

- (void)just {
  RxObservable *source = RxObservable_fromWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([[((RxObservable *) nil_chk(source)) java_getClass] description], [source isKindOfClass:[RxInternalUtilScalarSynchronousObservable class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeFromArrayTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x0, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithInt:);
  methods[1].selector = @selector(simple);
  methods[2].selector = @selector(backpressure);
  methods[3].selector = @selector(empty);
  methods[4].selector = @selector(just);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "I", "(I)Lrx/Observable<Ljava/lang/Integer;>;", (void *)&RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$3 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFromArrayTest = { "OnSubscribeFromArrayTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeFromArrayTest;
}

@end

void RxInternalOperatorsOnSubscribeFromArrayTest_init(RxInternalOperatorsOnSubscribeFromArrayTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeFromArrayTest *new_RxInternalOperatorsOnSubscribeFromArrayTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFromArrayTest, init)
}

RxInternalOperatorsOnSubscribeFromArrayTest *create_RxInternalOperatorsOnSubscribeFromArrayTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFromArrayTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromArrayTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeFromArrayTest)
