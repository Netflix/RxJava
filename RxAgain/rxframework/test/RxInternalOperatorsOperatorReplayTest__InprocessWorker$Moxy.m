//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/rx/internal/operators/OperatorReplayTest__InprocessWorker$Moxy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorReplayTest.h"
#include "RxInternalOperatorsOperatorReplayTest__InprocessWorker$Moxy.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy

- (instancetype)initWithRxSubscription:(id<RxSubscription>)a0 {
  RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy_initWithRxSubscription_(self, a0);
  return self;
}

- (id<JavaLangReflectInvocationHandler>)getHandler {
  return $__handler_;
}

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler {
  JreStrongAssign(&$__handler_, handler);
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithRxFunctionsAction0:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<RxSubscription>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ RxFunctionsAction0_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ action, JavaLangLong_valueOfWithLong_(delayTime), unit } count:3 type:NSObject_class_()]], RxSubscription_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<RxSubscription>)super$scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                  withLong:(jlong)delayTime
                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super scheduleWithRxFunctionsAction0:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
}

- (id)clone {
  @try {
    if ($__handler_ == nil) {
      return [super clone];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"clone" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangCloneNotSupportedException class]]) {
      @throw (JavaLangCloneNotSupportedException *) cast_chk(__ttlive, [JavaLangCloneNotSupportedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$clone {
  return [super clone];
}

- (jlong)now {
  @try {
    if ($__handler_ == nil) {
      return [super now];
    }
    else {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"now" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangLong class]))) longLongValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jlong)super$now {
  return [super now];
}

- (id<RxSubscription>)schedulePeriodicallyWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                        withLong:(jlong)initialDelay
                                                        withLong:(jlong)period
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if ($__handler_ == nil) {
      return [super schedulePeriodicallyWithRxFunctionsAction0:action withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
    }
    else {
      return (id<RxSubscription>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedulePeriodically" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ RxFunctionsAction0_class_(), [IOSClass longClass], [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:4 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ action, JavaLangLong_valueOfWithLong_(initialDelay), JavaLangLong_valueOfWithLong_(period), unit } count:4 type:NSObject_class_()]], RxSubscription_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<RxSubscription>)super$schedulePeriodicallyWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                              withLong:(jlong)initialDelay
                                                              withLong:(jlong)period
                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super schedulePeriodicallyWithRxFunctionsAction0:action withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithRxFunctionsAction0:action];
    }
    else {
      return (id<RxSubscription>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ RxFunctionsAction0_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]], RxSubscription_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<RxSubscription>)super$scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return [super scheduleWithRxFunctionsAction0:action];
}

- (jboolean)isUnsubscribed {
  @try {
    if ($__handler_ == nil) {
      return [super isUnsubscribed];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isUnsubscribed" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isUnsubscribed {
  return [super isUnsubscribed];
}

- (void)unsubscribe {
  @try {
    if ($__handler_ == nil) {
      [super unsubscribe];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"unsubscribe" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$unsubscribe {
  [super unsubscribe];
}

- (NSUInteger)hash {
  @try {
    if ($__handler_ == nil) {
      return ((jint) [super hash]);
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"hashCode" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$hashCode {
  return ((jint) [super hash]);
}

- (jboolean)isEqual:(id)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super isEqual:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"equals" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$equalsWithId:(id)arg0 {
  return [super isEqual:arg0];
}

- (NSString *)description {
  @try {
    if ($__handler_ == nil) {
      return [super description];
    }
    else {
      return (NSString *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"toString" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (NSString *)super$toString {
  return [super description];
}

- (void)dealloc {
  RELEASE_($__handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectInvocationHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 3, 10, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 5, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscription:);
  methods[1].selector = @selector(getHandler);
  methods[2].selector = @selector(setHandlerWithJavaLangReflectInvocationHandler:);
  methods[3].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(super$scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(clone);
  methods[6].selector = @selector(super$clone);
  methods[7].selector = @selector(now);
  methods[8].selector = @selector(super$now);
  methods[9].selector = @selector(schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[10].selector = @selector(super$schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[11].selector = @selector(scheduleWithRxFunctionsAction0:);
  methods[12].selector = @selector(super$scheduleWithRxFunctionsAction0:);
  methods[13].selector = @selector(isUnsubscribed);
  methods[14].selector = @selector(super$isUnsubscribed);
  methods[15].selector = @selector(unsubscribe);
  methods[16].selector = @selector(super$unsubscribe);
  methods[17].selector = @selector(hash);
  methods[18].selector = @selector(super$hashCode);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(super$equalsWithId:);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(super$toString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "$__handler_", "LJavaLangReflectInvocationHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;", "setHandler", "LJavaLangReflectInvocationHandler;", "schedule", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "super$schedule", "LJavaLangCloneNotSupportedException;", "schedulePeriodically", "LRxFunctionsAction0;JJLJavaUtilConcurrentTimeUnit;", "super$schedulePeriodically", "LRxFunctionsAction0;", "hashCode", "equals", "LNSObject;", "super$equals", "toString" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy = { "OperatorReplayTest__InprocessWorker$Moxy", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 23, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy;
}

@end

void RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy_initWithRxSubscription_(RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy *self, id<RxSubscription> a0) {
  RxInternalOperatorsOperatorReplayTest_InprocessWorker_initWithRxSubscription_(self, a0);
}

RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy *new_RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy_initWithRxSubscription_(id<RxSubscription> a0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy, initWithRxSubscription_, a0)
}

RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy *create_RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy_initWithRxSubscription_(id<RxSubscription> a0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy, initWithRxSubscription_, a0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorReplayTest__InprocessWorker_Moxy)
