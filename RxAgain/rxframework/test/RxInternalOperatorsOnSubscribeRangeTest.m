//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeRangeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOnSubscribeRange.h"
#include "RxInternalOperatorsOnSubscribeRangeTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$16();

@interface RxInternalOperatorsOnSubscribeRangeTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRangeTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRangeTest_$1, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRangeTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$1 *new_RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$1 *create_RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRangeTest_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRangeTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRangeTest_$2, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRangeTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$2 *new_RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$2 *create_RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRangeTest_$3 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$completed_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRangeTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRangeTest_$3, val$completed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRangeTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$3 *new_RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRangeTest_$3 *create_RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOnSubscribeRangeTest

- (void)testRangeStartAt2Count3 {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(2, 3))) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testRangeUnsubscribe {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) takeWithInt:3])) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [count get]);
}

- (void)testRangeWithZero {
  RxObservable_rangeWithInt_withInt_(1, 0);
}

- (void)testRangeWithOverflow2 {
  RxObservable_rangeWithInt_withInt_(JavaLangInteger_MAX_VALUE, 0);
}

- (void)testRangeWithOverflow3 {
  RxObservable_rangeWithInt_withInt_(1, JavaLangInteger_MAX_VALUE);
}

- (void)testRangeWithOverflow4 {
  RxObservable_rangeWithInt_withInt_(2, JavaLangInteger_MAX_VALUE);
}

- (void)testRangeWithOverflow5 {
  OrgJunitAssert_assertFalseWithBoolean_([((id<JavaUtilIterator>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(JavaLangInteger_MIN_VALUE, 0))) toBlocking])) getIterator])) hasNext]);
}

- (void)testBackpressureViaRequest {
  RxInternalOperatorsOnSubscribeRange *o = create_RxInternalOperatorsOnSubscribeRange_initWithInt_withInt_(1, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_emptyList()];
  [ts requestMoreWithLong:1];
  [o callWithId:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts requestMoreWithLong:2];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])];
  [ts requestMoreWithLong:3];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:6 type:JavaLangInteger_class_()])];
  [ts requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertTerminalEvent];
}

- (void)testNoBackpressure {
  JavaUtilArrayList *list = create_JavaUtilArrayList_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2);
  for (jint i = 1; i <= JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2 + 1; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  RxInternalOperatorsOnSubscribeRange *o = create_RxInternalOperatorsOnSubscribeRange_initWithInt_withInt_(1, [list size]);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_emptyList()];
  [ts requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [o callWithId:ts];
  [ts assertReceivedOnNextWithJavaUtilList:list];
  [ts assertTerminalEvent];
}

- (void)testWithBackpressureOneByOneWithInt:(jint)start {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(start, 100);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:1];
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 100; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i + start)];
    [ts requestMoreWithLong:1];
  }
  [ts assertReceivedOnNextWithJavaUtilList:list];
  [ts assertTerminalEvent];
}

- (void)testWithBackpressureAllAtOnceWithInt:(jint)start {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(start, 100);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:100];
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 100; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i + start)];
  }
  [ts assertReceivedOnNextWithJavaUtilList:list];
  [ts assertTerminalEvent];
}

- (void)testWithBackpressure1 {
  for (jint i = 0; i < 100; i++) {
    [self testWithBackpressureOneByOneWithInt:i];
  }
}

- (void)testWithBackpressureAllAtOnce {
  for (jint i = 0; i < 100; i++) {
    [self testWithBackpressureAllAtOnceWithInt:i];
  }
}

- (void)testWithBackpressureRequestWayMore {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(50, 100);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:150];
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 100; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i + 50)];
  }
  [ts requestMoreWithLong:50];
  [ts assertReceivedOnNextWithJavaUtilList:list];
  [ts assertTerminalEvent];
}

- (void)testRequestOverflow {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint n = 10;
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, n))) subscribeWithRxSubscriber:create_RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(n, [count get]);
}

- (void)testEmptyRangeSendsOnCompleteEagerlyWithRequestZero {
  JavaUtilConcurrentAtomicAtomicBoolean *completed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 0))) subscribeWithRxSubscriber:create_RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(completed)];
  OrgJunitAssert_assertTrueWithBoolean_([completed get]);
}

- (void)testNearMaxValueWithoutBackpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(JavaLangInteger_MAX_VALUE - 1, 2))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertCompleted];
  [ts assertNoErrors];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(JavaLangInteger_MAX_VALUE - 1), JavaLangInteger_valueOfWithInt_(JavaLangInteger_MAX_VALUE) } count:2 type:JavaLangInteger_class_()]];
}

- (void)testNearMaxValueWithBackpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(3);
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(JavaLangInteger_MAX_VALUE - 1, 2))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertCompleted];
  [ts assertNoErrors];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(JavaLangInteger_MAX_VALUE - 1), JavaLangInteger_valueOfWithInt_(JavaLangInteger_MAX_VALUE) } count:2 type:JavaLangInteger_class_()]];
}

- (void)negativeCount {
  @try {
    RxObservable_rangeWithInt_withInt_(1, -1);
    OrgJunitAssert_failWithNSString_(@"Should have thrown IllegalArgumentException");
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Count can not be negative", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRangeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testRangeStartAt2Count3);
  methods[1].selector = @selector(testRangeUnsubscribe);
  methods[2].selector = @selector(testRangeWithZero);
  methods[3].selector = @selector(testRangeWithOverflow2);
  methods[4].selector = @selector(testRangeWithOverflow3);
  methods[5].selector = @selector(testRangeWithOverflow4);
  methods[6].selector = @selector(testRangeWithOverflow5);
  methods[7].selector = @selector(testBackpressureViaRequest);
  methods[8].selector = @selector(testNoBackpressure);
  methods[9].selector = @selector(testWithBackpressureOneByOneWithInt:);
  methods[10].selector = @selector(testWithBackpressureAllAtOnceWithInt:);
  methods[11].selector = @selector(testWithBackpressure1);
  methods[12].selector = @selector(testWithBackpressureAllAtOnce);
  methods[13].selector = @selector(testWithBackpressureRequestWayMore);
  methods[14].selector = @selector(testRequestOverflow);
  methods[15].selector = @selector(testEmptyRangeSendsOnCompleteEagerlyWithRequestZero);
  methods[16].selector = @selector(testNearMaxValueWithoutBackpressure);
  methods[17].selector = @selector(testNearMaxValueWithBackpressure);
  methods[18].selector = @selector(negativeCount);
  methods[19].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$8, "testWithBackpressureOneByOne", "I", "testWithBackpressureAllAtOnce", (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$9, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$10, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$11, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$12, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$13, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$14, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$15, (void *)&RxInternalOperatorsOnSubscribeRangeTest__Annotations$16 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRangeTest = { "OnSubscribeRangeTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 20, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRangeTest;
}

@end

void RxInternalOperatorsOnSubscribeRangeTest_init(RxInternalOperatorsOnSubscribeRangeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRangeTest *new_RxInternalOperatorsOnSubscribeRangeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRangeTest, init)
}

RxInternalOperatorsOnSubscribeRangeTest *create_RxInternalOperatorsOnSubscribeRangeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRangeTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRangeTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRangeTest)

@implementation RxInternalOperatorsOnSubscribeRangeTest_$1

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRangeTest;", "testRangeUnsubscribe", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRangeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRangeTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRangeTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRangeTest_$1 *new_RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRangeTest_$1 *create_RxInternalOperatorsOnSubscribeRangeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRangeTest_$2

- (void)onStart {
  [self requestWithLong:2];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_JavaLangRuntimeException_initWithNSException_(e);
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
  [self requestWithLong:JavaLangLong_MAX_VALUE - 1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOnSubscribeRangeTest_$2 class]);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRangeTest;", "testRequestOverflow", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRangeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRangeTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRangeTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOnSubscribeRangeTest_$2 *new_RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRangeTest_$2 *create_RxInternalOperatorsOnSubscribeRangeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRangeTest_$3

- (void)onStart {
  [self requestWithLong:0];
}

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$completed_)) setWithBoolean:true];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOnSubscribeRangeTest_$3 class]);
  RELEASE_(val$completed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOnSubscribeRangeTest;", "testEmptyRangeSendsOnCompleteEagerlyWithRequestZero", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRangeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRangeTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeRangeTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$completed_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOnSubscribeRangeTest_$3 *new_RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOnSubscribeRangeTest_$3 *create_RxInternalOperatorsOnSubscribeRangeTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRangeTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
