//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeDoOnEachTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOnSubscribeDoOnEachTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$14();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangBoolean *)value;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(id<JavaUtilList>)booleans;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$4, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$5 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangBoolean *)value;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(id<JavaUtilList>)booleans;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$6, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$8 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$9 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$10 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 : NSObject < RxProducer > {
 @public
  RxSubscriber *val$subscriber_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$11 : NSObject < RxFunctionsAction1 > {
 @public
  JavaLangRuntimeException *val$e1_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$11, val$e1_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$12 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init();

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 : NSObject < RxProducer > {
 @public
  RxSubscriber *val$subscriber_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$13 : NSObject < RxFunctionsAction1 > {
 @public
  JavaLangRuntimeException *val$e1_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$13, val$e1_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$14 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$14, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$15 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaLangRuntimeException *val$e2_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$15, val$e2_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *this$0_;
  RxSubscriber *val$subscriber_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15:(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *)outer$
                                                      withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1, this$0_, RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *self, RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$16 : NSObject < RxFunctionsAction1 > {
 @public
  JavaLangRuntimeException *val$e1_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$16, val$e1_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$17 : NSObject < RxFunctionsAction0 > {
 @public
  JavaLangRuntimeException *val$e1_;
}

- (void)call;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$17, val$e1_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxInternalOperatorsOnSubscribeDoOnEachTest_$18 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsub_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDoOnEachTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDoOnEachTest_$18, val$unsub_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testDoOnEach {
  RxObservable *base = RxObservable_justWithId_withId_withId_(@"a", @"b", @"c");
  RxObservable *doOnEach = [((RxObservable *) nil_chk(base)) doOnEachWithRxObserver:sideEffectObserver_];
  [((RxObservable *) nil_chk(doOnEach)) subscribeWithRxObserver:subscribedObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testDoOnEachWithError {
  RxObservable *base = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"fail", @"two", @"three", @"fail");
  RxObservable *errs = [((RxObservable *) nil_chk(base)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init()];
  RxObservable *doOnEach = [((RxObservable *) nil_chk(errs)) doOnEachWithRxObserver:sideEffectObserver_];
  [((RxObservable *) nil_chk(doOnEach)) subscribeWithRxObserver:subscribedObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sideEffectObserver_, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testDoOnEachWithErrorInCallback {
  RxObservable *base = RxObservable_justWithId_withId_withId_withId_(@"one", @"two", @"fail", @"three");
  RxObservable *doOnEach = [((RxObservable *) nil_chk(base)) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init()];
  [((RxObservable *) nil_chk(doOnEach)) subscribeWithRxObserver:subscribedObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(subscribedObserver_, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testIssue1451Case1 {
  jint expectedCount = 3;
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  for (jint i = 0; i < expectedCount; i++) {
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JreLoadStatic(JavaLangBoolean, TRUE), JreLoadStatic(JavaLangBoolean, FALSE)))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init()])) toList])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) subscribe];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(expectedCount, [count get]);
}

- (void)testIssue1451Case2 {
  jint expectedCount = 3;
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  for (jint i = 0; i < expectedCount; i++) {
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JreLoadStatic(JavaLangBoolean, TRUE), JreLoadStatic(JavaLangBoolean, FALSE), JreLoadStatic(JavaLangBoolean, FALSE)))) takeWhileWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init()])) toList])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) subscribe];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(expectedCount, [count get]);
}

- (void)testFatalError {
  @try {
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init()])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init()])) subscribe];
    OrgJunitAssert_failWithNSString_(@"should have thrown an exception");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(e)) getCause] isKindOfClass:[JavaLangNullPointerException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_([((NSException *) nil_chk([e getCause])) getMessage], @"Test NPE");
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Received exception: ", e)];
  }
}

- (void)testOnErrorThrows {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsCompositeException_class_()];
  RxExceptionsCompositeException *ex = (RxExceptionsCompositeException *) cast_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0], [RxExceptionsCompositeException class]);
  id<JavaUtilList> exceptions = [((RxExceptionsCompositeException *) nil_chk(ex)) getExceptions];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(exceptions)) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[exceptions getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertTrueWithBoolean_([[exceptions getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithCompleted {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangRuntimeException *e1 = create_JavaLangRuntimeException_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init()))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(e1)])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithNSException:e1];
  [ts assertNotCompleted];
}

- (void)testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithOnNext {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangRuntimeException *e1 = create_JavaLangRuntimeException_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init()))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(e1)])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  [ts assertNotCompleted];
}

- (void)testIfOnNextActionFailsEmitsErrorAndReportsMoreErrorsToRxJavaHooksNotDownstream {
  @try {
    id<JavaUtilList> list = create_JavaUtilConcurrentCopyOnWriteArrayList_init();
    RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(create_RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(list));
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    JavaLangRuntimeException *e1 = create_JavaLangRuntimeException_init();
    JavaLangRuntimeException *e2 = create_JavaLangRuntimeException_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(e2)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(e1)])) unsafeSubscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
    [ts assertNotCompleted];
    OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ e2 } count:1 type:JavaLangRuntimeException_class_()]), list);
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)testIfCompleteActionFailsEmitsError {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangRuntimeException *e1 = create_JavaLangRuntimeException_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_empty())) doOnCompletedWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(e1)])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithNSException:e1];
  [ts assertNotCompleted];
}

- (void)testUnsubscribe {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  JavaUtilConcurrentAtomicAtomicBoolean *unsub = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsub)])) doOnNextWithRxFunctionsAction1:RxFunctionsActions_empty()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:1];
  [ts unsubscribe];
  [ts assertNotCompleted];
  [ts assertValueCountWithInt:1];
  OrgJunitAssert_assertTrueWithBoolean_([unsub get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(subscribedObserver_);
  RELEASE_(sideEffectObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testDoOnEach);
  methods[2].selector = @selector(testDoOnEachWithError);
  methods[3].selector = @selector(testDoOnEachWithErrorInCallback);
  methods[4].selector = @selector(testIssue1451Case1);
  methods[5].selector = @selector(testIssue1451Case2);
  methods[6].selector = @selector(testFatalError);
  methods[7].selector = @selector(testOnErrorThrows);
  methods[8].selector = @selector(testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithCompleted);
  methods[9].selector = @selector(testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithOnNext);
  methods[10].selector = @selector(testIfOnNextActionFailsEmitsErrorAndReportsMoreErrorsToRxJavaHooksNotDownstream);
  methods[11].selector = @selector(testIfCompleteActionFailsEmitsError);
  methods[12].selector = @selector(testUnsubscribe);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subscribedObserver_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 13, 14 },
    { "sideEffectObserver_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 13, 15 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$9, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$10, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$11, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$12, "Lrx/Observer<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$13, (void *)&RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$14 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest = { "OnSubscribeDoOnEachTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_init(RxInternalOperatorsOnSubscribeDoOnEachTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest *new_RxInternalOperatorsOnSubscribeDoOnEachTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest *create_RxInternalOperatorsOnSubscribeDoOnEachTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDoOnEachTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeDoOnEachTest)

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$1

- (NSString *)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  }
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testDoOnEachWithError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$1, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$2

- (void)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testDoOnEachWithErrorInCallback", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$2, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$2 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$2, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$3

- (JavaLangBoolean *)callWithId:(JavaLangBoolean *)value {
  return value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangBoolean;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIssue1451Case1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Boolean;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$3, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$3 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$3, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$4

- (void)callWithId:(id<JavaUtilList>)booleans {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Boolean;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIssue1451Case1", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/List<Ljava/lang/Boolean;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$4 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$5

- (JavaLangBoolean *)callWithId:(JavaLangBoolean *)value {
  return value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangBoolean;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIssue1451Case2", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Boolean;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$5, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$5 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$5, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$6

- (void)callWithId:(id<JavaUtilList>)booleans {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Boolean;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIssue1451Case2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/List<Ljava/lang/Boolean;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$6 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$7

- (RxObservable *)callWithId:(JavaLangInteger *)integer {
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<*>;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testFatalError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$7;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$7, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$7 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$7, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1

- (void)callWithId:(RxSubscriber *)o {
  @throw create_JavaLangNullPointerException_initWithNSString_(@"Test NPE");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<Ljava/lang/Object;>;)V", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$7;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$7_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$8

- (void)callWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Won't come here"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testFatalError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$8;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$8, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$8 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$8, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$9

- (void)callWithId:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testOnErrorThrows", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$9;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$9, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$9 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$9, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$10

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) setProducerWithRxProducer:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(subscriber)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithCompleted", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$10;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$10, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$10 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$10, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1

- (void)requestWithLong:(jlong)n {
  if (n > 0) {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$subscriber_ onCompleted];
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$10_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$11

- (void)callWithId:(JavaLangInteger *)t {
  @throw val$e1_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e1_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaLangRuntimeException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithCompleted", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$11;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$11, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$11 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$11_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$11, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$12

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) setProducerWithRxProducer:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(subscriber)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithOnNext", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$12;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init(RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$12, init)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$12 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$12, init)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1

- (void)requestWithLong:(jlong)n {
  if (n > 2) {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$subscriber_ onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$12;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$12_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$13

- (void)callWithId:(JavaLangInteger *)t {
  @throw val$e1_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e1_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaLangRuntimeException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndDoesNotFollowWithOnNext", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$13;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$13, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$13 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$13_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$13, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$14

- (void)callWithId:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:e];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndReportsMoreErrorsToRxJavaHooksNotDownstream", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$14;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$14, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$14 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$14, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$15

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) setProducerWithRxProducer:create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(self, subscriber)];
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e2_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaLangRuntimeException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndReportsMoreErrorsToRxJavaHooksNotDownstream", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$15;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e2_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$15, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$15, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1

- (void)requestWithLong:(jlong)n {
  if (n > 2) {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$subscriber_ onErrorWithNSException:this$0_->val$e2_];
  }
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15:(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *)outer$
                                                      withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$15;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$15;LRxSubscriber;", "(Lrx/internal/operators/OnSubscribeDoOnEachTest$15;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOnSubscribeDoOnEachTest_$15;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *self, RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1, initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1_initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_(RxInternalOperatorsOnSubscribeDoOnEachTest_$15 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$15_$1, initWithRxInternalOperatorsOnSubscribeDoOnEachTest_$15_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$16

- (void)callWithId:(JavaLangInteger *)t {
  @throw val$e1_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e1_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaLangRuntimeException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfOnNextActionFailsEmitsErrorAndReportsMoreErrorsToRxJavaHooksNotDownstream", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$16;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$16, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$16 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$16, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$17

- (void)call {
  @throw val$e1_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e1_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRuntimeException;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testIfCompleteActionFailsEmitsError" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$17;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$17, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$17 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$17_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$17, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDoOnEachTest_$18

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsub_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsub_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOnSubscribeDoOnEachTest;", "testUnsubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDoOnEachTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDoOnEachTest_$18;
}

@end

void RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *new_RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$18, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOnSubscribeDoOnEachTest_$18 *create_RxInternalOperatorsOnSubscribeDoOnEachTest_$18_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDoOnEachTest_$18, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
