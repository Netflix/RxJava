//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ScanTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxEventStream.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc2.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScanTests.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxScanTests__Annotations$0();

@interface RxScanTests_$1 : NSObject < RxFunctionsFunc2 >

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)accum
                       withId:(RxEventStream_Event *)perInstanceEvent;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxScanTests_$1)

__attribute__((unused)) static void RxScanTests_$1_init(RxScanTests_$1 *self);

__attribute__((unused)) static RxScanTests_$1 *new_RxScanTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxScanTests_$1 *create_RxScanTests_$1_init();

@interface RxScanTests_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<JavaUtilMap>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxScanTests_$2)

__attribute__((unused)) static void RxScanTests_$2_init(RxScanTests_$2 *self);

__attribute__((unused)) static RxScanTests_$2 *new_RxScanTests_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxScanTests_$2 *create_RxScanTests_$2_init();

@implementation RxScanTests

- (void)testUnsubscribeScan {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxEventStream_getEventStreamWithNSString_withInt_(@"HTTP-ClusterB", 20))) scanWithId:create_JavaUtilHashMap_init() withRxFunctionsFunc2:create_RxScanTests_$1_init()])) takeWithInt:10])) toBlocking])) forEachWithRxFunctionsAction1:create_RxScanTests_$2_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScanTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testUnsubscribeScan);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxScanTests__Annotations$0 };
  static const J2ObjcClassInfo _RxScanTests = { "ScanTests", "rx", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxScanTests;
}

@end

void RxScanTests_init(RxScanTests *self) {
  NSObject_init(self);
}

RxScanTests *new_RxScanTests_init() {
  J2OBJC_NEW_IMPL(RxScanTests, init)
}

RxScanTests *create_RxScanTests_init() {
  J2OBJC_CREATE_IMPL(RxScanTests, init)
}

IOSObjectArray *RxScanTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScanTests)

@implementation RxScanTests_$1

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)accum
                       withId:(RxEventStream_Event *)perInstanceEvent {
  [((id<JavaUtilMap>) nil_chk(accum)) putWithId:@"instance" withId:((RxEventStream_Event *) nil_chk(perInstanceEvent))->instanceId_];
  return accum;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScanTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;LRxEventStream_Event;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lrx/EventStream$Event;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LRxScanTests;", "testUnsubscribeScan", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lrx/EventStream$Event;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxScanTests_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxScanTests_$1;
}

@end

void RxScanTests_$1_init(RxScanTests_$1 *self) {
  NSObject_init(self);
}

RxScanTests_$1 *new_RxScanTests_$1_init() {
  J2OBJC_NEW_IMPL(RxScanTests_$1, init)
}

RxScanTests_$1 *create_RxScanTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxScanTests_$1, init)
}

@implementation RxScanTests_$2

- (void)callWithId:(id<JavaUtilMap>)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:v];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScanTests_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "LRxScanTests;", "testUnsubscribeScan", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxScanTests_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxScanTests_$2;
}

@end

void RxScanTests_$2_init(RxScanTests_$2 *self) {
  NSObject_init(self);
}

RxScanTests_$2 *new_RxScanTests_$2_init() {
  J2OBJC_NEW_IMPL(RxScanTests_$2, init)
}

RxScanTests_$2 *create_RxScanTests_$2_init() {
  J2OBJC_CREATE_IMPL(RxScanTests_$2, init)
}
