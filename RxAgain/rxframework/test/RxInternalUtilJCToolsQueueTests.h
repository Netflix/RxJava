//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/JCToolsQueueTests.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilJCToolsQueueTests")
#ifdef RESTRICT_RxInternalUtilJCToolsQueueTests
#define INCLUDE_ALL_RxInternalUtilJCToolsQueueTests 0
#else
#define INCLUDE_ALL_RxInternalUtilJCToolsQueueTests 1
#endif
#undef RESTRICT_RxInternalUtilJCToolsQueueTests

#if !defined (RxInternalUtilJCToolsQueueTests_) && (INCLUDE_ALL_RxInternalUtilJCToolsQueueTests || defined(INCLUDE_RxInternalUtilJCToolsQueueTests))
#define RxInternalUtilJCToolsQueueTests_

@class JavaUtilConcurrentCyclicBarrier;
@protocol JavaUtilQueue;

@interface RxInternalUtilJCToolsQueueTests : NSObject

#pragma mark Public

- (instancetype)init;

- (void)casBasedUnsafe;

- (void)powerOfTwo;

- (void)testMpmcArrayQueueIterator;

- (void)testMpmcArrayQueueNull;

- (void)testMpmcArrayQueueOfferPoll;

- (void)testMpmcOfferUpToCapacity;

- (void)testMpscLinkedAtomicQueueIterator;

- (void)testMpscLinkedAtomicQueueNull;

- (void)testMpscLinkedAtomicQueueOfferPoll;

- (void)testMpscLinkedAtomicQueuePipelined;

- (void)testMpscLinkedQueueIterator;

- (void)testMpscLinkedQueueNull;

- (void)testMpscLinkedQueueOfferPoll;

- (void)testMpscLinkedQueuePipelined;

- (void)testSpmcArrayQueueIterator;

- (void)testSpmcArrayQueueNull;

- (void)testSpmcArrayQueueOfferPoll;

- (void)testSpmcOfferUpToCapacity;

- (void)testSpscArrayQueueIterator;

- (void)testSpscArrayQueueNull;

- (void)testSpscArrayQueueOfferPoll;

- (void)testSpscAtomicArrayQueueIterator;

- (void)testSpscAtomicArrayQueueNull;

- (void)testSpscAtomicArrayQueueOfferPoll;

- (void)testSpscExactAtomicArrayQueue;

- (void)testSpscExactAtomicArrayQueueIterator;

- (void)testSpscExactAtomicArrayQueueNull;

- (void)testSpscExactAtomicArrayQueueOfferPoll;

- (void)testSpscLinkedAtomicQueueIterator;

- (void)testSpscLinkedAtomicQueueNull;

- (void)testSpscLinkedAtomicQueueOfferPoll;

- (void)testSpscLinkedAtomicQueuePipelined;

- (void)testSpscLinkedQueueIterator;

- (void)testSpscLinkedQueueNull;

- (void)testSpscLinkedQueueOfferPoll;

- (void)testSpscLinkedQueuePipelined;

- (void)testSpscOfferUpToCapacity;

- (void)testSpscUnboundedAtomicArrayQueueIterator;

- (void)testSpscUnboundedAtomicArrayQueueNull;

- (void)testSpscUnboundedAtomicArrayQueueOfferPoll;

- (void)testUnboundedAtomicArrayQueue;

- (void)testUnsafeAccessAddressOf;

#pragma mark Protected

- (void)testOfferPollWithJavaUtilQueue:(id<JavaUtilQueue>)q;

#pragma mark Package-Private

+ (void)awaitWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)cb;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests)

FOUNDATION_EXPORT void RxInternalUtilJCToolsQueueTests_awaitWithJavaUtilConcurrentCyclicBarrier_(JavaUtilConcurrentCyclicBarrier *cb);

FOUNDATION_EXPORT void RxInternalUtilJCToolsQueueTests_init(RxInternalUtilJCToolsQueueTests *self);

FOUNDATION_EXPORT RxInternalUtilJCToolsQueueTests *new_RxInternalUtilJCToolsQueueTests_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilJCToolsQueueTests *create_RxInternalUtilJCToolsQueueTests_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilJCToolsQueueTests)

#endif

#if !defined (RxInternalUtilJCToolsQueueTests_IntField_) && (INCLUDE_ALL_RxInternalUtilJCToolsQueueTests || defined(INCLUDE_RxInternalUtilJCToolsQueueTests_IntField))
#define RxInternalUtilJCToolsQueueTests_IntField_

@interface RxInternalUtilJCToolsQueueTests_IntField : NSObject {
 @public
  jint value_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilJCToolsQueueTests_IntField)

FOUNDATION_EXPORT void RxInternalUtilJCToolsQueueTests_IntField_init(RxInternalUtilJCToolsQueueTests_IntField *self);

FOUNDATION_EXPORT RxInternalUtilJCToolsQueueTests_IntField *new_RxInternalUtilJCToolsQueueTests_IntField_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilJCToolsQueueTests_IntField *create_RxInternalUtilJCToolsQueueTests_IntField_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilJCToolsQueueTests_IntField)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilJCToolsQueueTests")
