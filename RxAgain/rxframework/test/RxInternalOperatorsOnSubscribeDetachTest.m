//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeDetachTest.java
//

#include "CoTouchlabDoppelTestingPlatformUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxInternalOperatorsOnSubscribeDetachTest.h"
#include "RxInternalOperatorsOnSubscribeRange.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$6();

@interface RxInternalOperatorsOnSubscribeDetachTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscriber_;
}

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDetachTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDetachTest_$1, val$subscriber_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeDetachTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDetachTest_$1 *new_RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDetachTest_$1 *create_RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@implementation RxInternalOperatorsOnSubscribeDetachTest

- (void)just {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  JreStrongAssignAndConsume(&o_, new_NSObject_init());
  JavaLangRefWeakReference *wr = create_JavaLangRefWeakReference_initWithId_(o_);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(o_))) count])) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
  JreStrongAssign(&o_, nil);
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertNullWithNSString_withId_(@"Object retained!", [wr get]);
}

- (void)error {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)empty {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_empty())) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)range {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts assertValueCountWithInt:1000];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)backpressured {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  JreStrongAssignAndConsume(&o_, new_NSObject_init());
  JavaLangRefWeakReference *wr = create_JavaLangRefWeakReference_initWithId_(o_);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0LL);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(o_))) count])) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
  JreStrongAssign(&o_, nil);
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertNullWithNSString_withId_(@"Object retained!", [wr get]);
}

- (void)justUnsubscribed {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  JreStrongAssignAndConsume(&o_, new_NSObject_init());
  JavaLangRefWeakReference *wr = create_JavaLangRefWeakReference_initWithId_(o_);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(o_))) count])) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts unsubscribe];
  JreStrongAssign(&o_, nil);
  JavaLangSystem_gc();
  JavaLangThread_sleepWithLong_(200);
  OrgJunitAssert_assertNullWithNSString_withId_(@"Object retained!", [wr get]);
}

- (void)deferredUpstreamProducer {
  JavaUtilConcurrentAtomicAtomicReference *subscriber = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(subscriber)))) onTerminateDetach])) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:2];
  [create_RxInternalOperatorsOnSubscribeRange_initWithInt_withInt_(1, 3) callWithId:[subscriber get]];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:NSObject_class_()]];
  [ts requestMoreWithLong:1];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:NSObject_class_()]];
  [ts assertCompleted];
  [ts assertNoErrors];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDetachTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(just);
  methods[1].selector = @selector(error);
  methods[2].selector = @selector(empty);
  methods[3].selector = @selector(range);
  methods[4].selector = @selector(backpressured);
  methods[5].selector = @selector(justUnsubscribed);
  methods[6].selector = @selector(deferredUpstreamProducer);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "o_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeDetachTest__Annotations$6 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDetachTest = { "OnSubscribeDetachTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDetachTest;
}

@end

void RxInternalOperatorsOnSubscribeDetachTest_init(RxInternalOperatorsOnSubscribeDetachTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDetachTest *new_RxInternalOperatorsOnSubscribeDetachTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDetachTest, init)
}

RxInternalOperatorsOnSubscribeDetachTest *create_RxInternalOperatorsOnSubscribeDetachTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDetachTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDetachTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeDetachTest)

@implementation RxInternalOperatorsOnSubscribeDetachTest_$1

- (void)callWithId:(RxSubscriber *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscriber_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriber_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Object;>;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-Ljava/lang/Object;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-Ljava/lang/Object;>;>;", "LRxInternalOperatorsOnSubscribeDetachTest;", "deferredUpstreamProducer", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDetachTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOnSubscribeDetachTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeDetachTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDetachTest_$1 *new_RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDetachTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOnSubscribeDetachTest_$1 *create_RxInternalOperatorsOnSubscribeDetachTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDetachTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}
