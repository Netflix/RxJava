//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/SubscribersTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxObserversSubscribers.h"
#include "RxObserversSubscribersTest.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "RxTestUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObserversSubscribersTest__Annotations$16();

@interface RxObserversSubscribersTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$1)

J2OBJC_FIELD_SETTER(RxObserversSubscribersTest_$1, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversSubscribersTest_$1 *new_RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$1 *create_RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversSubscribersTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$2)

J2OBJC_FIELD_SETTER(RxObserversSubscribersTest_$2, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversSubscribersTest_$2 *new_RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$2 *create_RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversSubscribersTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$3)

J2OBJC_FIELD_SETTER(RxObserversSubscribersTest_$3, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversSubscribersTest_$3 *new_RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$3 *create_RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversSubscribersTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$4)

J2OBJC_FIELD_SETTER(RxObserversSubscribersTest_$4, val$value_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSubscribersTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSubscribersTest_$4 *new_RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$4 *create_RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSubscribersTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$5)

J2OBJC_FIELD_SETTER(RxObserversSubscribersTest_$5, val$value_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSubscribersTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSubscribersTest_$5 *new_RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$5 *create_RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSubscribersTest_$6 : RxSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)arg$0
                         withBoolean:(jboolean)arg$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribersTest_$6)

__attribute__((unused)) static void RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxObserversSubscribersTest_$6 *self, RxSubscriber *arg$0, jboolean arg$1);

__attribute__((unused)) static RxObserversSubscribersTest_$6 *new_RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxSubscriber *arg$0, jboolean arg$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSubscribersTest_$6 *create_RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxSubscriber *arg$0, jboolean arg$1);

@implementation RxObserversSubscribersTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxObserversSubscribers_class_());
}

- (void)testEmptyOnErrorNotImplemented {
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSubscribers_empty())) onErrorWithNSException:create_RxExceptionsTestException_init()];
    OrgJunitAssert_failWithNSString_(@"OnErrorNotImplementedException not thrown!");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *ex) {
    if (!([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsTestException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"TestException not wrapped, instead: ", [ex getCause]));
    }
  }
}

- (void)testCreate1OnErrorNotImplemented {
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_(RxFunctionsActions_empty()))) onErrorWithNSException:create_RxExceptionsTestException_init()];
    OrgJunitAssert_failWithNSString_(@"OnErrorNotImplementedException not thrown!");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *ex) {
    if (!([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsTestException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"TestException not wrapped, instead: ", [ex getCause]));
    }
  }
}

- (void)testCreate1Null {
  RxObserversSubscribers_createWithRxFunctionsAction1_(nil);
}

- (void)testCreate2Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(nil, throwAction);
}

- (void)testCreate3Null {
  RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), nil);
}

- (void)testCreate4Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(nil, throwAction, RxFunctionsActions_empty());
}

- (void)testCreate5Null {
  RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), nil, RxFunctionsActions_empty());
}

- (void)testCreate6Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), throwAction, nil);
}

- (void)testCreate1Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_(action))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testCreate2Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(action, throwAction))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testCreate3Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(action, throwAction, RxFunctionsActions_empty()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testError2 {
  JavaUtilConcurrentAtomicAtomicReference *value = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxFunctionsAction1> action = create_RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(value);
  RxExceptionsTestException *exception = create_RxExceptionsTestException_init();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), action))) onErrorWithNSException:exception];
  OrgJunitAssert_assertEqualsWithId_withId_(exception, [value get]);
}

- (void)testError3 {
  JavaUtilConcurrentAtomicAtomicReference *value = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxFunctionsAction1> action = create_RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(value);
  RxExceptionsTestException *exception = create_RxExceptionsTestException_init();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), action, RxFunctionsActions_empty()))) onErrorWithNSException:exception];
  OrgJunitAssert_assertEqualsWithId_withId_(exception, [value get]);
}

- (void)testCompleted {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), throwAction, action))) onCompleted];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)testEmptyCompleted {
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_(RxFunctionsActions_empty()))) onCompleted];
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((RxSubscriber *) nil_chk(RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), throwAction))) onCompleted];
}

- (void)shareSubscriptionButNullSubscriber {
  RxSubscriber *s = create_RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(nil, true);
  [s addWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSubscribersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testEmptyOnErrorNotImplemented);
  methods[2].selector = @selector(testCreate1OnErrorNotImplemented);
  methods[3].selector = @selector(testCreate1Null);
  methods[4].selector = @selector(testCreate2Null);
  methods[5].selector = @selector(testCreate3Null);
  methods[6].selector = @selector(testCreate4Null);
  methods[7].selector = @selector(testCreate5Null);
  methods[8].selector = @selector(testCreate6Null);
  methods[9].selector = @selector(testCreate1Value);
  methods[10].selector = @selector(testCreate2Value);
  methods[11].selector = @selector(testCreate3Value);
  methods[12].selector = @selector(testError2);
  methods[13].selector = @selector(testError3);
  methods[14].selector = @selector(testCompleted);
  methods[15].selector = @selector(testEmptyCompleted);
  methods[16].selector = @selector(shareSubscriptionButNullSubscriber);
  methods[17].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversSubscribersTest__Annotations$0, (void *)&RxObserversSubscribersTest__Annotations$1, (void *)&RxObserversSubscribersTest__Annotations$2, (void *)&RxObserversSubscribersTest__Annotations$3, (void *)&RxObserversSubscribersTest__Annotations$4, (void *)&RxObserversSubscribersTest__Annotations$5, (void *)&RxObserversSubscribersTest__Annotations$6, (void *)&RxObserversSubscribersTest__Annotations$7, (void *)&RxObserversSubscribersTest__Annotations$8, (void *)&RxObserversSubscribersTest__Annotations$9, (void *)&RxObserversSubscribersTest__Annotations$10, (void *)&RxObserversSubscribersTest__Annotations$11, (void *)&RxObserversSubscribersTest__Annotations$12, (void *)&RxObserversSubscribersTest__Annotations$13, (void *)&RxObserversSubscribersTest__Annotations$14, (void *)&RxObserversSubscribersTest__Annotations$15, (void *)&RxObserversSubscribersTest__Annotations$16 };
  static const J2ObjcClassInfo _RxObserversSubscribersTest = { "SubscribersTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 18, 0, -1, -1, -1, -1, -1 };
  return &_RxObserversSubscribersTest;
}

@end

void RxObserversSubscribersTest_init(RxObserversSubscribersTest *self) {
  NSObject_init(self);
}

RxObserversSubscribersTest *new_RxObserversSubscribersTest_init() {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest, init)
}

RxObserversSubscribersTest *create_RxObserversSubscribersTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest, init)
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSubscribersTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSubscribersTest)

@implementation RxObserversSubscribersTest_$1

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversSubscribersTest;", "testCreate1Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversSubscribersTest_$1;
}

@end

void RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversSubscribersTest_$1 *new_RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversSubscribersTest_$1 *create_RxObserversSubscribersTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversSubscribersTest_$2

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversSubscribersTest;", "testCreate2Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$2 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversSubscribersTest_$2;
}

@end

void RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversSubscribersTest_$2 *new_RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversSubscribersTest_$2 *create_RxObserversSubscribersTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversSubscribersTest_$3

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversSubscribersTest;", "testCreate3Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$3 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversSubscribersTest_$3;
}

@end

void RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSubscribersTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversSubscribersTest_$3 *new_RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversSubscribersTest_$3 *create_RxObserversSubscribersTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversSubscribersTest_$4

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSubscribersTest;", "testError2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$4 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObserversSubscribersTest_$4;
}

@end

void RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSubscribersTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversSubscribersTest_$4 *new_RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSubscribersTest_$4 *create_RxObserversSubscribersTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSubscribersTest_$5

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSubscribersTest;", "testError3", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$5 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObserversSubscribersTest_$5;
}

@end

void RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSubscribersTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversSubscribersTest_$5 *new_RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSubscribersTest_$5 *create_RxObserversSubscribersTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSubscribersTest_$6

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)arg$0
                         withBoolean:(jboolean)arg$1 {
  RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(self, arg$0, arg$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxSubscriber:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LRxSubscriber;Z", "(Lrx/Subscriber<*>;Z)V", "LRxObserversSubscribersTest;", "shareSubscriptionButNullSubscriber", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSubscribersTest_$6 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 6, -1, 7, 8, -1 };
  return &_RxObserversSubscribersTest_$6;
}

@end

void RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxObserversSubscribersTest_$6 *self, RxSubscriber *arg$0, jboolean arg$1) {
  RxSubscriber_initWithRxSubscriber_withBoolean_(self, arg$0, arg$1);
}

RxObserversSubscribersTest_$6 *new_RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxSubscriber *arg$0, jboolean arg$1) {
  J2OBJC_NEW_IMPL(RxObserversSubscribersTest_$6, initWithRxSubscriber_withBoolean_, arg$0, arg$1)
}

RxObserversSubscribersTest_$6 *create_RxObserversSubscribersTest_$6_initWithRxSubscriber_withBoolean_(RxSubscriber *arg$0, jboolean arg$1) {
  J2OBJC_CREATE_IMPL(RxObserversSubscribersTest_$6, initWithRxSubscriber_withBoolean_, arg$0, arg$1)
}
