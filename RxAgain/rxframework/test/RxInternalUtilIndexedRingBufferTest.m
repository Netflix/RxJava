//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/IndexedRingBufferTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalUtilIndexedRingBuffer.h"
#include "RxInternalUtilIndexedRingBufferTest.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxInternalUtilIndexedRingBufferTest ()

- (id<RxFunctionsFunc1>)accumulateWithJavaUtilArrayList:(JavaUtilArrayList *)list;

- (id<RxFunctionsFunc1>)print;

- (id<RxFunctionsFunc1>)newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)c OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static id<RxFunctionsFunc1> RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest *self, JavaUtilArrayList *list);

__attribute__((unused)) static id<RxFunctionsFunc1> RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilIndexedRingBufferTest *self, JavaUtilConcurrentAtomicAtomicInteger *c);

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$9();

@interface RxInternalUtilIndexedRingBufferTest_LSubscription () {
 @public
  jint n_;
}

@end

@interface RxInternalUtilIndexedRingBufferTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilArrayList *val$list_;
}

- (JavaLangBoolean *)callWithId:(NSString *)t1;

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$1)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$1, val$list_, JavaUtilArrayList *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$1 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$1 *new_RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$1 *create_RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0);

@interface RxInternalUtilIndexedRingBufferTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  jint i_;
  JavaUtilArrayList *val$list_;
}

- (JavaLangBoolean *)callWithId:(NSString *)t1;

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$2)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$2, val$list_, JavaUtilArrayList *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$2 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$2 *new_RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$2 *create_RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0);

@interface RxInternalUtilIndexedRingBufferTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalUtilIndexedRingBuffer *val$list_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$3)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$3, val$list_, RxInternalUtilIndexedRingBuffer *)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$3, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$3 *self, RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$3 *new_RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$3 *create_RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxInternalUtilIndexedRingBufferTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalUtilIndexedRingBuffer *val$list_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$4)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$4, val$list_, RxInternalUtilIndexedRingBuffer *)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$4, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$4 *self, RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$4 *new_RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$4 *create_RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxInternalUtilIndexedRingBufferTest_$5 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalUtilIndexedRingBuffer *val$list_;
  id<JavaUtilList> val$exceptions_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                                       withJavaUtilList:(id<JavaUtilList>)capture$1
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$5)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$5, val$list_, RxInternalUtilIndexedRingBuffer *)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$5, val$exceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$5, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$5 *self, RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$5 *new_RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$5 *create_RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxInternalUtilIndexedRingBufferTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalUtilIndexedRingBuffer *val$list_;
  id<JavaUtilList> val$exceptions_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                                       withJavaUtilList:(id<JavaUtilList>)capture$1
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$6)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$6, val$list_, RxInternalUtilIndexedRingBuffer *)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$6, val$exceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$6, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$6 *self, RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$6 *new_RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$6 *create_RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxInternalUtilIndexedRingBufferTest_$7 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilArrayList *val$list_;
}

- (JavaLangBoolean *)callWithId:(id)t1;

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$7)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$7, val$list_, JavaUtilArrayList *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$7 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$7 *new_RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$7 *create_RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0);

@interface RxInternalUtilIndexedRingBufferTest_$8 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(id)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$8)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$8_init(RxInternalUtilIndexedRingBufferTest_$8 *self);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$8 *new_RxInternalUtilIndexedRingBufferTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$8 *create_RxInternalUtilIndexedRingBufferTest_$8_init();

@interface RxInternalUtilIndexedRingBufferTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$c_;
}

- (JavaLangBoolean *)callWithId:(id)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilIndexedRingBufferTest_$9)

J2OBJC_FIELD_SETTER(RxInternalUtilIndexedRingBufferTest_$9, val$c_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilIndexedRingBufferTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$9 *new_RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilIndexedRingBufferTest_$9 *create_RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxInternalUtilIndexedRingBufferTest

- (void)add {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(1)];
  [list addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(2)];
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [c get]);
}

- (void)removeEnd {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(1)];
  jint n2 = [list addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(2)];
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [c get]);
  [list removeWithInt:n2];
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c2)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [c2 get]);
}

- (void)removeMiddle {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(1)];
  jint n2 = [list addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(2)];
  [list addWithId:create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(3)];
  [list removeWithInt:n2];
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [c get]);
}

- (void)addRemoveAdd {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:@"one"];
  [list addWithId:@"two"];
  [list addWithId:@"three"];
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, values)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [values size]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [values getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:2]);
  [list removeWithInt:1];
  [values clear];
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, values)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [values size]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [values getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:1]);
  [list addWithId:@"four"];
  [values clear];
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, values)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [values size]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [values getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"four", [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:2]);
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [c get]);
}

- (void)addThousands {
  NSString *s = @"s";
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  for (jint i = 0; i < 10000; i++) {
    [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:s];
  }
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [c get]);
  [list removeWithInt:5000];
  [c setWithInt:0];
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(9999, [c get]);
  [list addWithId:@"one"];
  [list addWithId:@"two"];
  [c setWithInt:0];
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10001, [c get]);
}

- (void)testForEachWithIndex {
  RxInternalUtilIndexedRingBuffer *buffer = RxInternalUtilIndexedRingBuffer_getInstance();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(buffer)) addWithId:@"zero"];
  [buffer addWithId:@"one"];
  [buffer addWithId:@"two"];
  [buffer addWithId:@"three"];
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  jint nextIndex = [buffer forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"zero", @"one", @"two", @"three" } count:4 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, nextIndex);
  [list clear];
  nextIndex = [buffer forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list) withInt:0];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"zero", @"one", @"two", @"three" } count:4 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, nextIndex);
  [list clear];
  nextIndex = [buffer forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list) withInt:2];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"two", @"three", @"zero", @"one" } count:4 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, nextIndex);
  [list clear];
  nextIndex = [buffer forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list) withInt:3];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"three", @"zero", @"one", @"two" } count:4 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, nextIndex);
  [list clear];
  nextIndex = [buffer forEachWithRxFunctionsFunc1:create_RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(list) withInt:3];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"three" } count:1 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, nextIndex);
  [list clear];
  nextIndex = [buffer forEachWithRxFunctionsFunc1:create_RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(list) withInt:0];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(list, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"zero", @"one", @"two" } count:3 type:NSString_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, nextIndex);
}

- (void)testForEachAcrossSections {
  RxInternalUtilIndexedRingBuffer *buffer = RxInternalUtilIndexedRingBuffer_getInstance();
  for (jint i = 0; i < 10000; i++) {
    [((RxInternalUtilIndexedRingBuffer *) nil_chk(buffer)) addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  jint nextIndex = [((RxInternalUtilIndexedRingBuffer *) nil_chk(buffer)) forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list) withInt:5000];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10000, [list size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(5000), [list getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(9999), [list getWithInt:4999]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(0), [list getWithInt:5000]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(4999), [list getWithInt:9999]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(5000, nextIndex);
}

- (void)longRunningAddRemoveAddDoesntLeakMemory {
  NSString *s = @"s";
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  for (jint i = 0; i < 20000; i++) {
    jint index = [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) addWithId:s];
    [list removeWithInt:index];
  }
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [c get]);
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(list->index_)) get] < JreLoadStatic(RxInternalUtilIndexedRingBuffer, SIZE));
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [list->index_ get]);
}

- (void)testConcurrentAdds {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  RxScheduler_Worker *w1 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  RxScheduler_Worker *w2 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  [((RxScheduler_Worker *) nil_chk(w1)) scheduleWithRxFunctionsAction0:create_RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(list, latch)];
  [((RxScheduler_Worker *) nil_chk(w2)) scheduleWithRxFunctionsAction0:create_RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(list, latch)];
  [latch await];
  [w1 unsubscribe];
  [w2 unsubscribe];
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(20000, [c get]);
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, values)];
  JavaUtilCollections_sortWithJavaUtilList_(values);
  jint j = 0;
  for (JavaLangInteger *boxed__ in values) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    OrgJunitAssert_assertEqualsWithLong_withLong_(i, j++);
  }
}

- (void)testConcurrentAddAndRemoves {
  RxInternalUtilIndexedRingBuffer *list = RxInternalUtilIndexedRingBuffer_getInstance();
  id<JavaUtilList> exceptions = JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilArrayList_init());
  RxScheduler_Worker *w1 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  RxScheduler_Worker *w2 = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  [((RxScheduler_Worker *) nil_chk(w1)) scheduleWithRxFunctionsAction0:create_RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(list, exceptions, latch)];
  [((RxScheduler_Worker *) nil_chk(w2)) scheduleWithRxFunctionsAction0:create_RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(list, exceptions, latch)];
  [latch await];
  [w1 unsubscribe];
  [w2 unsubscribe];
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxInternalUtilIndexedRingBuffer *) nil_chk(list)) forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(20000, [c get]);
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  [list forEachWithRxFunctionsFunc1:RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, values)];
  JavaUtilCollections_sortWithJavaUtilList_(values);
  jint j = 0;
  for (JavaLangInteger *boxed__ in values) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    OrgJunitAssert_assertEqualsWithLong_withLong_(i, j++);
  }
  if ([((id<JavaUtilList>) nil_chk(exceptions)) size] > 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Exceptions: ", exceptions)];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [exceptions size]);
}

- (id<RxFunctionsFunc1>)accumulateWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  return RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(self, list);
}

- (id<RxFunctionsFunc1>)print {
  return create_RxInternalUtilIndexedRingBufferTest_$8_init();
}

- (id<RxFunctionsFunc1>)newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)c {
  return RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(self, c);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilIndexedRingBufferTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, 10, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x2, -1, -1, -1, 14, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(add);
  methods[1].selector = @selector(removeEnd);
  methods[2].selector = @selector(removeMiddle);
  methods[3].selector = @selector(addRemoveAdd);
  methods[4].selector = @selector(addThousands);
  methods[5].selector = @selector(testForEachWithIndex);
  methods[6].selector = @selector(testForEachAcrossSections);
  methods[7].selector = @selector(longRunningAddRemoveAddDoesntLeakMemory);
  methods[8].selector = @selector(testConcurrentAdds);
  methods[9].selector = @selector(testConcurrentAddAndRemoves);
  methods[10].selector = @selector(accumulateWithJavaUtilArrayList:);
  methods[11].selector = @selector(print);
  methods[12].selector = @selector(newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$0, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$1, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$2, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$3, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$4, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$5, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$6, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$7, "LJavaLangInterruptedException;", (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$8, (void *)&RxInternalUtilIndexedRingBufferTest__Annotations$9, "accumulate", "LJavaUtilArrayList;", "<T:Ljava/lang/Object;>(Ljava/util/ArrayList<TT;>;)Lrx/functions/Func1<TT;Ljava/lang/Boolean;>;", "()Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;", "newCounterAction", "LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicInteger;)Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;", "LRxInternalUtilIndexedRingBufferTest_LSubscription;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest = { "IndexedRingBufferTest", "rx.internal.util", ptrTable, methods, NULL, 7, 0x1, 14, 0, -1, 18, -1, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest;
}

@end

id<RxFunctionsFunc1> RxInternalUtilIndexedRingBufferTest_accumulateWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest *self, JavaUtilArrayList *list) {
  return create_RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(list);
}

id<RxFunctionsFunc1> RxInternalUtilIndexedRingBufferTest_newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilIndexedRingBufferTest *self, JavaUtilConcurrentAtomicAtomicInteger *c) {
  return create_RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(c);
}

void RxInternalUtilIndexedRingBufferTest_init(RxInternalUtilIndexedRingBufferTest *self) {
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest *new_RxInternalUtilIndexedRingBufferTest_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest, init)
}

RxInternalUtilIndexedRingBufferTest *create_RxInternalUtilIndexedRingBufferTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest, init)
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilIndexedRingBufferTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilIndexedRingBufferTest)

@implementation RxInternalUtilIndexedRingBufferTest_LSubscription

- (instancetype)initWithInt:(jint)n {
  RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(self, n);
  return self;
}

- (void)unsubscribe {
}

- (jboolean)isUnsubscribed {
  return false;
}

- (NSString *)description {
  return JreStrcat("$I", @"Subscription=>", n_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "LRxInternalUtilIndexedRingBufferTest;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_LSubscription = { "LSubscription", "rx.internal.util", ptrTable, methods, fields, 7, 0x9, 4, 1, 2, -1, -1, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_LSubscription;
}

@end

void RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(RxInternalUtilIndexedRingBufferTest_LSubscription *self, jint n) {
  NSObject_init(self);
  self->n_ = n;
}

RxInternalUtilIndexedRingBufferTest_LSubscription *new_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(jint n) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_LSubscription, initWithInt_, n)
}

RxInternalUtilIndexedRingBufferTest_LSubscription *create_RxInternalUtilIndexedRingBufferTest_LSubscription_initWithInt_(jint n) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_LSubscription, initWithInt_, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilIndexedRingBufferTest_LSubscription)

@implementation RxInternalUtilIndexedRingBufferTest_$1

- (JavaLangBoolean *)callWithId:(NSString *)t1 {
  [((JavaUtilArrayList *) nil_chk(val$list_)) addWithId:t1];
  return JavaLangBoolean_valueOfWithBoolean_(false);
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxInternalUtilIndexedRingBufferTest;", "testForEachWithIndex", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$1 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$1;
}

@end

void RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$1 *self, JavaUtilArrayList *capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$1 *new_RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$1, initWithJavaUtilArrayList_, capture$0)
}

RxInternalUtilIndexedRingBufferTest_$1 *create_RxInternalUtilIndexedRingBufferTest_$1_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$1, initWithJavaUtilArrayList_, capture$0)
}

@implementation RxInternalUtilIndexedRingBufferTest_$2

- (JavaLangBoolean *)callWithId:(NSString *)t1 {
  [((JavaUtilArrayList *) nil_chk(val$list_)) addWithId:t1];
  i_++;
  return JavaLangBoolean_valueOfWithBoolean_(i_ != 3);
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$list_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/lang/String;>;)V", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LRxInternalUtilIndexedRingBufferTest;", "testForEachWithIndex", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$2 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$2;
}

@end

void RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$2 *self, JavaUtilArrayList *capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
  self->i_ = 0;
}

RxInternalUtilIndexedRingBufferTest_$2 *new_RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$2, initWithJavaUtilArrayList_, capture$0)
}

RxInternalUtilIndexedRingBufferTest_$2 *create_RxInternalUtilIndexedRingBufferTest_$2_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$2, initWithJavaUtilArrayList_, capture$0)
}

@implementation RxInternalUtilIndexedRingBufferTest_$3

- (void)call {
  for (jint i = 0; i < 10000; i++) {
    [((RxInternalUtilIndexedRingBuffer *) nil_chk(val$list_)) addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalUtilIndexedRingBuffer:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LRxInternalUtilIndexedRingBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilIndexedRingBuffer;LJavaUtilConcurrentCountDownLatch;", "(Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;", "LRxInternalUtilIndexedRingBufferTest;", "testConcurrentAdds" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$3 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$3;
}

@end

void RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$3 *self, RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$3 *new_RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$3, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxInternalUtilIndexedRingBufferTest_$3 *create_RxInternalUtilIndexedRingBufferTest_$3_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$3, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxInternalUtilIndexedRingBufferTest_$4

- (void)call {
  for (jint i = 10000; i < 20000; i++) {
    [((RxInternalUtilIndexedRingBuffer *) nil_chk(val$list_)) addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalUtilIndexedRingBuffer:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LRxInternalUtilIndexedRingBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilIndexedRingBuffer;LJavaUtilConcurrentCountDownLatch;", "(Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;", "LRxInternalUtilIndexedRingBufferTest;", "testConcurrentAdds" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$4 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$4;
}

@end

void RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$4 *self, RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$4 *new_RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$4, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxInternalUtilIndexedRingBufferTest_$4 *create_RxInternalUtilIndexedRingBufferTest_$4_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$4, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxInternalUtilIndexedRingBufferTest_$5

- (void)call {
  @try {
    for (jint i = 10000; i < 20000; i++) {
      [((RxInternalUtilIndexedRingBuffer *) nil_chk(val$list_)) addWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((id<JavaUtilList>) nil_chk(val$exceptions_)) addWithId:e];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                                       withJavaUtilList:(id<JavaUtilList>)capture$1
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$exceptions_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalUtilIndexedRingBuffer:withJavaUtilList:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LRxInternalUtilIndexedRingBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$exceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilIndexedRingBuffer;LJavaUtilList;LJavaUtilConcurrentCountDownLatch;", "(Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;Ljava/util/List<Ljava/lang/Exception;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;", "Ljava/util/List<Ljava/lang/Exception;>;", "LRxInternalUtilIndexedRingBufferTest;", "testConcurrentAddAndRemoves" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$5 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$5;
}

@end

void RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$5 *self, RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$exceptions_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$5 *new_RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$5, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxInternalUtilIndexedRingBufferTest_$5 *create_RxInternalUtilIndexedRingBufferTest_$5_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$5, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxInternalUtilIndexedRingBufferTest_$6

- (void)call {
  @try {
    for (jint i = 0; i < 10000; i++) {
      jint index = [((RxInternalUtilIndexedRingBuffer *) nil_chk(val$list_)) addWithId:JavaLangInteger_valueOfWithInt_(i)];
      JavaLangInteger *v = [val$list_ removeWithInt:index];
      if (v == nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"should not get null");
      }
      [val$list_ addWithId:v];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((id<JavaUtilList>) nil_chk(val$exceptions_)) addWithId:e];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithRxInternalUtilIndexedRingBuffer:(RxInternalUtilIndexedRingBuffer *)capture$0
                                       withJavaUtilList:(id<JavaUtilList>)capture$1
                   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$exceptions_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalUtilIndexedRingBuffer:withJavaUtilList:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LRxInternalUtilIndexedRingBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$exceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilIndexedRingBuffer;LJavaUtilList;LJavaUtilConcurrentCountDownLatch;", "(Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;Ljava/util/List<Ljava/lang/Exception;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/internal/util/IndexedRingBuffer<Ljava/lang/Integer;>;", "Ljava/util/List<Ljava/lang/Exception;>;", "LRxInternalUtilIndexedRingBufferTest;", "testConcurrentAddAndRemoves" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$6 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, -1, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$6;
}

@end

void RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBufferTest_$6 *self, RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$exceptions_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$6 *new_RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$6, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxInternalUtilIndexedRingBufferTest_$6 *create_RxInternalUtilIndexedRingBufferTest_$6_initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_(RxInternalUtilIndexedRingBuffer *capture$0, id<JavaUtilList> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$6, initWithRxInternalUtilIndexedRingBuffer_withJavaUtilList_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxInternalUtilIndexedRingBufferTest_$7

- (JavaLangBoolean *)callWithId:(id)t1 {
  [((JavaUtilArrayList *) nil_chk(val$list_)) addWithId:t1];
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilArrayList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "(TT;)Ljava/lang/Boolean;", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<TT;>;)V", "Ljava/util/ArrayList<TT;>;", "LRxInternalUtilIndexedRingBufferTest;", "accumulateWithJavaUtilArrayList:", "Ljava/lang/Object;Lrx/functions/Func1<TT;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$7 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$7;
}

@end

void RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(RxInternalUtilIndexedRingBufferTest_$7 *self, JavaUtilArrayList *capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$7 *new_RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$7, initWithJavaUtilArrayList_, capture$0)
}

RxInternalUtilIndexedRingBufferTest_$7 *create_RxInternalUtilIndexedRingBufferTest_$7_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$7, initWithJavaUtilArrayList_, capture$0)
}

@implementation RxInternalUtilIndexedRingBufferTest_$8

- (JavaLangBoolean *)callWithId:(id)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Object: ", t1)];
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilIndexedRingBufferTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalUtilIndexedRingBufferTest;", "print", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$8 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$8;
}

@end

void RxInternalUtilIndexedRingBufferTest_$8_init(RxInternalUtilIndexedRingBufferTest_$8 *self) {
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$8 *new_RxInternalUtilIndexedRingBufferTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$8, init)
}

RxInternalUtilIndexedRingBufferTest_$8 *create_RxInternalUtilIndexedRingBufferTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$8, init)
}

@implementation RxInternalUtilIndexedRingBufferTest_$9

- (JavaLangBoolean *)callWithId:(id)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$c_)) incrementAndGet];
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilIndexedRingBufferTest;", "newCounterActionWithJavaUtilConcurrentAtomicAtomicInteger:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalUtilIndexedRingBufferTest_$9 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalUtilIndexedRingBufferTest_$9;
}

@end

void RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilIndexedRingBufferTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxInternalUtilIndexedRingBufferTest_$9 *new_RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilIndexedRingBufferTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilIndexedRingBufferTest_$9 *create_RxInternalUtilIndexedRingBufferTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilIndexedRingBufferTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
