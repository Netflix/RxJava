//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ErrorHandlingTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxErrorHandlingTests.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxErrorHandlingTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxErrorHandlingTests__Annotations$1();

@interface RxErrorHandlingTests_$1 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicReference *val$caughtError_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangLong *)args;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxErrorHandlingTests_$1)

J2OBJC_FIELD_SETTER(RxErrorHandlingTests_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxErrorHandlingTests_$1, val$caughtError_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxErrorHandlingTests_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

__attribute__((unused)) static RxErrorHandlingTests_$1 *new_RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxErrorHandlingTests_$1 *create_RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

@interface RxErrorHandlingTests_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicReference *val$caughtError_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangLong *)args;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxErrorHandlingTests_$2)

J2OBJC_FIELD_SETTER(RxErrorHandlingTests_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxErrorHandlingTests_$2, val$caughtError_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxErrorHandlingTests_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

__attribute__((unused)) static RxErrorHandlingTests_$2 *new_RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxErrorHandlingTests_$2 *create_RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

@implementation RxErrorHandlingTests

- (void)testOnNextError {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *caughtError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *o = RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(50, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
  RxSubscriber *observer = create_RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(latch, caughtError);
  [((RxObservable *) nil_chk(o)) subscribeWithRxSubscriber:observer];
  [latch awaitWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertNotNullWithId_([caughtError get]);
}

- (void)testOnNextErrorAcrossThread {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *caughtError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *o = RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(50, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
  RxSubscriber *observer = create_RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(latch, caughtError);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:observer];
  [latch awaitWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertNotNullWithId_([caughtError get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxErrorHandlingTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testOnNextError);
  methods[1].selector = @selector(testOnNextErrorAcrossThread);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxErrorHandlingTests__Annotations$0, (void *)&RxErrorHandlingTests__Annotations$1 };
  static const J2ObjcClassInfo _RxErrorHandlingTests = { "ErrorHandlingTests", "rx", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxErrorHandlingTests;
}

@end

void RxErrorHandlingTests_init(RxErrorHandlingTests *self) {
  NSObject_init(self);
}

RxErrorHandlingTests *new_RxErrorHandlingTests_init() {
  J2OBJC_NEW_IMPL(RxErrorHandlingTests, init)
}

RxErrorHandlingTests *create_RxErrorHandlingTests_init() {
  J2OBJC_CREATE_IMPL(RxErrorHandlingTests, init)
}

IOSObjectArray *RxErrorHandlingTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxErrorHandlingTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxErrorHandlingTests)

@implementation RxErrorHandlingTests_$1

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"completed"];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"error: ", e)];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$caughtError_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(JavaLangLong *)args {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"forced failure");
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1 {
  RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$caughtError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$caughtError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangLong;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxErrorHandlingTests;", "testOnNextError", "Lrx/Subscriber<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxErrorHandlingTests_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxErrorHandlingTests_$1;
}

@end

void RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxErrorHandlingTests_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$caughtError_, capture$1);
  RxSubscriber_init(self);
}

RxErrorHandlingTests_$1 *new_RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_NEW_IMPL(RxErrorHandlingTests_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

RxErrorHandlingTests_$1 *create_RxErrorHandlingTests_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_CREATE_IMPL(RxErrorHandlingTests_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

@implementation RxErrorHandlingTests_$2

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"completed"];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"error: ", e)];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$caughtError_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(JavaLangLong *)args {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"forced failure");
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1 {
  RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$caughtError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$caughtError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangLong;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxErrorHandlingTests;", "testOnNextErrorAcrossThread", "Lrx/Subscriber<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxErrorHandlingTests_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxErrorHandlingTests_$2;
}

@end

void RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxErrorHandlingTests_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$caughtError_, capture$1);
  RxSubscriber_init(self);
}

RxErrorHandlingTests_$2 *new_RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_NEW_IMPL(RxErrorHandlingTests_$2, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

RxErrorHandlingTests_$2 *create_RxErrorHandlingTests_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_CREATE_IMPL(RxErrorHandlingTests_$2, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}
