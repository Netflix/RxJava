//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/SingleTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSingleTest")
#ifdef RESTRICT_RxSingleTest
#define INCLUDE_ALL_RxSingleTest 0
#else
#define INCLUDE_ALL_RxSingleTest 1
#endif
#undef RESTRICT_RxSingleTest

#if !defined (RxSingleTest_) && (INCLUDE_ALL_RxSingleTest || defined(INCLUDE_RxSingleTest))
#define RxSingleTest_

@interface RxSingleTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)after;

- (void)deferShouldCallSingleFactoryForEachSubscriber;

- (void)deferShouldNotCallFactoryFuncUntilSubscriberSubscribes;

- (void)deferShouldPassErrorFromSingleFactoryToTheSubscriber;

- (void)deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull;

- (void)deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull;

- (void)deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitError;

- (void)deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitValue;

- (void)delayWithSchedulerShouldDelayCompletion;

- (void)delayWithSchedulerShouldShortCutWithFailure;

- (void)doAfterTerminateActionShouldBeInvokedAfterOnError;

- (void)doAfterTerminateActionShouldBeInvokedAfterOnSuccess;

- (void)doAfterTerminateActionShouldNotBeInvokedUntilSubscriberSubscribes;

- (void)doOnEachError;

- (void)doOnEachNull;

- (void)doOnEachSuccess;

- (void)doOnErrorNull;

- (void)doOnErrorShouldCallActionIfErrorHasOccurred;

- (void)doOnErrorShouldNotCallActionIfNoErrorHasOccurred;

- (void)doOnErrorShouldThrowCompositeExceptionIfOnErrorActionThrows;

- (void)doOnSubscribeShouldInvokeAction;

- (void)doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes;

- (void)doOnSuccessNull;

- (void)doOnSuccessShouldInvokeAction;

- (void)doOnSuccessShouldNotCallActionIfSingleThrowsError;

- (void)doOnSuccessShouldNotSwallowExceptionThrownByAction;

- (void)doOnSuccessShouldPassErrorFromActionToSubscriber;

- (void)doOnUnsubscribeShouldInvokeActionAfterError;

- (void)doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription;

- (void)doOnUnsubscribeShouldInvokeActionAfterSuccess;

- (void)flatMapCompletableComplete;

- (void)flatMapCompletableError;

- (void)flatMapCompletableException;

- (void)flatMapCompletableNullCompletable;

- (void)iterableToArrayShouldConvertList;

- (void)iterableToArrayShouldConvertSet;

- (void)iterableToArrayShouldThrowNullPointerExceptionIfIterableNull;

- (void)onErrorResumeNextViaFunctionShouldFailIfFunctionReturnsNull;

- (void)onErrorResumeNextViaFunctionShouldNotInterruptSuccessfulSingle;

- (void)onErrorResumeNextViaFunctionShouldPreventNullFunction;

- (void)onErrorResumeNextViaFunctionShouldResumeWithPassedSingleInCaseOfError;

- (void)onErrorResumeNextViaSingleShouldNotInterruptSuccessfulSingle;

- (void)onErrorResumeNextViaSingleShouldPreventNullSingle;

- (void)onErrorResumeNextViaSingleShouldResumeWithPassedSingleInCaseOfError;

- (void)setUp;

- (void)shouldEmitValueFromCallable;

- (void)shouldPassErrorFromCallable;

- (void)subscribeWithNullObserver;

- (void)subscribeWithObserver;

- (void)subscribeWithObserverAndGetError;

- (void)takeUntilCompletableFires;

- (void)takeUntilError_withCompletable_shouldMatch;

- (void)takeUntilError_withObservable_shouldMatch;

- (void)takeUntilError_withSingle_shouldMatch;

- (void)takeUntilObservableCompletes;

- (void)takeUntilObservableFires;

- (void)takeUntilSingleFires;

- (void)takeUntilSourceErrorUnsubscribes_withCompletable;

- (void)takeUntilSourceErrorUnsubscribes_withObservable;

- (void)takeUntilSourceErrorUnsubscribes_withSingle;

- (void)takeUntilSourceUnsubscribes_withCompletable;

- (void)takeUntilSourceUnsubscribes_withObservable;

- (void)takeUntilSourceUnsubscribes_withSingle;

- (void)testAsync;

- (void)testBackpressureAsObservable;

- (void)testCreateError;

- (void)testCreateSuccess;

- (void)testFlatMap;

- (void)testHelloWorld;

- (void)testHelloWorld2;

- (void)testHookCreate;

- (void)testHookSubscribeReturn;

- (void)testHookSubscribeStart;

- (void)testHookUnsafeSubscribeReturn;

- (void)testHookUnsafeSubscribeStart;

- (void)testMap;

- (void)testMerge;

- (void)testMergeWith;

- (void)testRetry;

- (void)testRetryWhen;

- (void)testRetryWithCount;

- (void)testRetryWithPredicate;

- (void)testReturnUnsubscribedWhenHookThrowsError;

- (void)testTimeout;

- (void)testTimeoutWithFallback;

- (void)testToBlocking;

- (void)testToObservable;

- (void)testUnsubscribe;

- (void)testUnsubscribe2;

- (void)testUnsubscribeViaReturnedSubscription;

- (void)testZipWith;

- (void)toCompletableError;

- (void)toCompletableSuccess;

- (void)toFunctionReceivesObservableReturnsResult;

- (void)unsubscribeComposesThrough;

- (void)unsubscribeComposesThroughAsync;

- (void)zip2Singles;

- (void)zip3Singles;

- (void)zip4Singles;

- (void)zip5Singles;

- (void)zip6Singles;

- (void)zip7Singles;

- (void)zip8Singles;

- (void)zip9Singles;

- (void)zipEmptyIterableShouldThrow;

- (void)zipIterableShouldZipListOfSingles;

- (void)zipIterableShouldZipSetOfSingles;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest)

FOUNDATION_EXPORT void RxSingleTest_init(RxSingleTest *self);

FOUNDATION_EXPORT RxSingleTest *new_RxSingleTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSingleTest *create_RxSingleTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSingleTest)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSingleTest")
