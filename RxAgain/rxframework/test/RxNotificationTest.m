//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/NotificationTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxNotification.h"
#include "RxNotificationTest.h"
#include "RxObserver.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxNotificationTest__Annotations$14();

inline jlong RxNotificationTest_EqualException_get_serialVersionUID();
#define RxNotificationTest_EqualException_serialVersionUID 446310455393317050LL
J2OBJC_STATIC_FIELD_CONSTANT(RxNotificationTest_EqualException, serialVersionUID, jlong)

@implementation RxNotificationTest

- (void)testOnNextIntegerNotificationDoesNotEqualNullNotification {
  RxNotification *integerNotification = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *nullNotification = RxNotification_createOnNextWithId_(nil);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(integerNotification)) isEqual:nullNotification]);
}

- (void)testOnNextNullNotificationDoesNotEqualIntegerNotification {
  RxNotification *integerNotification = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *nullNotification = RxNotification_createOnNextWithId_(nil);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(nullNotification)) isEqual:integerNotification]);
}

- (void)testOnNextIntegerNotificationsWhenEqual {
  RxNotification *integerNotification = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *integerNotification2 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  OrgJunitAssert_assertTrueWithBoolean_([((RxNotification *) nil_chk(integerNotification)) isEqual:integerNotification2]);
}

- (void)testOnNextIntegerNotificationsWhenNotEqual {
  RxNotification *integerNotification = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *integerNotification2 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(2));
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(integerNotification)) isEqual:integerNotification2]);
}

- (void)testOnErrorIntegerNotificationDoesNotEqualNullNotification {
  RxNotification *integerNotification = RxNotification_createOnErrorWithNSException_(create_JavaLangException_init());
  RxNotification *nullNotification = RxNotification_createOnErrorWithNSException_(nil);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(integerNotification)) isEqual:nullNotification]);
}

- (void)testOnErrorNullNotificationDoesNotEqualIntegerNotification {
  RxNotification *integerNotification = RxNotification_createOnErrorWithNSException_(create_JavaLangException_init());
  RxNotification *nullNotification = RxNotification_createOnErrorWithNSException_(nil);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(nullNotification)) isEqual:integerNotification]);
}

- (void)testOnErrorIntegerNotificationsWhenEqual {
  JavaLangException *exception = create_JavaLangException_init();
  RxNotification *onErrorNotification = RxNotification_createOnErrorWithNSException_(exception);
  RxNotification *onErrorNotification2 = RxNotification_createOnErrorWithNSException_(exception);
  OrgJunitAssert_assertTrueWithBoolean_([((RxNotification *) nil_chk(onErrorNotification)) isEqual:onErrorNotification2]);
}

- (void)testOnErrorIntegerNotificationWhenNotEqual {
  RxNotification *onErrorNotification = RxNotification_createOnErrorWithNSException_(create_JavaLangException_init());
  RxNotification *onErrorNotification2 = RxNotification_createOnErrorWithNSException_(create_JavaLangException_init());
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(onErrorNotification)) isEqual:onErrorNotification2]);
}

- (void)createWithClass {
  RxNotification *n = RxNotification_createOnCompletedWithIOSClass_(JavaLangInteger_class_());
  OrgJunitAssert_assertTrueWithBoolean_([((RxNotification *) nil_chk(n)) isOnCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([n hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([n hasValue]);
}

- (void)accept {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxNotification *) nil_chk(RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1)))) acceptWithRxObserver:o];
  [((RxNotification *) nil_chk(RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_init()))) acceptWithRxObserver:o];
  [((RxNotification *) nil_chk(RxNotification_createOnCompleted())) acceptWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
}

+ (NSString *)stripAtWithNSString:(NSString *)s {
  return RxNotificationTest_stripAtWithNSString_(s);
}

- (void)toStringVariants {
  OrgJunitAssert_assertEqualsWithId_withId_(@"[rx.Notification OnNext 1]", RxNotificationTest_stripAtWithNSString_([((RxNotification *) nil_chk(RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1)))) description]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"[rx.Notification OnError Forced failure]", RxNotificationTest_stripAtWithNSString_([((RxNotification *) nil_chk(RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure")))) description]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"[rx.Notification OnCompleted]", RxNotificationTest_stripAtWithNSString_([((RxNotification *) nil_chk(RxNotification_createOnCompleted())) description]));
}

- (void)hashCodeWorks {
  RxNotification *n1 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *n1a = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *n2 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxNotification *e1 = RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_init());
  RxNotification *c1 = RxNotification_createOnCompleted();
  OrgJunitAssert_assertEqualsWithLong_withLong_(((jint) [((RxNotification *) nil_chk(n1)) hash]), ((jint) [((RxNotification *) nil_chk(n1a)) hash]));
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  [set addWithId:n1];
  [set addWithId:n2];
  [set addWithId:e1];
  [set addWithId:c1];
  OrgJunitAssert_assertTrueWithBoolean_([set containsWithId:n1]);
  OrgJunitAssert_assertTrueWithBoolean_([set containsWithId:n1a]);
  OrgJunitAssert_assertTrueWithBoolean_([set containsWithId:n2]);
  OrgJunitAssert_assertTrueWithBoolean_([set containsWithId:e1]);
  OrgJunitAssert_assertTrueWithBoolean_([set containsWithId:c1]);
}

- (void)equalsWorks {
  RxNotification *z1 = RxNotification_createOnNextWithId_(nil);
  RxNotification *z1a = RxNotification_createOnNextWithId_(nil);
  RxNotification *n1 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *n1a = RxNotification_createOnNextWithId_(create_JavaLangInteger_initWithInt_(1));
  RxNotification *n2 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxNotification *e1 = RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_init());
  RxNotification *e2 = RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_init());
  RxNotification *c1 = RxNotification_createOnCompleted();
  RxNotification *c2 = RxNotification_createOnCompleted();
  OrgJunitAssert_assertEqualsWithId_withId_(n1, n1a);
  OrgJunitAssert_assertNotEqualsWithId_withId_(n1, n2);
  OrgJunitAssert_assertNotEqualsWithId_withId_(n2, n1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(n1, e1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e1, n1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e1, c1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(n1, c1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(c1, n1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(c1, e1);
  OrgJunitAssert_assertEqualsWithId_withId_(e1, e1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e1, e2);
  OrgJunitAssert_assertEqualsWithId_withId_(c1, c2);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(n1)) isEqual:nil]);
  OrgJunitAssert_assertFalseWithBoolean_([n1 isEqual:JavaLangInteger_valueOfWithInt_(1)]);
  OrgJunitAssert_assertEqualsWithId_withId_(z1a, z1);
  OrgJunitAssert_assertEqualsWithId_withId_(z1, z1a);
}

- (void)contentChecks {
  RxNotification *z1 = RxNotification_createOnNextWithId_(nil);
  RxNotification *n1 = RxNotification_createOnNextWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxNotification *e1 = RxNotification_createOnErrorWithNSException_(create_RxExceptionsTestException_init());
  RxNotification *e2 = RxNotification_createOnErrorWithNSException_(nil);
  RxNotification *c1 = RxNotification_createOnCompleted();
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(z1)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([z1 hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([z1 isOnCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxNotification *) nil_chk(n1)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([n1 hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([n1 isOnCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(e1)) hasValue]);
  OrgJunitAssert_assertTrueWithBoolean_([e1 hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([e1 isOnCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(e2)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([e2 hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([e2 isOnCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([((RxNotification *) nil_chk(c1)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([c1 hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 isOnCompleted]);
}

- (void)exceptionEquality {
  RxNotificationTest_EqualException *ex1 = create_RxNotificationTest_EqualException_initWithNSString_(@"1");
  RxNotificationTest_EqualException *ex2 = create_RxNotificationTest_EqualException_initWithNSString_(@"1");
  RxNotificationTest_EqualException *ex3 = create_RxNotificationTest_EqualException_initWithNSString_(@"3");
  RxNotification *e1 = RxNotification_createOnErrorWithNSException_(ex1);
  RxNotification *e2 = RxNotification_createOnErrorWithNSException_(ex2);
  RxNotification *e3 = RxNotification_createOnErrorWithNSException_(ex3);
  OrgJunitAssert_assertEqualsWithId_withId_(e1, e1);
  OrgJunitAssert_assertEqualsWithId_withId_(e1, e2);
  OrgJunitAssert_assertEqualsWithId_withId_(e2, e1);
  OrgJunitAssert_assertEqualsWithId_withId_(e2, e2);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e1, e3);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e2, e3);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e3, e1);
  OrgJunitAssert_assertNotEqualsWithId_withId_(e3, e2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxNotificationTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "LNSString;", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testOnNextIntegerNotificationDoesNotEqualNullNotification);
  methods[1].selector = @selector(testOnNextNullNotificationDoesNotEqualIntegerNotification);
  methods[2].selector = @selector(testOnNextIntegerNotificationsWhenEqual);
  methods[3].selector = @selector(testOnNextIntegerNotificationsWhenNotEqual);
  methods[4].selector = @selector(testOnErrorIntegerNotificationDoesNotEqualNullNotification);
  methods[5].selector = @selector(testOnErrorNullNotificationDoesNotEqualIntegerNotification);
  methods[6].selector = @selector(testOnErrorIntegerNotificationsWhenEqual);
  methods[7].selector = @selector(testOnErrorIntegerNotificationWhenNotEqual);
  methods[8].selector = @selector(createWithClass);
  methods[9].selector = @selector(accept);
  methods[10].selector = @selector(stripAtWithNSString:);
  methods[11].selector = @selector(toStringVariants);
  methods[12].selector = @selector(hashCodeWorks);
  methods[13].selector = @selector(equalsWorks);
  methods[14].selector = @selector(contentChecks);
  methods[15].selector = @selector(exceptionEquality);
  methods[16].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxNotificationTest__Annotations$0, (void *)&RxNotificationTest__Annotations$1, (void *)&RxNotificationTest__Annotations$2, (void *)&RxNotificationTest__Annotations$3, (void *)&RxNotificationTest__Annotations$4, (void *)&RxNotificationTest__Annotations$5, (void *)&RxNotificationTest__Annotations$6, (void *)&RxNotificationTest__Annotations$7, (void *)&RxNotificationTest__Annotations$8, (void *)&RxNotificationTest__Annotations$9, "stripAt", "LNSString;", (void *)&RxNotificationTest__Annotations$10, (void *)&RxNotificationTest__Annotations$11, (void *)&RxNotificationTest__Annotations$12, (void *)&RxNotificationTest__Annotations$13, (void *)&RxNotificationTest__Annotations$14, "LRxNotificationTest_EqualException;" };
  static const J2ObjcClassInfo _RxNotificationTest = { "NotificationTest", "rx", ptrTable, methods, NULL, 7, 0x1, 17, 0, -1, 17, -1, -1, -1 };
  return &_RxNotificationTest;
}

@end

NSString *RxNotificationTest_stripAtWithNSString_(NSString *s) {
  RxNotificationTest_initialize();
  jint index = [((NSString *) nil_chk(s)) indexOf:'@'];
  if (index >= 0) {
    jint j = [s indexOf:' ' fromIndex:index];
    if (j >= 0) {
      return JreStrcat("$$", [s substring:0 endIndex:index], [s substring:j]);
    }
    return [s substring:0 endIndex:index];
  }
  return s;
}

void RxNotificationTest_init(RxNotificationTest *self) {
  NSObject_init(self);
}

RxNotificationTest *new_RxNotificationTest_init() {
  J2OBJC_NEW_IMPL(RxNotificationTest, init)
}

RxNotificationTest *create_RxNotificationTest_init() {
  J2OBJC_CREATE_IMPL(RxNotificationTest, init)
}

IOSObjectArray *RxNotificationTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxNotificationTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxNotificationTest)

@implementation RxNotificationTest_EqualException

- (instancetype)initWithNSString:(NSString *)message {
  RxNotificationTest_EqualException_initWithNSString_(self, message);
  return self;
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[RxNotificationTest_EqualException class]]) {
    return [((NSString *) nil_chk([self getMessage])) isEqual:[((RxNotificationTest_EqualException *) nil_chk(((RxNotificationTest_EqualException *) cast_chk(o, [RxNotificationTest_EqualException class])))) getMessage]];
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxNotificationTest_EqualException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "equals", "LNSObject;", "LRxNotificationTest;" };
  static const J2ObjcClassInfo _RxNotificationTest_EqualException = { "EqualException", "rx", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_RxNotificationTest_EqualException;
}

@end

void RxNotificationTest_EqualException_initWithNSString_(RxNotificationTest_EqualException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

RxNotificationTest_EqualException *new_RxNotificationTest_EqualException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(RxNotificationTest_EqualException, initWithNSString_, message)
}

RxNotificationTest_EqualException *create_RxNotificationTest_EqualException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(RxNotificationTest_EqualException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxNotificationTest_EqualException)
