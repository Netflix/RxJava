//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorPublishFunctionTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOnSubscribePublishMulticast.h"
#include "RxInternalOperatorsOperatorPublish.h"
#include "RxInternalOperatorsOperatorPublishFunctionTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$9();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$1_init(RxInternalOperatorsOperatorPublishFunctionTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$1 *new_RxInternalOperatorsOperatorPublishFunctionTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$1 *create_RxInternalOperatorsOperatorPublishFunctionTest_$1_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$2 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$2_init(RxInternalOperatorsOperatorPublishFunctionTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$2 *new_RxInternalOperatorsOperatorPublishFunctionTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$2 *create_RxInternalOperatorsOperatorPublishFunctionTest_$2_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$3_init(RxInternalOperatorsOperatorPublishFunctionTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$3 *new_RxInternalOperatorsOperatorPublishFunctionTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$3 *create_RxInternalOperatorsOperatorPublishFunctionTest_$3_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$4 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$4_init(RxInternalOperatorsOperatorPublishFunctionTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$4 *new_RxInternalOperatorsOperatorPublishFunctionTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$4 *create_RxInternalOperatorsOperatorPublishFunctionTest_$4_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$5 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$startCount_;
}

- (void)onStart;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorPublishFunctionTest_$5, val$startCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishFunctionTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$5 *new_RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$5 *create_RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorPublishFunctionTest_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$6_init(RxInternalOperatorsOperatorPublishFunctionTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$6 *new_RxInternalOperatorsOperatorPublishFunctionTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$6 *create_RxInternalOperatorsOperatorPublishFunctionTest_$6_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$7_init(RxInternalOperatorsOperatorPublishFunctionTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$7 *new_RxInternalOperatorsOperatorPublishFunctionTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$7 *create_RxInternalOperatorsOperatorPublishFunctionTest_$7_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$8 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$8_init(RxInternalOperatorsOperatorPublishFunctionTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$8 *new_RxInternalOperatorsOperatorPublishFunctionTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$8 *create_RxInternalOperatorsOperatorPublishFunctionTest_$8_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$9 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$9_init(RxInternalOperatorsOperatorPublishFunctionTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$9 *new_RxInternalOperatorsOperatorPublishFunctionTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$9 *create_RxInternalOperatorsOperatorPublishFunctionTest_$9_init();

@interface RxInternalOperatorsOperatorPublishFunctionTest_$10 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorPublishFunctionTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorPublishFunctionTest_$10_init(RxInternalOperatorsOperatorPublishFunctionTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$10 *new_RxInternalOperatorsOperatorPublishFunctionTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorPublishFunctionTest_$10 *create_RxInternalOperatorsOperatorPublishFunctionTest_$10_init();

@implementation RxInternalOperatorsOperatorPublishFunctionTest

- (void)concatTakeFirstLastCompletes {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 3))) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$1_init()])) subscribeWithRxSubscriber:ts];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)concatTakeFirstLastBackpressureCompletes {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0LL);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 6))) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$2_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:5];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:5];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:6 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)canBeCancelled {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$3_init()])) subscribeWithRxSubscriber:ts];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [ps hasObservers]);
}

- (void)invalidPrefetch {
  @try {
    create_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(-99, false);
    OrgJunitAssert_failWithNSString_(@"Didn't throw IllegalArgumentException");
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"prefetch > 0 required but it was -99", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

- (void)takeCompletes {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$4_init()])) subscribeWithRxSubscriber:ts];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [ps hasObservers]);
}

- (void)oneStartOnly {
  JavaUtilConcurrentAtomicAtomicInteger *startCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(startCount);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$6_init()])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [startCount get]);
}

- (void)takeCompletesUnsafe {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$7_init()])) unsafeSubscribeWithRxSubscriber:ts];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [ps hasObservers]);
}

- (void)directCompletesUnsafe {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$8_init()])) unsafeSubscribeWithRxSubscriber:ts];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [ps hasObservers]);
}

- (void)overflowMissingBackpressureException {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) publishWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorPublishFunctionTest_$9_init()])) unsafeSubscribeWithRxSubscriber:ts];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2; i++) {
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsMissingBackpressureException_class_()];
  [ts assertNotCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(@"PublishSubject: could not emit value due to lack of requests", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getMessage]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [ps hasObservers]);
}

- (void)overflowMissingBackpressureExceptionDelayed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk(RxInternalOperatorsOperatorPublish_createWithRxObservable_withRxFunctionsFunc1_withBoolean_(ps, create_RxInternalOperatorsOperatorPublishFunctionTest_$10_init(), true))) unsafeSubscribeWithRxSubscriber:ts];
  for (jint i = 0; i < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2; i++) {
    [((RxSubjectsPublishSubject *) nil_chk(ps)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertValueCountWithInt:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertErrorWithIOSClass:RxExceptionsMissingBackpressureException_class_()];
  [ts assertNotCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(@"PublishSubject: could not emit value due to lack of requests", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getMessage]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [((RxSubjectsPublishSubject *) nil_chk(ps)) hasObservers]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(concatTakeFirstLastCompletes);
  methods[1].selector = @selector(concatTakeFirstLastBackpressureCompletes);
  methods[2].selector = @selector(canBeCancelled);
  methods[3].selector = @selector(invalidPrefetch);
  methods[4].selector = @selector(takeCompletes);
  methods[5].selector = @selector(oneStartOnly);
  methods[6].selector = @selector(takeCompletesUnsafe);
  methods[7].selector = @selector(directCompletesUnsafe);
  methods[8].selector = @selector(overflowMissingBackpressureException);
  methods[9].selector = @selector(overflowMissingBackpressureExceptionDelayed);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$0, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$1, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$2, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$3, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$4, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$5, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$6, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$7, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$8, (void *)&RxInternalOperatorsOperatorPublishFunctionTest__Annotations$9 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest = { "OperatorPublishFunctionTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_init(RxInternalOperatorsOperatorPublishFunctionTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest *new_RxInternalOperatorsOperatorPublishFunctionTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest, init)
}

RxInternalOperatorsOperatorPublishFunctionTest *create_RxInternalOperatorsOperatorPublishFunctionTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorPublishFunctionTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorPublishFunctionTest)

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$1

- (RxObservable *)callWithId:(RxObservable *)o {
  return RxObservable_concatWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(o)) takeWithInt:5], [o takeLastWithInt:5]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "concatTakeFirstLastCompletes", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$1;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$1_init(RxInternalOperatorsOperatorPublishFunctionTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$1 *new_RxInternalOperatorsOperatorPublishFunctionTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$1, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$1 *create_RxInternalOperatorsOperatorPublishFunctionTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$1, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$2

- (RxObservable *)callWithId:(RxObservable *)o {
  return RxObservable_concatWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(o)) takeWithInt:5], [o takeLastWithInt:5]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "concatTakeFirstLastBackpressureCompletes", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$2;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$2_init(RxInternalOperatorsOperatorPublishFunctionTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$2 *new_RxInternalOperatorsOperatorPublishFunctionTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$2, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$2 *create_RxInternalOperatorsOperatorPublishFunctionTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$2, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$3

- (RxObservable *)callWithId:(RxObservable *)o {
  return RxObservable_concatWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(o)) takeWithInt:5], [o takeLastWithInt:5]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "canBeCancelled", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$3;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$3_init(RxInternalOperatorsOperatorPublishFunctionTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$3 *new_RxInternalOperatorsOperatorPublishFunctionTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$3, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$3 *create_RxInternalOperatorsOperatorPublishFunctionTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$3, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$4

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "takeCompletes", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$4;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$4_init(RxInternalOperatorsOperatorPublishFunctionTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$4 *new_RxInternalOperatorsOperatorPublishFunctionTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$4, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$4 *create_RxInternalOperatorsOperatorPublishFunctionTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$4, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$5

- (void)onStart {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$startCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorPublishFunctionTest_$5 class]);
  RELEASE_(val$startCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$startCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "oneStartOnly", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$5;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorPublishFunctionTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$startCount_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$5 *new_RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorPublishFunctionTest_$5 *create_RxInternalOperatorsOperatorPublishFunctionTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$6

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "oneStartOnly", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$6;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$6_init(RxInternalOperatorsOperatorPublishFunctionTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$6 *new_RxInternalOperatorsOperatorPublishFunctionTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$6, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$6 *create_RxInternalOperatorsOperatorPublishFunctionTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$6, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$7

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "takeCompletesUnsafe", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$7;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$7_init(RxInternalOperatorsOperatorPublishFunctionTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$7 *new_RxInternalOperatorsOperatorPublishFunctionTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$7, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$7 *create_RxInternalOperatorsOperatorPublishFunctionTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$7, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$8

- (RxObservable *)callWithId:(RxObservable *)o {
  return o;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "directCompletesUnsafe", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$8;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$8_init(RxInternalOperatorsOperatorPublishFunctionTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$8 *new_RxInternalOperatorsOperatorPublishFunctionTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$8, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$8 *create_RxInternalOperatorsOperatorPublishFunctionTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$8, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$9

- (RxObservable *)callWithId:(RxObservable *)o {
  return o;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "overflowMissingBackpressureException", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$9;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$9_init(RxInternalOperatorsOperatorPublishFunctionTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$9 *new_RxInternalOperatorsOperatorPublishFunctionTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$9, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$9 *create_RxInternalOperatorsOperatorPublishFunctionTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$9, init)
}

@implementation RxInternalOperatorsOperatorPublishFunctionTest_$10

- (RxObservable *)callWithId:(RxObservable *)o {
  return o;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorPublishFunctionTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorPublishFunctionTest;", "overflowMissingBackpressureExceptionDelayed", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorPublishFunctionTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorPublishFunctionTest_$10;
}

@end

void RxInternalOperatorsOperatorPublishFunctionTest_$10_init(RxInternalOperatorsOperatorPublishFunctionTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorPublishFunctionTest_$10 *new_RxInternalOperatorsOperatorPublishFunctionTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$10, init)
}

RxInternalOperatorsOperatorPublishFunctionTest_$10 *create_RxInternalOperatorsOperatorPublishFunctionTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorPublishFunctionTest_$10, init)
}
