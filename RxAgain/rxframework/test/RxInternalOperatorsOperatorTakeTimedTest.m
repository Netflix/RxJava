//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTakeTimedTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTakeTimedTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$3();

@interface RxInternalOperatorsOperatorTakeTimedTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
}

- (RxScheduler *)callWithId:(RxScheduler *)t;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTimedTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTimedTest_$1, val$scheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTakeTimedTest_$1 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTimedTest_$1 *new_RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTimedTest_$1 *create_RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@implementation RxInternalOperatorsOperatorTakeTimedTest

- (void)testTakeTimed {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testTakeTimedErrorBeforeTime {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
}

- (void)testTakeTimedErrorAfterTime {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)takeDefaultScheduler {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxPluginsRxJavaHooks_setOnComputationSchedulerWithRxFunctionsFunc1_(create_RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(scheduler));
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
    [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) takeWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ps onCompleted];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTimedTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTakeTimed);
  methods[1].selector = @selector(testTakeTimedErrorBeforeTime);
  methods[2].selector = @selector(testTakeTimedErrorAfterTime);
  methods[3].selector = @selector(takeDefaultScheduler);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTakeTimedTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTakeTimedTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTakeTimedTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTakeTimedTest__Annotations$3 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTimedTest = { "OperatorTakeTimedTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTimedTest;
}

@end

void RxInternalOperatorsOperatorTakeTimedTest_init(RxInternalOperatorsOperatorTakeTimedTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTimedTest *new_RxInternalOperatorsOperatorTakeTimedTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTimedTest, init)
}

RxInternalOperatorsOperatorTakeTimedTest *create_RxInternalOperatorsOperatorTakeTimedTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTimedTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTimedTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeTimedTest)

@implementation RxInternalOperatorsOperatorTakeTimedTest_$1

- (RxScheduler *)callWithId:(RxScheduler *)t {
  return val$scheduler_;
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxScheduler;", "LRxSchedulersTestScheduler;", "LRxInternalOperatorsOperatorTakeTimedTest;", "takeDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTimedTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTimedTest_$1;
}

@end

void RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTakeTimedTest_$1 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTimedTest_$1 *new_RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTimedTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}

RxInternalOperatorsOperatorTakeTimedTest_$1 *create_RxInternalOperatorsOperatorTakeTimedTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTimedTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}
