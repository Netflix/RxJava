//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeDelaySubscriptionOtherTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$9();

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6, val$subscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$subscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7, val$subscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest

- (void)testNoPrematureSubscription {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No subscription", 1, [subscribed get]);
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)testNoMultipleSubscriptions {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [other onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No subscription", 1, [subscribed get]);
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)testCompleteTriggersSubscription {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No subscription", 1, [subscribed get]);
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)testNoPrematureSubscriptionToError {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No subscription", 1, [subscribed get]);
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testNoSubscriptionIfOtherErrors {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testBackpressurePassesThrough {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0LL);
  JavaUtilConcurrentAtomicAtomicInteger *subscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribed)])) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Premature subscription", 0, [subscribed get]);
  [((RxSubjectsPublishSubject *) nil_chk(other)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No subscription", 1, [subscribed get]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Not unsubscribed from other", [other hasObservers]);
  [ts assertNotCompleted];
  [ts assertNoErrors];
  [ts assertNoValues];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:10];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)unsubscriptionPropagatesBeforeSubscribe {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"source subscribed?", [source hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"other not subscribed?", [((RxSubjectsPublishSubject *) nil_chk(other)) hasObservers]);
  [ts unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"source subscribed?", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"other still subscribed?", [other hasObservers]);
}

- (void)unsubscriptionPropagatesAfterSubscribe {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) delaySubscriptionWithRxObservable:other])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"source subscribed?", [source hasObservers]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"other not subscribed?", [((RxSubjectsPublishSubject *) nil_chk(other)) hasObservers]);
  [other onCompleted];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"source not subscribed?", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"other still subscribed?", [other hasObservers]);
  [ts unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"source subscribed?", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"other still subscribed?", [other hasObservers]);
}

- (void)delayAndTakeUntilNeverSubscribeToSource {
  RxSubjectsPublishSubject *delayUntil = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *interrupt = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicBoolean *subscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(subscribed)])) delaySubscriptionWithRxObservable:delayUntil])) takeUntilWithRxObservable:interrupt])) subscribe];
  [((RxSubjectsPublishSubject *) nil_chk(interrupt)) onNextWithId:JavaLangInteger_valueOfWithInt_(9000)];
  [((RxSubjectsPublishSubject *) nil_chk(delayUntil)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([subscribed get]);
}

- (void)otherNull {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) delaySubscriptionWithRxObservable:nil];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testNoPrematureSubscription);
  methods[1].selector = @selector(testNoMultipleSubscriptions);
  methods[2].selector = @selector(testCompleteTriggersSubscription);
  methods[3].selector = @selector(testNoPrematureSubscriptionToError);
  methods[4].selector = @selector(testNoSubscriptionIfOtherErrors);
  methods[5].selector = @selector(testBackpressurePassesThrough);
  methods[6].selector = @selector(unsubscriptionPropagatesBeforeSubscribe);
  methods[7].selector = @selector(unsubscriptionPropagatesAfterSubscribe);
  methods[8].selector = @selector(delayAndTakeUntilNeverSubscribeToSource);
  methods[9].selector = @selector(otherNull);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$9 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest = { "OnSubscribeDelaySubscriptionOtherTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_init(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest, init)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest)

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testNoPrematureSubscription" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testNoMultipleSubscriptions" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testCompleteTriggersSubscription" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testNoPrematureSubscriptionToError" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testNoSubscriptionIfOtherErrors" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribed_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "testBackpressurePassesThrough" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$subscribed_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest;", "delayAndTakeUntilNeverSubscribeToSource" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7;
}

@end

void RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *new_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7 *create_RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_$7, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
