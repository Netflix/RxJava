//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/SerializedSubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsSerializedSubject.h"
#include "RxSubjectsSerializedSubjectTest.h"
#include "RxSubjectsSubject.h"
#include "RxSubscription.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSubjectsSerializedSubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsSerializedSubjectTest__Annotations$1();

@implementation RxSubjectsSerializedSubjectTest

- (void)testBasic {
  RxSubjectsSerializedSubject *subject = create_RxSubjectsSerializedSubject_initWithRxSubjectsSubject_(RxSubjectsPublishSubject_create());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [subject subscribeWithRxSubscriber:ts];
  [subject onNextWithId:@"hello"];
  [subject onCompleted];
  [ts awaitTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"hello" } count:1 type:NSString_class_()])];
}

- (void)testDontWrapSerializedSubjectAgain {
  RxSubjectsPublishSubject *s = RxSubjectsPublishSubject_create();
  RxSubjectsSubject *s1 = [((RxSubjectsPublishSubject *) nil_chk(s)) toSerialized];
  RxSubjectsSubject *s2 = [((RxSubjectsSubject *) nil_chk(s1)) toSerialized];
  OrgJunitAssert_assertSameWithId_withId_(s1, s2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsSerializedSubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testBasic);
  methods[1].selector = @selector(testDontWrapSerializedSubjectAgain);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSubjectsSerializedSubjectTest__Annotations$0, (void *)&RxSubjectsSerializedSubjectTest__Annotations$1 };
  static const J2ObjcClassInfo _RxSubjectsSerializedSubjectTest = { "SerializedSubjectTest", "rx.subjects", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxSubjectsSerializedSubjectTest;
}

@end

void RxSubjectsSerializedSubjectTest_init(RxSubjectsSerializedSubjectTest *self) {
  NSObject_init(self);
}

RxSubjectsSerializedSubjectTest *new_RxSubjectsSerializedSubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsSerializedSubjectTest, init)
}

RxSubjectsSerializedSubjectTest *create_RxSubjectsSerializedSubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsSerializedSubjectTest, init)
}

IOSObjectArray *RxSubjectsSerializedSubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsSerializedSubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsSerializedSubjectTest)
