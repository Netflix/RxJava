//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/rx/internal/operators/OperatorScanTest__InnerProducer$Moxy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorScanTest.h"
#include "RxInternalOperatorsOperatorScanTest__InnerProducer$Moxy.h"
#include "RxSubscriber.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"

@implementation RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy

- (instancetype)initWithRxSubscriber:(RxSubscriber *)a0 {
  RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy_initWithRxSubscriber_(self, a0);
  return self;
}

- (id<JavaLangReflectInvocationHandler>)getHandler {
  return $__handler_;
}

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler {
  JreStrongAssign(&$__handler_, handler);
}

- (id)clone {
  @try {
    if ($__handler_ == nil) {
      return [super clone];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"clone" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangCloneNotSupportedException class]]) {
      @throw (JavaLangCloneNotSupportedException *) cast_chk(__ttlive, [JavaLangCloneNotSupportedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$clone {
  return [super clone];
}

- (void)requestWithLong:(jlong)n {
  @try {
    if ($__handler_ == nil) {
      [super requestWithLong:n];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"request" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(n) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$requestWithLong:(jlong)n {
  [super requestWithLong:n];
}

- (NSUInteger)hash {
  @try {
    if ($__handler_ == nil) {
      return ((jint) [super hash]);
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"hashCode" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$hashCode {
  return ((jint) [super hash]);
}

- (jboolean)isEqual:(id)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super isEqual:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"equals" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$equalsWithId:(id)arg0 {
  return [super isEqual:arg0];
}

- (NSString *)description {
  @try {
    if ($__handler_ == nil) {
      return [super description];
    }
    else {
      return (NSString *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"toString" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (NSString *)super$toString {
  return [super description];
}

- (void)dealloc {
  RELEASE_($__handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectInvocationHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:);
  methods[1].selector = @selector(getHandler);
  methods[2].selector = @selector(setHandlerWithJavaLangReflectInvocationHandler:);
  methods[3].selector = @selector(clone);
  methods[4].selector = @selector(super$clone);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(super$requestWithLong:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(super$hashCode);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(super$equalsWithId:);
  methods[11].selector = @selector(description);
  methods[12].selector = @selector(super$toString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "$__handler_", "LJavaLangReflectInvocationHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "setHandler", "LJavaLangReflectInvocationHandler;", "LJavaLangCloneNotSupportedException;", "request", "J", "super$request", "hashCode", "equals", "LNSObject;", "super$equals", "toString" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy = { "OperatorScanTest__InnerProducer$Moxy", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 13, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy;
}

@end

void RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy_initWithRxSubscriber_(RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy *self, RxSubscriber *a0) {
  RxInternalOperatorsOperatorScanTest_InnerProducer_initWithRxSubscriber_(self, a0);
}

RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy *new_RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy_initWithRxSubscriber_(RxSubscriber *a0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy, initWithRxSubscriber_, a0)
}

RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy *create_RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy_initWithRxSubscriber_(RxSubscriber *a0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy, initWithRxSubscriber_, a0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorScanTest__InnerProducer_Moxy)
