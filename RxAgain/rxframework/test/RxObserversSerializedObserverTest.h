//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/SerializedObserverTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObserversSerializedObserverTest")
#ifdef RESTRICT_RxObserversSerializedObserverTest
#define INCLUDE_ALL_RxObserversSerializedObserverTest 0
#else
#define INCLUDE_ALL_RxObserversSerializedObserverTest 1
#endif
#undef RESTRICT_RxObserversSerializedObserverTest

#if !defined (RxObserversSerializedObserverTest_) && (INCLUDE_ALL_RxObserversSerializedObserverTest || defined(INCLUDE_RxObserversSerializedObserverTest))
#define RxObserversSerializedObserverTest_

@class RxSubscriber;

@interface RxObserversSerializedObserverTest : NSObject {
 @public
  RxSubscriber *observer_;
}

#pragma mark Public

- (instancetype)init;

- (void)before;

- (void)runConcurrencyTest;

- (void)runOutOfOrderConcurrencyTest;

- (void)testCompleteReentry;

- (void)testErrorReentry;

- (void)testMultiThreadedBasic;

- (void)testMultiThreadedWithNPE;

- (void)testMultiThreadedWithNPEinMiddle;

- (void)testNotificationDelay;

- (void)testSerializeAllowsOnError;

- (void)testSerializeDrainPhaseThrows;

- (void)testSerializeNull;

- (void)testSerializeReentrantNullAndComplete;

- (void)testSerializeReentrantNullAndError;

- (void)testSingleThreadedBasic;

- (void)testThreadStarvation;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest, observer_, RxSubscriber *)

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_init(RxObserversSerializedObserverTest *self);

FOUNDATION_EXPORT RxObserversSerializedObserverTest *new_RxObserversSerializedObserverTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest *create_RxObserversSerializedObserverTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest)

#endif

#if !defined (RxObserversSerializedObserverTest_OnNextThread_) && (INCLUDE_ALL_RxObserversSerializedObserverTest || defined(INCLUDE_RxObserversSerializedObserverTest_OnNextThread))
#define RxObserversSerializedObserverTest_OnNextThread_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentCountDownLatch;
@protocol RxObserver;

@interface RxObserversSerializedObserverTest_OnNextThread : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *produced_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend;

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced;

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)running;

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)running;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_OnNextThread)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_OnNextThread, produced_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running);

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced);

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running);

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_OnNextThread)

#endif

#if !defined (RxObserversSerializedObserverTest_CompletionThread_) && (INCLUDE_ALL_RxObserversSerializedObserverTest || defined(INCLUDE_RxObserversSerializedObserverTest_CompletionThread))
#define RxObserversSerializedObserverTest_CompletionThread_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IOSObjectArray;
@class RxObserversSerializedObserverTest_TestConcurrencyObserverEvent;
@protocol RxObserver;

@interface RxObserversSerializedObserverTest_CompletionThread : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithRxObserver:(id<RxObserver>)Observer
withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)event
 withJavaUtilConcurrentFutureArray:(IOSObjectArray *)waitOnThese;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_CompletionThread)

FOUNDATION_EXPORT void RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(RxObserversSerializedObserverTest_CompletionThread *self, id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_CompletionThread *new_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedObserverTest_CompletionThread *create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_CompletionThread)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObserversSerializedObserverTest")
