//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/SerializedObserverTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversSafeSubscriber.h"
#include "RxObserversSerializedObserver.h"
#include "RxObserversSerializedObserverTest.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

@class RxObserversSerializedObserverTest_TestConcurrencyObserverEvent;

@interface RxObserversSerializedObserverTest ()

- (id<RxObserver>)serializedObserverWithRxObserver:(id<RxObserver>)o;

+ (void)waitOnThreadsWithJavaUtilConcurrentFutureArray:(IOSObjectArray *)futures;

+ (RxObservable *)infiniteWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced;

@end

__attribute__((unused)) static id<RxObserver> RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(RxObserversSerializedObserverTest *self, id<RxObserver> o);

__attribute__((unused)) static void RxObserversSerializedObserverTest_waitOnThreadsWithJavaUtilConcurrentFutureArray_(IOSObjectArray *futures);

__attribute__((unused)) static RxObservable *RxObserversSerializedObserverTest_infiniteWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *produced);

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest__Annotations$16();

@interface RxObserversSerializedObserverTest_OnNextThread () {
 @public
  JavaUtilConcurrentCountDownLatch *latch_;
  id<RxObserver> observer_;
  jint numStringsToSend_;
  JavaUtilConcurrentCountDownLatch *running_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_OnNextThread, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_OnNextThread, observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_OnNextThread, running_, JavaUtilConcurrentCountDownLatch *)

@interface RxObserversSerializedObserverTest_CompletionThread () {
 @public
  id<RxObserver> observer_;
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event_;
  IOSObjectArray *waitOnThese_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_CompletionThread, observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_CompletionThread, event_, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_CompletionThread, waitOnThese_, IOSObjectArray *)

typedef NS_ENUM(NSUInteger, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_Enum) {
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_Enum_onCompleted = 0,
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_Enum_onError = 1,
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_Enum_onNext = 2,
};

@interface RxObserversSerializedObserverTest_TestConcurrencyObserverEvent : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_[];

inline RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_get_onCompleted();
J2OBJC_ENUM_CONSTANT(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted)

inline RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_get_onError();
J2OBJC_ENUM_CONSTANT(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError)

inline RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_get_onNext();
J2OBJC_ENUM_CONSTANT(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onNext)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initWithNSString_withInt_(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values();

__attribute__((unused)) static RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent)

@interface RxObserversSerializedObserverTest_TestConcurrencyObserver : RxSubscriber {
 @public
  id<JavaUtilList> events_;
  jint waitTime_;
}

- (instancetype)initWithInt:(jint)waitTimeInNext;

- (instancetype)init;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (jint)assertEventsWithRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)expectedEndingEvent;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestConcurrencyObserver)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestConcurrencyObserver, events_, id<JavaUtilList>)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(RxObserversSerializedObserverTest_TestConcurrencyObserver *self, jint waitTimeInNext);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestConcurrencyObserver *new_RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(jint waitTimeInNext) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestConcurrencyObserver *create_RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(jint waitTimeInNext);

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestConcurrencyObserver_init(RxObserversSerializedObserverTest_TestConcurrencyObserver *self);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestConcurrencyObserver *new_RxObserversSerializedObserverTest_TestConcurrencyObserver_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestConcurrencyObserver *create_RxObserversSerializedObserverTest_TestConcurrencyObserver_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_TestConcurrencyObserver)

@interface RxObserversSerializedObserverTest_TestSingleThreadedObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

- (void)waitToFinish;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestSingleThreadedObservable)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestSingleThreadedObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestSingleThreadedObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestSingleThreadedObservable *new_RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestSingleThreadedObservable *create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_TestSingleThreadedObservable)

@interface RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserverTest_TestSingleThreadedObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable:(RxObserversSerializedObserverTest_TestSingleThreadedObservable *)outer$
                                                                      withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1, this$0_, RxObserversSerializedObserverTest_TestSingleThreadedObservable *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *self, RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *new_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0);

@interface RxObserversSerializedObserverTest_TestMultiThreadedObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
  JavaUtilConcurrentAtomicAtomicInteger *threadsRunning_;
  JavaUtilConcurrentAtomicAtomicInteger *maxConcurrentThreads_;
  id<JavaUtilConcurrentExecutorService> threadPool_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

- (void)waitToFinish;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestMultiThreadedObservable)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable, t_, JavaLangThread *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable, threadsRunning_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable, maxConcurrentThreads_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable, threadPool_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_TestMultiThreadedObservable)

@interface RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserverTest_TestMultiThreadedObservable *this$0_;
  JavaLangNullPointerException *val$npe_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable:(RxObserversSerializedObserverTest_TestMultiThreadedObservable *)outer$
                                                     withJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0
                                                                     withRxSubscriber:(RxSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1, this$0_, RxObserversSerializedObserverTest_TestMultiThreadedObservable *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1, val$npe_, JavaLangNullPointerException *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *self, RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1);

@interface RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *this$0_;
  NSString *val$s_;
  jint val$fj_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1:(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *)outer$
                                                                            withNSString:(NSString *)capture$0
                                                                                 withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1, this$0_, RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1, val$s_, NSString *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *self, RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1);

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1);

@interface RxObserversSerializedObserverTest_BusyObserver : RxSubscriber {
 @public
  volatile_jboolean onCompleted_;
  volatile_jboolean onError_;
  JavaUtilConcurrentAtomicAtomicInteger *onNextCount_;
  JavaUtilConcurrentAtomicAtomicInteger *threadsRunning_;
  JavaUtilConcurrentAtomicAtomicInteger *maxConcurrentThreads_;
  JavaUtilConcurrentCountDownLatch *terminalEvent_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (void)captureMaxThreads;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_BusyObserver)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_BusyObserver, onNextCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_BusyObserver, threadsRunning_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_BusyObserver, maxConcurrentThreads_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_BusyObserver, terminalEvent_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_BusyObserver_init(RxObserversSerializedObserverTest_BusyObserver *self);

__attribute__((unused)) static RxObserversSerializedObserverTest_BusyObserver *new_RxObserversSerializedObserverTest_BusyObserver_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_BusyObserver *create_RxObserversSerializedObserverTest_BusyObserver_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedObserverTest_BusyObserver)

@interface RxObserversSerializedObserverTest_$1 : NSObject < RxObserver > {
 @public
  jboolean first_;
  id<JavaUtilList> val$threads_;
  id<JavaUtilConcurrentExecutorService> val$tp1_;
  IOSObjectArray *val$os_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$1
                 withRxObserverArray:(IOSObjectArray *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$1)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$1, val$threads_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$1, val$tp1_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$1, val$os_, IOSObjectArray *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(RxObserversSerializedObserverTest_$1 *self, id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2);

__attribute__((unused)) static RxObserversSerializedObserverTest_$1 *new_RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$1 *create_RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2);

@interface RxObserversSerializedObserverTest_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserverTest_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserverTest_$1:(RxObserversSerializedObserverTest_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$1_$1)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$1_$1, this$0_, RxObserversSerializedObserverTest_$1 *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1_$1 *self, RxObserversSerializedObserverTest_$1 *outer$);

__attribute__((unused)) static RxObserversSerializedObserverTest_$1_$1 *new_RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$1_$1 *create_RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1 *outer$);

@interface RxObserversSerializedObserverTest_$2 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$2)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$2_init(RxObserversSerializedObserverTest_$2 *self);

__attribute__((unused)) static RxObserversSerializedObserverTest_$2 *new_RxObserversSerializedObserverTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$2 *create_RxObserversSerializedObserverTest_$2_init();

@interface RxObserversSerializedObserverTest_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$produced_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$3)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$3, val$produced_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSerializedObserverTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$3 *new_RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$3 *create_RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversSerializedObserverTest_$4 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$4)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$4, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$4 *new_RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$4 *create_RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSerializedObserverTest_$5 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$5)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$5_init(RxObserversSerializedObserverTest_$5 *self);

__attribute__((unused)) static RxObserversSerializedObserverTest_$5 *new_RxObserversSerializedObserverTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$5 *create_RxObserversSerializedObserverTest_$5_init();

@interface RxObserversSerializedObserverTest_$6 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$6)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$6, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$6 *new_RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$6 *create_RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSerializedObserverTest_$7 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$7)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$7, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$7 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$7 *new_RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$7 *create_RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSerializedObserverTest_$8 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$8)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$8, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$8 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$8 *new_RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$8 *create_RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSerializedObserverTest_$9 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$9)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$9, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$9 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$9 *new_RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$9 *create_RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSerializedObserverTest_$10 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$serial_;
}

- (void)onNextWithId:(JavaLangInteger *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedObserverTest_$10)

J2OBJC_FIELD_SETTER(RxObserversSerializedObserverTest_$10, val$serial_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$10 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSerializedObserverTest_$10 *new_RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSerializedObserverTest_$10 *create_RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@implementation RxObserversSerializedObserverTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (id<RxObserver>)serializedObserverWithRxObserver:(id<RxObserver>)o {
  return RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, o);
}

- (void)testSingleThreadedBasic {
  RxObserversSerializedObserverTest_TestSingleThreadedObservable *onSubscribe = create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  id<RxObserver> aw = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, observer_);
  [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:aw];
  [onSubscribe waitToFinish];
  [((RxSubscriber *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((RxSubscriber *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((RxSubscriber *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((RxSubscriber *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((RxSubscriber *) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMultiThreadedBasic {
  RxObserversSerializedObserverTest_TestMultiThreadedObservable *onSubscribe = create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  RxObserversSerializedObserverTest_BusyObserver *busyObserver = create_RxObserversSerializedObserverTest_BusyObserver_init();
  id<RxObserver> aw = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, busyObserver);
  [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:aw];
  [onSubscribe waitToFinish];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->onNextCount_)) get]);
  OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onError_));
  OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onCompleted_));
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->maxConcurrentThreads_)) get]);
}

- (void)testMultiThreadedWithNPE {
  RxObserversSerializedObserverTest_TestMultiThreadedObservable *onSubscribe = create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three", nil } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  RxObserversSerializedObserverTest_BusyObserver *busyObserver = create_RxObserversSerializedObserverTest_BusyObserver_init();
  id<RxObserver> aw = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, busyObserver);
  [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:aw];
  [onSubscribe waitToFinish];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(busyObserver->terminalEvent_)) await];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"OnSubscribe maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get], @"  Observer maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->maxConcurrentThreads_)) get])];
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->onNextCount_)) get] < 4);
  OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onError_));
  OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onCompleted_));
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->maxConcurrentThreads_)) get]);
}

- (void)testMultiThreadedWithNPEinMiddle {
  jint n = 10;
  for (jint i = 0; i < n; i++) {
    RxObserversSerializedObserverTest_TestMultiThreadedObservable *onSubscribe = create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three", nil, @"four", @"five", @"six", @"seven", @"eight", @"nine" } count:10 type:NSString_class_()]);
    RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
    RxObserversSerializedObserverTest_BusyObserver *busyObserver = create_RxObserversSerializedObserverTest_BusyObserver_init();
    id<RxObserver> aw = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, busyObserver);
    [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:aw];
    [onSubscribe waitToFinish];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"OnSubscribe maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get], @"  Observer maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->maxConcurrentThreads_)) get])];
    OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->maxConcurrentThreads_)) get]);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"onNext count: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->onNextCount_)) get])];
    OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onCompleted_));
    OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyObserver->onError_));
    OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyObserver->onNextCount_)) get] < 9);
  }
}

- (void)runOutOfOrderConcurrencyTest {
  id<JavaUtilConcurrentExecutorService> tp = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(20);
  @try {
    RxObserversSerializedObserverTest_TestConcurrencyObserver *tw = create_RxObserversSerializedObserverTest_TestConcurrencyObserver_init();
    id<RxObserver> w = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, create_RxObserversSafeSubscriber_initWithRxSubscriber_(tw));
    id<JavaUtilConcurrentFuture> f1 = [((id<JavaUtilConcurrentExecutorService>) nil_chk(tp)) submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 12000)];
    id<JavaUtilConcurrentFuture> f2 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 5000)];
    id<JavaUtilConcurrentFuture> f3 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 75000)];
    id<JavaUtilConcurrentFuture> f4 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 13500)];
    id<JavaUtilConcurrentFuture> f5 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 22000)];
    id<JavaUtilConcurrentFuture> f6 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 15000)];
    id<JavaUtilConcurrentFuture> f7 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 7500)];
    id<JavaUtilConcurrentFuture> f8 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 23500)];
    id<JavaUtilConcurrentFuture> f10 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4 } count:4 type:JavaUtilConcurrentFuture_class_()])];
    @try {
      JavaLangThread_sleepWithLong_(1);
    }
    @catch (JavaLangInterruptedException *e) {
    }
    id<JavaUtilConcurrentFuture> f11 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f4, f6, f7 } count:3 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f12 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f4, f6, f7 } count:3 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f13 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f4, f6, f7 } count:3 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f14 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f4, f6, f7 } count:3 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f15 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4 } count:4 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f16 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4 } count:4 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f17 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4 } count:4 type:JavaUtilConcurrentFuture_class_()])];
    id<JavaUtilConcurrentFuture> f18 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4 } count:4 type:JavaUtilConcurrentFuture_class_()])];
    RxObserversSerializedObserverTest_waitOnThreadsWithJavaUtilConcurrentFutureArray_([IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4, f5, f6, f7, f8, f10, f11, f12, f13, f14, f15, f16, f17, f18 } count:17 type:JavaUtilConcurrentFuture_class_()]);
    __unused jint numNextEvents = [tw assertEventsWithRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:nil];
  }
  @catch (NSException *e) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", @"Concurrency test failed: ", [((NSException *) nil_chk(e)) getMessage]));
    [e printStackTrace];
  }
  @finally {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(tp)) shutdown];
    @try {
      [tp awaitTerminationWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (void)runConcurrencyTest {
  id<JavaUtilConcurrentExecutorService> tp = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(20);
  @try {
    RxObserversSerializedObserverTest_TestConcurrencyObserver *tw = create_RxObserversSerializedObserverTest_TestConcurrencyObserver_init();
    id<RxObserver> w = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, create_RxObserversSafeSubscriber_initWithRxSubscriber_(tw));
    id<JavaUtilConcurrentFuture> f1 = [((id<JavaUtilConcurrentExecutorService>) nil_chk(tp)) submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 12000)];
    id<JavaUtilConcurrentFuture> f2 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 5000)];
    id<JavaUtilConcurrentFuture> f3 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 75000)];
    id<JavaUtilConcurrentFuture> f4 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 13500)];
    id<JavaUtilConcurrentFuture> f5 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 22000)];
    id<JavaUtilConcurrentFuture> f6 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 15000)];
    id<JavaUtilConcurrentFuture> f7 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 7500)];
    id<JavaUtilConcurrentFuture> f8 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(w, 23500)];
    id<JavaUtilConcurrentFuture> f10 = [tp submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(w, JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), [IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4, f5, f6, f7, f8 } count:8 type:JavaUtilConcurrentFuture_class_()])];
    @try {
      JavaLangThread_sleepWithLong_(1);
    }
    @catch (JavaLangInterruptedException *e) {
    }
    RxObserversSerializedObserverTest_waitOnThreadsWithJavaUtilConcurrentFutureArray_([IOSObjectArray arrayWithObjects:(id[]){ f1, f2, f3, f4, f5, f6, f7, f8, f10 } count:9 type:JavaUtilConcurrentFuture_class_()]);
    jint numNextEvents = [tw assertEventsWithRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:nil];
    OrgJunitAssert_assertEqualsWithLong_withLong_(173500, numNextEvents);
  }
  @catch (NSException *e) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", @"Concurrency test failed: ", [((NSException *) nil_chk(e)) getMessage]));
    [e printStackTrace];
  }
  @finally {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(tp)) shutdown];
    @try {
      [tp awaitTerminationWithLong:25000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (void)testNotificationDelay {
  id<JavaUtilConcurrentExecutorService> tp1 = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(1);
  @try {
    jint n = 10000;
    for (jint i = 0; i < n; i++) {
      IOSObjectArray *os = [IOSObjectArray arrayWithLength:1 type:RxObserver_class_()];
      id<JavaUtilList> threads = create_JavaUtilArrayList_init();
      id<RxObserver> o = create_RxObserversSerializedObserver_initWithRxObserver_(create_RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(threads, tp1, os));
      IOSObjectArray_Set(os, 0, o);
      [o onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:threads];
      OrgJunitAssert_assertEqualsWithLong_withLong_(2, [threads size]);
      OrgJunitAssert_assertSameWithId_withId_([threads getWithInt:0], [threads getWithInt:1]);
    }
  }
  @finally {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(tp1)) shutdown];
  }
}

- (void)testThreadStarvation {
  RxObserversTestSubscriber *to = create_RxObserversTestSubscriber_initWithRxObserver_(create_RxObserversSerializedObserverTest_$2_init());
  id<RxObserver> o = RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(self, to);
  JavaUtilConcurrentAtomicAtomicInteger *p1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *p2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxSubscription> s1 = [((RxObservable *) nil_chk(RxObserversSerializedObserverTest_infiniteWithJavaUtilConcurrentAtomicAtomicInteger_(p1))) subscribeWithRxObserver:o];
  id<RxSubscription> s2 = [((RxObservable *) nil_chk(RxObserversSerializedObserverTest_infiniteWithJavaUtilConcurrentAtomicAtomicInteger_(p2))) subscribeWithRxObserver:o];
  JavaLangThread_sleepWithLong_(100);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$", @"p1: ", [p1 get], @" p2: ", [p2 get], @" => should be close to each other unless we have thread starvation")];
  OrgJunitAssert_assertEqualsWithFloat_withFloat_withFloat_([p1 get], [p2 get], 10000);
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
}

+ (void)waitOnThreadsWithJavaUtilConcurrentFutureArray:(IOSObjectArray *)futures {
  RxObserversSerializedObserverTest_waitOnThreadsWithJavaUtilConcurrentFutureArray_(futures);
}

+ (RxObservable *)infiniteWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced {
  return RxObserversSerializedObserverTest_infiniteWithJavaUtilConcurrentAtomicAtomicInteger_(produced);
}

- (void)testSerializeNull {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *to = create_RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(to);
  [serial setWithId:sobs];
  [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [to assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), nil } count:2 type:JavaLangInteger_class_()])];
}

- (void)testSerializeAllowsOnError {
  RxObserversTestSubscriber *to = create_RxObserversSerializedObserverTest_$5_init();
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(to);
  @try {
    [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  }
  @catch (RxExceptionsTestException *ex) {
    [sobs onErrorWithNSException:ex];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testSerializeReentrantNullAndComplete {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *to = create_RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(to);
  [serial setWithId:sobs];
  @try {
    [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  }
  @catch (RxExceptionsTestException *ex) {
    [sobs onErrorWithNSException:ex];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [to getCompletions]);
}

- (void)testSerializeReentrantNullAndError {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *to = create_RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(to);
  [serial setWithId:sobs];
  @try {
    [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  }
  @catch (RxExceptionsTestException *ex) {
    [sobs onErrorWithNSException:ex];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [to getCompletions]);
}

- (void)testSerializeDrainPhaseThrows {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *to = create_RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(to);
  [serial setWithId:sobs];
  [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [to assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([to getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testErrorReentry {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *ts = create_RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(ts);
  [serial setWithId:sobs];
  [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testCompleteReentry {
  JavaUtilConcurrentAtomicAtomicReference *serial = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *ts = create_RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(serial);
  RxObserversSerializedObserver *sobs = create_RxObserversSerializedObserver_initWithRxObserver_(ts);
  [serial setWithId:sobs];
  [sobs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSerializedObserverTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LRxObserver;", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 12, -1 },
    { NULL, "V", 0x8a, 13, 14, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0xa, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(serializedObserverWithRxObserver:);
  methods[2].selector = @selector(testSingleThreadedBasic);
  methods[3].selector = @selector(testMultiThreadedBasic);
  methods[4].selector = @selector(testMultiThreadedWithNPE);
  methods[5].selector = @selector(testMultiThreadedWithNPEinMiddle);
  methods[6].selector = @selector(runOutOfOrderConcurrencyTest);
  methods[7].selector = @selector(runConcurrencyTest);
  methods[8].selector = @selector(testNotificationDelay);
  methods[9].selector = @selector(testThreadStarvation);
  methods[10].selector = @selector(waitOnThreadsWithJavaUtilConcurrentFutureArray:);
  methods[11].selector = @selector(infiniteWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[12].selector = @selector(testSerializeNull);
  methods[13].selector = @selector(testSerializeAllowsOnError);
  methods[14].selector = @selector(testSerializeReentrantNullAndComplete);
  methods[15].selector = @selector(testSerializeReentrantNullAndError);
  methods[16].selector = @selector(testSerializeDrainPhaseThrows);
  methods[17].selector = @selector(testErrorReentry);
  methods[18].selector = @selector(testCompleteReentry);
  methods[19].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x0, -1, -1, 25, 26 },
  };
  static const void *ptrTable[] = { (void *)&RxObserversSerializedObserverTest__Annotations$0, "serializedObserver", "LRxObserver;", "(Lrx/Observer<Ljava/lang/String;>;)Lrx/Observer<Ljava/lang/String;>;", (void *)&RxObserversSerializedObserverTest__Annotations$1, (void *)&RxObserversSerializedObserverTest__Annotations$2, "LJavaLangInterruptedException;", (void *)&RxObserversSerializedObserverTest__Annotations$3, (void *)&RxObserversSerializedObserverTest__Annotations$4, (void *)&RxObserversSerializedObserverTest__Annotations$5, (void *)&RxObserversSerializedObserverTest__Annotations$6, (void *)&RxObserversSerializedObserverTest__Annotations$7, (void *)&RxObserversSerializedObserverTest__Annotations$8, "waitOnThreads", "[LJavaUtilConcurrentFuture;", "infinite", "LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicInteger;)Lrx/Observable<Ljava/lang/String;>;", (void *)&RxObserversSerializedObserverTest__Annotations$9, (void *)&RxObserversSerializedObserverTest__Annotations$10, (void *)&RxObserversSerializedObserverTest__Annotations$11, (void *)&RxObserversSerializedObserverTest__Annotations$12, (void *)&RxObserversSerializedObserverTest__Annotations$13, (void *)&RxObserversSerializedObserverTest__Annotations$14, (void *)&RxObserversSerializedObserverTest__Annotations$15, "Lrx/Subscriber<Ljava/lang/String;>;", (void *)&RxObserversSerializedObserverTest__Annotations$16, "LRxObserversSerializedObserverTest_OnNextThread;LRxObserversSerializedObserverTest_CompletionThread;LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;LRxObserversSerializedObserverTest_TestConcurrencyObserver;LRxObserversSerializedObserverTest_TestSingleThreadedObservable;LRxObserversSerializedObserverTest_TestMultiThreadedObservable;LRxObserversSerializedObserverTest_BusyObserver;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest = { "SerializedObserverTest", "rx.observers", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, 27, -1, -1, -1 };
  return &_RxObserversSerializedObserverTest;
}

@end

id<RxObserver> RxObserversSerializedObserverTest_serializedObserverWithRxObserver_(RxObserversSerializedObserverTest *self, id<RxObserver> o) {
  return create_RxObserversSerializedObserver_initWithRxObserver_(o);
}

void RxObserversSerializedObserverTest_waitOnThreadsWithJavaUtilConcurrentFutureArray_(IOSObjectArray *futures) {
  RxObserversSerializedObserverTest_initialize();
  {
    IOSObjectArray *a__ = futures;
    id<JavaUtilConcurrentFuture> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilConcurrentFuture> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilConcurrentFuture> f = *b__++;
      @try {
        [((id<JavaUtilConcurrentFuture>) nil_chk(f)) getWithLong:20 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      }
      @catch (NSException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Failed while waiting on future."];
        [((NSException *) nil_chk(e)) printStackTrace];
      }
    }
  }
}

RxObservable *RxObserversSerializedObserverTest_infiniteWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *produced) {
  RxObserversSerializedObserverTest_initialize();
  return [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(produced)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
}

void RxObserversSerializedObserverTest_init(RxObserversSerializedObserverTest *self) {
  NSObject_init(self);
}

RxObserversSerializedObserverTest *new_RxObserversSerializedObserverTest_init() {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest, init)
}

RxObserversSerializedObserverTest *create_RxObserversSerializedObserverTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest, init)
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitIgnore(@"Demonstrates thread starvation problem. Read JavaDoc"), create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSerializedObserverTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest)

@implementation RxObserversSerializedObserverTest_OnNextThread

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)running {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, observer, numStringsToSend, latch, running);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(self, observer, numStringsToSend, produced);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)produced
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)running {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, observer, numStringsToSend, produced, latch, running);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(self, observer, numStringsToSend);
  return self;
}

- (void)run {
  if (running_ != nil) {
    [running_ countDown];
  }
  for (jint i = 0; i < numStringsToSend_; i++) {
    [((id<RxObserver>) nil_chk(observer_)) onNextWithId:JreStrcat("JCI", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId], '-', i)];
    if (latch_ != nil) {
      [latch_ countDown];
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(produced_)) incrementAndGet];
  }
}

- (void)dealloc {
  RELEASE_(latch_);
  RELEASE_(observer_);
  RELEASE_(produced_);
  RELEASE_(running_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:withInt:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  methods[1].selector = @selector(initWithRxObserver:withInt:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[2].selector = @selector(initWithRxObserver:withInt:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  methods[3].selector = @selector(initWithRxObserver:withInt:);
  methods[4].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "numStringsToSend_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "produced_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "running_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;ILJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "(Lrx/Observer<Ljava/lang/String;>;ILjava/util/concurrent/CountDownLatch;Ljava/util/concurrent/CountDownLatch;)V", "LRxObserver;ILJavaUtilConcurrentAtomicAtomicInteger;", "(Lrx/Observer<Ljava/lang/String;>;ILjava/util/concurrent/atomic/AtomicInteger;)V", "LRxObserver;ILJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "(Lrx/Observer<Ljava/lang/String;>;ILjava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/CountDownLatch;)V", "LRxObserver;I", "(Lrx/Observer<Ljava/lang/String;>;I)V", "Lrx/Observer<Ljava/lang/String;>;", "LRxObserversSerializedObserverTest;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_OnNextThread = { "OnNextThread", "rx.observers", ptrTable, methods, fields, 7, 0x9, 5, 5, 9, -1, -1, -1, -1 };
  return &_RxObserversSerializedObserverTest_OnNextThread;
}

@end

void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, observer, numStringsToSend, create_JavaUtilConcurrentAtomicAtomicInteger_init(), latch, running);
}

RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, observer, numStringsToSend, latch, running)
}

RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, observer, numStringsToSend, latch, running)
}

void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced) {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, observer, numStringsToSend, produced, nil, nil);
}

RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_, observer, numStringsToSend, produced)
}

RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_, observer, numStringsToSend, produced)
}

void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
  self->numStringsToSend_ = numStringsToSend;
  JreStrongAssign(&self->produced_, produced);
  JreStrongAssign(&self->latch_, latch);
  JreStrongAssign(&self->running_, running);
}

RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, observer, numStringsToSend, produced, latch, running)
}

RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(id<RxObserver> observer, jint numStringsToSend, JavaUtilConcurrentAtomicAtomicInteger *produced, JavaUtilConcurrentCountDownLatch *latch, JavaUtilConcurrentCountDownLatch *running) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, observer, numStringsToSend, produced, latch, running)
}

void RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(RxObserversSerializedObserverTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend) {
  RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_withJavaUtilConcurrentAtomicAtomicInteger_(self, observer, numStringsToSend, create_JavaUtilConcurrentAtomicAtomicInteger_init());
}

RxObserversSerializedObserverTest_OnNextThread *new_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_, observer, numStringsToSend)
}

RxObserversSerializedObserverTest_OnNextThread *create_RxObserversSerializedObserverTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_OnNextThread, initWithRxObserver_withInt_, observer, numStringsToSend)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_OnNextThread)

@implementation RxObserversSerializedObserverTest_CompletionThread

- (instancetype)initWithRxObserver:(id<RxObserver>)Observer
withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)event
 withJavaUtilConcurrentFutureArray:(IOSObjectArray *)waitOnThese {
  RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(self, Observer, event, waitOnThese);
  return self;
}

- (void)run {
  if (waitOnThese_ != nil) {
    {
      IOSObjectArray *a__ = waitOnThese_;
      id<JavaUtilConcurrentFuture> const *b__ = a__->buffer_;
      id<JavaUtilConcurrentFuture> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaUtilConcurrentFuture> f = *b__++;
        @try {
          [((id<JavaUtilConcurrentFuture>) nil_chk(f)) get];
        }
        @catch (NSException *e) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error while waiting on future in CompletionThread"];
        }
      }
    }
  }
  if (event_ == JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError)) {
    [((id<RxObserver>) nil_chk(observer_)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"mocked exception")];
  }
  else if (event_ == JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted)) {
    [((id<RxObserver>) nil_chk(observer_)) onCompleted];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Expecting either onError or onCompleted");
  }
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(event_);
  RELEASE_(waitOnThese_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:withJavaUtilConcurrentFutureArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "event_", "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "waitOnThese_", "[LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;[LJavaUtilConcurrentFuture;", "(Lrx/Observer<Ljava/lang/String;>;Lrx/observers/SerializedObserverTest$TestConcurrencyObserverEvent;[Ljava/util/concurrent/Future<*>;)V", "Lrx/Observer<Ljava/lang/String;>;", "[Ljava/util/concurrent/Future<*>;", "LRxObserversSerializedObserverTest;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_CompletionThread = { "CompletionThread", "rx.observers", ptrTable, methods, fields, 7, 0x9, 2, 3, 4, -1, -1, -1, -1 };
  return &_RxObserversSerializedObserverTest_CompletionThread;
}

@end

void RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(RxObserversSerializedObserverTest_CompletionThread *self, id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, Observer);
  JreStrongAssign(&self->event_, event);
  JreStrongAssign(&self->waitOnThese_, waitOnThese);
}

RxObserversSerializedObserverTest_CompletionThread *new_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_CompletionThread, initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_, Observer, event, waitOnThese)
}

RxObserversSerializedObserverTest_CompletionThread *create_RxObserversSerializedObserverTest_CompletionThread_initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> Observer, RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *event, IOSObjectArray *waitOnThese) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_CompletionThread, initWithRxObserver_withRxObserversSerializedObserverTest_TestConcurrencyObserverEvent_withJavaUtilConcurrentFutureArray_, Observer, event, waitOnThese)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_CompletionThread)

J2OBJC_INITIALIZED_DEFN(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent)

RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_[3];

@implementation RxObserversSerializedObserverTest_TestConcurrencyObserverEvent

+ (IOSObjectArray *)values {
  return RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values();
}

+ (RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)valueOfWithNSString:(NSString *)name {
  return RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onCompleted", "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "onError", "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "onNext", "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted), &JreEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError), &JreEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onNext), "LRxObserversSerializedObserverTest;", "Ljava/lang/Enum<Lrx/observers/SerializedObserverTest$TestConcurrencyObserverEvent;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestConcurrencyObserverEvent = { "TestConcurrencyObserverEvent", "rx.observers", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_RxObserversSerializedObserverTest_TestConcurrencyObserverEvent;
}

+ (void)initialize {
  if (self == [RxObserversSerializedObserverTest_TestConcurrencyObserverEvent class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"onCompleted", @"onError", @"onNext",
    };
    for (jint i = 0; i < 3; i++) {
      (RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent)
  }
}

@end

void RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initWithNSString_withInt_(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values() {
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initialize();
  return [IOSObjectArray arrayWithObjects:RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_ count:3 type:RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_class_()];
}

RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_valueOfWithNSString_(NSString *name) {
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initialize();
  for (int i = 0; i < 3; i++) {
    RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *e = RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_fromOrdinal(NSUInteger ordinal) {
  RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return RxObserversSerializedObserverTest_TestConcurrencyObserverEvent_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent)

@implementation RxObserversSerializedObserverTest_TestConcurrencyObserver

- (instancetype)initWithInt:(jint)waitTimeInNext {
  RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(self, waitTimeInNext);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSerializedObserverTest_TestConcurrencyObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onCompleted {
  [((id<JavaUtilList>) nil_chk(events_)) addWithId:JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted)];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(events_)) addWithId:JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError)];
}

- (void)onNextWithId:(NSString *)args {
  @synchronized(events_) {
    [((id<JavaUtilList>) nil_chk(events_)) addWithId:JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onNext)];
  }
  jint s = 0;
  for (jint i = 0; i < 20; i++) {
    s += s * i;
  }
  if (waitTime_ > 0) {
    @try {
      JavaLangThread_sleepWithLong_(waitTime_);
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
}

- (jint)assertEventsWithRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent *)expectedEndingEvent {
  jint nextCount = 0;
  jboolean finished = false;
  for (RxObserversSerializedObserverTest_TestConcurrencyObserverEvent * __strong e in nil_chk(events_)) {
    if (e == JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onNext)) {
      if (finished) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Received onNext but we're already finished.");
      }
      nextCount++;
    }
    else if (e == JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError)) {
      if (finished) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Received onError but we're already finished.");
      }
      if (expectedEndingEvent != nil && JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onError) != expectedEndingEvent) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Received onError ending event but expected ", expectedEndingEvent));
      }
      finished = true;
    }
    else if (e == JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted)) {
      if (finished) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"Received onCompleted but we're already finished.");
      }
      if (expectedEndingEvent != nil && JreLoadEnum(RxObserversSerializedObserverTest_TestConcurrencyObserverEvent, onCompleted) != expectedEndingEvent) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Received onCompleted ending event but expected ", expectedEndingEvent));
      }
      finished = true;
    }
  }
  return nextCount;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_TestConcurrencyObserver class]);
  RELEASE_(events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(assertEventsWithRxObserversSerializedObserverTest_TestConcurrencyObserverEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "events_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "waitTime_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "onError", "LNSException;", "onNext", "LNSString;", "assertEvents", "LRxObserversSerializedObserverTest_TestConcurrencyObserverEvent;", "LJavaLangIllegalStateException;", "Ljava/util/List<Lrx/observers/SerializedObserverTest$TestConcurrencyObserverEvent;>;", "LRxObserversSerializedObserverTest;", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestConcurrencyObserver = { "TestConcurrencyObserver", "rx.observers", ptrTable, methods, fields, 7, 0xa, 6, 2, 9, -1, -1, 10, -1 };
  return &_RxObserversSerializedObserverTest_TestConcurrencyObserver;
}

@end

void RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(RxObserversSerializedObserverTest_TestConcurrencyObserver *self, jint waitTimeInNext) {
  RxSubscriber_init(self);
  JreStrongAssignAndConsume(&self->events_, new_JavaUtilArrayList_initWithInt_(10000));
  self->waitTime_ = waitTimeInNext;
}

RxObserversSerializedObserverTest_TestConcurrencyObserver *new_RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(jint waitTimeInNext) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestConcurrencyObserver, initWithInt_, waitTimeInNext)
}

RxObserversSerializedObserverTest_TestConcurrencyObserver *create_RxObserversSerializedObserverTest_TestConcurrencyObserver_initWithInt_(jint waitTimeInNext) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestConcurrencyObserver, initWithInt_, waitTimeInNext)
}

void RxObserversSerializedObserverTest_TestConcurrencyObserver_init(RxObserversSerializedObserverTest_TestConcurrencyObserver *self) {
  RxSubscriber_init(self);
  JreStrongAssignAndConsume(&self->events_, new_JavaUtilArrayList_initWithInt_(10000));
  self->waitTime_ = 0;
}

RxObserversSerializedObserverTest_TestConcurrencyObserver *new_RxObserversSerializedObserverTest_TestConcurrencyObserver_init() {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestConcurrencyObserver, init)
}

RxObserversSerializedObserverTest_TestConcurrencyObserver *create_RxObserversSerializedObserverTest_TestConcurrencyObserver_init() {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestConcurrencyObserver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_TestConcurrencyObserver)

@implementation RxObserversSerializedObserverTest_TestSingleThreadedObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestSingleThreadedObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestSingleThreadedObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestSingleThreadedObservable thread"];
}

- (void)waitToFinish {
  @try {
    [((JavaLangThread *) nil_chk(t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxObserversSerializedObserverTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestSingleThreadedObservable = { "TestSingleThreadedObservable", "rx.observers", ptrTable, methods, fields, 7, 0xa, 3, 2, 4, -1, -1, 5, -1 };
  return &_RxObserversSerializedObserverTest_TestSingleThreadedObservable;
}

@end

void RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->values_, values);
}

RxObserversSerializedObserverTest_TestSingleThreadedObservable *new_RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestSingleThreadedObservable, initWithNSStringArray_, values)
}

RxObserversSerializedObserverTest_TestSingleThreadedObservable *create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestSingleThreadedObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_TestSingleThreadedObservable)

@implementation RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestSingleThreadedObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestSingleThreadedObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (instancetype)initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable:(RxObserversSerializedObserverTest_TestSingleThreadedObservable *)outer$
                                                                      withRxSubscriber:(RxSubscriber *)capture$0 {
  RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObserversSerializedObserverTest_TestSingleThreadedObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserverTest_TestSingleThreadedObservable;LRxSubscriber;", "(Lrx/observers/SerializedObserverTest$TestSingleThreadedObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxObserversSerializedObserverTest_TestSingleThreadedObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1;
}

@end

void RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *self, RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *new_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1, initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_, outer$, capture$0)
}

RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1 *create_RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_(RxObserversSerializedObserverTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestSingleThreadedObservable_$1, initWithRxObserversSerializedObserverTest_TestSingleThreadedObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxObserversSerializedObserverTest_TestMultiThreadedObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  JavaLangNullPointerException *npe = create_JavaLangNullPointerException_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestMultiThreadedObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(self, npe, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestMultiThreadedObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestMultiThreadedObservable thread"];
}

- (void)waitToFinish {
  @try {
    [((JavaLangThread *) nil_chk(t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  RELEASE_(threadsRunning_);
  RELEASE_(maxConcurrentThreads_);
  RELEASE_(threadPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadsRunning_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxConcurrentThreads_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadPool_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxObserversSerializedObserverTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestMultiThreadedObservable = { "TestMultiThreadedObservable", "rx.observers", ptrTable, methods, fields, 7, 0xa, 3, 5, 4, -1, -1, 5, -1 };
  return &_RxObserversSerializedObserverTest_TestMultiThreadedObservable;
}

@end

void RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssignAndConsume(&self->threadsRunning_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->maxConcurrentThreads_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->values_, values);
  JreStrongAssign(&self->threadPool_, JavaUtilConcurrentExecutors_newCachedThreadPool());
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable, initWithNSStringArray_, values)
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_TestMultiThreadedObservable)

@implementation RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestMultiThreadedObservable thread"];
    jint j = 0;
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        jint fj = ++j;
        [((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) executeWithJavaLangRunnable:create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(self, s, fj)];
      }
    }
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) shutdown];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  @try {
    if (![((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) awaitTerminationWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Threadpool did not terminate in time."];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
}

- (instancetype)initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable:(RxObserversSerializedObserverTest_TestMultiThreadedObservable *)outer$
                                                     withJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0
                                                                     withRxSubscriber:(RxSubscriber *)capture$1 {
  RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$npe_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable:withJavaLangNullPointerException:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObserversSerializedObserverTest_TestMultiThreadedObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$npe_", "LJavaLangNullPointerException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserverTest_TestMultiThreadedObservable;LJavaLangNullPointerException;LRxSubscriber;", "(Lrx/observers/SerializedObserverTest$TestMultiThreadedObservable;Ljava/lang/NullPointerException;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxObserversSerializedObserverTest_TestMultiThreadedObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1;
}

@end

void RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *self, RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$npe_, capture$0);
  JreStrongAssign(&self->val$observer_, capture$1);
  NSObject_init(self);
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1, initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_, outer$, capture$0, capture$1)
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxObserversSerializedObserverTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1, initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_, outer$, capture$0, capture$1)
}

@implementation RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) incrementAndGet];
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"TestMultiThreadedObservable onNext: ", val$s_, @" on thread ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
    if (val$s_ == nil) {
      @throw this$0_->val$npe_;
    }
    else {
      jint sleep = (val$fj_ % 3) * 10;
      if (sleep != 0) {
        JavaLangThread_sleepWithLong_(sleep);
      }
    }
    [((RxSubscriber *) nil_chk(this$0_->val$observer_)) onNextWithId:val$s_];
    jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) get];
    jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->maxConcurrentThreads_)) get];
    if (concurrentThreads > maxThreads) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
    }
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(this$0_->val$observer_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) decrementAndGet];
  }
}

- (instancetype)initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1:(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *)outer$
                                                                            withNSString:(NSString *)capture$0
                                                                                 withInt:(jint)capture$1 {
  RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$fj_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1;LNSString;I", "LRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1;", "run" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1;
}

@end

void RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *self, RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  self->val$fj_ = capture$1;
  NSObject_init(self);
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *new_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1, initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_, outer$, capture$0, capture$1)
}

RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1 *create_RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1_initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_$1, initWithRxObserversSerializedObserverTest_TestMultiThreadedObservable_$1_withNSString_withInt_, outer$, capture$0, capture$1)
}

@implementation RxObserversSerializedObserverTest_BusyObserver

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  @try {
    JreAssignVolatileBoolean(&onCompleted_, true);
  }
  @finally {
    [self captureMaxThreads];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(terminalEvent_)) countDown];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @">>>>>>>>>>>>>>>>>>>> onError received: ", e)];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  @try {
    JreAssignVolatileBoolean(&onError_, true);
  }
  @finally {
    [self captureMaxThreads];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(terminalEvent_)) countDown];
  }
}

- (void)onNextWithId:(NSString *)args {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  @try {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onNextCount_)) incrementAndGet];
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  @finally {
    [self captureMaxThreads];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
  }
}

- (void)captureMaxThreads {
  jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) get];
  jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) get];
  if (concurrentThreads > maxThreads) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
    if (concurrentThreads > 1) {
      [create_JavaLangRuntimeException_initWithNSString_(@"should not be greater than 1") printStackTrace];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSerializedObserverTest_BusyObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_BusyObserver class]);
  RELEASE_(onNextCount_);
  RELEASE_(threadsRunning_);
  RELEASE_(maxConcurrentThreads_);
  RELEASE_(terminalEvent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(captureMaxThreads);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onCompleted_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "onError_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "onNextCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadsRunning_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxConcurrentThreads_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "terminalEvent_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSerializedObserverTest;", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_BusyObserver = { "BusyObserver", "rx.observers", ptrTable, methods, fields, 7, 0xa, 5, 6, 4, -1, -1, 5, -1 };
  return &_RxObserversSerializedObserverTest_BusyObserver;
}

@end

void RxObserversSerializedObserverTest_BusyObserver_init(RxObserversSerializedObserverTest_BusyObserver *self) {
  RxSubscriber_init(self);
  JreAssignVolatileBoolean(&self->onCompleted_, false);
  JreAssignVolatileBoolean(&self->onError_, false);
  JreStrongAssignAndConsume(&self->onNextCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->threadsRunning_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->maxConcurrentThreads_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->terminalEvent_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

RxObserversSerializedObserverTest_BusyObserver *new_RxObserversSerializedObserverTest_BusyObserver_init() {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_BusyObserver, init)
}

RxObserversSerializedObserverTest_BusyObserver *create_RxObserversSerializedObserverTest_BusyObserver_init() {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_BusyObserver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSerializedObserverTest_BusyObserver)

@implementation RxObserversSerializedObserverTest_$1

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<JavaUtilList>) nil_chk(val$threads_)) addWithId:JavaLangThread_currentThread()];
  if (!first_) {
    first_ = true;
    @try {
      [((id<JavaUtilConcurrentFuture>) nil_chk([((id<JavaUtilConcurrentExecutorService>) nil_chk(val$tp1_)) submitWithJavaLangRunnable:create_RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(self)])) get];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
    @catch (JavaUtilConcurrentExecutionException *e) {
      [((JavaUtilConcurrentExecutionException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
}

- (void)onCompleted {
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$1
                 withRxObserverArray:(IOSObjectArray *)capture$2 {
  RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$threads_);
  RELEASE_(val$tp1_);
  RELEASE_(val$os_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilList:withJavaUtilConcurrentExecutorService:withRxObserverArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$threads_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$tp1_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$os_", "[LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LJavaUtilList;LJavaUtilConcurrentExecutorService;[LRxObserver;", "(Ljava/util/List<Ljava/lang/Thread;>;Ljava/util/concurrent/ExecutorService;[Lrx/Observer<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Thread;>;", "[Lrx/Observer<Ljava/lang/Integer;>;", "LRxObserversSerializedObserverTest;", "testNotificationDelay", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 4, 8, -1, 9, 10, -1 };
  return &_RxObserversSerializedObserverTest_$1;
}

@end

void RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(RxObserversSerializedObserverTest_$1 *self, id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2) {
  JreStrongAssign(&self->val$threads_, capture$0);
  JreStrongAssign(&self->val$tp1_, capture$1);
  JreStrongAssign(&self->val$os_, capture$2);
  NSObject_init(self);
}

RxObserversSerializedObserverTest_$1 *new_RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$1, initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_, capture$0, capture$1, capture$2)
}

RxObserversSerializedObserverTest_$1 *create_RxObserversSerializedObserverTest_$1_initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_(id<JavaUtilList> capture$0, id<JavaUtilConcurrentExecutorService> capture$1, IOSObjectArray *capture$2) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$1, initWithJavaUtilList_withJavaUtilConcurrentExecutorService_withRxObserverArray_, capture$0, capture$1, capture$2)
}

@implementation RxObserversSerializedObserverTest_$1_$1

- (void)run {
  [((id<RxObserver>) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->val$os_), 0))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
}

- (instancetype)initWithRxObserversSerializedObserverTest_$1:(RxObserversSerializedObserverTest_$1 *)outer$ {
  RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserverTest_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObserversSerializedObserverTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserverTest_$1;", "onNextWithId:" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$1_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObserversSerializedObserverTest_$1_$1;
}

@end

void RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1_$1 *self, RxObserversSerializedObserverTest_$1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObserversSerializedObserverTest_$1_$1 *new_RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1 *outer$) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$1_$1, initWithRxObserversSerializedObserverTest_$1_, outer$)
}

RxObserversSerializedObserverTest_$1_$1 *create_RxObserversSerializedObserverTest_$1_$1_initWithRxObserversSerializedObserverTest_$1_(RxObserversSerializedObserverTest_$1 *outer$) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$1_$1, initWithRxObserversSerializedObserverTest_$1_, outer$)
}

@implementation RxObserversSerializedObserverTest_$2

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)t {
  @try {
    JavaLangThread_sleepWithLong_(1);
  }
  @catch (JavaLangInterruptedException *e) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSerializedObserverTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSerializedObserverTest;", "testThreadStarvation", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$2 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSerializedObserverTest_$2;
}

@end

void RxObserversSerializedObserverTest_$2_init(RxObserversSerializedObserverTest_$2 *self) {
  NSObject_init(self);
}

RxObserversSerializedObserverTest_$2 *new_RxObserversSerializedObserverTest_$2_init() {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$2, init)
}

RxObserversSerializedObserverTest_$2 *create_RxObserversSerializedObserverTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$2, init)
}

@implementation RxObserversSerializedObserverTest_$3

- (void)callWithId:(RxSubscriber *)s {
  while (![((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    [s onNextWithId:@"onNext"];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$produced_)) incrementAndGet];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$produced_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$produced_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversSerializedObserverTest;", "infiniteWithJavaUtilConcurrentAtomicAtomicInteger:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$3 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObserversSerializedObserverTest_$3;
}

@end

void RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversSerializedObserverTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$produced_, capture$0);
  NSObject_init(self);
}

RxObserversSerializedObserverTest_$3 *new_RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversSerializedObserverTest_$3 *create_RxObserversSerializedObserverTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$4

- (void)onNextWithId:(JavaLangInteger *)t {
  if (t != nil && [t intValue] == 0) {
    [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onNextWithId:nil];
  }
  [super onNextWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$4 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testSerializeNull", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$4 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$4;
}

@end

void RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$4 *new_RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$4 *create_RxObserversSerializedObserverTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$5

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSerializedObserverTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$5 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxObserversSerializedObserverTest;", "testSerializeAllowsOnError", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$5 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObserversSerializedObserverTest_$5;
}

@end

void RxObserversSerializedObserverTest_$5_init(RxObserversSerializedObserverTest_$5 *self) {
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$5 *new_RxObserversSerializedObserverTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$5, init)
}

RxObserversSerializedObserverTest_$5 *create_RxObserversSerializedObserverTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$5, init)
}

@implementation RxObserversSerializedObserverTest_$6

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onCompleted];
  @throw create_RxExceptionsTestException_init();
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$6 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testSerializeReentrantNullAndComplete", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$6 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$6;
}

@end

void RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$6 *new_RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$6 *create_RxObserversSerializedObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$7

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onErrorWithNSException:create_JavaLangRuntimeException_init()];
  @throw create_RxExceptionsTestException_init();
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$7 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testSerializeReentrantNullAndError", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$7 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$7;
}

@end

void RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$7 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$7 *new_RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$7, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$7 *create_RxObserversSerializedObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$7, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$8

- (void)onNextWithId:(JavaLangInteger *)t {
  if (t != nil && [t intValue] == 0) {
    [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onNextWithId:nil];
  }
  else if (t == nil) {
    @throw create_RxExceptionsTestException_init();
  }
  [super onNextWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$8 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testSerializeDrainPhaseThrows", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$8 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$8;
}

@end

void RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$8 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$8 *new_RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$8, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$8 *create_RxObserversSerializedObserverTest_$8_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$8, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$9

- (void)onNextWithId:(JavaLangInteger *)v {
  [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([val$serial_ get])) onErrorWithNSException:create_RxExceptionsTestException_init()];
  [super onNextWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$9 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testErrorReentry", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$9 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$9;
}

@end

void RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$9 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$9 *new_RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$9, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$9 *create_RxObserversSerializedObserverTest_$9_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$9, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSerializedObserverTest_$10

- (void)onNextWithId:(JavaLangInteger *)v {
  [((id<RxObserver>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$serial_)) get])) onCompleted];
  [((id<RxObserver>) nil_chk([val$serial_ get])) onCompleted];
  [super onNextWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSerializedObserverTest_$10 class]);
  RELEASE_(val$serial_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$serial_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Observer<Ljava/lang/Integer;>;>;", "LRxObserversSerializedObserverTest;", "testCompleteReentry", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSerializedObserverTest_$10 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObserversSerializedObserverTest_$10;
}

@end

void RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSerializedObserverTest_$10 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$serial_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObserversSerializedObserverTest_$10 *new_RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSerializedObserverTest_$10, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSerializedObserverTest_$10 *create_RxObserversSerializedObserverTest_$10_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSerializedObserverTest_$10, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}
