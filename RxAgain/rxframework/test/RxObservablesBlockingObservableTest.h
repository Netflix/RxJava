//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observables/BlockingObservableTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservablesBlockingObservableTest")
#ifdef RESTRICT_RxObservablesBlockingObservableTest
#define INCLUDE_ALL_RxObservablesBlockingObservableTest 0
#else
#define INCLUDE_ALL_RxObservablesBlockingObservableTest 1
#endif
#undef RESTRICT_RxObservablesBlockingObservableTest

#if !defined (RxObservablesBlockingObservableTest_) && (INCLUDE_ALL_RxObservablesBlockingObservableTest || defined(INCLUDE_RxObservablesBlockingObservableTest))
#define RxObservablesBlockingObservableTest_

@interface RxObservablesBlockingObservableTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)testFirst;

- (void)testFirstOrDefault;

- (void)testFirstOrDefaultWithEmpty;

- (void)testFirstOrDefaultWithPredicate;

- (void)testFirstOrDefaultWithPredicateAndEmpty;

- (void)testFirstWithEmpty;

- (void)testFirstWithPredicate;

- (void)testFirstWithPredicateAndEmpty;

- (void)testForEachWithError;

- (void)testLast;

- (void)testLastEmptyObservable;

- (void)testLastOrDefault;

- (void)testLastOrDefault1;

- (void)testLastOrDefault2;

- (void)testLastOrDefaultWithPredicate;

- (void)testLastOrDefaultWrongPredicate;

- (void)testLastWithPredicate;

- (void)testNoInterruptedExceptionWhenInterruptedWhileFirstOnSynchronousObservable;

- (void)testNoInterruptedExceptionWhenInterruptedWhileForEachOnSynchronousObservable;

- (void)testNoInterruptedExceptionWhenInterruptedWhileGetIteratorOnSynchronousObservable;

- (void)testNoInterruptedExceptionWhenInterruptedWhileLastOnSynchronousObservable;

- (void)testNoInterruptedExceptionWhenInterruptedWhileSingleOnSynchronousObservable;

- (void)testNoInterruptedExceptionWhenInterruptedWhileToIterableOnSynchronousObservable;

- (void)testOnErrorNotImplemented;

- (void)testRun;

- (void)testRunException;

- (void)testRunIOException;

- (void)testSingle;

- (void)testSingleDefault;

- (void)testSingleDefaultPredicateMatchesMoreThanOne;

- (void)testSingleDefaultPredicateMatchesNothing;

- (void)testSingleDefaultWithMoreThanOne;

- (void)testSingleOrDefaultUnsubscribe;

- (void)testSingleWithPredicateDefault;

- (void)testSingleWrong;

- (void)testSingleWrongPredicate;

- (void)testSubscribeCallback1;

- (void)testSubscribeCallback2;

- (void)testSubscribeCallback3;

- (void)testSubscribeCallback3Error;

- (void)testSubscriberBackpressure;

- (void)testToIterable;

- (void)testToIterableManyTimes;

- (void)testToIterableNextOnly;

- (void)testToIterableNextOnlyTwice;

- (void)testToIterableWithException;

- (void)testUnsubscribeFromFirstWhenInterrupted;

- (void)testUnsubscribeFromForEachWhenInterrupted;

- (void)testUnsubscribeFromGetIteratorWhenInterrupted;

- (void)testUnsubscribeFromLastWhenInterrupted;

- (void)testUnsubscribeFromLatestWhenInterrupted;

- (void)testUnsubscribeFromNextWhenInterrupted;

- (void)testUnsubscribeFromSingleWhenInterrupted;

- (void)testUnsubscribeFromToIterableWhenInterrupted;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest)

FOUNDATION_EXPORT void RxObservablesBlockingObservableTest_init(RxObservablesBlockingObservableTest *self);

FOUNDATION_EXPORT RxObservablesBlockingObservableTest *new_RxObservablesBlockingObservableTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservablesBlockingObservableTest *create_RxObservablesBlockingObservableTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesBlockingObservableTest)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservablesBlockingObservableTest")
