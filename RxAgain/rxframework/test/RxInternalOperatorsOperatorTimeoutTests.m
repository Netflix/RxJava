//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTimeoutTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTimeoutTests.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorTimeoutTests () {
 @public
  RxSubjectsPublishSubject *underlyingSubject_;
  RxSchedulersTestScheduler *testScheduler_;
  RxObservable *withTimeout_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests, underlyingSubject_, RxSubjectsPublishSubject *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests, testScheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests, withTimeout_, RxObservable *)

inline jlong RxInternalOperatorsOperatorTimeoutTests_get_TIMEOUT();
#define RxInternalOperatorsOperatorTimeoutTests_TIMEOUT 3LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOperatorTimeoutTests, TIMEOUT, jlong)

inline JavaUtilConcurrentTimeUnit *RxInternalOperatorsOperatorTimeoutTests_get_TIME_UNIT();
static JavaUtilConcurrentTimeUnit *RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorTimeoutTests, TIME_UNIT, JavaUtilConcurrentTimeUnit *)

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$19();

@interface RxInternalOperatorsOperatorTimeoutTests_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorTimeoutTests *this$0_;
  JavaUtilConcurrentCountDownLatch *val$timeoutSetuped_;
  JavaUtilConcurrentCountDownLatch *val$exit_;
  id<RxObserver> val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutTests:(RxInternalOperatorsOperatorTimeoutTests *)outer$
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                                                 withRxObserver:(id<RxObserver>)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$1, this$0_, RxInternalOperatorsOperatorTimeoutTests *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$1, val$timeoutSetuped_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$1, val$exit_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$1, val$observer_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests_$1 *self, RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$1 *new_RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$1 *create_RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2);

@interface RxInternalOperatorsOperatorTimeoutTests_$1_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorTimeoutTests_$1 *this$0_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutTests_$1:(RxInternalOperatorsOperatorTimeoutTests_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$1_$1, this$0_, RxInternalOperatorsOperatorTimeoutTests_$1 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1_$1 *self, RxInternalOperatorsOperatorTimeoutTests_$1 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$1_$1 *new_RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$1_$1 *create_RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1 *outer$);

@interface RxInternalOperatorsOperatorTimeoutTests_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> val$s_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$2, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$2 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$2 *new_RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$2 *create_RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxInternalOperatorsOperatorTimeoutTests_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> val$s_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$3, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$3 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$3 *new_RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$3 *create_RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxInternalOperatorsOperatorTimeoutTests_$4 : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> val$s_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutTests_$4, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$4 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$4 *new_RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$4 *create_RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxInternalOperatorsOperatorTimeoutTests_$5 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$5_init(RxInternalOperatorsOperatorTimeoutTests_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$5 *new_RxInternalOperatorsOperatorTimeoutTests_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$5 *create_RxInternalOperatorsOperatorTimeoutTests_$5_init();

@interface RxInternalOperatorsOperatorTimeoutTests_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$6_init(RxInternalOperatorsOperatorTimeoutTests_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$6 *new_RxInternalOperatorsOperatorTimeoutTests_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$6 *create_RxInternalOperatorsOperatorTimeoutTests_$6_init();

@interface RxInternalOperatorsOperatorTimeoutTests_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutTests_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutTests_$7_init(RxInternalOperatorsOperatorTimeoutTests_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$7 *new_RxInternalOperatorsOperatorTimeoutTests_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutTests_$7 *create_RxInternalOperatorsOperatorTimeoutTests_$7_init();

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorTimeoutTests)

@implementation RxInternalOperatorsOperatorTimeoutTests

- (void)setUp {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
  JreStrongAssign(&underlyingSubject_, RxSubjectsPublishSubject_create());
  JreStrongAssignAndConsume(&testScheduler_, new_RxSchedulersTestScheduler_init());
  JreStrongAssign(&withTimeout_, [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) timeoutWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT withJavaUtilConcurrentTimeUnit:RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT withRxScheduler:testScheduler_]);
}

- (void)shouldNotTimeoutIfOnNextWithinTimeout {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldNotTimeoutIfSecondOnNextWithinTimeout {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"Two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:@"Two"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldTimeoutIfOnNextNotWithinTimeout {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT + 1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldTimeoutIfSecondOnNextNotWithinTimeout {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT + 1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldCompleteIfUnderlyingCompletes {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onCompleted];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldErrorIfUnderlyingErrors {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(withTimeout_)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onErrorWithNSException:create_JavaLangUnsupportedOperationException_init()];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangUnsupportedOperationException_class_())];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldSwitchToOtherIfOnNextNotWithinTimeout {
  RxObservable *other = RxObservable_justWithId_withId_withId_(@"a", @"b", @"c");
  RxObservable *source = [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) timeoutWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT withJavaUtilConcurrentTimeUnit:RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT withRxObservable:other withRxScheduler:testScheduler_];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(source)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:4 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"Two"];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldSwitchToOtherIfOnErrorNotWithinTimeout {
  RxObservable *other = RxObservable_justWithId_withId_withId_(@"a", @"b", @"c");
  RxObservable *source = [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) timeoutWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT withJavaUtilConcurrentTimeUnit:RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT withRxObservable:other withRxScheduler:testScheduler_];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(source)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:4 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onErrorWithNSException:create_JavaLangUnsupportedOperationException_init()];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldSwitchToOtherIfOnCompletedNotWithinTimeout {
  RxObservable *other = RxObservable_justWithId_withId_withId_(@"a", @"b", @"c");
  RxObservable *source = [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) timeoutWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT withJavaUtilConcurrentTimeUnit:RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT withRxObservable:other withRxScheduler:testScheduler_];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(source)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:4 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
}

- (void)shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout {
  RxSubjectsPublishSubject *other = RxSubjectsPublishSubject_create();
  RxObservable *source = [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) timeoutWithLong:RxInternalOperatorsOperatorTimeoutTests_TIMEOUT withJavaUtilConcurrentTimeUnit:RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT withRxObservable:other withRxScheduler:testScheduler_];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk(source)) subscribeWithRxObserver:observer];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"One"];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:4 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxSubjectsPublishSubject *) nil_chk(underlyingSubject_)) onNextWithId:@"Two"];
  [((RxSubjectsPublishSubject *) nil_chk(other)) onNextWithId:@"a"];
  [other onNextWithId:@"b"];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [other onNextWithId:@"c"];
  [other onNextWithId:@"d"];
  [other onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"One"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [inOrder verifyNoMoreInteractions];
}

- (void)shouldTimeoutIfSynchronizedObservableEmitFirstOnNextNotWithinTimeout {
  JavaUtilConcurrentCountDownLatch *exit = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *timeoutSetuped = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(self, timeoutSetuped, exit, observer)) start];
  [timeoutSetuped await];
  [((RxSchedulersTestScheduler *) nil_chk(testScheduler_)) advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [inOrder verifyNoMoreInteractions];
  [exit countDown];
}

- (void)shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxObservable *never = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(s));
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *observableWithTimeout = [((RxObservable *) nil_chk(never)) timeoutWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:testScheduler];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observableWithTimeout)) subscribeWithRxObserver:observer];
  [testScheduler advanceTimeByWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(s, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxObservable *immediatelyComplete = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(s));
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *observableWithTimeout = [((RxObservable *) nil_chk(immediatelyComplete)) timeoutWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:testScheduler];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observableWithTimeout)) subscribeWithRxObserver:observer];
  [testScheduler advanceTimeByWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(s, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyErrored {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxObservable *immediatelyError = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(s));
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *observableWithTimeout = [((RxObservable *) nil_chk(immediatelyError)) timeoutWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:testScheduler];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observableWithTimeout)) subscribeWithRxObserver:observer];
  [testScheduler advanceTimeByWithLong:2000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(JavaIoIOException_class_())];
  [inOrder verifyNoMoreInteractions];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(s, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)withDefaultScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) timeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withSelector {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) timeoutWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTimeoutTests_$5_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withSelectorAndDefault {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) timeoutWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTimeoutTests_$6_init() withRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2))])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withSelectorAndDefault2 {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_never()])) timeoutWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTimeoutTests_$7_init() withRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2))])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withDefaultSchedulerAndOther {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) timeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2))])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(underlyingSubject_);
  RELEASE_(testScheduler_);
  RELEASE_(withTimeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(shouldNotTimeoutIfOnNextWithinTimeout);
  methods[2].selector = @selector(shouldNotTimeoutIfSecondOnNextWithinTimeout);
  methods[3].selector = @selector(shouldTimeoutIfOnNextNotWithinTimeout);
  methods[4].selector = @selector(shouldTimeoutIfSecondOnNextNotWithinTimeout);
  methods[5].selector = @selector(shouldCompleteIfUnderlyingCompletes);
  methods[6].selector = @selector(shouldErrorIfUnderlyingErrors);
  methods[7].selector = @selector(shouldSwitchToOtherIfOnNextNotWithinTimeout);
  methods[8].selector = @selector(shouldSwitchToOtherIfOnErrorNotWithinTimeout);
  methods[9].selector = @selector(shouldSwitchToOtherIfOnCompletedNotWithinTimeout);
  methods[10].selector = @selector(shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout);
  methods[11].selector = @selector(shouldTimeoutIfSynchronizedObservableEmitFirstOnNextNotWithinTimeout);
  methods[12].selector = @selector(shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout);
  methods[13].selector = @selector(shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete);
  methods[14].selector = @selector(shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyErrored);
  methods[15].selector = @selector(withDefaultScheduler);
  methods[16].selector = @selector(withSelector);
  methods[17].selector = @selector(withSelectorAndDefault);
  methods[18].selector = @selector(withSelectorAndDefault2);
  methods[19].selector = @selector(withDefaultSchedulerAndOther);
  methods[20].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "underlyingSubject_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "testScheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withTimeout_", "LRxObservable;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "TIMEOUT", "J", .constantValue.asLong = RxInternalOperatorsOperatorTimeoutTests_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "TIME_UNIT", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$0, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$1, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$2, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$3, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$4, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$5, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$6, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$7, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$8, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$9, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$10, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$11, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$12, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$13, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$14, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$15, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$16, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$17, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$18, (void *)&RxInternalOperatorsOperatorTimeoutTests__Annotations$19, "Lrx/subjects/PublishSubject<Ljava/lang/String;>;", "Lrx/Observable<Ljava/lang/String;>;", &RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests = { "OperatorTimeoutTests", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 21, 5, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorTimeoutTests class]) {
    JreStrongAssign(&RxInternalOperatorsOperatorTimeoutTests_TIME_UNIT, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorTimeoutTests)
  }
}

@end

void RxInternalOperatorsOperatorTimeoutTests_init(RxInternalOperatorsOperatorTimeoutTests *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests *new_RxInternalOperatorsOperatorTimeoutTests_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests, init)
}

RxInternalOperatorsOperatorTimeoutTests *create_RxInternalOperatorsOperatorTimeoutTests_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutTests__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTimeoutTests)

@implementation RxInternalOperatorsOperatorTimeoutTests_$1

- (void)run {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(self)))) timeoutWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:this$0_->testScheduler_])) subscribeWithRxObserver:val$observer_];
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutTests:(RxInternalOperatorsOperatorTimeoutTests *)outer$
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                                                 withRxObserver:(id<RxObserver>)capture$2 {
  RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$timeoutSetuped_);
  RELEASE_(val$exit_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTimeoutTests:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTimeoutTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeoutSetuped_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$exit_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTimeoutTests;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LRxObserver;", "(Lrx/internal/operators/OperatorTimeoutTests;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/CountDownLatch;Lrx/Observer<Ljava/lang/String;>;)V", "Lrx/Observer<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorTimeoutTests;", "shouldTimeoutIfSynchronizedObservableEmitFirstOnNextNotWithinTimeout" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 4, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$1;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests_$1 *self, RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$timeoutSetuped_, capture$0);
  JreStrongAssign(&self->val$exit_, capture$1);
  JreStrongAssign(&self->val$observer_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$1 *new_RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$1, initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_, outer$, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorTimeoutTests_$1 *create_RxInternalOperatorsOperatorTimeoutTests_$1_initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_(RxInternalOperatorsOperatorTimeoutTests *outer$, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, id<RxObserver> capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$1, initWithRxInternalOperatorsOperatorTimeoutTests_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withRxObserver_, outer$, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$1_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$timeoutSetuped_)) countDown];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$exit_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [((RxSubscriber *) nil_chk(subscriber)) onNextWithId:@"a"];
  [subscriber onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutTests_$1:(RxInternalOperatorsOperatorTimeoutTests_$1 *)outer$ {
  RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTimeoutTests_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTimeoutTests_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorTimeoutTests_$1;", "run", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$1_$1;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1_$1 *self, RxInternalOperatorsOperatorTimeoutTests_$1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$1_$1 *new_RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$1_$1, initWithRxInternalOperatorsOperatorTimeoutTests_$1_, outer$)
}

RxInternalOperatorsOperatorTimeoutTests_$1_$1 *create_RxInternalOperatorsOperatorTimeoutTests_$1_$1_initWithRxInternalOperatorsOperatorTimeoutTests_$1_(RxInternalOperatorsOperatorTimeoutTests_$1 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$1_$1, initWithRxInternalOperatorsOperatorTimeoutTests_$1_, outer$)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$2

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:val$s_];
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxSubscription;", "LRxInternalOperatorsOperatorTimeoutTests;", "shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$2;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$2 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$2 *new_RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$2, initWithRxSubscription_, capture$0)
}

RxInternalOperatorsOperatorTimeoutTests_$2 *create_RxInternalOperatorsOperatorTimeoutTests_$2_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$2, initWithRxSubscription_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$3

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:val$s_];
  [subscriber onCompleted];
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxSubscription;", "LRxInternalOperatorsOperatorTimeoutTests;", "shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$3;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$3 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$3 *new_RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$3, initWithRxSubscription_, capture$0)
}

RxInternalOperatorsOperatorTimeoutTests_$3 *create_RxInternalOperatorsOperatorTimeoutTests_$3_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$3, initWithRxSubscription_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$4

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:val$s_];
  [subscriber onErrorWithNSException:create_JavaIoIOException_initWithNSString_(@"Error")];
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxSubscription;", "LRxInternalOperatorsOperatorTimeoutTests;", "shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyErrored", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$4;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(RxInternalOperatorsOperatorTimeoutTests_$4 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$4 *new_RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$4, initWithRxSubscription_, capture$0)
}

RxInternalOperatorsOperatorTimeoutTests_$4 *create_RxInternalOperatorsOperatorTimeoutTests_$4_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$4, initWithRxSubscription_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$5

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_never();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutTests_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorTimeoutTests;", "withSelector", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$5;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$5_init(RxInternalOperatorsOperatorTimeoutTests_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$5 *new_RxInternalOperatorsOperatorTimeoutTests_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$5, init)
}

RxInternalOperatorsOperatorTimeoutTests_$5 *create_RxInternalOperatorsOperatorTimeoutTests_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$5, init)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$6

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_never();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutTests_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorTimeoutTests;", "withSelectorAndDefault", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$6;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$6_init(RxInternalOperatorsOperatorTimeoutTests_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$6 *new_RxInternalOperatorsOperatorTimeoutTests_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$6, init)
}

RxInternalOperatorsOperatorTimeoutTests_$6 *create_RxInternalOperatorsOperatorTimeoutTests_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$6, init)
}

@implementation RxInternalOperatorsOperatorTimeoutTests_$7

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutTests_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorTimeoutTests;", "withSelectorAndDefault2", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutTests_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutTests_$7;
}

@end

void RxInternalOperatorsOperatorTimeoutTests_$7_init(RxInternalOperatorsOperatorTimeoutTests_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutTests_$7 *new_RxInternalOperatorsOperatorTimeoutTests_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutTests_$7, init)
}

RxInternalOperatorsOperatorTimeoutTests_$7 *create_RxInternalOperatorsOperatorTimeoutTests_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutTests_$7, init)
}
