//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSerializeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorSerializeTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

@class RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$5();

@interface RxInternalOperatorsOperatorSerializeTest_OnNextThread () {
 @public
  id<RxObserver> observer_;
  jint numStringsToSend_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_OnNextThread, observer_, id<RxObserver>)

@interface RxInternalOperatorsOperatorSerializeTest_CompletionThread () {
 @public
  id<RxObserver> observer_;
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event_;
  IOSObjectArray *waitOnThese_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_CompletionThread, observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_CompletionThread, event_, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_CompletionThread, waitOnThese_, IOSObjectArray *)

typedef NS_ENUM(NSUInteger, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_Enum) {
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_Enum_onCompleted = 0,
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_Enum_onError = 1,
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_Enum_onNext = 2,
};

@interface RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_[];

inline RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_get_onCompleted();
J2OBJC_ENUM_CONSTANT(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onCompleted)

inline RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_get_onError();
J2OBJC_ENUM_CONSTANT(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onError)

inline RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_get_onNext();
J2OBJC_ENUM_CONSTANT(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onNext)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initWithNSString_withInt_(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values();

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent)

@interface RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

- (void)waitToFinish;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *new_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable)

@interface RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable:(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *)outer$
                                                                             withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1, this$0_, RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
  JavaUtilConcurrentAtomicAtomicInteger *threadsRunning_;
  JavaUtilConcurrentAtomicAtomicInteger *maxConcurrentThreads_;
  id<JavaUtilConcurrentExecutorService> threadPool_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

- (void)waitToFinish;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, t_, JavaLangThread *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, threadsRunning_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, maxConcurrentThreads_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, threadPool_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable)

@interface RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *this$0_;
  JavaLangNullPointerException *val$npe_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable:(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *)outer$
                                                            withJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0
                                                                            withRxSubscriber:(RxSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1, this$0_, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1, val$npe_, JavaLangNullPointerException *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1);

@interface RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *this$0_;
  NSString *val$s_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1:(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *)outer$
                                                                                   withNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1, this$0_, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1, val$s_, NSString *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0);

@interface RxInternalOperatorsOperatorSerializeTest_BusyObserver : RxSubscriber {
 @public
  volatile_jboolean onCompleted_;
  volatile_jboolean onError_;
  JavaUtilConcurrentAtomicAtomicInteger *onNextCount_;
  JavaUtilConcurrentAtomicAtomicInteger *threadsRunning_;
  JavaUtilConcurrentAtomicAtomicInteger *maxConcurrentThreads_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_BusyObserver)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_BusyObserver, onNextCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_BusyObserver, threadsRunning_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest_BusyObserver, maxConcurrentThreads_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSerializeTest_BusyObserver_init(RxInternalOperatorsOperatorSerializeTest_BusyObserver *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_BusyObserver *new_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSerializeTest_BusyObserver *create_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_BusyObserver)

@implementation RxInternalOperatorsOperatorSerializeTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testSingleThreadedBasic {
  RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *onSubscribe = create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) serialize])) subscribeWithRxObserver:observer_];
  [onSubscribe waitToFinish];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMultiThreadedBasic {
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *onSubscribe = create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  RxInternalOperatorsOperatorSerializeTest_BusyObserver *busyobserver = create_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) serialize])) subscribeWithRxSubscriber:busyobserver];
  [onSubscribe waitToFinish];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->onNextCount_)) get]);
  OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onError_));
  OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onCompleted_));
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->maxConcurrentThreads_)) get]);
}

- (void)testMultiThreadedWithNPE {
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *onSubscribe = create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three", nil } count:4 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
  RxInternalOperatorsOperatorSerializeTest_BusyObserver *busyobserver = create_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) serialize])) subscribeWithRxSubscriber:busyobserver];
  [onSubscribe waitToFinish];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get])];
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->onNextCount_)) get] < 4);
  OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onError_));
  OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onCompleted_));
  OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->maxConcurrentThreads_)) get]);
}

- (void)testMultiThreadedWithNPEinMiddle {
  jboolean lessThan9 = false;
  for (jint i = 0; i < 3; i++) {
    RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *onSubscribe = create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three", nil, @"four", @"five", @"six", @"seven", @"eight", @"nine" } count:10 type:NSString_class_()]);
    RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(onSubscribe);
    RxInternalOperatorsOperatorSerializeTest_BusyObserver *busyobserver = create_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) serialize])) subscribeWithRxSubscriber:busyobserver];
    [onSubscribe waitToFinish];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"maxConcurrentThreads: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"onNext count: ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->onNextCount_)) get])];
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->onNextCount_)) get] < 9) {
      lessThan9 = true;
    }
    OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onError_));
    OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&busyobserver->onCompleted_));
    OrgJunitAssert_assertTrueWithBoolean_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onSubscribe->maxConcurrentThreads_)) get] > 1);
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(busyobserver->maxConcurrentThreads_)) get]);
  }
  OrgJunitAssert_assertTrueWithBoolean_(lessThan9);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSerializeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testSingleThreadedBasic);
  methods[2].selector = @selector(testMultiThreadedBasic);
  methods[3].selector = @selector(testMultiThreadedWithNPE);
  methods[4].selector = @selector(testMultiThreadedWithNPEinMiddle);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 5, 6 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$4, "Lrx/Observer<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOperatorSerializeTest__Annotations$5, "LRxInternalOperatorsOperatorSerializeTest_OnNextThread;LRxInternalOperatorsOperatorSerializeTest_CompletionThread;LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;LRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable;LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable;LRxInternalOperatorsOperatorSerializeTest_BusyObserver;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest = { "OperatorSerializeTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 7, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest;
}

@end

void RxInternalOperatorsOperatorSerializeTest_init(RxInternalOperatorsOperatorSerializeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSerializeTest *new_RxInternalOperatorsOperatorSerializeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest, init)
}

RxInternalOperatorsOperatorSerializeTest *create_RxInternalOperatorsOperatorSerializeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest)

@implementation RxInternalOperatorsOperatorSerializeTest_OnNextThread

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend {
  RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(self, observer, numStringsToSend);
  return self;
}

- (void)run {
  for (jint i = 0; i < numStringsToSend_; i++) {
    [((id<RxObserver>) nil_chk(observer_)) onNextWithId:@"aString"];
  }
}

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:withInt:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "numStringsToSend_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;I", "(Lrx/Observer<Ljava/lang/String;>;I)V", "Lrx/Observer<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorSerializeTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_OnNextThread = { "OnNextThread", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 2, 2, 3, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_OnNextThread;
}

@end

void RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(RxInternalOperatorsOperatorSerializeTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
  self->numStringsToSend_ = numStringsToSend;
}

RxInternalOperatorsOperatorSerializeTest_OnNextThread *new_RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_OnNextThread, initWithRxObserver_withInt_, observer, numStringsToSend)
}

RxInternalOperatorsOperatorSerializeTest_OnNextThread *create_RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_OnNextThread, initWithRxObserver_withInt_, observer, numStringsToSend)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_OnNextThread)

@implementation RxInternalOperatorsOperatorSerializeTest_CompletionThread

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent:(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *)event
 withJavaUtilConcurrentFutureArray:(IOSObjectArray *)waitOnThese {
  RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(self, observer, event, waitOnThese);
  return self;
}

- (void)run {
  if (waitOnThese_ != nil) {
    {
      IOSObjectArray *a__ = waitOnThese_;
      id<JavaUtilConcurrentFuture> const *b__ = a__->buffer_;
      id<JavaUtilConcurrentFuture> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaUtilConcurrentFuture> f = *b__++;
        @try {
          [((id<JavaUtilConcurrentFuture>) nil_chk(f)) get];
        }
        @catch (NSException *e) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error while waiting on future in CompletionThread"];
        }
      }
    }
  }
  if (event_ == JreLoadEnum(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onError)) {
    [((id<RxObserver>) nil_chk(observer_)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"mocked exception")];
  }
  else if (event_ == JreLoadEnum(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onCompleted)) {
    [((id<RxObserver>) nil_chk(observer_)) onCompleted];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Expecting either onError or onCompleted");
  }
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(event_);
  RELEASE_(waitOnThese_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserver:withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent:withJavaUtilConcurrentFutureArray:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "event_", "LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "waitOnThese_", "[LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;[LJavaUtilConcurrentFuture;", "(Lrx/Observer<Ljava/lang/String;>;Lrx/internal/operators/OperatorSerializeTest$TestConcurrencyobserverEvent;[Ljava/util/concurrent/Future<*>;)V", "Lrx/Observer<Ljava/lang/String;>;", "[Ljava/util/concurrent/Future<*>;", "LRxInternalOperatorsOperatorSerializeTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_CompletionThread = { "CompletionThread", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 2, 3, 4, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_CompletionThread;
}

@end

void RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(RxInternalOperatorsOperatorSerializeTest_CompletionThread *self, id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, observer);
  JreStrongAssign(&self->event_, event);
  JreStrongAssign(&self->waitOnThese_, waitOnThese);
}

RxInternalOperatorsOperatorSerializeTest_CompletionThread *new_RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_CompletionThread, initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_, observer, event, waitOnThese)
}

RxInternalOperatorsOperatorSerializeTest_CompletionThread *create_RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_CompletionThread, initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_, observer, event, waitOnThese)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_CompletionThread)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent)

RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_[3];

@implementation RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent

+ (IOSObjectArray *)values {
  return RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values();
}

+ (RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *)valueOfWithNSString:(NSString *)name {
  return RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onCompleted", "LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "onError", "LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "onNext", "LRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onCompleted), &JreEnum(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onError), &JreEnum(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent, onNext), "LRxInternalOperatorsOperatorSerializeTest;", "Ljava/lang/Enum<Lrx/internal/operators/OperatorSerializeTest$TestConcurrencyobserverEvent;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent = { "TestConcurrencyobserverEvent", "rx.internal.operators", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"onCompleted", @"onError", @"onNext",
    };
    for (jint i = 0; i < 3; i++) {
      (RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent)
  }
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initWithNSString_withInt_(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values() {
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initialize();
  return [IOSObjectArray arrayWithObjects:RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_ count:3 type:RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_class_()];
}

RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_valueOfWithNSString_(NSString *name) {
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initialize();
  for (int i = 0; i < 3; i++) {
    RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *e = RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_fromOrdinal(NSUInteger ordinal) {
  RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent)

@implementation RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestSingleThreadedObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestSingleThreadedObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestSingleThreadedObservable thread"];
}

- (void)waitToFinish {
  @try {
    [((JavaLangThread *) nil_chk(t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorSerializeTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable = { "TestSingleThreadedObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 3, 2, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable;
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *new_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable, initWithNSStringArray_, values)
}

RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable)

@implementation RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestSingleThreadedObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestSingleThreadedObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable:(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *)outer$
                                                                             withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorSerializeTest$TestSingleThreadedObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1;
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestSingleThreadedObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestMultiThreadedObservable subscribed to ..."];
  JavaLangNullPointerException *npe = create_JavaLangNullPointerException_init();
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(self, npe, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestMultiThreadedObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestMultiThreadedObservable thread"];
}

- (void)waitToFinish {
  @try {
    [((JavaLangThread *) nil_chk(t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  RELEASE_(threadsRunning_);
  RELEASE_(maxConcurrentThreads_);
  RELEASE_(threadPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(waitToFinish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadsRunning_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxConcurrentThreads_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadPool_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorSerializeTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable = { "TestMultiThreadedObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 3, 5, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable;
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssignAndConsume(&self->threadsRunning_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->maxConcurrentThreads_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssign(&self->values_, values);
  JreStrongAssign(&self->threadPool_, JavaUtilConcurrentExecutors_newCachedThreadPool());
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, initWithNSStringArray_, values)
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable)

@implementation RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestMultiThreadedObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) executeWithJavaLangRunnable:create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(self, s)];
      }
    }
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) shutdown];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  @try {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(this$0_->threadPool_)) awaitTerminationWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
  [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable:(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *)outer$
                                                            withJavaLangNullPointerException:(JavaLangNullPointerException *)capture$0
                                                                            withRxSubscriber:(RxSubscriber *)capture$1 {
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$npe_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable:withJavaLangNullPointerException:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$npe_", "LJavaLangNullPointerException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable;LJavaLangNullPointerException;LRxSubscriber;", "(Lrx/internal/operators/OperatorSerializeTest$TestMultiThreadedObservable;Ljava/lang/NullPointerException;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1;
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$npe_, capture$0);
  JreStrongAssign(&self->val$observer_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_, outer$, capture$0, capture$1)
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable *outer$, JavaLangNullPointerException *capture$0, RxSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_withJavaLangNullPointerException_withRxSubscriber_, outer$, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1

- (void)run {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) incrementAndGet];
  @try {
    if (val$s_ == nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestMultiThreadedObservable onNext: null"];
      @throw this$0_->val$npe_;
    }
    else [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"TestMultiThreadedObservable onNext: ", val$s_)];
    [((RxSubscriber *) nil_chk(this$0_->val$observer_)) onNextWithId:val$s_];
    jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) get];
    jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->maxConcurrentThreads_)) get];
    if (concurrentThreads > maxThreads) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
    }
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(this$0_->val$observer_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->this$0_->threadsRunning_)) decrementAndGet];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1:(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *)outer$
                                                                                   withNSString:(NSString *)capture$0 {
  RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1;LNSString;", "LRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1;", "run" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1;
}

@end

void RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *self, RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *new_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_, outer$, capture$0)
}

RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1 *create_RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1_initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1 *outer$, NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_$1, initWithRxInternalOperatorsOperatorSerializeTest_TestMultiThreadedObservable_$1_withNSString_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorSerializeTest_BusyObserver

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@">>> Busyobserver received onCompleted"];
  JreAssignVolatileBoolean(&onCompleted_, true);
  jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) get];
  jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) get];
  if (concurrentThreads > maxThreads) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @">>> Busyobserver received onError: ", [((NSException *) nil_chk(e)) getMessage])];
  JreAssignVolatileBoolean(&onError_, true);
  jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) get];
  jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) get];
  if (concurrentThreads > maxThreads) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
}

- (void)onNextWithId:(NSString *)args {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) incrementAndGet];
  @try {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(onNextCount_)) incrementAndGet];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @">>> Busyobserver received onNext: ", args)];
    @try {
      JavaLangThread_sleepWithLong_(200);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  @finally {
    jint concurrentThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) get];
    jint maxThreads = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) get];
    if (concurrentThreads > maxThreads) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxConcurrentThreads_)) compareAndSetWithInt:maxThreads withInt:concurrentThreads];
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(threadsRunning_)) decrementAndGet];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSerializeTest_BusyObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(onNextCount_);
  RELEASE_(threadsRunning_);
  RELEASE_(maxConcurrentThreads_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onCompleted_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "onError_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "onNextCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "threadsRunning_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxConcurrentThreads_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxInternalOperatorsOperatorSerializeTest;", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSerializeTest_BusyObserver = { "BusyObserver", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 4, 5, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorSerializeTest_BusyObserver;
}

@end

void RxInternalOperatorsOperatorSerializeTest_BusyObserver_init(RxInternalOperatorsOperatorSerializeTest_BusyObserver *self) {
  RxSubscriber_init(self);
  JreAssignVolatileBoolean(&self->onCompleted_, false);
  JreAssignVolatileBoolean(&self->onError_, false);
  JreStrongAssignAndConsume(&self->onNextCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->threadsRunning_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->maxConcurrentThreads_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

RxInternalOperatorsOperatorSerializeTest_BusyObserver *new_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSerializeTest_BusyObserver, init)
}

RxInternalOperatorsOperatorSerializeTest_BusyObserver *create_RxInternalOperatorsOperatorSerializeTest_BusyObserver_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSerializeTest_BusyObserver, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSerializeTest_BusyObserver)
