//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ConcatTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxConcatTests.h"
#include "RxCovarianceTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxSubscriber.h"
#include "java/lang/Iterable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxConcatTests__Annotations$6();

@interface RxConcatTests_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxCovarianceTest_HorrorMovie *val$horrorMovie1_;
  RxCovarianceTest_Movie *val$movie_;
}

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)initWithRxCovarianceTest_HorrorMovie:(RxCovarianceTest_HorrorMovie *)capture$0
                          withRxCovarianceTest_Movie:(RxCovarianceTest_Movie *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxConcatTests_$1)

J2OBJC_FIELD_SETTER(RxConcatTests_$1, val$horrorMovie1_, RxCovarianceTest_HorrorMovie *)
J2OBJC_FIELD_SETTER(RxConcatTests_$1, val$movie_, RxCovarianceTest_Movie *)

__attribute__((unused)) static void RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxConcatTests_$1 *self, RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1);

__attribute__((unused)) static RxConcatTests_$1 *new_RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxConcatTests_$1 *create_RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1);

@implementation RxConcatTests

- (void)testConcatSimple {
  RxObservable *o1 = RxObservable_justWithId_withId_(@"one", @"two");
  RxObservable *o2 = RxObservable_justWithId_withId_(@"three", @"four");
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(o1, o2))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"four", [values getWithInt:3]);
}

- (void)testConcatWithObservableOfObservable {
  RxObservable *o1 = RxObservable_justWithId_withId_(@"one", @"two");
  RxObservable *o2 = RxObservable_justWithId_withId_(@"three", @"four");
  RxObservable *o3 = RxObservable_justWithId_withId_(@"five", @"six");
  RxObservable *os = RxObservable_justWithId_withId_withId_(o1, o2, o3);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(os))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"four", [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"five", [values getWithInt:4]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"six", [values getWithInt:5]);
}

- (void)testConcatWithIterableOfObservable {
  RxObservable *o1 = RxObservable_justWithId_withId_(@"one", @"two");
  RxObservable *o2 = RxObservable_justWithId_withId_(@"three", @"four");
  RxObservable *o3 = RxObservable_justWithId_withId_(@"five", @"six");
  id<JavaLangIterable> is = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o1, o2, o3 } count:3 type:RxObservable_class_()]);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithJavaLangIterable_(is))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"four", [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"five", [values getWithInt:4]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"six", [values getWithInt:5]);
}

- (void)testConcatCovariance {
  RxCovarianceTest_HorrorMovie *horrorMovie1 = create_RxCovarianceTest_HorrorMovie_init();
  RxCovarianceTest_Movie *movie = create_RxCovarianceTest_Movie_init();
  RxCovarianceTest_Media *media = create_RxCovarianceTest_Media_init();
  RxCovarianceTest_HorrorMovie *horrorMovie2 = create_RxCovarianceTest_HorrorMovie_init();
  RxObservable *o1 = RxObservable_justWithId_withId_(horrorMovie1, movie);
  RxObservable *o2 = RxObservable_justWithId_withId_(media, horrorMovie2);
  RxObservable *os = RxObservable_justWithId_withId_(o1, o2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(os))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie1, [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(movie, [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(media, [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie2, [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [values size]);
}

- (void)testConcatCovariance2 {
  RxCovarianceTest_HorrorMovie *horrorMovie1 = create_RxCovarianceTest_HorrorMovie_init();
  RxCovarianceTest_Movie *movie = create_RxCovarianceTest_Movie_init();
  RxCovarianceTest_Media *media1 = create_RxCovarianceTest_Media_init();
  RxCovarianceTest_Media *media2 = create_RxCovarianceTest_Media_init();
  RxCovarianceTest_HorrorMovie *horrorMovie2 = create_RxCovarianceTest_HorrorMovie_init();
  RxObservable *o1 = RxObservable_justWithId_withId_withId_(horrorMovie1, movie, media1);
  RxObservable *o2 = RxObservable_justWithId_withId_(media2, horrorMovie2);
  RxObservable *os = RxObservable_justWithId_withId_(o1, o2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(os))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie1, [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(movie, [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(media1, [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(media2, [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie2, [values getWithInt:4]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [values size]);
}

- (void)testConcatCovariance3 {
  RxCovarianceTest_HorrorMovie *horrorMovie1 = create_RxCovarianceTest_HorrorMovie_init();
  RxCovarianceTest_Movie *movie = create_RxCovarianceTest_Movie_init();
  RxCovarianceTest_Media *media = create_RxCovarianceTest_Media_init();
  RxCovarianceTest_HorrorMovie *horrorMovie2 = create_RxCovarianceTest_HorrorMovie_init();
  RxObservable *o1 = RxObservable_justWithId_withId_(horrorMovie1, movie);
  RxObservable *o2 = RxObservable_justWithId_withId_(media, horrorMovie2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(o1, o2))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie1, [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(movie, [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(media, [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie2, [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [values size]);
}

- (void)testConcatCovariance4 {
  RxCovarianceTest_HorrorMovie *horrorMovie1 = create_RxCovarianceTest_HorrorMovie_init();
  RxCovarianceTest_Movie *movie = create_RxCovarianceTest_Movie_init();
  RxCovarianceTest_Media *media = create_RxCovarianceTest_Media_init();
  RxCovarianceTest_HorrorMovie *horrorMovie2 = create_RxCovarianceTest_HorrorMovie_init();
  RxObservable *o1 = RxObservable_createWithRxObservable_OnSubscribe_(create_RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(horrorMovie1, movie));
  RxObservable *o2 = RxObservable_justWithId_withId_(media, horrorMovie2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(o1, o2))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie1, [((id<JavaUtilList>) nil_chk(values)) getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(movie, [values getWithInt:1]);
  OrgJunitAssert_assertEqualsWithId_withId_(media, [values getWithInt:2]);
  OrgJunitAssert_assertEqualsWithId_withId_(horrorMovie2, [values getWithInt:3]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [values size]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxConcatTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testConcatSimple);
  methods[1].selector = @selector(testConcatWithObservableOfObservable);
  methods[2].selector = @selector(testConcatWithIterableOfObservable);
  methods[3].selector = @selector(testConcatCovariance);
  methods[4].selector = @selector(testConcatCovariance2);
  methods[5].selector = @selector(testConcatCovariance3);
  methods[6].selector = @selector(testConcatCovariance4);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxConcatTests__Annotations$0, (void *)&RxConcatTests__Annotations$1, (void *)&RxConcatTests__Annotations$2, (void *)&RxConcatTests__Annotations$3, (void *)&RxConcatTests__Annotations$4, (void *)&RxConcatTests__Annotations$5, (void *)&RxConcatTests__Annotations$6 };
  static const J2ObjcClassInfo _RxConcatTests = { "ConcatTests", "rx", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_RxConcatTests;
}

@end

void RxConcatTests_init(RxConcatTests *self) {
  NSObject_init(self);
}

RxConcatTests *new_RxConcatTests_init() {
  J2OBJC_NEW_IMPL(RxConcatTests, init)
}

RxConcatTests *create_RxConcatTests_init() {
  J2OBJC_CREATE_IMPL(RxConcatTests, init)
}

IOSObjectArray *RxConcatTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxConcatTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxConcatTests)

@implementation RxConcatTests_$1

- (void)callWithId:(RxSubscriber *)o {
  [((RxSubscriber *) nil_chk(o)) onNextWithId:val$horrorMovie1_];
  [o onNextWithId:val$movie_];
  [o onCompleted];
}

- (instancetype)initWithRxCovarianceTest_HorrorMovie:(RxCovarianceTest_HorrorMovie *)capture$0
                          withRxCovarianceTest_Movie:(RxCovarianceTest_Movie *)capture$1 {
  RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$horrorMovie1_);
  RELEASE_(val$movie_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCovarianceTest_HorrorMovie:withRxCovarianceTest_Movie:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$horrorMovie1_", "LRxCovarianceTest_HorrorMovie;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$movie_", "LRxCovarianceTest_Movie;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/CovarianceTest$Movie;>;)V", "LRxCovarianceTest_HorrorMovie;LRxCovarianceTest_Movie;", "LRxConcatTests;", "testConcatCovariance4", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/CovarianceTest$Movie;>;" };
  static const J2ObjcClassInfo _RxConcatTests_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxConcatTests_$1;
}

@end

void RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxConcatTests_$1 *self, RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1) {
  JreStrongAssign(&self->val$horrorMovie1_, capture$0);
  JreStrongAssign(&self->val$movie_, capture$1);
  NSObject_init(self);
}

RxConcatTests_$1 *new_RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1) {
  J2OBJC_NEW_IMPL(RxConcatTests_$1, initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_, capture$0, capture$1)
}

RxConcatTests_$1 *create_RxConcatTests_$1_initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_(RxCovarianceTest_HorrorMovie *capture$0, RxCovarianceTest_Movie *capture$1) {
  J2OBJC_CREATE_IMPL(RxConcatTests_$1, initWithRxCovarianceTest_HorrorMovie_withRxCovarianceTest_Movie_, capture$0, capture$1)
}
