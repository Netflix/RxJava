//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSingleTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMockMSubscriber.h"
#include "RxInternalOperatorsOperatorSingleTest.h"
#include "RxObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSingleTest__Annotations$0();

@interface RxInternalOperatorsOperatorSingleTest_$1 : RxDopplMockMSubscriber

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSingleTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorSingleTest_$1_init(RxInternalOperatorsOperatorSingleTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSingleTest_$1 *new_RxInternalOperatorsOperatorSingleTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSingleTest_$1 *create_RxInternalOperatorsOperatorSingleTest_$1_init();

@implementation RxInternalOperatorsOperatorSingleTest

- (void)testSingleWithBackpressure {
  RxObservable *observable = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)))) single];
  RxSubscriber *subscriber = create_RxInternalOperatorsOperatorSingleTest_$1_init();
  [((RxObservable *) nil_chk(observable)) subscribeWithRxSubscriber:subscriber];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSingleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSingleWithBackpressure);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSingleTest__Annotations$0 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSingleTest = { "OperatorSingleTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSingleTest;
}

@end

void RxInternalOperatorsOperatorSingleTest_init(RxInternalOperatorsOperatorSingleTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSingleTest *new_RxInternalOperatorsOperatorSingleTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSingleTest, init)
}

RxInternalOperatorsOperatorSingleTest *create_RxInternalOperatorsOperatorSingleTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSingleTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSingleTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSingleTest)

@implementation RxInternalOperatorsOperatorSingleTest_$1

- (void)onStart {
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)integer {
  [self requestWithLong:1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSingleTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorSingleTest_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsOperatorSingleTest;", "testSingleWithBackpressure", "Lrx/doppl/mock/MSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSingleTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 5, 0, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorSingleTest_$1;
}

@end

void RxInternalOperatorsOperatorSingleTest_$1_init(RxInternalOperatorsOperatorSingleTest_$1 *self) {
  RxDopplMockMSubscriber_init(self);
}

RxInternalOperatorsOperatorSingleTest_$1 *new_RxInternalOperatorsOperatorSingleTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSingleTest_$1, init)
}

RxInternalOperatorsOperatorSingleTest_$1 *create_RxInternalOperatorsOperatorSingleTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSingleTest_$1, init)
}
