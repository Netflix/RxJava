//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ZipTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCovarianceTest.h"
#include "RxEventStream.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxFunctionsFuncN.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObservablesGroupedObservable.h"
#include "RxZipTests.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxZipTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxZipTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxZipTests__Annotations$2();

@interface RxZipTests_$4 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(RxEventStream_Event *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$4)

__attribute__((unused)) static void RxZipTests_$4_init(RxZipTests_$4 *self);

__attribute__((unused)) static RxZipTests_$4 *new_RxZipTests_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$4 *create_RxZipTests_$4_init();

@interface RxZipTests_$5 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)ge;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$5)

__attribute__((unused)) static void RxZipTests_$5_init(RxZipTests_$5 *self);

__attribute__((unused)) static RxZipTests_$5 *new_RxZipTests_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$5 *create_RxZipTests_$5_init();

@interface RxZipTests_$5_$1 : NSObject < RxFunctionsFunc2 > {
 @public
  RxObservablesGroupedObservable *val$ge_;
}

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)accum
                       withId:(RxEventStream_Event *)perInstanceEvent;

- (instancetype)initWithRxObservablesGroupedObservable:(RxObservablesGroupedObservable *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$5_$1)

J2OBJC_FIELD_SETTER(RxZipTests_$5_$1, val$ge_, RxObservablesGroupedObservable *)

__attribute__((unused)) static void RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxZipTests_$5_$1 *self, RxObservablesGroupedObservable *capture$0);

__attribute__((unused)) static RxZipTests_$5_$1 *new_RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxObservablesGroupedObservable *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$5_$1 *create_RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxObservablesGroupedObservable *capture$0);

@interface RxZipTests_$6 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<JavaUtilMap>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$6)

__attribute__((unused)) static void RxZipTests_$6_init(RxZipTests_$6 *self);

__attribute__((unused)) static RxZipTests_$6 *new_RxZipTests_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$6 *create_RxZipTests_$6_init();

@interface RxZipTests_$7 : NSObject < RxFunctionsFuncN > {
 @public
  id val$invoked_;
}

- (id)callWithNSObjectArray:(IOSObjectArray *)args;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$7)

J2OBJC_FIELD_SETTER(RxZipTests_$7, val$invoked_, id)

__attribute__((unused)) static void RxZipTests_$7_initWithId_(RxZipTests_$7 *self, id capture$0);

__attribute__((unused)) static RxZipTests_$7 *new_RxZipTests_$7_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$7 *create_RxZipTests_$7_initWithId_(id capture$0);

@interface RxZipTests_$1 : NSObject < RxFunctionsFunc2 >

- (RxCovarianceTest_ExtendedResult *)callWithId:(RxCovarianceTest_Media *)m
                                         withId:(RxCovarianceTest_Rating *)r;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$1)

__attribute__((unused)) static void RxZipTests_$1_init(RxZipTests_$1 *self);

__attribute__((unused)) static RxZipTests_$1 *new_RxZipTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$1 *create_RxZipTests_$1_init();

@interface RxZipTests_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxCovarianceTest_Result *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$2)

__attribute__((unused)) static void RxZipTests_$2_init(RxZipTests_$2 *self);

__attribute__((unused)) static RxZipTests_$2 *new_RxZipTests_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$2 *create_RxZipTests_$2_init();

@interface RxZipTests_$3 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxCovarianceTest_ExtendedResult *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxZipTests_$3)

__attribute__((unused)) static void RxZipTests_$3_init(RxZipTests_$3 *self);

__attribute__((unused)) static RxZipTests_$3 *new_RxZipTests_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxZipTests_$3 *create_RxZipTests_$3_init();

@implementation RxZipTests

- (void)testZipObservableOfObservables {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxEventStream_getEventStreamWithNSString_withInt_(@"HTTP-ClusterB", 20))) groupByWithRxFunctionsFunc1:create_RxZipTests_$4_init()])) flatMapWithRxFunctionsFunc1:create_RxZipTests_$5_init()])) takeWithInt:10])) toBlocking])) forEachWithRxFunctionsAction1:create_RxZipTests_$6_init()];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"**** finished"];
}

- (void)testCovarianceOfZip {
  RxObservable *horrors = RxObservable_justWithId_(create_RxCovarianceTest_HorrorMovie_init());
  RxObservable *ratings = RxObservable_justWithId_(create_RxCovarianceTest_CoolRating_init());
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_))) toBlocking])) forEachWithRxFunctionsAction1:action_];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_))) toBlocking])) forEachWithRxFunctionsAction1:action_];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_))) toBlocking])) forEachWithRxFunctionsAction1:extendedAction_];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_))) toBlocking])) forEachWithRxFunctionsAction1:action_];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_))) toBlocking])) forEachWithRxFunctionsAction1:action_];
  RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(horrors, ratings, combine_);
}

- (void)nonBlockingObservable {
  id invoked = create_NSObject_init();
  id<JavaUtilCollection> observables = JavaUtilCollections_emptyList();
  RxObservable *result = RxObservable_zipWithJavaLangIterable_withRxFunctionsFuncN_(observables, create_RxZipTests_$7_initWithId_(invoked));
  OrgJunitAssert_assertSameWithId_withId_(invoked, [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(result)) toBlocking])) last]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(combine_);
  RELEASE_(action_);
  RELEASE_(extendedAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testZipObservableOfObservables);
  methods[1].selector = @selector(testCovarianceOfZip);
  methods[2].selector = @selector(nonBlockingObservable);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "combine_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "action_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "extendedAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxZipTests__Annotations$0, (void *)&RxZipTests__Annotations$1, (void *)&RxZipTests__Annotations$2, "Lrx/functions/Func2<Lrx/CovarianceTest$Media;Lrx/CovarianceTest$Rating;Lrx/CovarianceTest$ExtendedResult;>;", "Lrx/functions/Action1<Lrx/CovarianceTest$Result;>;", "Lrx/functions/Action1<Lrx/CovarianceTest$ExtendedResult;>;" };
  static const J2ObjcClassInfo _RxZipTests = { "ZipTests", "rx", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_RxZipTests;
}

@end

void RxZipTests_init(RxZipTests *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->combine_, new_RxZipTests_$1_init());
  JreStrongAssignAndConsume(&self->action_, new_RxZipTests_$2_init());
  JreStrongAssignAndConsume(&self->extendedAction_, new_RxZipTests_$3_init());
}

RxZipTests *new_RxZipTests_init() {
  J2OBJC_NEW_IMPL(RxZipTests, init)
}

RxZipTests *create_RxZipTests_init() {
  J2OBJC_CREATE_IMPL(RxZipTests, init)
}

IOSObjectArray *RxZipTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxZipTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxZipTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxZipTests)

@implementation RxZipTests_$4

- (NSString *)callWithId:(RxEventStream_Event *)e {
  return ((RxEventStream_Event *) nil_chk(e))->instanceId_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxEventStream_Event;", "LRxZipTests;", "testZipObservableOfObservables", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/EventStream$Event;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxZipTests_$4 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxZipTests_$4;
}

@end

void RxZipTests_$4_init(RxZipTests_$4 *self) {
  NSObject_init(self);
}

RxZipTests_$4 *new_RxZipTests_$4_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$4, init)
}

RxZipTests_$4 *create_RxZipTests_$4_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$4, init)
}

@implementation RxZipTests_$5

- (RxObservable *)callWithId:(RxObservablesGroupedObservable *)ge {
  return [((RxObservablesGroupedObservable *) nil_chk(ge)) scanWithId:create_JavaUtilHashMap_init() withRxFunctionsFunc2:create_RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(ge)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesGroupedObservable;", "(Lrx/observables/GroupedObservable<Ljava/lang/String;Lrx/EventStream$Event;>;)Lrx/Observable<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;", "LRxZipTests;", "testZipObservableOfObservables", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/observables/GroupedObservable<Ljava/lang/String;Lrx/EventStream$Event;>;Lrx/Observable<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;>;" };
  static const J2ObjcClassInfo _RxZipTests_$5 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxZipTests_$5;
}

@end

void RxZipTests_$5_init(RxZipTests_$5 *self) {
  NSObject_init(self);
}

RxZipTests_$5 *new_RxZipTests_$5_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$5, init)
}

RxZipTests_$5 *create_RxZipTests_$5_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$5, init)
}

@implementation RxZipTests_$5_$1

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)accum
                       withId:(RxEventStream_Event *)perInstanceEvent {
  [((id<JavaUtilMap>) nil_chk(accum)) putWithId:@"instance" withId:[((RxObservablesGroupedObservable *) nil_chk(val$ge_)) getKey]];
  return accum;
}

- (instancetype)initWithRxObservablesGroupedObservable:(RxObservablesGroupedObservable *)capture$0 {
  RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(initWithRxObservablesGroupedObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ge_", "LRxObservablesGroupedObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilMap;LRxEventStream_Event;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lrx/EventStream$Event;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LRxObservablesGroupedObservable;", "(Lrx/observables/GroupedObservable<Ljava/lang/String;Lrx/EventStream$Event;>;)V", "Lrx/observables/GroupedObservable<Ljava/lang/String;Lrx/EventStream$Event;>;", "LRxZipTests_$5;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lrx/EventStream$Event;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxZipTests_$5_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxZipTests_$5_$1;
}

@end

void RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxZipTests_$5_$1 *self, RxObservablesGroupedObservable *capture$0) {
  JreStrongAssign(&self->val$ge_, capture$0);
  NSObject_init(self);
}

RxZipTests_$5_$1 *new_RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxObservablesGroupedObservable *capture$0) {
  J2OBJC_NEW_IMPL(RxZipTests_$5_$1, initWithRxObservablesGroupedObservable_, capture$0)
}

RxZipTests_$5_$1 *create_RxZipTests_$5_$1_initWithRxObservablesGroupedObservable_(RxObservablesGroupedObservable *capture$0) {
  J2OBJC_CREATE_IMPL(RxZipTests_$5_$1, initWithRxObservablesGroupedObservable_, capture$0)
}

@implementation RxZipTests_$6

- (void)callWithId:(id<JavaUtilMap>)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:v];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "LRxZipTests;", "testZipObservableOfObservables", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxZipTests_$6 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxZipTests_$6;
}

@end

void RxZipTests_$6_init(RxZipTests_$6 *self) {
  NSObject_init(self);
}

RxZipTests_$6 *new_RxZipTests_$6_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$6, init)
}

RxZipTests_$6 *create_RxZipTests_$6_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$6, init)
}

@implementation RxZipTests_$7

- (id)callWithNSObjectArray:(IOSObjectArray *)args {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"received: ", args)];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"No argument should have been passed", 0, ((IOSObjectArray *) nil_chk(args))->size_);
  return val$invoked_;
}

- (instancetype)initWithId:(id)capture$0 {
  RxZipTests_$7_initWithId_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$invoked_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithNSObjectArray:);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$invoked_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "[LNSObject;", "LNSObject;", "LRxZipTests;", "nonBlockingObservable", "Ljava/lang/Object;Lrx/functions/FuncN<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxZipTests_$7 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxZipTests_$7;
}

@end

void RxZipTests_$7_initWithId_(RxZipTests_$7 *self, id capture$0) {
  JreStrongAssign(&self->val$invoked_, capture$0);
  NSObject_init(self);
}

RxZipTests_$7 *new_RxZipTests_$7_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(RxZipTests_$7, initWithId_, capture$0)
}

RxZipTests_$7 *create_RxZipTests_$7_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(RxZipTests_$7, initWithId_, capture$0)
}

@implementation RxZipTests_$1

- (RxCovarianceTest_ExtendedResult *)callWithId:(RxCovarianceTest_Media *)m
                                         withId:(RxCovarianceTest_Rating *)r {
  return create_RxCovarianceTest_ExtendedResult_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCovarianceTest_ExtendedResult;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCovarianceTest_Media;LRxCovarianceTest_Rating;", "LRxZipTests;", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/CovarianceTest$Media;Lrx/CovarianceTest$Rating;Lrx/CovarianceTest$ExtendedResult;>;" };
  static const J2ObjcClassInfo _RxZipTests_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxZipTests_$1;
}

@end

void RxZipTests_$1_init(RxZipTests_$1 *self) {
  NSObject_init(self);
}

RxZipTests_$1 *new_RxZipTests_$1_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$1, init)
}

RxZipTests_$1 *create_RxZipTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$1, init)
}

@implementation RxZipTests_$2

- (void)callWithId:(RxCovarianceTest_Result *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Result: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCovarianceTest_Result;", "LRxZipTests;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CovarianceTest$Result;>;" };
  static const J2ObjcClassInfo _RxZipTests_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxZipTests_$2;
}

@end

void RxZipTests_$2_init(RxZipTests_$2 *self) {
  NSObject_init(self);
}

RxZipTests_$2 *new_RxZipTests_$2_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$2, init)
}

RxZipTests_$2 *create_RxZipTests_$2_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$2, init)
}

@implementation RxZipTests_$3

- (void)callWithId:(RxCovarianceTest_ExtendedResult *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Result: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxZipTests_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCovarianceTest_ExtendedResult;", "LRxZipTests;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CovarianceTest$ExtendedResult;>;" };
  static const J2ObjcClassInfo _RxZipTests_$3 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxZipTests_$3;
}

@end

void RxZipTests_$3_init(RxZipTests_$3 *self) {
  NSObject_init(self);
}

RxZipTests_$3 *new_RxZipTests_$3_init() {
  J2OBJC_NEW_IMPL(RxZipTests_$3, init)
}

RxZipTests_$3 *create_RxZipTests_$3_init() {
  J2OBJC_CREATE_IMPL(RxZipTests_$3, init)
}
