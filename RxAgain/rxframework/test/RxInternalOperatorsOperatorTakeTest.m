//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTakeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTake.h"
#include "RxInternalOperatorsOperatorTakeTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversSubscribers.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

inline RxObservable *RxInternalOperatorsOperatorTakeTest_get_INFINITE_OBSERVABLE();
inline RxObservable *RxInternalOperatorsOperatorTakeTest_set_INFINITE_OBSERVABLE(RxObservable *value);
static RxObservable *RxInternalOperatorsOperatorTakeTest_INFINITE_OBSERVABLE;
J2OBJC_STATIC_FIELD_OBJ(RxInternalOperatorsOperatorTakeTest, INFINITE_OBSERVABLE, RxObservable *)

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$18();

@interface RxInternalOperatorsOperatorTakeTest_TestObservableFunc : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_TestObservableFunc)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_TestObservableFunc, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_TestObservableFunc, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_TestObservableFunc *new_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_TestObservableFunc *create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTakeTest_TestObservableFunc)

@interface RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorTakeTest_TestObservableFunc *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc:(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *)outer$
                                                              withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1, this$0_, RxInternalOperatorsOperatorTakeTest_TestObservableFunc *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *self, RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *new_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$2 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$2_init(RxInternalOperatorsOperatorTakeTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$2 *new_RxInternalOperatorsOperatorTakeTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$2 *create_RxInternalOperatorsOperatorTakeTest_$2_init();

@interface RxInternalOperatorsOperatorTakeTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$3_init(RxInternalOperatorsOperatorTakeTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$3 *new_RxInternalOperatorsOperatorTakeTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$3 *create_RxInternalOperatorsOperatorTakeTest_$3_init();

@interface RxInternalOperatorsOperatorTakeTest_$4 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$4_init(RxInternalOperatorsOperatorTakeTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$4 *new_RxInternalOperatorsOperatorTakeTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$4 *create_RxInternalOperatorsOperatorTakeTest_$4_init();

@interface RxInternalOperatorsOperatorTakeTest_$5 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$5_init(RxInternalOperatorsOperatorTakeTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$5 *new_RxInternalOperatorsOperatorTakeTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$5 *create_RxInternalOperatorsOperatorTakeTest_$5_init();

@interface RxInternalOperatorsOperatorTakeTest_$6 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$subscribed_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unSubscribed_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$6, val$subscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$6, val$unSubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorTakeTest_$6 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$6 *new_RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$6 *create_RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxInternalOperatorsOperatorTakeTest_$6_$1 : NSObject < RxSubscription > {
 @public
  RxInternalOperatorsOperatorTakeTest_$6 *this$0_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$6:(RxInternalOperatorsOperatorTakeTest_$6 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$6_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$6_$1, this$0_, RxInternalOperatorsOperatorTakeTest_$6 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6_$1 *self, RxInternalOperatorsOperatorTakeTest_$6 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$6_$1 *new_RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$6_$1 *create_RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6 *outer$);

@interface RxInternalOperatorsOperatorTakeTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$count_;
}

- (void)callWithId:(JavaLangLong *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$7, val$count_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$7 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$7 *new_RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$7 *create_RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$8 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$8, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorTakeTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$8 *new_RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$8 *create_RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$9 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$9_init(RxInternalOperatorsOperatorTakeTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$9 *new_RxInternalOperatorsOperatorTakeTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$9 *create_RxInternalOperatorsOperatorTakeTest_$9_init();

@interface RxInternalOperatorsOperatorTakeTest_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)op;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$1_init(RxInternalOperatorsOperatorTakeTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$1 *new_RxInternalOperatorsOperatorTakeTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$1 *create_RxInternalOperatorsOperatorTakeTest_$1_init();

@interface RxInternalOperatorsOperatorTakeTest_$10 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$10, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$10 *new_RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$10 *create_RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$10_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOperatorTakeTest_$10 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$10:(RxInternalOperatorsOperatorTakeTest_$10 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$10_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$10_$1, this$0_, RxInternalOperatorsOperatorTakeTest_$10 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10_$1 *self, RxInternalOperatorsOperatorTakeTest_$10 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$10_$1 *new_RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$10_$1 *create_RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10 *outer$);

@interface RxInternalOperatorsOperatorTakeTest_$11 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$11, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$11 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$11 *new_RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$11 *create_RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$11_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOperatorTakeTest_$11 *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$11:(RxInternalOperatorsOperatorTakeTest_$11 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$11_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$11_$1, this$0_, RxInternalOperatorsOperatorTakeTest_$11 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11_$1 *self, RxInternalOperatorsOperatorTakeTest_$11 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$11_$1 *new_RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$11_$1 *create_RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11 *outer$);

@interface RxInternalOperatorsOperatorTakeTest_$12 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$exception_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$12, val$exception_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$12, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTakeTest_$12 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$12 *new_RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$12 *create_RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxInternalOperatorsOperatorTakeTest_$13 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requests_;
}

- (void)callWithId:(JavaLangLong *)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$13, val$requests_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$13 *new_RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$13 *create_RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorTakeTest_$14 : RxObserversTestSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$14_init(RxInternalOperatorsOperatorTakeTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$14 *new_RxInternalOperatorsOperatorTakeTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$14 *create_RxInternalOperatorsOperatorTakeTest_$14_init();

@interface RxInternalOperatorsOperatorTakeTest_$15 : NSObject < RxFunctionsAction1 > {
 @public
  RxSubjectsPublishSubject *val$source_;
}

- (void)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeTest_$15, val$source_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTakeTest_$15 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$15 *new_RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeTest_$15 *create_RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorTakeTest)

@implementation RxInternalOperatorsOperatorTakeTest

- (void)testTake1 {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  RxObservable *take = [((RxObservable *) nil_chk(w)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorTake_initWithInt_(2)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testTake2 {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  RxObservable *take = [((RxObservable *) nil_chk(w)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorTake_initWithInt_(1)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(take)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testTakeWithError {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])))) takeWithInt:1])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeTest_$2_init()])) toBlocking])) single];
}

- (void)testTakeWithErrorHappeningInOnNext {
  RxObservable *w = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])))) takeWithInt:2])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeTest_$3_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangIllegalArgumentException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testTakeWithErrorHappeningInTheLastOnNext {
  RxObservable *w = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])))) takeWithInt:1])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorTakeTest_$4_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(w)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangIllegalArgumentException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testTakeDoesntLeakErrors {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$5_init());
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorTake_initWithInt_(1)])) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testTakeZeroDoesntLeakError {
  JavaUtilConcurrentAtomicAtomicBoolean *subscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  JavaUtilConcurrentAtomicAtomicBoolean *unSubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(subscribed, unSubscribed));
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorTake_initWithInt_(0)])) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"source subscribed", [subscribed get]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"source unsubscribed", [unSubscribed get]);
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testUnsubscribeAfterTake {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeTest_TestObservableFunc *f = create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSubscriber *subscriber = RxObserversSubscribers_fromWithRxObserver_(observer);
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:s];
  RxObservable *take = [((RxObservable *) nil_chk(w)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorTake_initWithInt_(1)];
  [((RxObservable *) nil_chk(take)) subscribeWithRxSubscriber:subscriber];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (NSException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable thread finished"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(s, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testUnsubscribeFromSynchronousInfiniteObservable {
  JavaUtilConcurrentAtomicAtomicLong *count = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorTakeTest_INFINITE_OBSERVABLE)) takeWithInt:10])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(count)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [count get]);
}

- (void)testMultiTake {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)))) takeWithInt:100])) takeWithInt:1])) toBlocking])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOperatorTakeTest_$9_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [count get]);
}

- (void)testTakeObserveOn {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorTakeTest_INFINITE_OBSERVABLE)) onBackpressureDrop])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:1])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testProducerRequestThroughTake {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) takeWithInt:3])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [requested get]);
}

- (void)testProducerRequestThroughTakeIsModified {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:3];
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(requested)))) takeWithInt:1])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [requested get]);
}

- (void)testInterrupt {
  JavaUtilConcurrentAtomicAtomicReference *exception = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeWithInt:1])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(exception, latch)];
  [latch await];
  OrgJunitAssert_assertNullWithId_([exception get]);
}

- (void)testDoesntRequestMoreThanNeededFromUpstream {
  JavaUtilConcurrentAtomicAtomicLong *requests = create_JavaUtilConcurrentAtomicAtomicLong_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(requests)])) takeWithInt:2])) subscribeWithRxSubscriber:ts];
  JavaLangThread_sleepWithLong_(50);
  [ts requestMoreWithLong:1];
  [ts requestMoreWithLong:1];
  [ts requestMoreWithLong:1];
  [ts awaitTerminalEvent];
  [ts assertCompleted];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [requests get]);
}

- (void)takeFinalValueThrows {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) takeWithInt:1];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorTakeTest_$14_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)testReentrantTake {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) rebatchRequestsWithInt:2])) takeWithInt:1])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(source)])) subscribeWithRxSubscriber:ts];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)takeNegative {
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000 * 1000 * 1000))) takeWithInt:-1];
}

- (void)takeZero {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000 * 1000 * 1000))) takeWithInt:0])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTake1);
  methods[1].selector = @selector(testTake2);
  methods[2].selector = @selector(testTakeWithError);
  methods[3].selector = @selector(testTakeWithErrorHappeningInOnNext);
  methods[4].selector = @selector(testTakeWithErrorHappeningInTheLastOnNext);
  methods[5].selector = @selector(testTakeDoesntLeakErrors);
  methods[6].selector = @selector(testTakeZeroDoesntLeakError);
  methods[7].selector = @selector(testUnsubscribeAfterTake);
  methods[8].selector = @selector(testUnsubscribeFromSynchronousInfiniteObservable);
  methods[9].selector = @selector(testMultiTake);
  methods[10].selector = @selector(testTakeObserveOn);
  methods[11].selector = @selector(testProducerRequestThroughTake);
  methods[12].selector = @selector(testProducerRequestThroughTakeIsModified);
  methods[13].selector = @selector(testInterrupt);
  methods[14].selector = @selector(testDoesntRequestMoreThanNeededFromUpstream);
  methods[15].selector = @selector(takeFinalValueThrows);
  methods[16].selector = @selector(testReentrantTake);
  methods[17].selector = @selector(takeNegative);
  methods[18].selector = @selector(takeZero);
  methods[19].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INFINITE_OBSERVABLE", "LRxObservable;", .constantValue.asLong = 0, 0xa, -1, 20, 21, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$3, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$4, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$5, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$6, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$7, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$8, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$9, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$10, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$11, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$12, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$13, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$14, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$15, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$16, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$17, (void *)&RxInternalOperatorsOperatorTakeTest__Annotations$18, &RxInternalOperatorsOperatorTakeTest_INFINITE_OBSERVABLE, "Lrx/Observable<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorTakeTest_TestObservableFunc;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest = { "OperatorTakeTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, 22, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTest;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorTakeTest class]) {
    JreStrongAssign(&RxInternalOperatorsOperatorTakeTest_INFINITE_OBSERVABLE, RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTakeTest_$1_init()));
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorTakeTest)
  }
}

@end

void RxInternalOperatorsOperatorTakeTest_init(RxInternalOperatorsOperatorTakeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest *new_RxInternalOperatorsOperatorTakeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest, init)
}

RxInternalOperatorsOperatorTakeTest *create_RxInternalOperatorsOperatorTakeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeTest)

@implementation RxInternalOperatorsOperatorTakeTest_TestObservableFunc

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(self, observer)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestObservable thread"];
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorTakeTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_TestObservableFunc = { "TestObservableFunc", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_TestObservableFunc;
}

@end

void RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorTakeTest_TestObservableFunc *new_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_TestObservableFunc, initWithNSStringArray_, values)
}

RxInternalOperatorsOperatorTakeTest_TestObservableFunc *create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_TestObservableFunc, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeTest_TestObservableFunc)

@implementation RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:s];
      }
    }
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc:(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *)outer$
                                                              withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTakeTest_TestObservableFunc;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTakeTest_TestObservableFunc;LRxSubscriber;", "(Lrx/internal/operators/OperatorTakeTest$TestObservableFunc;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorTakeTest_TestObservableFunc;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1;
}

@end

void RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *self, RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *new_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1, initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1 *create_RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1_initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_(RxInternalOperatorsOperatorTakeTest_TestObservableFunc *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_TestObservableFunc_$1, initWithRxInternalOperatorsOperatorTakeTest_TestObservableFunc_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"some error");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeTest;", "testTakeWithError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$2;
}

@end

void RxInternalOperatorsOperatorTakeTest_$2_init(RxInternalOperatorsOperatorTakeTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$2 *new_RxInternalOperatorsOperatorTakeTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$2, init)
}

RxInternalOperatorsOperatorTakeTest_$2 *create_RxInternalOperatorsOperatorTakeTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$2, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$3

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"some error");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeTest;", "testTakeWithErrorHappeningInOnNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$3;
}

@end

void RxInternalOperatorsOperatorTakeTest_$3_init(RxInternalOperatorsOperatorTakeTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$3 *new_RxInternalOperatorsOperatorTakeTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$3, init)
}

RxInternalOperatorsOperatorTakeTest_$3 *create_RxInternalOperatorsOperatorTakeTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$3, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$4

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"some error");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeTest;", "testTakeWithErrorHappeningInTheLastOnNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$4;
}

@end

void RxInternalOperatorsOperatorTakeTest_$4_init(RxInternalOperatorsOperatorTakeTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$4 *new_RxInternalOperatorsOperatorTakeTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$4, init)
}

RxInternalOperatorsOperatorTakeTest_$4 *create_RxInternalOperatorsOperatorTakeTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$4, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$5

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:@"one"];
  [observer onErrorWithNSException:create_NSException_initWithNSString_(@"test failed")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorTakeTest;", "testTakeDoesntLeakErrors", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$5;
}

@end

void RxInternalOperatorsOperatorTakeTest_$5_init(RxInternalOperatorsOperatorTakeTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$5 *new_RxInternalOperatorsOperatorTakeTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$5, init)
}

RxInternalOperatorsOperatorTakeTest_$5 *create_RxInternalOperatorsOperatorTakeTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$5, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$6

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$subscribed_)) setWithBoolean:true];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:create_RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(self)];
  [observer onErrorWithNSException:create_NSException_initWithNSString_(@"test failed")];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribed_);
  RELEASE_(val$unSubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unSubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorTakeTest;", "testTakeZeroDoesntLeakError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$6;
}

@end

void RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorTakeTest_$6 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$subscribed_, capture$0);
  JreStrongAssign(&self->val$unSubscribed_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$6 *new_RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$6, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTakeTest_$6 *create_RxInternalOperatorsOperatorTakeTest_$6_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$6, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTakeTest_$6_$1

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unSubscribed_)) setWithBoolean:true];
}

- (jboolean)isUnsubscribed {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unSubscribed_)) get];
}

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$6:(RxInternalOperatorsOperatorTakeTest_$6 *)outer$ {
  RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxInternalOperatorsOperatorTakeTest_$6:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTakeTest_$6;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTakeTest_$6;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$6_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$6_$1;
}

@end

void RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6_$1 *self, RxInternalOperatorsOperatorTakeTest_$6 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$6_$1 *new_RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$6_$1, initWithRxInternalOperatorsOperatorTakeTest_$6_, outer$)
}

RxInternalOperatorsOperatorTakeTest_$6_$1 *create_RxInternalOperatorsOperatorTakeTest_$6_$1_initWithRxInternalOperatorsOperatorTakeTest_$6_(RxInternalOperatorsOperatorTakeTest_$6 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$6_$1, initWithRxInternalOperatorsOperatorTakeTest_$6_, outer$)
}

@implementation RxInternalOperatorsOperatorTakeTest_$7

- (void)callWithId:(JavaLangLong *)l {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$count_)) setWithLong:[((JavaLangLong *) nil_chk(l)) longLongValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorTakeTest;", "testUnsubscribeFromSynchronousInfiniteObservable", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$7;
}

@end

void RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$7 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$7 *new_RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$7, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$7 *create_RxInternalOperatorsOperatorTakeTest_$7_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$7, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$8

- (void)callWithId:(RxSubscriber *)s {
  for (jint i = 0; ![((RxSubscriber *) nil_chk(s)) isUnsubscribed]; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Emit: ", i)];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
    [s onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorTakeTest;", "testMultiTake", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$8;
}

@end

void RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorTakeTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$8 *new_RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$8 *create_RxInternalOperatorsOperatorTakeTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$9

- (void)callWithId:(JavaLangInteger *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Receive: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorTakeTest;", "testMultiTake", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$9;
}

@end

void RxInternalOperatorsOperatorTakeTest_$9_init(RxInternalOperatorsOperatorTakeTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$9 *new_RxInternalOperatorsOperatorTakeTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$9, init)
}

RxInternalOperatorsOperatorTakeTest_$9 *create_RxInternalOperatorsOperatorTakeTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$9, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$1

- (void)callWithId:(RxSubscriber *)op {
  jlong l = 1;
  while (![((RxSubscriber *) nil_chk(op)) isUnsubscribed]) {
    [op onNextWithId:JavaLangLong_valueOfWithLong_(l++)];
  }
  [op onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorTakeTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$1;
}

@end

void RxInternalOperatorsOperatorTakeTest_$1_init(RxInternalOperatorsOperatorTakeTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$1 *new_RxInternalOperatorsOperatorTakeTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$1, init)
}

RxInternalOperatorsOperatorTakeTest_$1 *create_RxInternalOperatorsOperatorTakeTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$1, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$10

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorTakeTest;", "testProducerRequestThroughTake", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$10;
}

@end

void RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$10 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$10 *new_RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$10 *create_RxInternalOperatorsOperatorTakeTest_$10_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$10, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$10_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$10:(RxInternalOperatorsOperatorTakeTest_$10 *)outer$ {
  RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTakeTest_$10:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTakeTest_$10;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorTakeTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$10_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$10_$1;
}

@end

void RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10_$1 *self, RxInternalOperatorsOperatorTakeTest_$10 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$10_$1 *new_RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$10_$1, initWithRxInternalOperatorsOperatorTakeTest_$10_, outer$)
}

RxInternalOperatorsOperatorTakeTest_$10_$1 *create_RxInternalOperatorsOperatorTakeTest_$10_$1_initWithRxInternalOperatorsOperatorTakeTest_$10_(RxInternalOperatorsOperatorTakeTest_$10 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$10_$1, initWithRxInternalOperatorsOperatorTakeTest_$10_, outer$)
}

@implementation RxInternalOperatorsOperatorTakeTest_$11

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorTakeTest;", "testProducerRequestThroughTakeIsModified", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$11;
}

@end

void RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$11 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$11 *new_RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$11, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$11 *create_RxInternalOperatorsOperatorTakeTest_$11_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$11, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$11_$1

- (void)requestWithLong:(jlong)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(this$0_->val$requested_)) setWithLong:n];
}

- (instancetype)initWithRxInternalOperatorsOperatorTakeTest_$11:(RxInternalOperatorsOperatorTakeTest_$11 *)outer$ {
  RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTakeTest_$11:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTakeTest_$11;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorTakeTest_$11;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$11_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$11_$1;
}

@end

void RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11_$1 *self, RxInternalOperatorsOperatorTakeTest_$11 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$11_$1 *new_RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$11_$1, initWithRxInternalOperatorsOperatorTakeTest_$11_, outer$)
}

RxInternalOperatorsOperatorTakeTest_$11_$1 *create_RxInternalOperatorsOperatorTakeTest_$11_$1_initWithRxInternalOperatorsOperatorTakeTest_$11_(RxInternalOperatorsOperatorTakeTest_$11 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$11_$1, initWithRxInternalOperatorsOperatorTakeTest_$11_, outer$)
}

@implementation RxInternalOperatorsOperatorTakeTest_$12

- (void)callWithId:(JavaLangInteger *)t1 {
  @try {
    JavaLangThread_sleepWithLong_(100);
  }
  @catch (JavaLangException *e) {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$exception_)) setWithId:e];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$exception_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$exception_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorTakeTest;", "testInterrupt", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$12;
}

@end

void RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTakeTest_$12 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$exception_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$12 *new_RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$12, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTakeTest_$12 *create_RxInternalOperatorsOperatorTakeTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$12, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTakeTest_$13

- (void)callWithId:(JavaLangLong *)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requests_)) addAndGetWithLong:[((JavaLangLong *) nil_chk(n)) longLongValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorTakeTest;", "testDoesntRequestMoreThanNeededFromUpstream", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$13;
}

@end

void RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorTakeTest_$13 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$13 *new_RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$13 *create_RxInternalOperatorsOperatorTakeTest_$13_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$13, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorTakeTest_$14

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorTakeTest_$14 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxInternalOperatorsOperatorTakeTest;", "takeFinalValueThrows", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$14;
}

@end

void RxInternalOperatorsOperatorTakeTest_$14_init(RxInternalOperatorsOperatorTakeTest_$14 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorTakeTest_$14 *new_RxInternalOperatorsOperatorTakeTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$14, init)
}

RxInternalOperatorsOperatorTakeTest_$14 *create_RxInternalOperatorsOperatorTakeTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$14, init)
}

@implementation RxInternalOperatorsOperatorTakeTest_$15

- (void)callWithId:(JavaLangInteger *)v {
  [((RxSubjectsPublishSubject *) nil_chk(val$source_)) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$source_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTakeTest;", "testReentrantTake", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorTakeTest_$15;
}

@end

void RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTakeTest_$15 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$source_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeTest_$15 *new_RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeTest_$15, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTakeTest_$15 *create_RxInternalOperatorsOperatorTakeTest_$15_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeTest_$15, initWithRxSubjectsPublishSubject_, capture$0)
}
