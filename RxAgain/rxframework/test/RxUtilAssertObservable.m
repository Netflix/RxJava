//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/util/AssertObservable.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxUtilAssertObservable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Void.h"

@interface RxUtilAssertObservable ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxUtilAssertObservable_init(RxUtilAssertObservable *self);

__attribute__((unused)) static RxUtilAssertObservable *new_RxUtilAssertObservable_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxUtilAssertObservable *create_RxUtilAssertObservable_init();

@interface RxUtilAssertObservable_$1 : NSObject < RxFunctionsFunc2 >

- (RxNotification *)callWithId:(RxNotification *)expectedNotfication
                        withId:(RxNotification *)actualNotification;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxUtilAssertObservable_$1)

__attribute__((unused)) static void RxUtilAssertObservable_$1_init(RxUtilAssertObservable_$1 *self);

__attribute__((unused)) static RxUtilAssertObservable_$1 *new_RxUtilAssertObservable_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxUtilAssertObservable_$1 *create_RxUtilAssertObservable_$1_init();

@interface RxUtilAssertObservable_$2 : NSObject < RxFunctionsFunc2 >

- (RxNotification *)callWithId:(RxNotification *)a
                        withId:(RxNotification *)b;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxUtilAssertObservable_$2)

__attribute__((unused)) static void RxUtilAssertObservable_$2_init(RxUtilAssertObservable_$2 *self);

__attribute__((unused)) static RxUtilAssertObservable_$2 *new_RxUtilAssertObservable_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxUtilAssertObservable_$2 *create_RxUtilAssertObservable_$2_init();

@interface RxUtilAssertObservable_$3 : NSObject < RxFunctionsFunc1 > {
 @public
  NSString *val$message_;
}

- (RxNotification *)callWithId:(RxNotification *)outcome;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxUtilAssertObservable_$3)

J2OBJC_FIELD_SETTER(RxUtilAssertObservable_$3, val$message_, NSString *)

__attribute__((unused)) static void RxUtilAssertObservable_$3_initWithNSString_(RxUtilAssertObservable_$3 *self, NSString *capture$0);

__attribute__((unused)) static RxUtilAssertObservable_$3 *new_RxUtilAssertObservable_$3_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxUtilAssertObservable_$3 *create_RxUtilAssertObservable_$3_initWithNSString_(NSString *capture$0);

@implementation RxUtilAssertObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxUtilAssertObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assertObservableEqualsBlockingWithRxObservable:(RxObservable *)expected
                                      withRxObservable:(RxObservable *)actual {
  RxUtilAssertObservable_assertObservableEqualsBlockingWithRxObservable_withRxObservable_(expected, actual);
}

+ (void)assertObservableEqualsBlockingWithNSString:(NSString *)message
                                  withRxObservable:(RxObservable *)expected
                                  withRxObservable:(RxObservable *)actual {
  RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(message, expected, actual);
}

+ (RxObservable *)assertObservableEqualsWithRxObservable:(RxObservable *)expected
                                        withRxObservable:(RxObservable *)actual {
  return RxUtilAssertObservable_assertObservableEqualsWithRxObservable_withRxObservable_(expected, actual);
}

+ (RxObservable *)assertObservableEqualsWithNSString:(NSString *)message
                                    withRxObservable:(RxObservable *)expected
                                    withRxObservable:(RxObservable *)actual {
  return RxUtilAssertObservable_assertObservableEqualsWithNSString_withRxObservable_withRxObservable_(message, expected, actual);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "LRxObservable;", 0x9, 5, 1, -1, 6, -1, -1 },
    { NULL, "LRxObservable;", 0x9, 5, 3, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertObservableEqualsBlockingWithRxObservable:withRxObservable:);
  methods[2].selector = @selector(assertObservableEqualsBlockingWithNSString:withRxObservable:withRxObservable:);
  methods[3].selector = @selector(assertObservableEqualsWithRxObservable:withRxObservable:);
  methods[4].selector = @selector(assertObservableEqualsWithNSString:withRxObservable:withRxObservable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertObservableEqualsBlocking", "LRxObservable;LRxObservable;", "<T:Ljava/lang/Object;>(Lrx/Observable<TT;>;Lrx/Observable<TT;>;)V", "LNSString;LRxObservable;LRxObservable;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Lrx/Observable<TT;>;Lrx/Observable<TT;>;)V", "assertObservableEquals", "<T:Ljava/lang/Object;>(Lrx/Observable<TT;>;Lrx/Observable<TT;>;)Lrx/Observable<Ljava/lang/Void;>;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Lrx/Observable<TT;>;Lrx/Observable<TT;>;)Lrx/Observable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxUtilAssertObservable = { "AssertObservable", "rx.util", ptrTable, methods, NULL, 7, 0x11, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxUtilAssertObservable;
}

@end

void RxUtilAssertObservable_init(RxUtilAssertObservable *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxUtilAssertObservable *new_RxUtilAssertObservable_init() {
  J2OBJC_NEW_IMPL(RxUtilAssertObservable, init)
}

RxUtilAssertObservable *create_RxUtilAssertObservable_init() {
  J2OBJC_CREATE_IMPL(RxUtilAssertObservable, init)
}

void RxUtilAssertObservable_assertObservableEqualsBlockingWithRxObservable_withRxObservable_(RxObservable *expected, RxObservable *actual) {
  RxUtilAssertObservable_initialize();
  RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(nil, expected, actual);
}

void RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(NSString *message, RxObservable *expected, RxObservable *actual) {
  RxUtilAssertObservable_initialize();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(RxUtilAssertObservable_assertObservableEqualsWithRxObservable_withRxObservable_(expected, actual))) toBlocking])) lastOrDefaultWithId:nil];
}

RxObservable *RxUtilAssertObservable_assertObservableEqualsWithRxObservable_withRxObservable_(RxObservable *expected, RxObservable *actual) {
  RxUtilAssertObservable_initialize();
  return RxUtilAssertObservable_assertObservableEqualsWithNSString_withRxObservable_withRxObservable_(nil, expected, actual);
}

RxObservable *RxUtilAssertObservable_assertObservableEqualsWithNSString_withRxObservable_withRxObservable_(NSString *message, RxObservable *expected, RxObservable *actual) {
  RxUtilAssertObservable_initialize();
  if (actual == nil && expected != nil) {
    return RxObservable_errorWithNSException_(create_JavaLangAssertionError_initWithId_(JreStrcat("$$", (message != nil ? JreStrcat("$$", message, @": ") : @""), @"Actual was null and expected was not")));
  }
  if (actual != nil && expected == nil) {
    return RxObservable_errorWithNSException_(create_JavaLangAssertionError_initWithId_(JreStrcat("$$", (message != nil ? JreStrcat("$$", message, @": ") : @""), @"Expected was null and actual was not")));
  }
  if (actual == nil && expected == nil) {
    return RxObservable_empty();
  }
  id<RxFunctionsFunc2> zipFunction = create_RxUtilAssertObservable_$1_init();
  id<RxFunctionsFunc2> accumulator = create_RxUtilAssertObservable_$2_init();
  RxObservable *outcomeObservable = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_([((RxObservable *) nil_chk(expected)) materialize], [((RxObservable *) nil_chk(actual)) materialize], zipFunction))) reduceWithRxFunctionsFunc2:accumulator])) mapWithRxFunctionsFunc1:create_RxUtilAssertObservable_$3_initWithNSString_(message)])) dematerialize];
  return outcomeObservable;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxUtilAssertObservable)

@implementation RxUtilAssertObservable_$1

- (RxNotification *)callWithId:(RxNotification *)expectedNotfication
                        withId:(RxNotification *)actualNotification {
  if ([((RxNotification *) nil_chk(expectedNotfication)) isEqual:actualNotification]) {
    JavaLangStringBuilder *message = create_JavaLangStringBuilder_init();
    [message appendWithId:[expectedNotfication getKind]];
    if ([expectedNotfication hasValue]) [((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@" "])) appendWithId:[expectedNotfication getValue]];
    if ([expectedNotfication hasThrowable]) [((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@" "])) appendWithId:[expectedNotfication getThrowable]];
    return RxNotification_createOnNextWithId_(JreStrcat("$$", @"equals ", [message description]));
  }
  else {
    JavaLangStringBuilder *error = create_JavaLangStringBuilder_init();
    [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@"expected:<"])) appendWithId:[expectedNotfication getKind]];
    if ([expectedNotfication hasValue]) [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@" "])) appendWithId:[expectedNotfication getValue]];
    if ([expectedNotfication hasThrowable]) [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@" "])) appendWithId:[expectedNotfication getThrowable]];
    [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@"> but was:<"])) appendWithId:[((RxNotification *) nil_chk(actualNotification)) getKind]];
    if ([actualNotification hasValue]) [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@" "])) appendWithId:[actualNotification getValue]];
    if ([actualNotification hasThrowable]) [((JavaLangStringBuilder *) nil_chk([error appendWithNSString:@" "])) appendWithId:[actualNotification getThrowable]];
    [error appendWithNSString:@">"];
    return RxNotification_createOnErrorWithNSException_(create_JavaLangAssertionError_initWithId_([error description]));
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxUtilAssertObservable_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxNotification;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxNotification;LRxNotification;", "(Lrx/Notification<TT;>;Lrx/Notification<TT;>;)Lrx/Notification<Ljava/lang/String;>;", "LRxUtilAssertObservable;", "assertObservableEqualsWithNSString:withRxObservable:withRxObservable:", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Notification<TT;>;Lrx/Notification<TT;>;Lrx/Notification<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxUtilAssertObservable_$1 = { "", "rx.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxUtilAssertObservable_$1;
}

@end

void RxUtilAssertObservable_$1_init(RxUtilAssertObservable_$1 *self) {
  NSObject_init(self);
}

RxUtilAssertObservable_$1 *new_RxUtilAssertObservable_$1_init() {
  J2OBJC_NEW_IMPL(RxUtilAssertObservable_$1, init)
}

RxUtilAssertObservable_$1 *create_RxUtilAssertObservable_$1_init() {
  J2OBJC_CREATE_IMPL(RxUtilAssertObservable_$1, init)
}

@implementation RxUtilAssertObservable_$2

- (RxNotification *)callWithId:(RxNotification *)a
                        withId:(RxNotification *)b {
  NSString *message = [((RxNotification *) nil_chk(a)) isOnError] ? [((NSException *) nil_chk([a getThrowable])) getMessage] : [a getValue];
  jboolean fail = [a isOnError];
  JreStrAppend(&message, "$$", @"\n\t", ([((RxNotification *) nil_chk(b)) isOnError] ? [((NSException *) nil_chk([b getThrowable])) getMessage] : [b getValue]));
  fail |= [b isOnError];
  if (fail) return RxNotification_createOnErrorWithNSException_(create_JavaLangAssertionError_initWithId_(message));
  else return RxNotification_createOnNextWithId_(message);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxUtilAssertObservable_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxNotification;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxNotification;LRxNotification;", "(Lrx/Notification<Ljava/lang/String;>;Lrx/Notification<Ljava/lang/String;>;)Lrx/Notification<Ljava/lang/String;>;", "LRxUtilAssertObservable;", "assertObservableEqualsWithNSString:withRxObservable:withRxObservable:", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Notification<Ljava/lang/String;>;Lrx/Notification<Ljava/lang/String;>;Lrx/Notification<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxUtilAssertObservable_$2 = { "", "rx.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxUtilAssertObservable_$2;
}

@end

void RxUtilAssertObservable_$2_init(RxUtilAssertObservable_$2 *self) {
  NSObject_init(self);
}

RxUtilAssertObservable_$2 *new_RxUtilAssertObservable_$2_init() {
  J2OBJC_NEW_IMPL(RxUtilAssertObservable_$2, init)
}

RxUtilAssertObservable_$2 *create_RxUtilAssertObservable_$2_init() {
  J2OBJC_CREATE_IMPL(RxUtilAssertObservable_$2, init)
}

@implementation RxUtilAssertObservable_$3

- (RxNotification *)callWithId:(RxNotification *)outcome {
  if ([((RxNotification *) nil_chk(outcome)) isOnError]) {
    NSString *fullMessage = JreStrcat("$$$", (val$message_ != nil ? JreStrcat("$$", val$message_, @": ") : @""), @"Observables are different\n\t", [((NSException *) nil_chk([outcome getThrowable])) getMessage]);
    return RxNotification_createOnErrorWithNSException_(create_JavaLangAssertionError_initWithId_(fullMessage));
  }
  return RxNotification_createOnCompleted();
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxUtilAssertObservable_$3_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$message_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxNotification;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$message_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<Ljava/lang/String;>;)Lrx/Notification<Ljava/lang/Void;>;", "LNSString;", "LRxUtilAssertObservable;", "assertObservableEqualsWithNSString:withRxObservable:withRxObservable:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Notification<Ljava/lang/String;>;Lrx/Notification<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxUtilAssertObservable_$3 = { "", "rx.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxUtilAssertObservable_$3;
}

@end

void RxUtilAssertObservable_$3_initWithNSString_(RxUtilAssertObservable_$3 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$message_, capture$0);
  NSObject_init(self);
}

RxUtilAssertObservable_$3 *new_RxUtilAssertObservable_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxUtilAssertObservable_$3, initWithNSString_, capture$0)
}

RxUtilAssertObservable_$3 *create_RxUtilAssertObservable_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxUtilAssertObservable_$3, initWithNSString_, capture$0)
}
