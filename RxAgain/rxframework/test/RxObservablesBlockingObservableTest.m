//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observables/BlockingObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObservablesBlockingObservableTest.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "java/util/function/Consumer.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxObservablesBlockingObservableTest () {
 @public
  id<RxFunctionsAction1> singleAction_;
  id<RxFunctionsAction1> forEachAction_;
  id<RxFunctionsAction1> firstAction_;
  id<RxFunctionsAction1> lastAction_;
  id<RxFunctionsAction1> latestAction_;
  id<RxFunctionsAction1> nextAction_;
  id<RxFunctionsAction1> getIteratorAction_;
  id<RxFunctionsAction1> toIterableAction_;
}

@end

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, singleAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, forEachAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, firstAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, lastAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, latestAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, nextAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, getIteratorAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest, toIterableAction_, id<RxFunctionsAction1>)

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$42();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$43();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$44();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$45();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$46();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$47();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$48();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$49();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$50();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$51();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$52();

__attribute__((unused)) static IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$53();

@interface RxObservablesBlockingObservableTest_InterruptionTests : NSObject {
 @public
  jboolean isUnSubscribed_;
  JavaUtilConcurrentAtomicAtomicReference *errorRef_;
  JavaUtilConcurrentCountDownLatch *latch_;
}

- (id<RxFunctionsAction0>)createOnUnsubscribe;

- (RxObservable *)createNeverObservable;

- (RxObservable *)createSynchronousObservable;

- (void)startBlockingAndInterruptWithRxObservable:(RxObservable *)observable
                           withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction;

- (void)assertUnsubscribeIsInvokedWithNSString:(NSString *)method
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction;

- (void)assertNoInterruptedExceptionWhenSynchronousWithNSString:(NSString *)method
                                         withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction;

- (JavaLangInterruptedException *)getInterruptedExceptionOrNull;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_InterruptionTests)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests, errorRef_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests, latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static id<RxFunctionsAction0> RxObservablesBlockingObservableTest_InterruptionTests_createOnUnsubscribe(RxObservablesBlockingObservableTest_InterruptionTests *self);

__attribute__((unused)) static RxObservable *RxObservablesBlockingObservableTest_InterruptionTests_createNeverObservable(RxObservablesBlockingObservableTest_InterruptionTests *self);

__attribute__((unused)) static RxObservable *RxObservablesBlockingObservableTest_InterruptionTests_createSynchronousObservable(RxObservablesBlockingObservableTest_InterruptionTests *self);

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_startBlockingAndInterruptWithRxObservable_withRxFunctionsAction1_(RxObservablesBlockingObservableTest_InterruptionTests *self, RxObservable *observable, id<RxFunctionsAction1> blockingAction);

__attribute__((unused)) static JavaLangInterruptedException *RxObservablesBlockingObservableTest_InterruptionTests_getInterruptedExceptionOrNull(RxObservablesBlockingObservableTest_InterruptionTests *self);

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_init(RxObservablesBlockingObservableTest_InterruptionTests *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests *new_RxObservablesBlockingObservableTest_InterruptionTests_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests *create_RxObservablesBlockingObservableTest_InterruptionTests_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesBlockingObservableTest_InterruptionTests)

@interface RxObservablesBlockingObservableTest_InterruptionTests_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesBlockingObservableTest_InterruptionTests *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesBlockingObservableTest_InterruptionTests:(RxObservablesBlockingObservableTest_InterruptionTests *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_InterruptionTests_$1)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests_$1, this$0_, RxObservablesBlockingObservableTest_InterruptionTests *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests_$1 *self, RxObservablesBlockingObservableTest_InterruptionTests *outer$);

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$1 *new_RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$1 *create_RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests *outer$);

@interface RxObservablesBlockingObservableTest_InterruptionTests_$2 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_InterruptionTests_$2)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_$2_init(RxObservablesBlockingObservableTest_InterruptionTests_$2 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$2 *new_RxObservablesBlockingObservableTest_InterruptionTests_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$2 *create_RxObservablesBlockingObservableTest_InterruptionTests_$2_init();

@interface RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 : NSObject < JavaUtilIterator > {
 @public
  jboolean nextCalled_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_InterruptionTests_$2_$1)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init(RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *new_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *create_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init();

@interface RxObservablesBlockingObservableTest_InterruptionTests_$3 : JavaLangThread {
 @public
  RxObservablesBlockingObservableTest_InterruptionTests *this$0_;
  id<RxFunctionsAction1> val$blockingAction_;
  RxObservable *val$observable_;
}

- (void)run;

- (instancetype)initWithRxObservablesBlockingObservableTest_InterruptionTests:(RxObservablesBlockingObservableTest_InterruptionTests *)outer$
                                                       withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$0
                                                             withRxObservable:(RxObservable *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_InterruptionTests_$3)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests_$3, this$0_, RxObservablesBlockingObservableTest_InterruptionTests *)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests_$3, val$blockingAction_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_InterruptionTests_$3, val$observable_, RxObservable *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests_$3 *self, RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1);

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$3 *new_RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_InterruptionTests_$3 *create_RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1);

@interface RxObservablesBlockingObservableTest_$9 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$9)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$9_init(RxObservablesBlockingObservableTest_$9 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$9 *new_RxObservablesBlockingObservableTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$9 *create_RxObservablesBlockingObservableTest_$9_init();

@interface RxObservablesBlockingObservableTest_$10 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$10)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$10_init(RxObservablesBlockingObservableTest_$10 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$10 *new_RxObservablesBlockingObservableTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$10 *create_RxObservablesBlockingObservableTest_$10_init();

@interface RxObservablesBlockingObservableTest_$11 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$11)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$11_init(RxObservablesBlockingObservableTest_$11 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$11 *new_RxObservablesBlockingObservableTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$11 *create_RxObservablesBlockingObservableTest_$11_init();

@interface RxObservablesBlockingObservableTest_$12 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$12)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$12_init(RxObservablesBlockingObservableTest_$12 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$12 *new_RxObservablesBlockingObservableTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$12 *create_RxObservablesBlockingObservableTest_$12_init();

@interface RxObservablesBlockingObservableTest_$13 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$13)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$13_init(RxObservablesBlockingObservableTest_$13 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$13 *new_RxObservablesBlockingObservableTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$13 *create_RxObservablesBlockingObservableTest_$13_init();

@interface RxObservablesBlockingObservableTest_$14 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$14)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$14_init(RxObservablesBlockingObservableTest_$14 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$14 *new_RxObservablesBlockingObservableTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$14 *create_RxObservablesBlockingObservableTest_$14_init();

@interface RxObservablesBlockingObservableTest_$15 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$15)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$15_init(RxObservablesBlockingObservableTest_$15 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$15 *new_RxObservablesBlockingObservableTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$15 *create_RxObservablesBlockingObservableTest_$15_init();

@interface RxObservablesBlockingObservableTest_$16 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$16)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$16_init(RxObservablesBlockingObservableTest_$16 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$16 *new_RxObservablesBlockingObservableTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$16 *create_RxObservablesBlockingObservableTest_$16_init();

@interface RxObservablesBlockingObservableTest_$17 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$17)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$17_init(RxObservablesBlockingObservableTest_$17 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$17 *new_RxObservablesBlockingObservableTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$17 *create_RxObservablesBlockingObservableTest_$17_init();

@interface RxObservablesBlockingObservableTest_$18 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$18)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$18_init(RxObservablesBlockingObservableTest_$18 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$18 *new_RxObservablesBlockingObservableTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$18 *create_RxObservablesBlockingObservableTest_$18_init();

@interface RxObservablesBlockingObservableTest_$18_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$18_$1)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$18_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxObservablesBlockingObservableTest_$18_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$18_$1 *new_RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$18_$1 *create_RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxObservablesBlockingObservableTest_$19 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$19)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$19_init(RxObservablesBlockingObservableTest_$19 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$19 *new_RxObservablesBlockingObservableTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$19 *create_RxObservablesBlockingObservableTest_$19_init();

@interface RxObservablesBlockingObservableTest_$20 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$20)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$20_init(RxObservablesBlockingObservableTest_$20 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$20 *new_RxObservablesBlockingObservableTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$20 *create_RxObservablesBlockingObservableTest_$20_init();

@interface RxObservablesBlockingObservableTest_$21 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$21)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$21_init(RxObservablesBlockingObservableTest_$21 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$21 *new_RxObservablesBlockingObservableTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$21 *create_RxObservablesBlockingObservableTest_$21_init();

@interface RxObservablesBlockingObservableTest_$22 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$22)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$22_init(RxObservablesBlockingObservableTest_$22 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$22 *new_RxObservablesBlockingObservableTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$22 *create_RxObservablesBlockingObservableTest_$22_init();

@interface RxObservablesBlockingObservableTest_$23 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$23)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$23_init(RxObservablesBlockingObservableTest_$23 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$23 *new_RxObservablesBlockingObservableTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$23 *create_RxObservablesBlockingObservableTest_$23_init();

@interface RxObservablesBlockingObservableTest_$24 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentCountDownLatch *val$unsubscribe_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$24)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$24, val$unsubscribe_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesBlockingObservableTest_$24 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$24 *new_RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$24 *create_RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxObservablesBlockingObservableTest_$24_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesBlockingObservableTest_$24 *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesBlockingObservableTest_$24:(RxObservablesBlockingObservableTest_$24 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$24_$1)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$24_$1, this$0_, RxObservablesBlockingObservableTest_$24 *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24_$1 *self, RxObservablesBlockingObservableTest_$24 *outer$);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$24_$1 *new_RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$24_$1 *create_RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24 *outer$);

@interface RxObservablesBlockingObservableTest_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$1)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$1_init(RxObservablesBlockingObservableTest_$1 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$1 *new_RxObservablesBlockingObservableTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$1 *create_RxObservablesBlockingObservableTest_$1_init();

@interface RxObservablesBlockingObservableTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$2)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$2_init(RxObservablesBlockingObservableTest_$2 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$2 *new_RxObservablesBlockingObservableTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$2 *create_RxObservablesBlockingObservableTest_$2_init();

@interface RxObservablesBlockingObservableTest_$2_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)aVoid;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$2_$1)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$2_$1_init(RxObservablesBlockingObservableTest_$2_$1 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$2_$1 *new_RxObservablesBlockingObservableTest_$2_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$2_$1 *create_RxObservablesBlockingObservableTest_$2_$1_init();

@interface RxObservablesBlockingObservableTest_$3 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$3)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$3_init(RxObservablesBlockingObservableTest_$3 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$3 *new_RxObservablesBlockingObservableTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$3 *create_RxObservablesBlockingObservableTest_$3_init();

@interface RxObservablesBlockingObservableTest_$4 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$4)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$4_init(RxObservablesBlockingObservableTest_$4 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$4 *new_RxObservablesBlockingObservableTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$4 *create_RxObservablesBlockingObservableTest_$4_init();

@interface RxObservablesBlockingObservableTest_$5 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$5)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$5_init(RxObservablesBlockingObservableTest_$5 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$5 *new_RxObservablesBlockingObservableTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$5 *create_RxObservablesBlockingObservableTest_$5_init();

@interface RxObservablesBlockingObservableTest_$6 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$6)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$6_init(RxObservablesBlockingObservableTest_$6 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$6 *new_RxObservablesBlockingObservableTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$6 *create_RxObservablesBlockingObservableTest_$6_init();

@interface RxObservablesBlockingObservableTest_$7 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$7)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$7_init(RxObservablesBlockingObservableTest_$7 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$7 *new_RxObservablesBlockingObservableTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$7 *create_RxObservablesBlockingObservableTest_$7_init();

@interface RxObservablesBlockingObservableTest_$8 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(RxObservablesBlockingObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$8)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$8_init(RxObservablesBlockingObservableTest_$8 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$8 *new_RxObservablesBlockingObservableTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$8 *create_RxObservablesBlockingObservableTest_$8_init();

@interface RxObservablesBlockingObservableTest_$25 : RxObserversTestSubscriber

- (void)onStart;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$25)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$25_init(RxObservablesBlockingObservableTest_$25 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$25 *new_RxObservablesBlockingObservableTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$25 *create_RxObservablesBlockingObservableTest_$25_init();

@interface RxObservablesBlockingObservableTest_$26 : NSObject < RxFunctionsAction1 > {
 @public
  IOSBooleanArray *val$valueReceived_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$26)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$26, val$valueReceived_, IOSBooleanArray *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(RxObservablesBlockingObservableTest_$26 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$26 *new_RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$26 *create_RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(IOSBooleanArray *capture$0);

@interface RxObservablesBlockingObservableTest_$27 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$27)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$27_init(RxObservablesBlockingObservableTest_$27 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$27 *new_RxObservablesBlockingObservableTest_$27_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$27 *create_RxObservablesBlockingObservableTest_$27_init();

@interface RxObservablesBlockingObservableTest_$28 : NSObject < RxFunctionsAction1 > {
 @public
  IOSBooleanArray *val$received_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$28)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$28, val$received_, IOSBooleanArray *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(RxObservablesBlockingObservableTest_$28 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$28 *new_RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$28 *create_RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(IOSBooleanArray *capture$0);

@interface RxObservablesBlockingObservableTest_$29 : NSObject < RxFunctionsAction1 > {
 @public
  IOSBooleanArray *val$received_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$29)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$29, val$received_, IOSBooleanArray *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(RxObservablesBlockingObservableTest_$29 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$29 *new_RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$29 *create_RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(IOSBooleanArray *capture$0);

@interface RxObservablesBlockingObservableTest_$30 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$30)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$30_init(RxObservablesBlockingObservableTest_$30 *self);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$30 *new_RxObservablesBlockingObservableTest_$30_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$30 *create_RxObservablesBlockingObservableTest_$30_init();

@interface RxObservablesBlockingObservableTest_$31 : NSObject < RxFunctionsAction0 > {
 @public
  IOSBooleanArray *val$received_;
}

- (void)call;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$31)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$31, val$received_, IOSBooleanArray *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(RxObservablesBlockingObservableTest_$31 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$31 *new_RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$31 *create_RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(IOSBooleanArray *capture$0);

@interface RxObservablesBlockingObservableTest_$32 : NSObject < RxFunctionsAction1 > {
 @public
  RxObserversTestSubscriber *val$ts_;
}

- (void)callWithId:(id)t;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$32)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$32, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$32 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$32 *new_RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$32 *create_RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxObservablesBlockingObservableTest_$33 : NSObject < RxFunctionsAction1 > {
 @public
  RxObserversTestSubscriber *val$ts_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$33)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$33, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$33 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$33 *new_RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$33 *create_RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxObservablesBlockingObservableTest_$34 : NSObject < RxFunctionsAction0 > {
 @public
  RxObserversTestSubscriber *val$ts_;
}

- (void)call;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesBlockingObservableTest_$34)

J2OBJC_FIELD_SETTER(RxObservablesBlockingObservableTest_$34, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$34 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxObservablesBlockingObservableTest_$34 *new_RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesBlockingObservableTest_$34 *create_RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@implementation RxObservablesBlockingObservableTest

- (void)testLast {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [((RxObservablesBlockingObservable *) nil_chk(obs)) last]);
}

- (void)testLastEmptyObservable {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_empty());
  [((RxObservablesBlockingObservable *) nil_chk(obs)) last];
}

- (void)testLastOrDefault {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(-1)));
  jint last = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk(observable)) lastOrDefaultWithId:JavaLangInteger_valueOfWithInt_(-100) withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$9_init()])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, last);
}

- (void)testLastOrDefault1 {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [((RxObservablesBlockingObservable *) nil_chk(observable)) lastOrDefaultWithId:@"default"]);
}

- (void)testLastOrDefault2 {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_empty());
  OrgJunitAssert_assertEqualsWithId_withId_(@"default", [((RxObservablesBlockingObservable *) nil_chk(observable)) lastOrDefaultWithId:@"default"]);
}

- (void)testLastOrDefaultWithPredicate {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(-1)));
  jint last = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk(observable)) lastOrDefaultWithId:JavaLangInteger_valueOfWithInt_(0) withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$10_init()])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(-1, last);
}

- (void)testLastOrDefaultWrongPredicate {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(-1), JavaLangInteger_valueOfWithInt_(-2), JavaLangInteger_valueOfWithInt_(-3)));
  jint last = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk(observable)) lastOrDefaultWithId:JavaLangInteger_valueOfWithInt_(0) withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$11_init()])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, last);
}

- (void)testLastWithPredicate {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [((RxObservablesBlockingObservable *) nil_chk(obs)) lastWithRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$12_init()]);
}

- (void)testSingle {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_(@"one"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((RxObservablesBlockingObservable *) nil_chk(observable)) single]);
}

- (void)testSingleDefault {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_empty());
  OrgJunitAssert_assertEqualsWithId_withId_(@"default", [((RxObservablesBlockingObservable *) nil_chk(observable)) singleOrDefaultWithId:@"default"]);
}

- (void)testSingleDefaultPredicateMatchesMoreThanOne {
  [((RxObservablesBlockingObservable *) nil_chk(RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_(@"one", @"two")))) singleOrDefaultWithId:@"default" withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$13_init()];
}

- (void)testSingleDefaultPredicateMatchesNothing {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_(@"one", @"two"));
  NSString *result = [((RxObservablesBlockingObservable *) nil_chk(observable)) singleOrDefaultWithId:@"default" withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$14_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"default", result);
}

- (void)testSingleDefaultWithMoreThanOne {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  [((RxObservablesBlockingObservable *) nil_chk(observable)) singleOrDefaultWithId:@"default"];
}

- (void)testSingleWithPredicateDefault {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"four"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"four", [((RxObservablesBlockingObservable *) nil_chk(observable)) singleWithRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$15_init()]);
}

- (void)testSingleWrong {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)));
  [((RxObservablesBlockingObservable *) nil_chk(observable)) single];
}

- (void)testSingleWrongPredicate {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(-1)));
  [((RxObservablesBlockingObservable *) nil_chk(observable)) singleWithRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$16_init()];
}

- (void)testToIterable {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(obs)) toIterable])) iterator];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([it hasNext]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([it hasNext]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_([it hasNext]));
}

- (void)testToIterableNextOnly {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)));
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(obs)) toIterable])) iterator];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [((id<JavaUtilIterator>) nil_chk(it)) next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(2), [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(3), [it next]);
  [it next];
}

- (void)testToIterableNextOnlyTwice {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)));
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(obs)) toIterable])) iterator];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [((id<JavaUtilIterator>) nil_chk(it)) next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(2), [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(3), [it next]);
  jboolean exc = false;
  @try {
    [it next];
  }
  @catch (JavaUtilNoSuchElementException *ex) {
    exc = true;
  }
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(exc));
  [it next];
}

- (void)testToIterableManyTimes {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)));
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(obs)) toIterable];
  for (jint j = 0; j < 3; j++) {
    id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [it next]);
    OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(2), [it next]);
    OrgJunitAssert_assertTrueWithBoolean_([it hasNext]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(3), [it next]);
    OrgJunitAssert_assertFalseWithBoolean_([it hasNext]);
  }
}

- (void)testToIterableWithException {
  RxObservablesBlockingObservable *obs = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(create_RxObservablesBlockingObservableTest_$17_init()));
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(obs)) toIterable])) iterator];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [it next]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([it hasNext]));
  [it next];
}

- (void)testForEachWithError {
  @try {
    [((RxObservablesBlockingObservable *) nil_chk(RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(create_RxObservablesBlockingObservableTest_$18_init())))) forEachWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$19_init()];
    OrgJunitAssert_failWithNSString_(@"we expect an exception to be thrown");
  }
  @catch (NSException *e) {
  }
}

- (void)testFirst {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((RxObservablesBlockingObservable *) nil_chk(observable)) first]);
}

- (void)testFirstWithEmpty {
  [((RxObservablesBlockingObservable *) nil_chk(RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_empty()))) first];
}

- (void)testFirstWithPredicate {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  NSString *first = [((RxObservablesBlockingObservable *) nil_chk(observable)) firstWithRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$20_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", first);
}

- (void)testFirstWithPredicateAndEmpty {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  [((RxObservablesBlockingObservable *) nil_chk(observable)) firstWithRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$21_init()];
}

- (void)testFirstOrDefault {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((RxObservablesBlockingObservable *) nil_chk(observable)) firstOrDefaultWithId:@"default"]);
}

- (void)testFirstOrDefaultWithEmpty {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_empty());
  OrgJunitAssert_assertEqualsWithId_withId_(@"default", [((RxObservablesBlockingObservable *) nil_chk(observable)) firstOrDefaultWithId:@"default"]);
}

- (void)testFirstOrDefaultWithPredicate {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  NSString *first = [((RxObservablesBlockingObservable *) nil_chk(observable)) firstOrDefaultWithId:@"default" withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$22_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", first);
}

- (void)testFirstOrDefaultWithPredicateAndEmpty {
  RxObservablesBlockingObservable *observable = RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  NSString *first = [((RxObservablesBlockingObservable *) nil_chk(observable)) firstOrDefaultWithId:@"default" withRxFunctionsFunc1:create_RxObservablesBlockingObservableTest_$23_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"default", first);
}

- (void)testSingleOrDefaultUnsubscribe {
  JavaUtilConcurrentCountDownLatch *unsubscribe = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(unsubscribe)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  @try {
    [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(o)) toBlocking])) singleOrDefaultWithId:JavaLangInteger_valueOfWithInt_(-1)];
    OrgJunitAssert_failWithNSString_(@"Expected IllegalArgumentException because there are 2 elements");
  }
  @catch (JavaLangIllegalArgumentException *e) {
  }
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Timeout means `unsubscribe` is not called", [unsubscribe awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
}

- (void)testUnsubscribeFromSingleWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"single()" withRxFunctionsAction1:singleAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileSingleOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"single()" withRxFunctionsAction1:singleAction_];
}

- (void)testUnsubscribeFromForEachWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"forEach()" withRxFunctionsAction1:forEachAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileForEachOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"forEach()" withRxFunctionsAction1:forEachAction_];
}

- (void)testUnsubscribeFromFirstWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"first()" withRxFunctionsAction1:firstAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileFirstOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"first()" withRxFunctionsAction1:firstAction_];
}

- (void)testUnsubscribeFromLastWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"last()" withRxFunctionsAction1:lastAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileLastOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"last()" withRxFunctionsAction1:lastAction_];
}

- (void)testUnsubscribeFromLatestWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"latest()" withRxFunctionsAction1:latestAction_];
}

- (void)testUnsubscribeFromNextWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"next()" withRxFunctionsAction1:nextAction_];
}

- (void)testUnsubscribeFromGetIteratorWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"getIterator()" withRxFunctionsAction1:getIteratorAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileGetIteratorOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"getIterator()" withRxFunctionsAction1:getIteratorAction_];
}

- (void)testUnsubscribeFromToIterableWhenInterrupted {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertUnsubscribeIsInvokedWithNSString:@"toIterable()" withRxFunctionsAction1:toIterableAction_];
}

- (void)testNoInterruptedExceptionWhenInterruptedWhileToIterableOnSynchronousObservable {
  [create_RxObservablesBlockingObservableTest_InterruptionTests_init() assertNoInterruptedExceptionWhenSynchronousWithNSString:@"toIterable()" withRxFunctionsAction1:toIterableAction_];
}

- (void)testRun {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribe];
}

- (void)testRunException {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribe];
}

- (void)testRunIOException {
  @try {
    [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaIoIOException_init()))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribe];
    OrgJunitAssert_failWithNSString_(@"No exception thrown");
  }
  @catch (JavaLangRuntimeException *ex) {
    if ([[((JavaLangRuntimeException *) nil_chk(ex)) getCause] isKindOfClass:[JavaIoIOException class]]) {
      return;
    }
    OrgJunitAssert_failWithNSString_(JreStrcat("$@$@", @"Bad exception type: ", ex, @", ", [ex getCause]));
  }
}

- (void)testSubscriberBackpressure {
  RxObserversTestSubscriber *ts = create_RxObservablesBlockingObservableTest_$25_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)testOnErrorNotImplemented {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxFunctionsAction1:RxFunctionsActions_empty()];
}

- (void)testSubscribeCallback1 {
  IOSBooleanArray *valueReceived = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false } count:1];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(valueReceived)];
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(valueReceived, 0));
}

- (void)testSubscribeCallback2 {
  IOSBooleanArray *received = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false } count:1];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$27_init() withRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(received)];
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(received, 0));
}

- (void)testSubscribeCallback3 {
  IOSBooleanArray *received = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false, false } count:2];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(received) withRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$30_init() withRxFunctionsAction0:create_RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(received)];
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(received, 0));
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(received, 1));
}

- (void)testSubscribeCallback3Error {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) subscribeWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(ts) withRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(ts) withRxFunctionsAction0:create_RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(ts)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(singleAction_);
  RELEASE_(forEachAction_);
  RELEASE_(firstAction_);
  RELEASE_(lastAction_);
  RELEASE_(latestAction_);
  RELEASE_(nextAction_);
  RELEASE_(getIteratorAction_);
  RELEASE_(toIterableAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, 30, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 49, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 50, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 51, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 52, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 53, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 54, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testLast);
  methods[1].selector = @selector(testLastEmptyObservable);
  methods[2].selector = @selector(testLastOrDefault);
  methods[3].selector = @selector(testLastOrDefault1);
  methods[4].selector = @selector(testLastOrDefault2);
  methods[5].selector = @selector(testLastOrDefaultWithPredicate);
  methods[6].selector = @selector(testLastOrDefaultWrongPredicate);
  methods[7].selector = @selector(testLastWithPredicate);
  methods[8].selector = @selector(testSingle);
  methods[9].selector = @selector(testSingleDefault);
  methods[10].selector = @selector(testSingleDefaultPredicateMatchesMoreThanOne);
  methods[11].selector = @selector(testSingleDefaultPredicateMatchesNothing);
  methods[12].selector = @selector(testSingleDefaultWithMoreThanOne);
  methods[13].selector = @selector(testSingleWithPredicateDefault);
  methods[14].selector = @selector(testSingleWrong);
  methods[15].selector = @selector(testSingleWrongPredicate);
  methods[16].selector = @selector(testToIterable);
  methods[17].selector = @selector(testToIterableNextOnly);
  methods[18].selector = @selector(testToIterableNextOnlyTwice);
  methods[19].selector = @selector(testToIterableManyTimes);
  methods[20].selector = @selector(testToIterableWithException);
  methods[21].selector = @selector(testForEachWithError);
  methods[22].selector = @selector(testFirst);
  methods[23].selector = @selector(testFirstWithEmpty);
  methods[24].selector = @selector(testFirstWithPredicate);
  methods[25].selector = @selector(testFirstWithPredicateAndEmpty);
  methods[26].selector = @selector(testFirstOrDefault);
  methods[27].selector = @selector(testFirstOrDefaultWithEmpty);
  methods[28].selector = @selector(testFirstOrDefaultWithPredicate);
  methods[29].selector = @selector(testFirstOrDefaultWithPredicateAndEmpty);
  methods[30].selector = @selector(testSingleOrDefaultUnsubscribe);
  methods[31].selector = @selector(testUnsubscribeFromSingleWhenInterrupted);
  methods[32].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileSingleOnSynchronousObservable);
  methods[33].selector = @selector(testUnsubscribeFromForEachWhenInterrupted);
  methods[34].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileForEachOnSynchronousObservable);
  methods[35].selector = @selector(testUnsubscribeFromFirstWhenInterrupted);
  methods[36].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileFirstOnSynchronousObservable);
  methods[37].selector = @selector(testUnsubscribeFromLastWhenInterrupted);
  methods[38].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileLastOnSynchronousObservable);
  methods[39].selector = @selector(testUnsubscribeFromLatestWhenInterrupted);
  methods[40].selector = @selector(testUnsubscribeFromNextWhenInterrupted);
  methods[41].selector = @selector(testUnsubscribeFromGetIteratorWhenInterrupted);
  methods[42].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileGetIteratorOnSynchronousObservable);
  methods[43].selector = @selector(testUnsubscribeFromToIterableWhenInterrupted);
  methods[44].selector = @selector(testNoInterruptedExceptionWhenInterruptedWhileToIterableOnSynchronousObservable);
  methods[45].selector = @selector(testRun);
  methods[46].selector = @selector(testRunException);
  methods[47].selector = @selector(testRunIOException);
  methods[48].selector = @selector(testSubscriberBackpressure);
  methods[49].selector = @selector(testOnErrorNotImplemented);
  methods[50].selector = @selector(testSubscribeCallback1);
  methods[51].selector = @selector(testSubscribeCallback2);
  methods[52].selector = @selector(testSubscribeCallback3);
  methods[53].selector = @selector(testSubscribeCallback3Error);
  methods[54].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "forEachAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "firstAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "lastAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "latestAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "nextAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "getIteratorAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "toIterableAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxObservablesBlockingObservableTest__Annotations$0, (void *)&RxObservablesBlockingObservableTest__Annotations$1, (void *)&RxObservablesBlockingObservableTest__Annotations$2, (void *)&RxObservablesBlockingObservableTest__Annotations$3, (void *)&RxObservablesBlockingObservableTest__Annotations$4, (void *)&RxObservablesBlockingObservableTest__Annotations$5, (void *)&RxObservablesBlockingObservableTest__Annotations$6, (void *)&RxObservablesBlockingObservableTest__Annotations$7, (void *)&RxObservablesBlockingObservableTest__Annotations$8, (void *)&RxObservablesBlockingObservableTest__Annotations$9, (void *)&RxObservablesBlockingObservableTest__Annotations$10, (void *)&RxObservablesBlockingObservableTest__Annotations$11, (void *)&RxObservablesBlockingObservableTest__Annotations$12, (void *)&RxObservablesBlockingObservableTest__Annotations$13, (void *)&RxObservablesBlockingObservableTest__Annotations$14, (void *)&RxObservablesBlockingObservableTest__Annotations$15, (void *)&RxObservablesBlockingObservableTest__Annotations$16, (void *)&RxObservablesBlockingObservableTest__Annotations$17, (void *)&RxObservablesBlockingObservableTest__Annotations$18, (void *)&RxObservablesBlockingObservableTest__Annotations$19, (void *)&RxObservablesBlockingObservableTest__Annotations$20, (void *)&RxObservablesBlockingObservableTest__Annotations$21, (void *)&RxObservablesBlockingObservableTest__Annotations$22, (void *)&RxObservablesBlockingObservableTest__Annotations$23, (void *)&RxObservablesBlockingObservableTest__Annotations$24, (void *)&RxObservablesBlockingObservableTest__Annotations$25, (void *)&RxObservablesBlockingObservableTest__Annotations$26, (void *)&RxObservablesBlockingObservableTest__Annotations$27, (void *)&RxObservablesBlockingObservableTest__Annotations$28, (void *)&RxObservablesBlockingObservableTest__Annotations$29, "LJavaLangInterruptedException;", (void *)&RxObservablesBlockingObservableTest__Annotations$30, (void *)&RxObservablesBlockingObservableTest__Annotations$31, (void *)&RxObservablesBlockingObservableTest__Annotations$32, (void *)&RxObservablesBlockingObservableTest__Annotations$33, (void *)&RxObservablesBlockingObservableTest__Annotations$34, (void *)&RxObservablesBlockingObservableTest__Annotations$35, (void *)&RxObservablesBlockingObservableTest__Annotations$36, (void *)&RxObservablesBlockingObservableTest__Annotations$37, (void *)&RxObservablesBlockingObservableTest__Annotations$38, (void *)&RxObservablesBlockingObservableTest__Annotations$39, (void *)&RxObservablesBlockingObservableTest__Annotations$40, (void *)&RxObservablesBlockingObservableTest__Annotations$41, (void *)&RxObservablesBlockingObservableTest__Annotations$42, (void *)&RxObservablesBlockingObservableTest__Annotations$43, (void *)&RxObservablesBlockingObservableTest__Annotations$44, (void *)&RxObservablesBlockingObservableTest__Annotations$45, (void *)&RxObservablesBlockingObservableTest__Annotations$46, (void *)&RxObservablesBlockingObservableTest__Annotations$47, (void *)&RxObservablesBlockingObservableTest__Annotations$48, (void *)&RxObservablesBlockingObservableTest__Annotations$49, (void *)&RxObservablesBlockingObservableTest__Annotations$50, (void *)&RxObservablesBlockingObservableTest__Annotations$51, (void *)&RxObservablesBlockingObservableTest__Annotations$52, (void *)&RxObservablesBlockingObservableTest__Annotations$53, "Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;", "LRxObservablesBlockingObservableTest_InterruptionTests;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest = { "BlockingObservableTest", "rx.observables", ptrTable, methods, fields, 7, 0x1, 55, 8, -1, 56, -1, -1, -1 };
  return &_RxObservablesBlockingObservableTest;
}

@end

void RxObservablesBlockingObservableTest_init(RxObservablesBlockingObservableTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->singleAction_, new_RxObservablesBlockingObservableTest_$1_init());
  JreStrongAssignAndConsume(&self->forEachAction_, new_RxObservablesBlockingObservableTest_$2_init());
  JreStrongAssignAndConsume(&self->firstAction_, new_RxObservablesBlockingObservableTest_$3_init());
  JreStrongAssignAndConsume(&self->lastAction_, new_RxObservablesBlockingObservableTest_$4_init());
  JreStrongAssignAndConsume(&self->latestAction_, new_RxObservablesBlockingObservableTest_$5_init());
  JreStrongAssignAndConsume(&self->nextAction_, new_RxObservablesBlockingObservableTest_$6_init());
  JreStrongAssignAndConsume(&self->getIteratorAction_, new_RxObservablesBlockingObservableTest_$7_init());
  JreStrongAssignAndConsume(&self->toIterableAction_, new_RxObservablesBlockingObservableTest_$8_init());
}

RxObservablesBlockingObservableTest *new_RxObservablesBlockingObservableTest_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest, init)
}

RxObservablesBlockingObservableTest *create_RxObservablesBlockingObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest, init)
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsTestException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$48() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$49() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$50() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$51() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$52() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesBlockingObservableTest__Annotations$53() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesBlockingObservableTest)

@implementation RxObservablesBlockingObservableTest_InterruptionTests

- (id<RxFunctionsAction0>)createOnUnsubscribe {
  return RxObservablesBlockingObservableTest_InterruptionTests_createOnUnsubscribe(self);
}

- (RxObservable *)createNeverObservable {
  return RxObservablesBlockingObservableTest_InterruptionTests_createNeverObservable(self);
}

- (RxObservable *)createSynchronousObservable {
  return RxObservablesBlockingObservableTest_InterruptionTests_createSynchronousObservable(self);
}

- (void)startBlockingAndInterruptWithRxObservable:(RxObservable *)observable
                           withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction {
  RxObservablesBlockingObservableTest_InterruptionTests_startBlockingAndInterruptWithRxObservable_withRxFunctionsAction1_(self, observable, blockingAction);
}

- (void)assertUnsubscribeIsInvokedWithNSString:(NSString *)method
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction {
  RxObservablesBlockingObservableTest_InterruptionTests_startBlockingAndInterruptWithRxObservable_withRxFunctionsAction1_(self, RxObservablesBlockingObservableTest_InterruptionTests_createNeverObservable(self), blockingAction);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Timeout means interruption is not performed", [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"InterruptedException is not thrown", RxObservablesBlockingObservableTest_InterruptionTests_getInterruptedExceptionOrNull(self));
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$$", @"'unsubscribe' is not invoked when thread is interrupted for ", method), isUnSubscribed_);
}

- (void)assertNoInterruptedExceptionWhenSynchronousWithNSString:(NSString *)method
                                         withRxFunctionsAction1:(id<RxFunctionsAction1>)blockingAction {
  RxObservablesBlockingObservableTest_InterruptionTests_startBlockingAndInterruptWithRxObservable_withRxFunctionsAction1_(self, RxObservablesBlockingObservableTest_InterruptionTests_createSynchronousObservable(self), blockingAction);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Timeout means interruption is not performed", [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertNullWithNSString_withId_(JreStrcat("$$", @"'InterruptedException' is thrown when observable is synchronous for ", method), RxObservablesBlockingObservableTest_InterruptionTests_getInterruptedExceptionOrNull(self));
}

- (JavaLangInterruptedException *)getInterruptedExceptionOrNull {
  return RxObservablesBlockingObservableTest_InterruptionTests_getInterruptedExceptionOrNull(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_InterruptionTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(errorRef_);
  RELEASE_(latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxFunctionsAction0;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x2, -1, -1, -1, 0, -1, -1 },
    { NULL, "LRxObservable;", 0x2, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 6, 7, -1, -1 },
    { NULL, "V", 0x0, 8, 5, 6, 7, -1, -1 },
    { NULL, "LJavaLangInterruptedException;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createOnUnsubscribe);
  methods[1].selector = @selector(createNeverObservable);
  methods[2].selector = @selector(createSynchronousObservable);
  methods[3].selector = @selector(startBlockingAndInterruptWithRxObservable:withRxFunctionsAction1:);
  methods[4].selector = @selector(assertUnsubscribeIsInvokedWithNSString:withRxFunctionsAction1:);
  methods[5].selector = @selector(assertNoInterruptedExceptionWhenSynchronousWithNSString:withRxFunctionsAction1:);
  methods[6].selector = @selector(getInterruptedExceptionOrNull);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isUnSubscribed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Void;>;", "startBlockingAndInterrupt", "LRxObservable;LRxFunctionsAction1;", "<T:Ljava/lang/Object;>(Lrx/Observable<TT;>;Lrx/functions/Action1<Lrx/observables/BlockingObservable<TT;>;>;)V", "assertUnsubscribeIsInvoked", "LNSString;LRxFunctionsAction1;", "LJavaLangInterruptedException;", "(Ljava/lang/String;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;)V", "assertNoInterruptedExceptionWhenSynchronous", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/RuntimeException;>;", "LRxObservablesBlockingObservableTest;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_InterruptionTests = { "InterruptionTests", "rx.observables", ptrTable, methods, fields, 7, 0xa, 8, 3, 10, -1, -1, -1, -1 };
  return &_RxObservablesBlockingObservableTest_InterruptionTests;
}

@end

id<RxFunctionsAction0> RxObservablesBlockingObservableTest_InterruptionTests_createOnUnsubscribe(RxObservablesBlockingObservableTest_InterruptionTests *self) {
  return create_RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(self);
}

RxObservable *RxObservablesBlockingObservableTest_InterruptionTests_createNeverObservable(RxObservablesBlockingObservableTest_InterruptionTests *self) {
  return [((RxObservable *) nil_chk(RxObservable_never())) doOnUnsubscribeWithRxFunctionsAction0:RxObservablesBlockingObservableTest_InterruptionTests_createOnUnsubscribe(self)];
}

RxObservable *RxObservablesBlockingObservableTest_InterruptionTests_createSynchronousObservable(RxObservablesBlockingObservableTest_InterruptionTests *self) {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(create_RxObservablesBlockingObservableTest_InterruptionTests_$2_init()))) takeLastWithInt:1])) doOnUnsubscribeWithRxFunctionsAction0:RxObservablesBlockingObservableTest_InterruptionTests_createOnUnsubscribe(self)];
}

void RxObservablesBlockingObservableTest_InterruptionTests_startBlockingAndInterruptWithRxObservable_withRxFunctionsAction1_(RxObservablesBlockingObservableTest_InterruptionTests *self, RxObservable *observable, id<RxFunctionsAction1> blockingAction) {
  JavaLangThread *subscriptionThread = create_RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(self, blockingAction, observable);
  [subscriptionThread start];
  [subscriptionThread interrupt];
}

JavaLangInterruptedException *RxObservablesBlockingObservableTest_InterruptionTests_getInterruptedExceptionOrNull(RxObservablesBlockingObservableTest_InterruptionTests *self) {
  JavaLangRuntimeException *error = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->errorRef_)) get];
  if (error == nil) {
    return nil;
  }
  NSException *cause = [error getCause];
  if ([cause isKindOfClass:[JavaLangInterruptedException class]]) {
    return (JavaLangInterruptedException *) cast_chk(cause, [JavaLangInterruptedException class]);
  }
  @throw error;
}

void RxObservablesBlockingObservableTest_InterruptionTests_init(RxObservablesBlockingObservableTest_InterruptionTests *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->errorRef_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

RxObservablesBlockingObservableTest_InterruptionTests *new_RxObservablesBlockingObservableTest_InterruptionTests_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_InterruptionTests, init)
}

RxObservablesBlockingObservableTest_InterruptionTests *create_RxObservablesBlockingObservableTest_InterruptionTests_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_InterruptionTests, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesBlockingObservableTest_InterruptionTests)

@implementation RxObservablesBlockingObservableTest_InterruptionTests_$1

- (void)call {
  this$0_->isUnSubscribed_ = true;
}

- (instancetype)initWithRxObservablesBlockingObservableTest_InterruptionTests:(RxObservablesBlockingObservableTest_InterruptionTests *)outer$ {
  RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesBlockingObservableTest_InterruptionTests:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesBlockingObservableTest_InterruptionTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesBlockingObservableTest_InterruptionTests;", "createOnUnsubscribe" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_InterruptionTests_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesBlockingObservableTest_InterruptionTests_$1;
}

@end

void RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests_$1 *self, RxObservablesBlockingObservableTest_InterruptionTests *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_InterruptionTests_$1 *new_RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$1, initWithRxObservablesBlockingObservableTest_InterruptionTests_, outer$)
}

RxObservablesBlockingObservableTest_InterruptionTests_$1 *create_RxObservablesBlockingObservableTest_InterruptionTests_$1_initWithRxObservablesBlockingObservableTest_InterruptionTests_(RxObservablesBlockingObservableTest_InterruptionTests *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$1, initWithRxObservablesBlockingObservableTest_InterruptionTests_, outer$)
}

@implementation RxObservablesBlockingObservableTest_InterruptionTests_$2

- (id<JavaUtilIterator>)iterator {
  return create_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_InterruptionTests_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Void;>;", "LRxObservablesBlockingObservableTest_InterruptionTests;", "createSynchronousObservable", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_InterruptionTests_$2 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxObservablesBlockingObservableTest_InterruptionTests_$2;
}

@end

void RxObservablesBlockingObservableTest_InterruptionTests_$2_init(RxObservablesBlockingObservableTest_InterruptionTests_$2 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_InterruptionTests_$2 *new_RxObservablesBlockingObservableTest_InterruptionTests_$2_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$2, init)
}

RxObservablesBlockingObservableTest_InterruptionTests_$2 *create_RxObservablesBlockingObservableTest_InterruptionTests_$2_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$2, init)
}

@implementation RxObservablesBlockingObservableTest_InterruptionTests_$2_$1

- (jboolean)hasNext {
  return !(nextCalled_ && [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted]);
}

- (id)next {
  nextCalled_ = true;
  return nil;
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Read-only iterator.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextCalled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesBlockingObservableTest_InterruptionTests_$2;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 1, 2, -1 };
  return &_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1;
}

@end

void RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init(RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *self) {
  NSObject_init(self);
  self->nextCalled_ = false;
}

RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *new_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$2_$1, init)
}

RxObservablesBlockingObservableTest_InterruptionTests_$2_$1 *create_RxObservablesBlockingObservableTest_InterruptionTests_$2_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$2_$1, init)
}

@implementation RxObservablesBlockingObservableTest_InterruptionTests_$3

- (void)run {
  @try {
    [((id<RxFunctionsAction1>) nil_chk(val$blockingAction_)) callWithId:[((RxObservable *) nil_chk(val$observable_)) toBlocking]];
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->errorRef_)) setWithId:e];
  }
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->latch_)) countDown];
}

- (instancetype)initWithRxObservablesBlockingObservableTest_InterruptionTests:(RxObservablesBlockingObservableTest_InterruptionTests *)outer$
                                                       withRxFunctionsAction1:(id<RxFunctionsAction1>)capture$0
                                                             withRxObservable:(RxObservable *)capture$1 {
  RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$blockingAction_);
  RELEASE_(val$observable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObservablesBlockingObservableTest_InterruptionTests:withRxFunctionsAction1:withRxObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesBlockingObservableTest_InterruptionTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$blockingAction_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$observable_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesBlockingObservableTest_InterruptionTests;LRxFunctionsAction1;LRxObservable;", "(Lrx/observables/BlockingObservableTest$InterruptionTests;Lrx/functions/Action1<Lrx/observables/BlockingObservable<TT;>;>;Lrx/Observable<TT;>;)V", "Lrx/functions/Action1<Lrx/observables/BlockingObservable<TT;>;>;", "Lrx/Observable<TT;>;", "LRxObservablesBlockingObservableTest_InterruptionTests;", "startBlockingAndInterruptWithRxObservable:withRxFunctionsAction1:" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_InterruptionTests_$3 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, -1, -1 };
  return &_RxObservablesBlockingObservableTest_InterruptionTests_$3;
}

@end

void RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests_$3 *self, RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$blockingAction_, capture$0);
  JreStrongAssign(&self->val$observable_, capture$1);
  JavaLangThread_init(self);
}

RxObservablesBlockingObservableTest_InterruptionTests_$3 *new_RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$3, initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_, outer$, capture$0, capture$1)
}

RxObservablesBlockingObservableTest_InterruptionTests_$3 *create_RxObservablesBlockingObservableTest_InterruptionTests_$3_initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_(RxObservablesBlockingObservableTest_InterruptionTests *outer$, id<RxFunctionsAction1> capture$0, RxObservable *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_InterruptionTests_$3, initWithRxObservablesBlockingObservableTest_InterruptionTests_withRxFunctionsAction1_withRxObservable_, outer$, capture$0, capture$1)
}

@implementation RxObservablesBlockingObservableTest_$9

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(args)) intValue] >= 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxObservablesBlockingObservableTest;", "testLastOrDefault", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$9 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$9;
}

@end

void RxObservablesBlockingObservableTest_$9_init(RxObservablesBlockingObservableTest_$9 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$9 *new_RxObservablesBlockingObservableTest_$9_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$9, init)
}

RxObservablesBlockingObservableTest_$9 *create_RxObservablesBlockingObservableTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$9, init)
}

@implementation RxObservablesBlockingObservableTest_$10

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(args)) intValue] < 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxObservablesBlockingObservableTest;", "testLastOrDefaultWithPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$10 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$10;
}

@end

void RxObservablesBlockingObservableTest_$10_init(RxObservablesBlockingObservableTest_$10 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$10 *new_RxObservablesBlockingObservableTest_$10_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$10, init)
}

RxObservablesBlockingObservableTest_$10 *create_RxObservablesBlockingObservableTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$10, init)
}

@implementation RxObservablesBlockingObservableTest_$11

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(args)) intValue] >= 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxObservablesBlockingObservableTest;", "testLastOrDefaultWrongPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$11 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$11;
}

@end

void RxObservablesBlockingObservableTest_$11_init(RxObservablesBlockingObservableTest_$11 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$11 *new_RxObservablesBlockingObservableTest_$11_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$11, init)
}

RxObservablesBlockingObservableTest_$11 *create_RxObservablesBlockingObservableTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$11, init)
}

@implementation RxObservablesBlockingObservableTest_$12

- (JavaLangBoolean *)callWithId:(NSString *)s {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(s)) length]) == 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testLastWithPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$12 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$12;
}

@end

void RxObservablesBlockingObservableTest_$12_init(RxObservablesBlockingObservableTest_$12 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$12 *new_RxObservablesBlockingObservableTest_$12_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$12, init)
}

RxObservablesBlockingObservableTest_$12 *create_RxObservablesBlockingObservableTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$12, init)
}

@implementation RxObservablesBlockingObservableTest_$13

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) == 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testSingleDefaultPredicateMatchesMoreThanOne", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$13 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$13;
}

@end

void RxObservablesBlockingObservableTest_$13_init(RxObservablesBlockingObservableTest_$13 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$13 *new_RxObservablesBlockingObservableTest_$13_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$13, init)
}

RxObservablesBlockingObservableTest_$13 *create_RxObservablesBlockingObservableTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$13, init)
}

@implementation RxObservablesBlockingObservableTest_$14

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) == 4);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testSingleDefaultPredicateMatchesNothing", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$14 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$14;
}

@end

void RxObservablesBlockingObservableTest_$14_init(RxObservablesBlockingObservableTest_$14 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$14 *new_RxObservablesBlockingObservableTest_$14_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$14, init)
}

RxObservablesBlockingObservableTest_$14 *create_RxObservablesBlockingObservableTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$14, init)
}

@implementation RxObservablesBlockingObservableTest_$15

- (JavaLangBoolean *)callWithId:(NSString *)s {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(s)) length]) == 4);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testSingleWithPredicateDefault", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$15 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$15;
}

@end

void RxObservablesBlockingObservableTest_$15_init(RxObservablesBlockingObservableTest_$15 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$15 *new_RxObservablesBlockingObservableTest_$15_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$15, init)
}

RxObservablesBlockingObservableTest_$15 *create_RxObservablesBlockingObservableTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$15, init)
}

@implementation RxObservablesBlockingObservableTest_$16

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)args {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(args)) intValue] > 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxObservablesBlockingObservableTest;", "testSingleWrongPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$16 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$16;
}

@end

void RxObservablesBlockingObservableTest_$16_init(RxObservablesBlockingObservableTest_$16 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$16 *new_RxObservablesBlockingObservableTest_$16_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$16, init)
}

RxObservablesBlockingObservableTest_$16 *create_RxObservablesBlockingObservableTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$16, init)
}

@implementation RxObservablesBlockingObservableTest_$17

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:@"one"];
  [observer onErrorWithNSException:create_RxExceptionsTestException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxObservablesBlockingObservableTest;", "testToIterableWithException", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$17 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$17;
}

@end

void RxObservablesBlockingObservableTest_$17_init(RxObservablesBlockingObservableTest_$17 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$17 *new_RxObservablesBlockingObservableTest_$17_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$17, init)
}

RxObservablesBlockingObservableTest_$17 *create_RxObservablesBlockingObservableTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$17, init)
}

@implementation RxObservablesBlockingObservableTest_$18

- (void)callWithId:(RxSubscriber *)observer {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(observer)) start];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxObservablesBlockingObservableTest;", "testForEachWithError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$18 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$18;
}

@end

void RxObservablesBlockingObservableTest_$18_init(RxObservablesBlockingObservableTest_$18 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$18 *new_RxObservablesBlockingObservableTest_$18_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$18, init)
}

RxObservablesBlockingObservableTest_$18 *create_RxObservablesBlockingObservableTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$18, init)
}

@implementation RxObservablesBlockingObservableTest_$18_$1

- (void)run {
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:@"one"];
  [val$observer_ onNextWithId:@"two"];
  [val$observer_ onNextWithId:@"three"];
  [val$observer_ onCompleted];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxObservablesBlockingObservableTest_$18;", "callWithId:" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$18_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxObservablesBlockingObservableTest_$18_$1;
}

@end

void RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxObservablesBlockingObservableTest_$18_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$18_$1 *new_RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$18_$1, initWithRxSubscriber_, capture$0)
}

RxObservablesBlockingObservableTest_$18_$1 *create_RxObservablesBlockingObservableTest_$18_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$18_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$19

- (void)callWithId:(NSString *)t1 {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"fail");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testForEachWithError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$19 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$19;
}

@end

void RxObservablesBlockingObservableTest_$19_init(RxObservablesBlockingObservableTest_$19 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$19 *new_RxObservablesBlockingObservableTest_$19_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$19, init)
}

RxObservablesBlockingObservableTest_$19 *create_RxObservablesBlockingObservableTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$19, init)
}

@implementation RxObservablesBlockingObservableTest_$20

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) > 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testFirstWithPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$20 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$20;
}

@end

void RxObservablesBlockingObservableTest_$20_init(RxObservablesBlockingObservableTest_$20 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$20 *new_RxObservablesBlockingObservableTest_$20_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$20, init)
}

RxObservablesBlockingObservableTest_$20 *create_RxObservablesBlockingObservableTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$20, init)
}

@implementation RxObservablesBlockingObservableTest_$21

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) > 5);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testFirstWithPredicateAndEmpty", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$21 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$21;
}

@end

void RxObservablesBlockingObservableTest_$21_init(RxObservablesBlockingObservableTest_$21 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$21 *new_RxObservablesBlockingObservableTest_$21_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$21, init)
}

RxObservablesBlockingObservableTest_$21 *create_RxObservablesBlockingObservableTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$21, init)
}

@implementation RxObservablesBlockingObservableTest_$22

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) > 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testFirstOrDefaultWithPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$22 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$22;
}

@end

void RxObservablesBlockingObservableTest_$22_init(RxObservablesBlockingObservableTest_$22 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$22 *new_RxObservablesBlockingObservableTest_$22_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$22, init)
}

RxObservablesBlockingObservableTest_$22 *create_RxObservablesBlockingObservableTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$22, init)
}

@implementation RxObservablesBlockingObservableTest_$23

- (JavaLangBoolean *)callWithId:(NSString *)args {
  return JavaLangBoolean_valueOfWithBoolean_(((jint) [((NSString *) nil_chk(args)) length]) > 5);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxObservablesBlockingObservableTest;", "testFirstOrDefaultWithPredicateAndEmpty", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$23 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$23;
}

@end

void RxObservablesBlockingObservableTest_$23_init(RxObservablesBlockingObservableTest_$23 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$23 *new_RxObservablesBlockingObservableTest_$23_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$23, init)
}

RxObservablesBlockingObservableTest_$23 *create_RxObservablesBlockingObservableTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$23, init)
}

@implementation RxObservablesBlockingObservableTest_$24

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(self))];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribe_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentCountDownLatch;", "LRxObservablesBlockingObservableTest;", "testSingleOrDefaultUnsubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$24 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesBlockingObservableTest_$24;
}

@end

void RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesBlockingObservableTest_$24 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$unsubscribe_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$24 *new_RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$24, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxObservablesBlockingObservableTest_$24 *create_RxObservablesBlockingObservableTest_$24_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$24, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$24_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$unsubscribe_)) countDown];
}

- (instancetype)initWithRxObservablesBlockingObservableTest_$24:(RxObservablesBlockingObservableTest_$24 *)outer$ {
  RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesBlockingObservableTest_$24:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesBlockingObservableTest_$24;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesBlockingObservableTest_$24;", "callWithId:" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$24_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesBlockingObservableTest_$24_$1;
}

@end

void RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24_$1 *self, RxObservablesBlockingObservableTest_$24 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$24_$1 *new_RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$24_$1, initWithRxObservablesBlockingObservableTest_$24_, outer$)
}

RxObservablesBlockingObservableTest_$24_$1 *create_RxObservablesBlockingObservableTest_$24_$1_initWithRxObservablesBlockingObservableTest_$24_(RxObservablesBlockingObservableTest_$24 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$24_$1, initWithRxObservablesBlockingObservableTest_$24_, outer$)
}

@implementation RxObservablesBlockingObservableTest_$1

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((RxObservablesBlockingObservable *) nil_chk(o)) single];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$1 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$1;
}

@end

void RxObservablesBlockingObservableTest_$1_init(RxObservablesBlockingObservableTest_$1 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$1 *new_RxObservablesBlockingObservableTest_$1_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$1, init)
}

RxObservablesBlockingObservableTest_$1 *create_RxObservablesBlockingObservableTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$1, init)
}

@implementation RxObservablesBlockingObservableTest_$2

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((RxObservablesBlockingObservable *) nil_chk(o)) forEachWithRxFunctionsAction1:create_RxObservablesBlockingObservableTest_$2_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$2 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$2;
}

@end

void RxObservablesBlockingObservableTest_$2_init(RxObservablesBlockingObservableTest_$2 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$2 *new_RxObservablesBlockingObservableTest_$2_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$2, init)
}

RxObservablesBlockingObservableTest_$2 *create_RxObservablesBlockingObservableTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$2, init)
}

@implementation RxObservablesBlockingObservableTest_$2_$1

- (void)callWithId:(id)aVoid {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$2_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangVoid;", "LRxObservablesBlockingObservableTest_$2;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$2_$1 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$2_$1;
}

@end

void RxObservablesBlockingObservableTest_$2_$1_init(RxObservablesBlockingObservableTest_$2_$1 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$2_$1 *new_RxObservablesBlockingObservableTest_$2_$1_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$2_$1, init)
}

RxObservablesBlockingObservableTest_$2_$1 *create_RxObservablesBlockingObservableTest_$2_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$2_$1, init)
}

@implementation RxObservablesBlockingObservableTest_$3

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((RxObservablesBlockingObservable *) nil_chk(o)) first];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$3 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$3;
}

@end

void RxObservablesBlockingObservableTest_$3_init(RxObservablesBlockingObservableTest_$3 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$3 *new_RxObservablesBlockingObservableTest_$3_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$3, init)
}

RxObservablesBlockingObservableTest_$3 *create_RxObservablesBlockingObservableTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$3, init)
}

@implementation RxObservablesBlockingObservableTest_$4

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((RxObservablesBlockingObservable *) nil_chk(o)) last];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$4 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$4;
}

@end

void RxObservablesBlockingObservableTest_$4_init(RxObservablesBlockingObservableTest_$4 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$4 *new_RxObservablesBlockingObservableTest_$4_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$4, init)
}

RxObservablesBlockingObservableTest_$4 *create_RxObservablesBlockingObservableTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$4, init)
}

@implementation RxObservablesBlockingObservableTest_$5

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(o)) latest])) iterator])) next];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$5 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$5;
}

@end

void RxObservablesBlockingObservableTest_$5_init(RxObservablesBlockingObservableTest_$5 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$5 *new_RxObservablesBlockingObservableTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$5, init)
}

RxObservablesBlockingObservableTest_$5 *create_RxObservablesBlockingObservableTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$5, init)
}

@implementation RxObservablesBlockingObservableTest_$6

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(o)) next])) iterator])) next];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$6 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$6;
}

@end

void RxObservablesBlockingObservableTest_$6_init(RxObservablesBlockingObservableTest_$6 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$6 *new_RxObservablesBlockingObservableTest_$6_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$6, init)
}

RxObservablesBlockingObservableTest_$6 *create_RxObservablesBlockingObservableTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$6, init)
}

@implementation RxObservablesBlockingObservableTest_$7

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((id<JavaUtilIterator>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(o)) getIterator])) next];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$7 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$7;
}

@end

void RxObservablesBlockingObservableTest_$7_init(RxObservablesBlockingObservableTest_$7 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$7 *new_RxObservablesBlockingObservableTest_$7_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$7, init)
}

RxObservablesBlockingObservableTest_$7 *create_RxObservablesBlockingObservableTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$7, init)
}

@implementation RxObservablesBlockingObservableTest_$8

- (void)callWithId:(RxObservablesBlockingObservable *)o {
  [((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk(o)) toIterable])) iterator])) next];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesBlockingObservable;", "(Lrx/observables/BlockingObservable<Ljava/lang/Void;>;)V", "LRxObservablesBlockingObservableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/BlockingObservable<Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$8 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$8;
}

@end

void RxObservablesBlockingObservableTest_$8_init(RxObservablesBlockingObservableTest_$8 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$8 *new_RxObservablesBlockingObservableTest_$8_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$8, init)
}

RxObservablesBlockingObservableTest_$8 *create_RxObservablesBlockingObservableTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$8, init)
}

@implementation RxObservablesBlockingObservableTest_$25

- (void)onStart {
  [self requestWithLong:2];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [super onNextWithId:t];
  [self unsubscribe];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObservablesBlockingObservableTest_$25 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxObservablesBlockingObservableTest;", "testSubscriberBackpressure", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$25 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$25;
}

@end

void RxObservablesBlockingObservableTest_$25_init(RxObservablesBlockingObservableTest_$25 *self) {
  RxObserversTestSubscriber_init(self);
}

RxObservablesBlockingObservableTest_$25 *new_RxObservablesBlockingObservableTest_$25_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$25, init)
}

RxObservablesBlockingObservableTest_$25 *create_RxObservablesBlockingObservableTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$25, init)
}

@implementation RxObservablesBlockingObservableTest_$26

- (void)callWithId:(JavaLangInteger *)t {
  *IOSBooleanArray_GetRef(nil_chk(val$valueReceived_), 0) = true;
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), t);
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$valueReceived_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$valueReceived_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "[Z", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback1", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$26 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$26;
}

@end

void RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(RxObservablesBlockingObservableTest_$26 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$valueReceived_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$26 *new_RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$26, initWithBooleanArray_, capture$0)
}

RxObservablesBlockingObservableTest_$26 *create_RxObservablesBlockingObservableTest_$26_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$26, initWithBooleanArray_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$27

- (void)callWithId:(id)t {
  OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Value emitted: ", t));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$27_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$27 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$27;
}

@end

void RxObservablesBlockingObservableTest_$27_init(RxObservablesBlockingObservableTest_$27 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$27 *new_RxObservablesBlockingObservableTest_$27_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$27, init)
}

RxObservablesBlockingObservableTest_$27 *create_RxObservablesBlockingObservableTest_$27_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$27, init)
}

@implementation RxObservablesBlockingObservableTest_$28

- (void)callWithId:(NSException *)t {
  *IOSBooleanArray_GetRef(nil_chk(val$received_), 0) = true;
  OrgJunitAssert_assertEqualsWithId_withId_(RxExceptionsTestException_class_(), [((NSException *) nil_chk(t)) java_getClass]);
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$received_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$received_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "[Z", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$28 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$28;
}

@end

void RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(RxObservablesBlockingObservableTest_$28 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$received_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$28 *new_RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$28, initWithBooleanArray_, capture$0)
}

RxObservablesBlockingObservableTest_$28 *create_RxObservablesBlockingObservableTest_$28_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$28, initWithBooleanArray_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$29

- (void)callWithId:(JavaLangInteger *)t {
  *IOSBooleanArray_GetRef(nil_chk(val$received_), 0) = true;
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), t);
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$received_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$received_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "[Z", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$29 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesBlockingObservableTest_$29;
}

@end

void RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(RxObservablesBlockingObservableTest_$29 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$received_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$29 *new_RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$29, initWithBooleanArray_, capture$0)
}

RxObservablesBlockingObservableTest_$29 *create_RxObservablesBlockingObservableTest_$29_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$29, initWithBooleanArray_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$30

- (void)callWithId:(NSException *)t {
  [((NSException *) nil_chk(t)) printStackTrace];
  OrgJunitAssert_failWithNSString_(@"Exception received!");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesBlockingObservableTest_$30_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$30 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesBlockingObservableTest_$30;
}

@end

void RxObservablesBlockingObservableTest_$30_init(RxObservablesBlockingObservableTest_$30 *self) {
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$30 *new_RxObservablesBlockingObservableTest_$30_init() {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$30, init)
}

RxObservablesBlockingObservableTest_$30 *create_RxObservablesBlockingObservableTest_$30_init() {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$30, init)
}

@implementation RxObservablesBlockingObservableTest_$31

- (void)call {
  *IOSBooleanArray_GetRef(nil_chk(val$received_), 1) = true;
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$received_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$received_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[Z", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$31 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObservablesBlockingObservableTest_$31;
}

@end

void RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(RxObservablesBlockingObservableTest_$31 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$received_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$31 *new_RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$31, initWithBooleanArray_, capture$0)
}

RxObservablesBlockingObservableTest_$31 *create_RxObservablesBlockingObservableTest_$31_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$31, initWithBooleanArray_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$32

- (void)callWithId:(id)t {
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) onNextWithId:t];
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Object;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3Error", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$32 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservablesBlockingObservableTest_$32;
}

@end

void RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$32 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$ts_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$32 *new_RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$32, initWithRxObserversTestSubscriber_, capture$0)
}

RxObservablesBlockingObservableTest_$32 *create_RxObservablesBlockingObservableTest_$32_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$32, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$33

- (void)callWithId:(NSException *)t {
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) onErrorWithNSException:t];
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Object;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3Error", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$33 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservablesBlockingObservableTest_$33;
}

@end

void RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$33 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$ts_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$33 *new_RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$33, initWithRxObserversTestSubscriber_, capture$0)
}

RxObservablesBlockingObservableTest_$33 *create_RxObservablesBlockingObservableTest_$33_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$33, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxObservablesBlockingObservableTest_$34

- (void)call {
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) onCompleted];
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Object;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;", "LRxObservablesBlockingObservableTest;", "testSubscribeCallback3Error" };
  static const J2ObjcClassInfo _RxObservablesBlockingObservableTest_$34 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxObservablesBlockingObservableTest_$34;
}

@end

void RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObservablesBlockingObservableTest_$34 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$ts_, capture$0);
  NSObject_init(self);
}

RxObservablesBlockingObservableTest_$34 *new_RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesBlockingObservableTest_$34, initWithRxObserversTestSubscriber_, capture$0)
}

RxObservablesBlockingObservableTest_$34 *create_RxObservablesBlockingObservableTest_$34_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesBlockingObservableTest_$34, initWithRxObserversTestSubscriber_, capture$0)
}
