//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSampleTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOperatorSampleTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorSampleTest () {
 @public
  RxSchedulersTestScheduler *scheduler_;
  RxScheduler_Worker *innerScheduler_;
  id<RxObserver> observer_;
  id<RxObserver> observer2_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest, scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest, innerScheduler_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest, observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest, observer2_, id<RxObserver>)

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$17();

@interface RxInternalOperatorsOperatorSampleTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorSampleTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer1;

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest:(RxInternalOperatorsOperatorSampleTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$1, this$0_, RxInternalOperatorsOperatorSampleTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest_$1 *self, RxInternalOperatorsOperatorSampleTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1 *new_RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1 *create_RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$);

@interface RxInternalOperatorsOperatorSampleTest_$1_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$observer1_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$1_$1, val$observer1_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$1 *new_RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$1 *create_RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$1_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$observer1_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$1_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$1_$2, val$observer1_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$2 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$2 *new_RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$2 *create_RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$1_$3 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$observer1_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$1_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$1_$3, val$observer1_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$3 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$3 *new_RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$1_$3 *create_RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorSampleTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer1;

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest:(RxInternalOperatorsOperatorSampleTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$2, this$0_, RxInternalOperatorsOperatorSampleTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest_$2 *self, RxInternalOperatorsOperatorSampleTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2 *new_RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2 *create_RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$);

@interface RxInternalOperatorsOperatorSampleTest_$2_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$observer1_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$2_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$2_$1, val$observer1_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$2_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2_$1 *new_RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2_$1 *create_RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$2_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubscriber *val$observer1_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$2_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$2_$2, val$observer1_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$2_$2 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2_$2 *new_RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$2_$2 *create_RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> val$s_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$3, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(RxInternalOperatorsOperatorSampleTest_$3 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$3 *new_RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$3 *create_RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  IOSLongArray *val$requested_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithLongArray:(IOSLongArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$4, val$requested_, IOSLongArray *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(RxInternalOperatorsOperatorSampleTest_$4 *self, IOSLongArray *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$4 *new_RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(IOSLongArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$4 *create_RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(IOSLongArray *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  IOSLongArray *val$requested_;
}

- (void)callWithId:(JavaLangLong *)t;

- (instancetype)initWithLongArray:(IOSLongArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$5, val$requested_, IOSLongArray *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(RxInternalOperatorsOperatorSampleTest_$5 *self, IOSLongArray *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$5 *new_RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(IOSLongArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$5 *create_RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(IOSLongArray *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$6 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$6_init(RxInternalOperatorsOperatorSampleTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$6 *new_RxInternalOperatorsOperatorSampleTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$6 *create_RxInternalOperatorsOperatorSampleTest_$6_init();

@interface RxInternalOperatorsOperatorSampleTest_$6_$1 : NSObject < RxProducer >

- (void)requestWithLong:(jlong)n;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$6_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$6_$1_init(RxInternalOperatorsOperatorSampleTest_$6_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$6_$1 *new_RxInternalOperatorsOperatorSampleTest_$6_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$6_$1 *create_RxInternalOperatorsOperatorSampleTest_$6_$1_init();

@interface RxInternalOperatorsOperatorSampleTest_$7 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$7, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorSampleTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$7 *new_RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$7 *create_RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$8 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$8, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$8 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$8 *new_RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$8 *create_RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$8_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorSampleTest_$8 *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest_$8:(RxInternalOperatorsOperatorSampleTest_$8 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$8_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$8_$1, this$0_, RxInternalOperatorsOperatorSampleTest_$8 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8_$1 *self, RxInternalOperatorsOperatorSampleTest_$8 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$8_$1 *new_RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$8_$1 *create_RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8 *outer$);

@interface RxInternalOperatorsOperatorSampleTest_$9 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$9, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$9 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$9 *new_RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$9 *create_RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$10 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$10, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$10 *new_RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$10 *create_RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorSampleTest_$10_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorSampleTest_$10 *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest_$10:(RxInternalOperatorsOperatorSampleTest_$10 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$10_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$10_$1, this$0_, RxInternalOperatorsOperatorSampleTest_$10 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10_$1 *self, RxInternalOperatorsOperatorSampleTest_$10 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$10_$1 *new_RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$10_$1 *create_RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10 *outer$);

@interface RxInternalOperatorsOperatorSampleTest_$11 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleTest_$11, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$11 *new_RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleTest_$11 *create_RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOperatorSampleTest

- (void)before {
  JreStrongAssignAndConsume(&scheduler_, new_RxSchedulersTestScheduler_init());
  JreStrongAssign(&innerScheduler_, [scheduler_ createWorker]);
  JreStrongAssign(&observer_, OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_()));
  JreStrongAssign(&observer2_, OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_()));
}

- (void)testSample {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(self));
  RxObservable *sampled = [((RxObservable *) nil_chk(source)) sampleWithLong:400LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(sampled)) subscribeWithRxObserver:observer_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:800LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangLong_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:1200LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:1600LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:2000LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:3000LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithTimeEmitAndTerminate {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(self));
  RxObservable *sampled = [((RxObservable *) nil_chk(source)) sampleWithLong:400LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(sampled)) subscribeWithRxObserver:observer_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:2000LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerNormal {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onCompleted];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerNoDuplicates {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onCompleted];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerTerminatingEarly {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [sampler onCompleted];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerEmitAndTerminate {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onCompleted];
  [sampler onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [sampler onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerEmptySource {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onCompleted];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2_, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)sampleWithSamplerSourceThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Forced failure!")];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2_, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
}

- (void)sampleWithSamplerThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer2_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [sampler onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Forced failure!")];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer2_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer2_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testSampleUnsubscribe {
  id<RxSubscription> s = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(s));
  [((id<RxSubscription>) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) throttleLastWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribe])) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(s))) unsubscribe];
}

- (void)testSampleOtherUnboundedIn {
  IOSLongArray *requested = [IOSLongArray arrayWithLongs:(jlong[]){ -1 } count:1];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(RxSubjectsPublishSubject_create())) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(requested)])) sampleWithRxObservable:RxSubjectsPublishSubject_create()])) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JavaLangLong_MAX_VALUE, IOSLongArray_Get(requested, 0));
}

- (void)testSampleTimedUnboundedIn {
  IOSLongArray *requested = [IOSLongArray arrayWithLongs:(jlong[]){ -1 } count:1];
  [((id<RxSubscription>) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(RxSubjectsPublishSubject_create())) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(requested)])) sampleWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribe])) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JavaLangLong_MAX_VALUE, IOSLongArray_Get(requested, 0));
}

- (void)dontUnsubscribeChild1 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler])) unsafeSubscribeWithRxSubscriber:ts];
  [source onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Sampler has subscribers?", [((RxSubjectsPublishSubject *) nil_chk(sampler)) hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TS unsubscribed?", [ts isUnsubscribed]);
}

- (void)dontUnsubscribeChild2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) sampleWithRxObservable:sampler])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onCompleted];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source has subscribers?", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Sampler has subscribers?", [sampler hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TS unsubscribed?", [ts isUnsubscribed]);
}

- (void)neverSetProducer {
  RxObservable *neverBackpressure = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$6_init());
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(neverBackpressure)) sampleWithRxObservable:neverBackpressure])) unsafeSubscribeWithRxSubscriber:create_RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [count get]);
}

- (void)unsubscribeMainAfterCompleted {
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribed));
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribed);
  RxSubjectsPublishSubject *sampler = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) sampleWithRxObservable:sampler])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxSubjectsPublishSubject *) nil_chk(sampler)) onCompleted];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)unsubscribeSamplerAfterCompleted {
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribed));
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribed);
  RxSubjectsPublishSubject *sampled = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(sampled)) sampleWithRxObservable:source])) unsafeSubscribeWithRxSubscriber:ts];
  [sampled onCompleted];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSampleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(innerScheduler_);
  RELEASE_(observer_);
  RELEASE_(observer2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testSample);
  methods[2].selector = @selector(sampleWithTimeEmitAndTerminate);
  methods[3].selector = @selector(sampleWithSamplerNormal);
  methods[4].selector = @selector(sampleWithSamplerNoDuplicates);
  methods[5].selector = @selector(sampleWithSamplerTerminatingEarly);
  methods[6].selector = @selector(sampleWithSamplerEmitAndTerminate);
  methods[7].selector = @selector(sampleWithSamplerEmptySource);
  methods[8].selector = @selector(sampleWithSamplerSourceThrows);
  methods[9].selector = @selector(sampleWithSamplerThrows);
  methods[10].selector = @selector(testSampleUnsubscribe);
  methods[11].selector = @selector(testSampleOtherUnboundedIn);
  methods[12].selector = @selector(testSampleTimedUnboundedIn);
  methods[13].selector = @selector(dontUnsubscribeChild1);
  methods[14].selector = @selector(dontUnsubscribeChild2);
  methods[15].selector = @selector(neverSetProducer);
  methods[16].selector = @selector(unsubscribeMainAfterCompleted);
  methods[17].selector = @selector(unsubscribeSamplerAfterCompleted);
  methods[18].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "observer2_", "LRxObserver;", .constantValue.asLong = 0, 0x2, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$4, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$5, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$6, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$7, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$8, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$9, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$10, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$11, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$12, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$13, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$14, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$15, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$16, (void *)&RxInternalOperatorsOperatorSampleTest__Annotations$17, "Lrx/Observer<Ljava/lang/Long;>;", "Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest = { "OperatorSampleTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 19, 4, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest;
}

@end

void RxInternalOperatorsOperatorSampleTest_init(RxInternalOperatorsOperatorSampleTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest *new_RxInternalOperatorsOperatorSampleTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest, init)
}

RxInternalOperatorsOperatorSampleTest *create_RxInternalOperatorsOperatorSampleTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSampleTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleTest)

@implementation RxInternalOperatorsOperatorSampleTest_$1

- (void)callWithId:(RxSubscriber *)observer1 {
  [((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(observer1) withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(observer1) withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(observer1) withLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
}

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest:(RxInternalOperatorsOperatorSampleTest *)outer$ {
  RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSampleTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSampleTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorSampleTest;", "testSample", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest_$1 *self, RxInternalOperatorsOperatorSampleTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$1 *new_RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$1, initWithRxInternalOperatorsOperatorSampleTest_, outer$)
}

RxInternalOperatorsOperatorSampleTest_$1 *create_RxInternalOperatorsOperatorSampleTest_$1_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$1, initWithRxInternalOperatorsOperatorSampleTest_, outer$)
}

@implementation RxInternalOperatorsOperatorSampleTest_$1_$1

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer1_)) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer1_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorSampleTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$1_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$1_$1 *new_RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$1_$1 *create_RxInternalOperatorsOperatorSampleTest_$1_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$1_$2

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer1_)) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer1_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorSampleTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$1_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$1_$2;
}

@end

void RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$2 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$1_$2 *new_RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$2, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$1_$2 *create_RxInternalOperatorsOperatorSampleTest_$1_$2_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$2, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$1_$3

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer1_)) onCompleted];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer1_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorSampleTest_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$1_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$1_$3;
}

@end

void RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$1_$3 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$1_$3 *new_RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$3, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$1_$3 *create_RxInternalOperatorsOperatorSampleTest_$1_$3_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$1_$3, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$2

- (void)callWithId:(RxSubscriber *)observer1 {
  [((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(observer1) withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((RxScheduler_Worker *) nil_chk(this$0_->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(observer1) withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
}

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest:(RxInternalOperatorsOperatorSampleTest *)outer$ {
  RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSampleTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSampleTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorSampleTest;", "sampleWithTimeEmitAndTerminate", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$2;
}

@end

void RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest_$2 *self, RxInternalOperatorsOperatorSampleTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$2 *new_RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$2, initWithRxInternalOperatorsOperatorSampleTest_, outer$)
}

RxInternalOperatorsOperatorSampleTest_$2 *create_RxInternalOperatorsOperatorSampleTest_$2_initWithRxInternalOperatorsOperatorSampleTest_(RxInternalOperatorsOperatorSampleTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$2, initWithRxInternalOperatorsOperatorSampleTest_, outer$)
}

@implementation RxInternalOperatorsOperatorSampleTest_$2_$1

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer1_)) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer1_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorSampleTest_$2;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$2_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$2_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$2_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$2_$1 *new_RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$2_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$2_$1 *create_RxInternalOperatorsOperatorSampleTest_$2_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$2_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$2_$2

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer1_)) onNextWithId:JavaLangLong_valueOfWithLong_(2LL)];
  [val$observer1_ onCompleted];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer1_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorSampleTest_$2;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$2_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$2_$2;
}

@end

void RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleTest_$2_$2 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$observer1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$2_$2 *new_RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$2_$2, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$2_$2 *create_RxInternalOperatorsOperatorSampleTest_$2_$2_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$2_$2, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$3

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:val$s_];
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxSubscription;", "LRxInternalOperatorsOperatorSampleTest;", "testSampleUnsubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$3;
}

@end

void RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(RxInternalOperatorsOperatorSampleTest_$3 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$3 *new_RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$3, initWithRxSubscription_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$3 *create_RxInternalOperatorsOperatorSampleTest_$3_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$3, initWithRxSubscription_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$4

- (void)callWithId:(JavaLangLong *)t {
  *IOSLongArray_GetRef(nil_chk(val$requested_), 0) = [((JavaLangLong *) nil_chk(t)) longLongValue];
}

- (instancetype)initWithLongArray:(IOSLongArray *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "[J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "[J", "LRxInternalOperatorsOperatorSampleTest;", "testSampleOtherUnboundedIn", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$4;
}

@end

void RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(RxInternalOperatorsOperatorSampleTest_$4 *self, IOSLongArray *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$4 *new_RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(IOSLongArray *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$4, initWithLongArray_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$4 *create_RxInternalOperatorsOperatorSampleTest_$4_initWithLongArray_(IOSLongArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$4, initWithLongArray_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$5

- (void)callWithId:(JavaLangLong *)t {
  *IOSLongArray_GetRef(nil_chk(val$requested_), 0) = [((JavaLangLong *) nil_chk(t)) longLongValue];
}

- (instancetype)initWithLongArray:(IOSLongArray *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "[J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "[J", "LRxInternalOperatorsOperatorSampleTest;", "testSampleTimedUnboundedIn", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$5;
}

@end

void RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(RxInternalOperatorsOperatorSampleTest_$5 *self, IOSLongArray *capture$0) {
  JreStrongAssign(&self->val$requested_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$5 *new_RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(IOSLongArray *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$5, initWithLongArray_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$5 *create_RxInternalOperatorsOperatorSampleTest_$5_initWithLongArray_(IOSLongArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$5, initWithLongArray_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$6

- (void)callWithId:(RxSubscriber *)t {
  [((RxSubscriber *) nil_chk(t)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorSampleTest_$6_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSampleTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorSampleTest;", "neverSetProducer", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$6;
}

@end

void RxInternalOperatorsOperatorSampleTest_$6_init(RxInternalOperatorsOperatorSampleTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$6 *new_RxInternalOperatorsOperatorSampleTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$6, init)
}

RxInternalOperatorsOperatorSampleTest_$6 *create_RxInternalOperatorsOperatorSampleTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$6, init)
}

@implementation RxInternalOperatorsOperatorSampleTest_$6_$1

- (void)requestWithLong:(jlong)n {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSampleTest_$6_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorSampleTest_$6;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$6_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$6_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$6_$1_init(RxInternalOperatorsOperatorSampleTest_$6_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$6_$1 *new_RxInternalOperatorsOperatorSampleTest_$6_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$6_$1, init)
}

RxInternalOperatorsOperatorSampleTest_$6_$1 *create_RxInternalOperatorsOperatorSampleTest_$6_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$6_$1, init)
}

@implementation RxInternalOperatorsOperatorSampleTest_$7

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorSampleTest_$7 class]);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(setProducerWithRxProducer:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "setProducer", "LRxProducer;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorSampleTest;", "neverSetProducer", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 1, 7, -1, 8, 9, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$7;
}

@end

void RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorSampleTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorSampleTest_$7 *new_RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$7 *create_RxInternalOperatorsOperatorSampleTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$8

- (void)callWithId:(RxSubscriber *)t {
  [((RxSubscriber *) nil_chk(t)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(self))];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSampleTest;", "unsubscribeMainAfterCompleted", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$8;
}

@end

void RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$8 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$8 *new_RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$8, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$8 *create_RxInternalOperatorsOperatorSampleTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$8, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$8_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest_$8:(RxInternalOperatorsOperatorSampleTest_$8 *)outer$ {
  RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSampleTest_$8:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSampleTest_$8;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSampleTest_$8;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$8_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$8_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8_$1 *self, RxInternalOperatorsOperatorSampleTest_$8 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$8_$1 *new_RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$8_$1, initWithRxInternalOperatorsOperatorSampleTest_$8_, outer$)
}

RxInternalOperatorsOperatorSampleTest_$8_$1 *create_RxInternalOperatorsOperatorSampleTest_$8_$1_initWithRxInternalOperatorsOperatorSampleTest_$8_(RxInternalOperatorsOperatorSampleTest_$8 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$8_$1, initWithRxInternalOperatorsOperatorSampleTest_$8_, outer$)
}

@implementation RxInternalOperatorsOperatorSampleTest_$9

- (void)onCompleted {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribed_)) get]) {
    [self onErrorWithNSException:create_JavaLangIllegalStateException_initWithNSString_(@"Resource unsubscribed!")];
  }
  else {
    [super onCompleted];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorSampleTest_$9 class]);
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSampleTest;", "unsubscribeMainAfterCompleted", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$9;
}

@end

void RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$9 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsubscribed_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorSampleTest_$9 *new_RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$9, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$9 *create_RxInternalOperatorsOperatorSampleTest_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$9, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$10

- (void)callWithId:(RxSubscriber *)t {
  [((RxSubscriber *) nil_chk(t)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(self))];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSampleTest;", "unsubscribeSamplerAfterCompleted", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$10;
}

@end

void RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$10 *new_RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$10 *create_RxInternalOperatorsOperatorSampleTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorSampleTest_$10_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithRxInternalOperatorsOperatorSampleTest_$10:(RxInternalOperatorsOperatorSampleTest_$10 *)outer$ {
  RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorSampleTest_$10:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSampleTest_$10;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSampleTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$10_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$10_$1;
}

@end

void RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10_$1 *self, RxInternalOperatorsOperatorSampleTest_$10 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSampleTest_$10_$1 *new_RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$10_$1, initWithRxInternalOperatorsOperatorSampleTest_$10_, outer$)
}

RxInternalOperatorsOperatorSampleTest_$10_$1 *create_RxInternalOperatorsOperatorSampleTest_$10_$1_initWithRxInternalOperatorsOperatorSampleTest_$10_(RxInternalOperatorsOperatorSampleTest_$10 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$10_$1, initWithRxInternalOperatorsOperatorSampleTest_$10_, outer$)
}

@implementation RxInternalOperatorsOperatorSampleTest_$11

- (void)onCompleted {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribed_)) get]) {
    [self onErrorWithNSException:create_JavaLangIllegalStateException_initWithNSString_(@"Resource unsubscribed!")];
  }
  else {
    [super onCompleted];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorSampleTest_$11 class]);
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSampleTest;", "unsubscribeSamplerAfterCompleted", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorSampleTest_$11;
}

@end

void RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSampleTest_$11 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsubscribed_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorSampleTest_$11 *new_RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSampleTest_$11 *create_RxInternalOperatorsOperatorSampleTest_$11_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleTest_$11, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
