//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/test/TestObstructionDetection.java
//

#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxTestTestObstructionDetection.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxTestTestObstructionDetection ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxTestTestObstructionDetection_init(RxTestTestObstructionDetection *self);

__attribute__((unused)) static RxTestTestObstructionDetection *new_RxTestTestObstructionDetection_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxTestTestObstructionDetection *create_RxTestTestObstructionDetection_init();

inline jlong RxTestTestObstructionDetection_ObstructionException_get_serialVersionUID();
#define RxTestTestObstructionDetection_ObstructionException_serialVersionUID -6380717994471291795LL
J2OBJC_STATIC_FIELD_CONSTANT(RxTestTestObstructionDetection_ObstructionException, serialVersionUID, jlong)

@interface RxTestTestObstructionDetection_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxTestTestObstructionDetection_$1)

J2OBJC_FIELD_SETTER(RxTestTestObstructionDetection_$1, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(RxTestTestObstructionDetection_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxTestTestObstructionDetection_$1 *new_RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxTestTestObstructionDetection_$1 *create_RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@implementation RxTestTestObstructionDetection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxTestTestObstructionDetection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkObstruction {
  RxTestTestObstructionDetection_checkObstruction();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkObstruction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxTestTestObstructionDetection_ObstructionException;" };
  static const J2ObjcClassInfo _RxTestTestObstructionDetection = { "TestObstructionDetection", "rx.test", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 0, -1, -1, -1 };
  return &_RxTestTestObstructionDetection;
}

@end

void RxTestTestObstructionDetection_init(RxTestTestObstructionDetection *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxTestTestObstructionDetection *new_RxTestTestObstructionDetection_init() {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetection, init)
}

RxTestTestObstructionDetection *create_RxTestTestObstructionDetection_init() {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetection, init)
}

void RxTestTestObstructionDetection_checkObstruction() {
  RxTestTestObstructionDetection_initialize();
  jint ncpu = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(ncpu);
  id<JavaUtilList> workers = create_JavaUtilArrayList_init();
  id<RxFunctionsAction0> task = create_RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(cdl);
  for (jint i = 0; i < ncpu; i++) {
    [workers addWithId:[((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker]];
  }
  for (RxScheduler_Worker * __strong w in workers) {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:task];
  }
  @try {
    if (![cdl awaitWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      @throw create_RxTestTestObstructionDetection_ObstructionException_initWithNSString_(@"Obstruction/Timeout detected!");
    }
  }
  @catch (JavaLangInterruptedException *ex) {
    @throw create_RxTestTestObstructionDetection_ObstructionException_initWithNSString_(JreStrcat("$@", @"Interrupted: ", ex));
  }
  @finally {
    for (RxScheduler_Worker * __strong w in workers) {
      [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxTestTestObstructionDetection)

@implementation RxTestTestObstructionDetection_ObstructionException

- (instancetype)initWithNSString:(NSString *)message {
  RxTestTestObstructionDetection_ObstructionException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxTestTestObstructionDetection_ObstructionException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LRxTestTestObstructionDetection;" };
  static const J2ObjcClassInfo _RxTestTestObstructionDetection_ObstructionException = { "ObstructionException", "rx.test", ptrTable, methods, fields, 7, 0x19, 1, 1, 1, -1, -1, -1, -1 };
  return &_RxTestTestObstructionDetection_ObstructionException;
}

@end

void RxTestTestObstructionDetection_ObstructionException_initWithNSString_(RxTestTestObstructionDetection_ObstructionException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

RxTestTestObstructionDetection_ObstructionException *new_RxTestTestObstructionDetection_ObstructionException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetection_ObstructionException, initWithNSString_, message)
}

RxTestTestObstructionDetection_ObstructionException *create_RxTestTestObstructionDetection_ObstructionException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetection_ObstructionException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxTestTestObstructionDetection_ObstructionException)

@implementation RxTestTestObstructionDetection_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxTestTestObstructionDetection;", "checkObstruction" };
  static const J2ObjcClassInfo _RxTestTestObstructionDetection_$1 = { "", "rx.test", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxTestTestObstructionDetection_$1;
}

@end

void RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(RxTestTestObstructionDetection_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$cdl_, capture$0);
  NSObject_init(self);
}

RxTestTestObstructionDetection_$1 *new_RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetection_$1, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxTestTestObstructionDetection_$1 *create_RxTestTestObstructionDetection_$1_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetection_$1, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}
