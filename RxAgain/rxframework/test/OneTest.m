//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/OneTest.java
//

#include "CoTouchlabDoppelTestingDopplJunitTestRunner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OneTest.h"
#include "RxBackpressureTests.h"
#include "RxCombineLatestTests.h"
#include "RxCompletableTest.h"
#include "RxConcatTests.h"
#include "RxCovarianceTest.h"
#include "RxErrorHandlingTests.h"
#include "RxEventStreamTest.h"
#include "RxExceptionsCompositeExceptionTest.h"
#include "RxExceptionsExceptionsNullTest.h"
#include "RxExceptionsOnNextValueTest.h"
#include "RxFunctionsActionsTest.h"
#include "RxFunctionsFunctionsTest.h"
#include "RxGroupByTests.h"
#include "RxInternalOperatorsBackpressureUtilsTest.h"
#include "RxInternalOperatorsBlockingOperatorLatestTest.h"
#include "RxInternalOperatorsBlockingOperatorMostRecentTest.h"
#include "RxInternalOperatorsBlockingOperatorNextTest.h"
#include "RxInternalOperatorsBlockingOperatorToFutureTest.h"
#include "RxInternalOperatorsBlockingOperatorToIteratorTest.h"
#include "RxInternalOperatorsCachedObservableTest.h"
#include "RxInternalOperatorsCompletableFromEmitterTest.h"
#include "RxInternalOperatorsDeferredScalarSubscriberTest.h"
#include "RxInternalOperatorsInternalSafeSubscriberTest.h"
#include "RxInternalOperatorsNotificationLiteTest.h"
#include "RxInternalOperatorsOnSubscribeAmbTest.h"
#include "RxInternalOperatorsOnSubscribeCollectTest.h"
#include "RxInternalOperatorsOnSubscribeCombineLatestTest.h"
#include "RxInternalOperatorsOnSubscribeCompletableTest.h"
#include "RxInternalOperatorsOnSubscribeConcatDelayErrorTest.h"
#include "RxInternalOperatorsOnSubscribeDeferTest.h"
#include "RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest.h"
#include "RxInternalOperatorsOnSubscribeDetachTest.h"
#include "RxInternalOperatorsOnSubscribeDoOnEachTest.h"
#include "RxInternalOperatorsOnSubscribeFilterTest.h"
#include "RxInternalOperatorsOnSubscribeFlattenIterableTest.h"
#include "RxInternalOperatorsOnSubscribeFromArrayTest.h"
#include "RxInternalOperatorsOnSubscribeFromAsyncEmitterTest.h"
#include "RxInternalOperatorsOnSubscribeFromCallableTest.h"
#include "RxInternalOperatorsOnSubscribeFromEmitterTest.h"
#include "RxInternalOperatorsOnSubscribeFromIterableTest.h"
#include "RxInternalOperatorsOnSubscribeGroupJoinTest.h"
#include "RxInternalOperatorsOnSubscribeJoinTest.h"
#include "RxInternalOperatorsOnSubscribeMapTest.h"
#include "RxInternalOperatorsOnSubscribeRangeTest.h"
#include "RxInternalOperatorsOnSubscribeReduceTest.h"
#include "RxInternalOperatorsOnSubscribeRefCountTest.h"
#include "RxInternalOperatorsOnSubscribeSingleTest.h"
#include "RxInternalOperatorsOnSubscribeTimerTest.h"
#include "RxInternalOperatorsOnSubscribeToMapTest.h"
#include "RxInternalOperatorsOnSubscribeToMultimapTest.h"
#include "RxInternalOperatorsOnSubscribeToObservableFutureTest.h"
#include "RxInternalOperatorsOnSubscribeUsingTest.h"
#include "RxInternalOperatorsOperatorAllTest.h"
#include "RxInternalOperatorsOperatorAnyTest.h"
#include "RxInternalOperatorsOperatorAsObservableTest.h"
#include "RxInternalOperatorsOperatorBufferTest.h"
#include "RxInternalOperatorsOperatorCastTest.h"
#include "RxInternalOperatorsOperatorConcatTest.h"
#include "RxInternalOperatorsOperatorCountTest.h"
#include "RxInternalOperatorsOperatorDebounceTest.h"
#include "RxInternalOperatorsOperatorDefaultIfEmptyTest.h"
#include "RxInternalOperatorsOperatorDelayTest.h"
#include "RxInternalOperatorsOperatorDematerializeTest.h"
#include "RxInternalOperatorsOperatorDistinctTest.h"
#include "RxInternalOperatorsOperatorDistinctUntilChangedTest.h"
#include "RxInternalOperatorsOperatorDoAfterTerminateTest.h"
#include "RxInternalOperatorsOperatorDoOnRequestTest.h"
#include "RxInternalOperatorsOperatorDoOnSubscribeTest.h"
#include "RxInternalOperatorsOperatorDoOnUnsubscribeTest.h"
#include "RxInternalOperatorsOperatorEagerConcatMapTest.h"
#include "RxInternalOperatorsOperatorElementAtTest.h"
#include "RxInternalOperatorsOperatorFirstTest.h"
#include "RxInternalOperatorsOperatorFlatMapTest.h"
#include "RxInternalOperatorsOperatorGroupByTest.h"
#include "RxInternalOperatorsOperatorIgnoreElementsTest.h"
#include "RxInternalOperatorsOperatorLastTest.h"
#include "RxInternalOperatorsOperatorMapNotificationTest.h"
#include "RxInternalOperatorsOperatorMapPairTest.h"
#include "RxInternalOperatorsOperatorMaterializeTest.h"
#include "RxInternalOperatorsOperatorMergeDelayErrorTest.h"
#include "RxInternalOperatorsOperatorMergeMaxConcurrentTest.h"
#include "RxInternalOperatorsOperatorMergeTest.h"
#include "RxInternalOperatorsOperatorMulticastTest.h"
#include "RxInternalOperatorsOperatorObserveOnTest.h"
#include "RxInternalOperatorsOperatorOnBackpressureBufferTest.h"
#include "RxInternalOperatorsOperatorOnBackpressureDropTest.h"
#include "RxInternalOperatorsOperatorOnBackpressureLatestTest.h"
#include "RxInternalOperatorsOperatorOnErrorResumeNextViaFunctionTest.h"
#include "RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest.h"
#include "RxInternalOperatorsOperatorOnErrorReturnTest.h"
#include "RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest.h"
#include "RxInternalOperatorsOperatorPublishFunctionTest.h"
#include "RxInternalOperatorsOperatorPublishTest.h"
#include "RxInternalOperatorsOperatorRepeatTest.h"
#include "RxInternalOperatorsOperatorReplayTest.h"
#include "RxInternalOperatorsOperatorRetryTest.h"
#include "RxInternalOperatorsOperatorRetryWithPredicateTest.h"
#include "RxInternalOperatorsOperatorSampleTest.h"
#include "RxInternalOperatorsOperatorScanTest.h"
#include "RxInternalOperatorsOperatorSequenceEqualTest.h"
#include "RxInternalOperatorsOperatorSerializeTest.h"
#include "RxInternalOperatorsOperatorSingleTest.h"
#include "RxInternalOperatorsOperatorSkipLastTest.h"
#include "RxInternalOperatorsOperatorSkipLastTimedTest.h"
#include "RxInternalOperatorsOperatorSkipTest.h"
#include "RxInternalOperatorsOperatorSkipTimedTest.h"
#include "RxInternalOperatorsOperatorSkipUntilTest.h"
#include "RxInternalOperatorsOperatorSkipWhileTest.h"
#include "RxInternalOperatorsOperatorSubscribeOnTest.h"
#include "RxInternalOperatorsOperatorSwitchIfEmptyTest.h"
#include "RxInternalOperatorsOperatorSwitchTest.h"
#include "RxInternalOperatorsOperatorTakeLastOneTest.h"
#include "RxInternalOperatorsOperatorTakeLastTest.h"
#include "RxInternalOperatorsOperatorTakeLastTimedTest.h"
#include "RxInternalOperatorsOperatorTakeTest.h"
#include "RxInternalOperatorsOperatorTakeTimedTest.h"
#include "RxInternalOperatorsOperatorTakeUntilPredicateTest.h"
#include "RxInternalOperatorsOperatorTakeUntilTest.h"
#include "RxInternalOperatorsOperatorTakeWhileTest.h"
#include "RxInternalOperatorsOperatorThrottleFirstTest.h"
#include "RxInternalOperatorsOperatorTimeIntervalTest.h"
#include "RxInternalOperatorsOperatorTimeoutTests.h"
#include "RxInternalOperatorsOperatorTimeoutWithSelectorTest.h"
#include "RxInternalOperatorsOperatorTimestampTest.h"
#include "RxInternalOperatorsOperatorToObservableListTest.h"
#include "RxInternalOperatorsOperatorToObservableSortedListTest.h"
#include "RxInternalOperatorsOperatorUnsubscribeOnTest.h"
#include "RxInternalOperatorsOperatorWindowWithObservableTest.h"
#include "RxInternalOperatorsOperatorWindowWithSizeTest.h"
#include "RxInternalOperatorsOperatorWindowWithStartEndObservableTest.h"
#include "RxInternalOperatorsOperatorWindowWithTimeTest.h"
#include "RxInternalOperatorsOperatorWithLatestFromTest.h"
#include "RxInternalOperatorsOperatorZipCompletionTest.h"
#include "RxInternalOperatorsOperatorZipIterableTest.h"
#include "RxInternalOperatorsOperatorZipTest.h"
#include "RxInternalOperatorsSingleDoAfterTerminateTest.h"
#include "RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOtherTest.h"
#include "RxInternalOperatorsSingleOnSubscribeUsingTest.h"
#include "RxInternalOperatorsSingleOperatorZipTest.h"
#include "RxInternalProducersProducerArbiterTest.h"
#include "RxInternalProducersProducerObserverArbiterTest.h"
#include "RxInternalProducersProducersTest.h"
#include "RxInternalProducersSingleDelayedProducerTest.h"
#include "RxInternalProducersSingleProducerTest.h"
#include "RxInternalSchedulersExecutorSchedulerTest.h"
#include "RxInternalSchedulersInternalGenericScheduledExecutorServiceTest.h"
#include "RxInternalSchedulersNewThreadWorkerTest.h"
#include "RxInternalUtilBlockingUtilsTest.h"
#include "RxInternalUtilExceptionUtilsTest.h"
#include "RxInternalUtilIndexedRingBufferTest.h"
#include "RxInternalUtilJCToolsQueueTests.h"
#include "RxInternalUtilLinkedArrayListTest.h"
#include "RxInternalUtilOpenHashSetTest.h"
#include "RxInternalUtilPlatformDependentTest.h"
#include "RxInternalUtilRxRingBufferSpmcTest.h"
#include "RxInternalUtilRxRingBufferSpscTest.h"
#include "RxInternalUtilRxRingBufferWithoutUnsafeTest.h"
#include "RxInternalUtilScalarSynchronousObservableTest.h"
#include "RxInternalUtilScalarSynchronousSingleTest.h"
#include "RxInternalUtilSubscriptionListTest.h"
#include "RxInternalUtilSynchronizedQueueTest.h"
#include "RxInternalUtilUnsafePow2Test.h"
#include "RxInternalUtilUnsafeUnsafeAccessTest.h"
#include "RxInternalUtilUtilityFunctionsTest.h"
#include "RxMergeTests.h"
#include "RxNotificationTest.h"
#include "RxObservableDoOnTest.h"
#include "RxObservableTests.h"
#include "RxObservableWindowTests.h"
#include "RxObservablesAsyncOnSubscribeTest.h"
#include "RxObservablesBlockingObservableTest.h"
#include "RxObservablesConnectableObservableTest.h"
#include "RxObservablesSyncOnSubscribeTest.h"
#include "RxObserversAsyncCompletableSubscriberTest.h"
#include "RxObserversCompletableSubscriberTest.h"
#include "RxObserversObserversTest.h"
#include "RxObserversSafeObserverTest.h"
#include "RxObserversSafeSubscriberTest.h"
#include "RxObserversSerializedObserverTest.h"
#include "RxObserversSubscribersTest.h"
#include "RxObserversTestObserverTest.h"
#include "RxObserversTestSubscriberTest.h"
#include "RxPluginsRxJavaPluginsTest.h"
#include "RxPluginsRxJavaSchedulersHookTest.h"
#include "RxReduceTests.h"
#include "RxScanTests.h"
#include "RxSchedulerWorkerTest.h"
#include "RxSchedulersComputationSchedulerTests.h"
#include "RxSchedulersDeprecatedSchedulersTest.h"
#include "RxSchedulersGenericScheduledExecutorServiceTest.h"
#include "RxSchedulersImmediateSchedulerTest.h"
#include "RxSchedulersIoSchedulerTest.h"
#include "RxSchedulersNewThreadSchedulerTest.h"
#include "RxSchedulersResetSchedulersTest.h"
#include "RxSchedulersSchedulerLifecycleTest.h"
#include "RxSchedulersSchedulerWhenTest.h"
#include "RxSchedulersTestSchedulerTest.h"
#include "RxSchedulersTimeXTest.h"
#include "RxSchedulersTrampolineSchedulerTest.h"
#include "RxSingleTest.h"
#include "RxSinglesBlockingSingleTest.h"
#include "RxStartWithTests.h"
#include "RxSubjectsAsyncSubjectTest.h"
#include "RxSubjectsBehaviorSubjectTest.h"
#include "RxSubjectsBufferUntilSubscriberTest.h"
#include "RxSubjectsPublishSubjectTest.h"
#include "RxSubjectsReplaySubjectBoundedConcurrencyTest.h"
#include "RxSubjectsReplaySubjectConcurrencyTest.h"
#include "RxSubjectsReplaySubjectTest.h"
#include "RxSubjectsSerializedSubjectTest.h"
#include "RxSubjectsTestSubjectTest.h"
#include "RxSubscriberTest.h"
#include "RxSubscriptionsCompositeSubscriptionTest.h"
#include "RxSubscriptionsMultipleAssignmentSubscriptionTest.h"
#include "RxSubscriptionsRefCountSubscriptionTest.h"
#include "RxSubscriptionsSerialSubscriptionTests.h"
#include "RxSubscriptionsSubscriptionsTest.h"
#include "RxTestTestObstructionDetectionTest.h"
#include "RxThrottleLastTests.h"
#include "RxThrottleWithTimeoutTests.h"
#include "RxUtilAssertObservableTest.h"
#include "RxZipTests.h"
#include "java/io/BufferedReader.h"
#include "java/io/PrintStream.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/RunListener.h"

#import <mach/mach.h>

@interface OneTest ()

+ (void)loadClassesWithJavaUtilList:(id<JavaUtilList>)allClassnames
                  withIOSClassArray:(IOSObjectArray *)batch0;

+ (void)runDoppl;

+ (void)runWithNSStringArray:(IOSObjectArray *)classNames;

+ (jlong)printMem;

+ (IOSObjectArray *)loadClassListWithNSString:(NSString *)fileData;

@end

__attribute__((unused)) static void OneTest_loadClassesWithJavaUtilList_withIOSClassArray_(id<JavaUtilList> allClassnames, IOSObjectArray *batch0);

__attribute__((unused)) static void OneTest_runDoppl();

__attribute__((unused)) static void OneTest_runWithNSStringArray_(IOSObjectArray *classNames);

__attribute__((unused)) static jlong OneTest_printMem();

__attribute__((unused)) static IOSObjectArray *OneTest_loadClassListWithNSString_(NSString *fileData);

@interface OneTest_$1 : JavaLangThread

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OneTest_$1)

__attribute__((unused)) static void OneTest_$1_init(OneTest_$1 *self);

__attribute__((unused)) static OneTest_$1 *new_OneTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OneTest_$1 *create_OneTest_$1_init();

J2OBJC_INITIALIZED_DEFN(OneTest)

IOSObjectArray *OneTest_alltests;
IOSObjectArray *OneTest_bigmem;
IOSObjectArray *OneTest_failing;

@implementation OneTest

+ (id<JavaUtilList>)allTestClassnames {
  return OneTest_allTestClassnames();
}

+ (void)loadClassesWithJavaUtilList:(id<JavaUtilList>)allClassnames
                  withIOSClassArray:(IOSObjectArray *)batch0 {
  OneTest_loadClassesWithJavaUtilList_withIOSClassArray_(allClassnames, batch0);
}

+ (void)runTests {
  OneTest_runTests();
}

+ (void)runDoppl {
  OneTest_runDoppl();
}

+ (void)runTestsWithNSString:(NSString *)a {
  OneTest_runTestsWithNSString_(a);
}

+ (void)runTestsWithNSString:(NSString *)a
                withNSString:(NSString *)b {
  OneTest_runTestsWithNSString_withNSString_(a, b);
}

+ (void)runTestsWithNSString:(NSString *)a
                withNSString:(NSString *)b
                withNSString:(NSString *)c {
  OneTest_runTestsWithNSString_withNSString_withNSString_(a, b, c);
}

+ (void)runTestsWithNSString:(NSString *)a
                withNSString:(NSString *)b
                withNSString:(NSString *)c
                withNSString:(NSString *)d {
  OneTest_runTestsWithNSString_withNSString_withNSString_withNSString_(a, b, c, d);
}

+ (void)runWithNSStringArray:(IOSObjectArray *)classNames {
  OneTest_runWithNSStringArray_(classNames);
}

+ (jlong)printMem {
  return OneTest_printMem();
}

+ (IOSObjectArray *)loadClassListWithNSString:(NSString *)fileData {
  return OneTest_loadClassListWithNSString_(fileData);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0xa, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8a, 9, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0xa, 11, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(allTestClassnames);
  methods[1].selector = @selector(loadClassesWithJavaUtilList:withIOSClassArray:);
  methods[2].selector = @selector(runTests);
  methods[3].selector = @selector(runDoppl);
  methods[4].selector = @selector(runTestsWithNSString:);
  methods[5].selector = @selector(runTestsWithNSString:withNSString:);
  methods[6].selector = @selector(runTestsWithNSString:withNSString:withNSString:);
  methods[7].selector = @selector(runTestsWithNSString:withNSString:withNSString:withNSString:);
  methods[8].selector = @selector(runWithNSStringArray:);
  methods[9].selector = @selector(printMem);
  methods[10].selector = @selector(loadClassListWithNSString:);
  methods[11].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "alltests", "[LIOSClass;", .constantValue.asLong = 0, 0x9, -1, 12, -1, -1 },
    { "bigmem", "[LIOSClass;", .constantValue.asLong = 0, 0x9, -1, 13, -1, -1 },
    { "failing", "[LIOSClass;", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "loadClasses", "LJavaUtilList;[LIOSClass;", "(Ljava/util/List<Ljava/lang/String;>;[Ljava/lang/Class;)V", "runTests", "LNSString;", "LNSString;LNSString;", "LNSString;LNSString;LNSString;", "LNSString;LNSString;LNSString;LNSString;", "run", "[LNSString;", "loadClassList", &OneTest_alltests, &OneTest_bigmem, &OneTest_failing, "LOneTest_BigMemRunListener;" };
  static const J2ObjcClassInfo _OneTest = { "OneTest", NULL, ptrTable, methods, fields, 7, 0x1, 12, 3, -1, 15, -1, -1, -1 };
  return &_OneTest;
}

+ (void)initialize {
  if (self == [OneTest class]) {
    JreStrongAssignAndConsume(&OneTest_alltests, [IOSObjectArray newArrayWithObjects:(id[]){ RxBackpressureTests_class_(), RxCombineLatestTests_class_(), RxConcatTests_class_(), RxCovarianceTest_class_(), RxErrorHandlingTests_class_(), RxGroupByTests_class_(), RxMergeTests_class_(), RxNotificationTest_class_(), RxObservableDoOnTest_class_(), RxObservableTests_class_(), RxObservableWindowTests_class_(), RxReduceTests_class_(), RxScanTests_class_(), RxSingleTest_class_(), RxStartWithTests_class_(), RxSubscriberTest_class_(), RxThrottleLastTests_class_(), RxThrottleWithTimeoutTests_class_(), RxZipTests_class_(), RxExceptionsCompositeExceptionTest_class_(), RxExceptionsExceptionsNullTest_class_(), RxExceptionsOnNextValueTest_class_(), RxFunctionsActionsTest_class_(), RxFunctionsFunctionsTest_class_(), RxInternalOperatorsBackpressureUtilsTest_class_(), RxInternalOperatorsBlockingOperatorLatestTest_class_(), RxInternalOperatorsBlockingOperatorMostRecentTest_class_(), RxInternalOperatorsBlockingOperatorNextTest_class_(), RxInternalOperatorsBlockingOperatorToFutureTest_class_(), RxInternalOperatorsBlockingOperatorToIteratorTest_class_(), RxInternalOperatorsCachedObservableTest_class_(), RxInternalOperatorsNotificationLiteTest_class_(), RxInternalOperatorsOnSubscribeAmbTest_class_(), RxInternalOperatorsOnSubscribeCombineLatestTest_class_(), RxInternalOperatorsOnSubscribeCompletableTest_class_(), RxInternalOperatorsOnSubscribeConcatDelayErrorTest_class_(), RxInternalOperatorsOnSubscribeDeferTest_class_(), RxInternalOperatorsOnSubscribeDelaySubscriptionOtherTest_class_(), RxInternalOperatorsOnSubscribeDetachTest_class_(), RxInternalOperatorsOnSubscribeFlattenIterableTest_class_(), RxInternalOperatorsOnSubscribeFromArrayTest_class_(), RxInternalOperatorsOnSubscribeFromCallableTest_class_(), RxInternalOperatorsOnSubscribeFromIterableTest_class_(), RxInternalOperatorsOnSubscribeGroupJoinTest_class_(), RxInternalOperatorsOnSubscribeJoinTest_class_(), RxInternalOperatorsOnSubscribeRangeTest_class_(), RxInternalOperatorsOnSubscribeRefCountTest_class_(), RxInternalOperatorsOnSubscribeSingleTest_class_(), RxInternalOperatorsOnSubscribeTimerTest_class_(), RxInternalOperatorsOnSubscribeToObservableFutureTest_class_(), RxInternalOperatorsOnSubscribeUsingTest_class_(), RxInternalOperatorsOperatorAllTest_class_(), RxInternalOperatorsOperatorAnyTest_class_(), RxInternalOperatorsOperatorAsObservableTest_class_(), RxInternalOperatorsOperatorBufferTest_class_(), RxInternalOperatorsOperatorCastTest_class_(), RxInternalOperatorsOperatorConcatTest_class_(), RxInternalOperatorsOperatorDebounceTest_class_(), RxInternalOperatorsOperatorDefaultIfEmptyTest_class_(), RxInternalOperatorsOperatorDematerializeTest_class_(), RxInternalOperatorsOperatorDistinctTest_class_(), RxInternalOperatorsOperatorDistinctUntilChangedTest_class_(), RxInternalOperatorsOperatorDoAfterTerminateTest_class_(), RxInternalOperatorsOperatorDoOnRequestTest_class_(), RxInternalOperatorsOperatorDoOnSubscribeTest_class_(), RxInternalOperatorsOperatorDoOnUnsubscribeTest_class_(), RxInternalOperatorsOperatorEagerConcatMapTest_class_(), RxInternalOperatorsOperatorElementAtTest_class_(), RxInternalOperatorsOperatorFirstTest_class_(), RxInternalOperatorsOperatorFlatMapTest_class_(), RxInternalOperatorsOperatorGroupByTest_class_(), RxInternalOperatorsOperatorIgnoreElementsTest_class_(), RxInternalOperatorsOperatorLastTest_class_(), RxInternalOperatorsOperatorMapNotificationTest_class_(), RxInternalOperatorsOperatorMapPairTest_class_(), RxInternalOperatorsOperatorMaterializeTest_class_(), RxInternalOperatorsOperatorMergeDelayErrorTest_class_(), RxInternalOperatorsOperatorMergeMaxConcurrentTest_class_(), RxInternalOperatorsOperatorMergeTest_class_(), RxInternalOperatorsOperatorMulticastTest_class_(), RxInternalOperatorsOperatorObserveOnTest_class_(), RxInternalOperatorsOperatorOnBackpressureBufferTest_class_(), RxInternalOperatorsOperatorOnBackpressureDropTest_class_(), RxInternalOperatorsOperatorOnBackpressureLatestTest_class_(), RxInternalOperatorsOperatorOnErrorResumeNextViaFunctionTest_class_(), RxInternalOperatorsOperatorOnErrorResumeNextViaObservableTest_class_(), RxInternalOperatorsOperatorOnErrorReturnTest_class_(), RxInternalOperatorsOperatorOnExceptionResumeNextViaObservableTest_class_(), RxInternalOperatorsOperatorPublishFunctionTest_class_(), RxInternalOperatorsOperatorPublishTest_class_(), RxInternalOperatorsOperatorRepeatTest_class_(), RxInternalOperatorsOperatorReplayTest_class_(), RxInternalOperatorsOperatorRetryTest_class_(), RxInternalOperatorsOperatorRetryWithPredicateTest_class_(), RxInternalOperatorsOperatorSampleTest_class_(), RxInternalOperatorsOperatorScanTest_class_(), RxInternalOperatorsOperatorSequenceEqualTest_class_(), RxInternalOperatorsOperatorSerializeTest_class_(), RxInternalOperatorsOperatorSingleTest_class_(), RxInternalOperatorsOperatorSkipLastTest_class_(), RxInternalOperatorsOperatorSkipLastTimedTest_class_(), RxInternalOperatorsOperatorSkipTest_class_(), RxInternalOperatorsOperatorSkipTimedTest_class_(), RxInternalOperatorsOperatorSkipUntilTest_class_(), RxInternalOperatorsOperatorSkipWhileTest_class_(), RxInternalOperatorsOperatorSubscribeOnTest_class_(), RxInternalOperatorsOperatorSwitchIfEmptyTest_class_(), RxInternalOperatorsOperatorSwitchTest_class_(), RxInternalOperatorsOperatorTakeLastOneTest_class_(), RxInternalOperatorsOperatorTakeLastTest_class_(), RxInternalOperatorsOperatorTakeLastTimedTest_class_(), RxInternalOperatorsOperatorTakeTest_class_(), RxInternalOperatorsOperatorTakeTimedTest_class_(), RxInternalOperatorsOperatorTakeUntilPredicateTest_class_(), RxInternalOperatorsOperatorTakeUntilTest_class_(), RxInternalOperatorsOperatorTakeWhileTest_class_(), RxInternalOperatorsOperatorThrottleFirstTest_class_(), RxInternalOperatorsOperatorTimeIntervalTest_class_(), RxInternalOperatorsOperatorTimeoutTests_class_(), RxInternalOperatorsOperatorTimeoutWithSelectorTest_class_(), RxInternalOperatorsOperatorTimestampTest_class_(), RxInternalOperatorsOperatorToObservableListTest_class_(), RxInternalOperatorsOperatorToObservableSortedListTest_class_(), RxInternalOperatorsOperatorUnsubscribeOnTest_class_(), RxInternalOperatorsOperatorWindowWithObservableTest_class_(), RxInternalOperatorsOperatorWindowWithSizeTest_class_(), RxInternalOperatorsOperatorWindowWithStartEndObservableTest_class_(), RxInternalOperatorsOperatorWindowWithTimeTest_class_(), RxInternalOperatorsOperatorWithLatestFromTest_class_(), RxInternalOperatorsOperatorZipCompletionTest_class_(), RxInternalOperatorsOperatorZipIterableTest_class_(), RxInternalOperatorsSingleDoAfterTerminateTest_class_(), RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOtherTest_class_(), RxInternalOperatorsSingleOnSubscribeUsingTest_class_(), RxInternalProducersProducersTest_class_(), RxSchedulersGenericScheduledExecutorServiceTest_class_(), RxInternalSchedulersNewThreadWorkerTest_class_(), RxInternalUtilBlockingUtilsTest_class_(), RxInternalUtilIndexedRingBufferTest_class_(), RxInternalUtilJCToolsQueueTests_class_(), RxInternalUtilLinkedArrayListTest_class_(), RxInternalUtilOpenHashSetTest_class_(), RxInternalUtilRxRingBufferSpmcTest_class_(), RxInternalUtilRxRingBufferSpscTest_class_(), RxInternalUtilRxRingBufferWithoutUnsafeTest_class_(), RxInternalUtilScalarSynchronousObservableTest_class_(), RxInternalUtilScalarSynchronousSingleTest_class_(), RxInternalUtilSubscriptionListTest_class_(), RxInternalUtilSynchronizedQueueTest_class_(), RxObservablesBlockingObservableTest_class_(), RxObservablesConnectableObservableTest_class_(), RxObserversObserversTest_class_(), RxObserversSafeObserverTest_class_(), RxObserversSafeSubscriberTest_class_(), RxObserversSubscribersTest_class_(), RxObserversTestObserverTest_class_(), RxObserversTestSubscriberTest_class_(), RxPluginsRxJavaPluginsTest_class_(), RxPluginsRxJavaSchedulersHookTest_class_(), RxSchedulersComputationSchedulerTests_class_(), RxSchedulersImmediateSchedulerTest_class_(), RxSchedulersIoSchedulerTest_class_(), RxSchedulersNewThreadSchedulerTest_class_(), RxSchedulersResetSchedulersTest_class_(), RxSchedulersTestSchedulerTest_class_(), RxSchedulersTrampolineSchedulerTest_class_(), RxSinglesBlockingSingleTest_class_(), RxSubjectsAsyncSubjectTest_class_(), RxSubjectsBehaviorSubjectTest_class_(), RxSubjectsBufferUntilSubscriberTest_class_(), RxSubjectsPublishSubjectTest_class_(), RxSubjectsReplaySubjectBoundedConcurrencyTest_class_(), RxSubjectsReplaySubjectConcurrencyTest_class_(), RxSubjectsReplaySubjectTest_class_(), RxSubjectsSerializedSubjectTest_class_(), RxSubjectsTestSubjectTest_class_(), RxSubscriptionsCompositeSubscriptionTest_class_(), RxSubscriptionsMultipleAssignmentSubscriptionTest_class_(), RxSubscriptionsRefCountSubscriptionTest_class_(), RxSubscriptionsSubscriptionsTest_class_(), RxTestTestObstructionDetectionTest_class_(), RxUtilAssertObservableTest_class_(), RxEventStreamTest_class_(), RxSchedulerWorkerTest_class_(), RxInternalOperatorsCompletableFromEmitterTest_class_(), RxInternalOperatorsDeferredScalarSubscriberTest_class_(), RxInternalOperatorsOnSubscribeCollectTest_class_(), RxInternalOperatorsOnSubscribeDoOnEachTest_class_(), RxInternalOperatorsOnSubscribeFilterTest_class_(), RxInternalOperatorsOnSubscribeFromAsyncEmitterTest_class_(), RxInternalOperatorsOnSubscribeFromEmitterTest_class_(), RxInternalOperatorsOnSubscribeMapTest_class_(), RxInternalOperatorsOnSubscribeReduceTest_class_(), RxInternalOperatorsOnSubscribeToMapTest_class_(), RxInternalOperatorsOnSubscribeToMultimapTest_class_(), RxInternalOperatorsOperatorCountTest_class_(), RxInternalOperatorsOperatorZipTest_class_(), RxInternalOperatorsInternalSafeSubscriberTest_class_(), RxInternalOperatorsSingleOperatorZipTest_class_(), RxInternalProducersProducerArbiterTest_class_(), RxInternalProducersProducerObserverArbiterTest_class_(), RxInternalProducersSingleDelayedProducerTest_class_(), RxInternalProducersSingleProducerTest_class_(), RxInternalSchedulersExecutorSchedulerTest_class_(), RxInternalSchedulersInternalGenericScheduledExecutorServiceTest_class_(), RxInternalUtilUnsafePow2Test_class_(), RxInternalUtilUnsafeUnsafeAccessTest_class_(), RxInternalUtilExceptionUtilsTest_class_(), RxInternalUtilPlatformDependentTest_class_(), RxInternalUtilUtilityFunctionsTest_class_(), RxObservablesAsyncOnSubscribeTest_class_(), RxObservablesSyncOnSubscribeTest_class_(), RxObserversAsyncCompletableSubscriberTest_class_(), RxObserversCompletableSubscriberTest_class_(), RxObserversSerializedObserverTest_class_(), RxSchedulersDeprecatedSchedulersTest_class_(), RxSchedulersSchedulerLifecycleTest_class_(), RxSchedulersSchedulerWhenTest_class_(), RxSchedulersTimeXTest_class_(), RxSubscriptionsSerialSubscriptionTests_class_(), RxCompletableTest_class_() } count:221 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&OneTest_bigmem, [IOSObjectArray newArrayWithObjects:(id[]){ RxInternalUtilJCToolsQueueTests_class_(), RxInternalUtilIndexedRingBufferTest_class_(), RxSubjectsReplaySubjectConcurrencyTest_class_(), RxSubjectsReplaySubjectBoundedConcurrencyTest_class_(), RxInternalOperatorsOperatorZipTest_class_(), RxInternalSchedulersExecutorSchedulerTest_class_(), RxObservablesSyncOnSubscribeTest_class_(), RxInternalOperatorsOperatorDelayTest_class_() } count:8 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&OneTest_failing, [IOSObjectArray newArrayWithObjects:(id[]){ RxSchedulersNewThreadSchedulerTest_class_(), RxSchedulersIoSchedulerTest_class_(), RxSchedulersImmediateSchedulerTest_class_(), RxInternalOperatorsOperatorSwitchTest_class_() } count:4 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(OneTest)
  }
}

@end

id<JavaUtilList> OneTest_allTestClassnames() {
  OneTest_initialize();
  id<JavaUtilList> allClassnames = create_JavaUtilArrayList_init();
  OneTest_loadClassesWithJavaUtilList_withIOSClassArray_(allClassnames, OneTest_bigmem);
  for (NSString * __strong allClassname in allClassnames) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:allClassname];
  }
  return allClassnames;
}

void OneTest_loadClassesWithJavaUtilList_withIOSClassArray_(id<JavaUtilList> allClassnames, IOSObjectArray *batch0) {
  OneTest_initialize();
  {
    IOSObjectArray *a__ = batch0;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *cl = *b__++;
      [((id<JavaUtilList>) nil_chk(allClassnames)) addWithId:[((IOSClass *) nil_chk(cl)) getCanonicalName]];
    }
  }
}

void OneTest_runTests() {
  OneTest_initialize();
  [create_OneTest_$1_init() start];
}

void OneTest_runDoppl() {
  @autoreleasepool {
    OneTest_initialize();
    id<JavaUtilList> smoothClasses = create_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(OneTest_alltests));
    [smoothClasses removeAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(OneTest_bigmem)];
    [smoothClasses removeAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(OneTest_failing)];
    IOSObjectArray *asdf = [smoothClasses toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[smoothClasses size] type:IOSClass_class_()]];
    CoTouchlabDoppelTestingDopplJunitTestRunner_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_(asdf, create_OneTest_BigMemRunListener_init());
  }
}

void OneTest_runTestsWithNSString_(NSString *a) {
  OneTest_initialize();
  OneTest_runWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ a } count:1 type:NSString_class_()]);
}

void OneTest_runTestsWithNSString_withNSString_(NSString *a, NSString *b) {
  OneTest_initialize();
  OneTest_runWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ a, b } count:2 type:NSString_class_()]);
}

void OneTest_runTestsWithNSString_withNSString_withNSString_(NSString *a, NSString *b, NSString *c) {
  OneTest_initialize();
  OneTest_runWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ a, b, c } count:3 type:NSString_class_()]);
}

void OneTest_runTestsWithNSString_withNSString_withNSString_withNSString_(NSString *a, NSString *b, NSString *c, NSString *d) {
  OneTest_initialize();
  OneTest_runWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ a, b, c, d } count:4 type:NSString_class_()]);
}

void OneTest_runWithNSStringArray_(IOSObjectArray *classNames) {
  OneTest_initialize();
  CoTouchlabDoppelTestingDopplJunitTestRunner_runWithNSStringArray_withOrgJunitRunnerNotificationRunListener_(classNames, create_OneTest_BigMemRunListener_init());
}

jlong OneTest_printMem() {
  OneTest_initialize();
  struct task_basic_info info;
  mach_msg_type_number_t size = sizeof(info);
  kern_return_t kerr = task_info(mach_task_self(),
  TASK_BASIC_INFO,
  (task_info_t)&info,
  &size);
  if( kerr == KERN_SUCCESS ) {
    return info.resident_size;
  } else {
    return 0;
  }
}

IOSObjectArray *OneTest_loadClassListWithNSString_(NSString *fileData) {
  OneTest_initialize();
  @try {
    JavaIoBufferedReader *bufferedReader = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(fileData));
    NSString *line;
    id<JavaUtilList> classList = create_JavaUtilArrayList_init();
    while ((line = [bufferedReader readLine]) != nil) {
      if ([((NSString *) nil_chk(line)) hasSuffix:@".java"]) {
        NSString *className_ = [((NSString *) nil_chk([line substring:0 endIndex:[line lastIndexOfString:@".java"]])) replace:'/' withChar:'.'];
        [classList addWithId:IOSClass_forName_(className_)];
      }
    }
    return [classList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[classList size] type:IOSClass_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void OneTest_init(OneTest *self) {
  NSObject_init(self);
}

OneTest *new_OneTest_init() {
  J2OBJC_NEW_IMPL(OneTest, init)
}

OneTest *create_OneTest_init() {
  J2OBJC_CREATE_IMPL(OneTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OneTest)

@implementation OneTest_BigMemRunListener

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [super testStartedWithOrgJunitRunnerDescription:description_];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"TRACE Starting ", [((OrgJunitRunnerDescription *) nil_chk(description_)) getClassName], '-', [description_ getMethodName])];
  memSize_ = OneTest_printMem();
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  [super testFinishedWithOrgJunitRunnerDescription:description_];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"TRACE Finished ", [((OrgJunitRunnerDescription *) nil_chk(description_)) getClassName], '-', [description_ getMethodName])];
  jlong endSize = OneTest_printMem();
  jlong megs = JreFpToLong(JavaLangMath_floorWithDouble_((jdouble) (endSize - memSize_) / (jdouble) (1024 * 1024)));
  if (JavaLangMath_absWithLong_(megs) > 0) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$C$$JC", @"ZZZZ: ", [description_ getClassName], '-', [description_ getMethodName], @" diff: ", megs, 'm')];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_BigMemRunListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testStartedWithOrgJunitRunnerDescription:);
  methods[1].selector = @selector(testFinishedWithOrgJunitRunnerDescription:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "memSize_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "testStarted", "LOrgJunitRunnerDescription;", "LJavaLangException;", "testFinished", "LOneTest;" };
  static const J2ObjcClassInfo _OneTest_BigMemRunListener = { "BigMemRunListener", NULL, ptrTable, methods, fields, 7, 0x8, 3, 1, 4, -1, -1, -1, -1 };
  return &_OneTest_BigMemRunListener;
}

@end

void OneTest_BigMemRunListener_init(OneTest_BigMemRunListener *self) {
  OrgJunitRunnerNotificationRunListener_init(self);
}

OneTest_BigMemRunListener *new_OneTest_BigMemRunListener_init() {
  J2OBJC_NEW_IMPL(OneTest_BigMemRunListener, init)
}

OneTest_BigMemRunListener *create_OneTest_BigMemRunListener_init() {
  J2OBJC_CREATE_IMPL(OneTest_BigMemRunListener, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OneTest_BigMemRunListener)

@implementation OneTest_$1

- (void)run {
  OneTest_runDoppl();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OneTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOneTest;", "runTests" };
  static const J2ObjcClassInfo _OneTest_$1 = { "", NULL, ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_OneTest_$1;
}

@end

void OneTest_$1_init(OneTest_$1 *self) {
  JavaLangThread_init(self);
}

OneTest_$1 *new_OneTest_$1_init() {
  J2OBJC_NEW_IMPL(OneTest_$1, init)
}

OneTest_$1 *create_OneTest_$1_init() {
  J2OBJC_CREATE_IMPL(OneTest_$1, init)
}
