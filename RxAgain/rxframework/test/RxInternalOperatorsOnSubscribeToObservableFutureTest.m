//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeToObservableFutureTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOnSubscribeToObservableFuture.h"
#include "RxInternalOperatorsOnSubscribeToObservableFutureTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxTestUtil.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/FutureTask.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$8();

@interface RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 : NSObject < JavaUtilConcurrentFuture > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *isCancelled_;
  JavaUtilConcurrentAtomicAtomicBoolean *isDone_;
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (jboolean)isCancelled;

- (jboolean)isDone;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1, isCancelled_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1, isDone_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init();

@interface RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFutureTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init();

@interface RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFutureTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init();

@interface RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFutureTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init();

@interface RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 : NSObject < JavaLangRunnable >

- (void)run;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFutureTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init();

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxInternalOperatorsOnSubscribeToObservableFuture_class_());
}

- (void)testSuccess {
  id<JavaUtilConcurrentFuture> future = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentFuture_class_());
  id value = create_NSObject_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentFuture>) nil_chk(future)) get]))) thenReturnWithId:value];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> sub = [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_(future))) subscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(o)];
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:value];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<JavaUtilConcurrentFuture>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(future, OrgMockitoMockito_timesWithInt_(1)))) cancelWithBoolean:true];
}

- (void)testFailure {
  id<JavaUtilConcurrentFuture> future = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentFuture_class_());
  JavaLangRuntimeException *e = create_JavaLangRuntimeException_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentFuture>) nil_chk(future)) get]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ e } count:1 type:NSException_class_()]];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> sub = [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_(future))) subscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(o)];
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:nil];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:e];
  [((id<JavaUtilConcurrentFuture>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(future, OrgMockitoMockito_timesWithInt_(1)))) cancelWithBoolean:true];
}

- (void)testCancelledBeforeSubscribe {
  id<JavaUtilConcurrentFuture> future = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentFuture_class_());
  JavaUtilConcurrentCancellationException *e = create_JavaUtilConcurrentCancellationException_initWithNSString_(@"unit test synthetic cancellation");
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentFuture>) nil_chk(future)) get]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ e } count:1 type:NSException_class_()]];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [testSubscriber unsubscribe];
  [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_(future))) subscribeWithRxSubscriber:testSubscriber];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((id<JavaUtilList>) nil_chk([testSubscriber getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [testSubscriber getCompletions]);
}

- (void)testCancellationDuringFutureGet {
  id<JavaUtilConcurrentFuture> future = create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  RxObservable *futureObservable = RxObservable_fromWithJavaUtilConcurrentFuture_(future);
  id<RxSubscription> sub = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(futureObservable)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:testSubscriber];
  [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((id<JavaUtilList>) nil_chk([testSubscriber getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [testSubscriber getCompletions]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((id<JavaUtilList>) nil_chk([testSubscriber getOnNextEvents])) size]);
}

- (void)backpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  JavaUtilConcurrentFutureTask *f = create_JavaUtilConcurrentFutureTask_initWithJavaLangRunnable_withId_(create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init(), JavaLangInteger_valueOfWithInt_(1));
  [f run];
  [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_(f))) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withTimeoutNoTimeout {
  JavaUtilConcurrentFutureTask *task = create_JavaUtilConcurrentFutureTask_initWithJavaLangRunnable_withId_(create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init(), JavaLangInteger_valueOfWithInt_(1));
  [task run];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(task, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)withTimeoutTimeout {
  JavaUtilConcurrentFutureTask *task = create_JavaUtilConcurrentFutureTask_initWithJavaLangRunnable_withId_(create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init(), JavaLangInteger_valueOfWithInt_(1));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(task, 10, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentTimeoutException_class_()];
  [ts assertNotCompleted];
}

- (void)withTimeoutNoTimeoutScheduler {
  JavaUtilConcurrentFutureTask *task = create_JavaUtilConcurrentFutureTask_initWithJavaLangRunnable_withId_(create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init(), JavaLangInteger_valueOfWithInt_(1));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_fromWithJavaUtilConcurrentFuture_withRxScheduler_(task, RxSchedulersSchedulers_computation()))) subscribeWithRxSubscriber:ts];
  [task run];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testSuccess);
  methods[2].selector = @selector(testFailure);
  methods[3].selector = @selector(testCancelledBeforeSubscribe);
  methods[4].selector = @selector(testCancellationDuringFutureGet);
  methods[5].selector = @selector(backpressure);
  methods[6].selector = @selector(withTimeoutNoTimeout);
  methods[7].selector = @selector(withTimeoutTimeout);
  methods[8].selector = @selector(withTimeoutNoTimeoutScheduler);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$0, "LJavaLangException;", (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$8 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest = { "OnSubscribeToObservableFutureTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_init(RxInternalOperatorsOnSubscribeToObservableFutureTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeToObservableFutureTest *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeToObservableFutureTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeToObservableFutureTest)

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest_$1

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(isCancelled_)) compareAndSetWithBoolean:false withBoolean:true];
  return true;
}

- (jboolean)isCancelled {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(isCancelled_)) get];
}

- (jboolean)isDone {
  return [self isCancelled] || [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(isDone_)) get];
}

- (id)get {
  JavaLangThread_sleepWithLong_(500);
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(isDone_)) compareAndSetWithBoolean:false withBoolean:true];
  return @"foo";
}

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [self get];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(isCancelled_);
  RELEASE_(isDone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(cancelWithBoolean:);
  methods[1].selector = @selector(isCancelled);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(get);
  methods[4].selector = @selector(getWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isCancelled_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDone_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "cancel", "Z", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "get", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "LRxInternalOperatorsOnSubscribeToObservableFutureTest;", "testCancellationDuringFutureGet", "Ljava/lang/Object;Ljava/util/concurrent/Future<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 6, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->isCancelled_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  JreStrongAssignAndConsume(&self->isDone_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$1 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest_$2

- (void)run {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeToObservableFutureTest;", "backpressure" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$2, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$2 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$2, init)
}

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest_$3

- (void)run {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeToObservableFutureTest;", "withTimeoutNoTimeout" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$3, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$3 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$3, init)
}

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest_$4

- (void)run {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeToObservableFutureTest;", "withTimeoutTimeout" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$4, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$4 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$4, init)
}

@implementation RxInternalOperatorsOnSubscribeToObservableFutureTest_$5

- (void)run {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeToObservableFutureTest;", "withTimeoutNoTimeoutScheduler" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init(RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *new_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$5, init)
}

RxInternalOperatorsOnSubscribeToObservableFutureTest_$5 *create_RxInternalOperatorsOnSubscribeToObservableFutureTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeToObservableFutureTest_$5, init)
}
