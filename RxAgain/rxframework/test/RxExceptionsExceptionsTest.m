//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/exceptions/ExceptionsTest.java
//

#include "CoTouchlabDoppelTestingPlatformUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsExceptions.h"
#include "RxExceptionsExceptionsTest.h"
#include "RxExceptionsOnCompletedFailedException.h"
#include "RxExceptionsOnErrorFailedException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesGroupedObservable.h"
#include "RxObserver.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxTestUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsTest__Annotations$13();

@interface RxExceptionsExceptionsTest_OnErrorFailedSubscriber : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)value;

- (instancetype)initWithRxExceptionsExceptionsTest:(RxExceptionsExceptionsTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_OnErrorFailedSubscriber)

__attribute__((unused)) static void RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest_OnErrorFailedSubscriber *self, RxExceptionsExceptionsTest *outer$);

__attribute__((unused)) static RxExceptionsExceptionsTest_OnErrorFailedSubscriber *new_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_OnErrorFailedSubscriber *create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsExceptionsTest_OnErrorFailedSubscriber)

@interface RxExceptionsExceptionsTest_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$1)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$1_init(RxExceptionsExceptionsTest_$1 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$1 *new_RxExceptionsExceptionsTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$1 *create_RxExceptionsExceptionsTest_$1_init();

@interface RxExceptionsExceptionsTest_$2 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$2)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$2_init(RxExceptionsExceptionsTest_$2 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$2 *new_RxExceptionsExceptionsTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$2 *create_RxExceptionsExceptionsTest_$2_init();

@interface RxExceptionsExceptionsTest_$3 : NSObject < RxObserver > {
 @public
  RxSubjectsPublishSubject *val$b_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)n;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$3)

J2OBJC_FIELD_SETTER(RxExceptionsExceptionsTest_$3, val$b_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxExceptionsExceptionsTest_$3 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxExceptionsExceptionsTest_$3 *new_RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$3 *create_RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxExceptionsExceptionsTest_$4 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$depth_;
  RxSubjectsPublishSubject *val$a_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$4)

J2OBJC_FIELD_SETTER(RxExceptionsExceptionsTest_$4, val$depth_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxExceptionsExceptionsTest_$4, val$a_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(RxExceptionsExceptionsTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1);

__attribute__((unused)) static RxExceptionsExceptionsTest_$4 *new_RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$4 *create_RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1);

@interface RxExceptionsExceptionsTest_$5 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$5)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$5_init(RxExceptionsExceptionsTest_$5 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$5 *new_RxExceptionsExceptionsTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$5 *create_RxExceptionsExceptionsTest_$5_init();

@interface RxExceptionsExceptionsTest_$6 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$6)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$6_init(RxExceptionsExceptionsTest_$6 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$6 *new_RxExceptionsExceptionsTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$6 *create_RxExceptionsExceptionsTest_$6_init();

@interface RxExceptionsExceptionsTest_$7 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$7)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$7_init(RxExceptionsExceptionsTest_$7 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$7 *new_RxExceptionsExceptionsTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$7 *create_RxExceptionsExceptionsTest_$7_init();

@interface RxExceptionsExceptionsTest_$8 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$8)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$8_init(RxExceptionsExceptionsTest_$8 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$8 *new_RxExceptionsExceptionsTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$8 *create_RxExceptionsExceptionsTest_$8_init();

@interface RxExceptionsExceptionsTest_$9 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxObservablesGroupedObservable *)integerIntegerGroupedObservable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$9)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$9_init(RxExceptionsExceptionsTest_$9 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$9 *new_RxExceptionsExceptionsTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$9 *create_RxExceptionsExceptionsTest_$9_init();

@interface RxExceptionsExceptionsTest_$10 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$10)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$10_init(RxExceptionsExceptionsTest_$10 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$10 *new_RxExceptionsExceptionsTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$10 *create_RxExceptionsExceptionsTest_$10_init();

@interface RxExceptionsExceptionsTest_$11 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$11)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$11_init(RxExceptionsExceptionsTest_$11 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$11 *new_RxExceptionsExceptionsTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$11 *create_RxExceptionsExceptionsTest_$11_init();

@interface RxExceptionsExceptionsTest_$12 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$12)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$12_init(RxExceptionsExceptionsTest_$12 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$12 *new_RxExceptionsExceptionsTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$12 *create_RxExceptionsExceptionsTest_$12_init();

@interface RxExceptionsExceptionsTest_$12_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$12_$1)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$12_$1_init(RxExceptionsExceptionsTest_$12_$1 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$12_$1 *new_RxExceptionsExceptionsTest_$12_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$12_$1 *create_RxExceptionsExceptionsTest_$12_$1_init();

@interface RxExceptionsExceptionsTest_$13 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$13)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$13_init(RxExceptionsExceptionsTest_$13 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$13 *new_RxExceptionsExceptionsTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$13 *create_RxExceptionsExceptionsTest_$13_init();

@interface RxExceptionsExceptionsTest_$13_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$13_$1)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$13_$1_init(RxExceptionsExceptionsTest_$13_$1 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$13_$1 *new_RxExceptionsExceptionsTest_$13_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$13_$1 *create_RxExceptionsExceptionsTest_$13_$1_init();

@interface RxExceptionsExceptionsTest_$14 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$14)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$14_init(RxExceptionsExceptionsTest_$14 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$14 *new_RxExceptionsExceptionsTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$14 *create_RxExceptionsExceptionsTest_$14_init();

@interface RxExceptionsExceptionsTest_$15 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$15)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$15_init(RxExceptionsExceptionsTest_$15 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$15 *new_RxExceptionsExceptionsTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$15 *create_RxExceptionsExceptionsTest_$15_init();

@interface RxExceptionsExceptionsTest_$15_$1 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$15_$1)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$15_$1_init(RxExceptionsExceptionsTest_$15_$1 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$15_$1 *new_RxExceptionsExceptionsTest_$15_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$15_$1 *create_RxExceptionsExceptionsTest_$15_$1_init();

@interface RxExceptionsExceptionsTest_$16 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$16)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$16_init(RxExceptionsExceptionsTest_$16 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$16 *new_RxExceptionsExceptionsTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$16 *create_RxExceptionsExceptionsTest_$16_init();

@interface RxExceptionsExceptionsTest_$16_$1 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$16_$1)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$16_$1_init(RxExceptionsExceptionsTest_$16_$1 *self);

__attribute__((unused)) static RxExceptionsExceptionsTest_$16_$1 *new_RxExceptionsExceptionsTest_$16_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$16_$1 *create_RxExceptionsExceptionsTest_$16_$1_init();

@interface RxExceptionsExceptionsTest_$16_$2 : RxSubscriber {
 @public
  RxSingleSubscriber *val$s1_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)v;

- (instancetype)initWithRxSingleSubscriber:(RxSingleSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptionsTest_$16_$2)

J2OBJC_FIELD_SETTER(RxExceptionsExceptionsTest_$16_$2, val$s1_, RxSingleSubscriber *)

__attribute__((unused)) static void RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxExceptionsExceptionsTest_$16_$2 *self, RxSingleSubscriber *capture$0);

__attribute__((unused)) static RxExceptionsExceptionsTest_$16_$2 *new_RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxSingleSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptionsTest_$16_$2 *create_RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxSingleSubscriber *capture$0);

@implementation RxExceptionsExceptionsTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxExceptionsExceptions_class_());
}

- (void)testOnErrorNotImplementedIsThrown {
  [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) subscribeWithRxFunctionsAction1:create_RxExceptionsExceptionsTest_$1_init()];
}

- (void)testOnCompletedExceptionIsThrown {
  [((RxObservable *) nil_chk(RxObservable_empty())) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_$2_init()];
}

- (void)testStackOverflowWouldOccur {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  RxSubjectsPublishSubject *a = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *b = RxSubjectsPublishSubject_create();
  jint MAX_STACK_DEPTH = 800;
  JavaUtilConcurrentAtomicAtomicInteger *depth = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxSubjectsPublishSubject *) nil_chk(a)) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(b)];
  [((RxSubjectsPublishSubject *) nil_chk(b)) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(depth, a)];
  [a onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithBoolean_([depth get] > MAX_STACK_DEPTH);
}

- (void)testStackOverflowErrorIsThrown {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$5_init()];
}

- (void)testThreadDeathIsThrown {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$6_init()];
}

- (void)testOnErrorExceptionIsThrown {
  @try {
    [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangIllegalArgumentException_initWithNSString_(@"original exception")))) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$7_init()];
    OrgJunitAssert_failWithNSString_(@"expecting an exception to be thrown");
  }
  @catch (RxExceptionsOnErrorFailedException *t) {
    RxExceptionsCompositeException *cause = (RxExceptionsCompositeException *) cast_chk([((RxExceptionsOnErrorFailedException *) nil_chk(t)) getCause], [RxExceptionsCompositeException class]);
    OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(cause)) getExceptions])) getWithInt:0] isKindOfClass:[JavaLangIllegalArgumentException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([cause getExceptions])) getWithInt:1] isKindOfClass:[JavaLangIllegalStateException class]]);
  }
}

- (void)testOnErrorExceptionIsThrownFromGroupBy {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) groupByWithRxFunctionsFunc1:create_RxExceptionsExceptionsTest_$8_init()])) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$9_init()];
}

- (void)testOnErrorExceptionIsThrownFromOnNext {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxExceptionsExceptionsTest_$10_init()])) subscribeWithRxObserver:create_RxExceptionsExceptionsTest_$11_init()];
}

- (void)testOnErrorExceptionIsThrownFromSubscribe {
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxExceptionsExceptionsTest_$12_init()))) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self)];
}

- (void)testOnErrorExceptionIsThrownFromUnsafeSubscribe {
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxExceptionsExceptionsTest_$13_init()))) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self)];
}

- (void)testOnErrorExceptionIsThrownFromSingleDoOnSuccess {
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSuccessWithRxFunctionsAction1:create_RxExceptionsExceptionsTest_$14_init()])) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self)];
}

- (void)testOnErrorExceptionIsThrownFromSingleSubscribe {
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxExceptionsExceptionsTest_$15_init()))) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self)];
}

- (void)testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe {
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxExceptionsExceptionsTest_$16_init()))) subscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testOnErrorNotImplementedIsThrown);
  methods[2].selector = @selector(testOnCompletedExceptionIsThrown);
  methods[3].selector = @selector(testStackOverflowWouldOccur);
  methods[4].selector = @selector(testStackOverflowErrorIsThrown);
  methods[5].selector = @selector(testThreadDeathIsThrown);
  methods[6].selector = @selector(testOnErrorExceptionIsThrown);
  methods[7].selector = @selector(testOnErrorExceptionIsThrownFromGroupBy);
  methods[8].selector = @selector(testOnErrorExceptionIsThrownFromOnNext);
  methods[9].selector = @selector(testOnErrorExceptionIsThrownFromSubscribe);
  methods[10].selector = @selector(testOnErrorExceptionIsThrownFromUnsafeSubscribe);
  methods[11].selector = @selector(testOnErrorExceptionIsThrownFromSingleDoOnSuccess);
  methods[12].selector = @selector(testOnErrorExceptionIsThrownFromSingleSubscribe);
  methods[13].selector = @selector(testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe);
  methods[14].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxExceptionsExceptionsTest__Annotations$0, (void *)&RxExceptionsExceptionsTest__Annotations$1, (void *)&RxExceptionsExceptionsTest__Annotations$2, (void *)&RxExceptionsExceptionsTest__Annotations$3, (void *)&RxExceptionsExceptionsTest__Annotations$4, (void *)&RxExceptionsExceptionsTest__Annotations$5, (void *)&RxExceptionsExceptionsTest__Annotations$6, "LJavaLangException;", (void *)&RxExceptionsExceptionsTest__Annotations$7, (void *)&RxExceptionsExceptionsTest__Annotations$8, (void *)&RxExceptionsExceptionsTest__Annotations$9, (void *)&RxExceptionsExceptionsTest__Annotations$10, (void *)&RxExceptionsExceptionsTest__Annotations$11, (void *)&RxExceptionsExceptionsTest__Annotations$12, (void *)&RxExceptionsExceptionsTest__Annotations$13, "LRxExceptionsExceptionsTest_OnErrorFailedSubscriber;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest = { "ExceptionsTest", "rx.exceptions", ptrTable, methods, NULL, 7, 0x1, 15, 0, -1, 15, -1, -1, -1 };
  return &_RxExceptionsExceptionsTest;
}

@end

void RxExceptionsExceptionsTest_init(RxExceptionsExceptionsTest *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest *new_RxExceptionsExceptionsTest_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest, init)
}

RxExceptionsExceptionsTest *create_RxExceptionsExceptionsTest_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest, init)
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnCompletedFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangStackOverflowError_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangThreadDeath_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorFailedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsExceptionsTest)

@implementation RxExceptionsExceptionsTest_OnErrorFailedSubscriber

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_JavaLangRuntimeException_init();
}

- (void)onNextWithId:(JavaLangInteger *)value {
}

- (instancetype)initWithRxExceptionsExceptionsTest:(RxExceptionsExceptionsTest *)outer$ {
  RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxExceptionsExceptionsTest:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_OnErrorFailedSubscriber = { "OnErrorFailedSubscriber", "rx.exceptions", ptrTable, methods, NULL, 7, 0x2, 4, 0, 4, -1, -1, 5, -1 };
  return &_RxExceptionsExceptionsTest_OnErrorFailedSubscriber;
}

@end

void RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest_OnErrorFailedSubscriber *self, RxExceptionsExceptionsTest *outer$) {
  RxSubscriber_init(self);
}

RxExceptionsExceptionsTest_OnErrorFailedSubscriber *new_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest *outer$) {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_OnErrorFailedSubscriber, initWithRxExceptionsExceptionsTest_, outer$)
}

RxExceptionsExceptionsTest_OnErrorFailedSubscriber *create_RxExceptionsExceptionsTest_OnErrorFailedSubscriber_initWithRxExceptionsExceptionsTest_(RxExceptionsExceptionsTest *outer$) {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_OnErrorFailedSubscriber, initWithRxExceptionsExceptionsTest_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsExceptionsTest_OnErrorFailedSubscriber)

@implementation RxExceptionsExceptionsTest_$1

- (void)callWithId:(JavaLangInteger *)t1 {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"hello");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testOnErrorNotImplementedIsThrown", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsExceptionsTest_$1;
}

@end

void RxExceptionsExceptionsTest_$1_init(RxExceptionsExceptionsTest_$1 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$1 *new_RxExceptionsExceptionsTest_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$1, init)
}

RxExceptionsExceptionsTest_$1 *create_RxExceptionsExceptionsTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$1, init)
}

@implementation RxExceptionsExceptionsTest_$2

- (void)onCompleted {
  @throw create_JavaLangRuntimeException_init();
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)o {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxExceptionsExceptionsTest;", "testOnCompletedExceptionIsThrown", "Lrx/Subscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$2 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxExceptionsExceptionsTest_$2;
}

@end

void RxExceptionsExceptionsTest_$2_init(RxExceptionsExceptionsTest_$2 *self) {
  RxSubscriber_init(self);
}

RxExceptionsExceptionsTest_$2 *new_RxExceptionsExceptionsTest_$2_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$2, init)
}

RxExceptionsExceptionsTest_$2 *create_RxExceptionsExceptionsTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$2, init)
}

@implementation RxExceptionsExceptionsTest_$3

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
}

- (void)onNextWithId:(JavaLangInteger *)n {
  [((RxSubjectsPublishSubject *) nil_chk(val$b_)) onNextWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(n)) intValue] + 1)];
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$b_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxExceptionsExceptionsTest;", "testStackOverflowWouldOccur", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$3 = { "", "rx.exceptions", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxExceptionsExceptionsTest_$3;
}

@end

void RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxExceptionsExceptionsTest_$3 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$b_, capture$0);
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$3 *new_RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$3, initWithRxSubjectsPublishSubject_, capture$0)
}

RxExceptionsExceptionsTest_$3 *create_RxExceptionsExceptionsTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$3, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxExceptionsExceptionsTest_$4

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
}

- (void)onNextWithId:(JavaLangInteger *)n {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$depth_)) get] < 800) {
    [val$depth_ setWithInt:((IOSObjectArray *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getStackTrace]))->size_];
    [((RxSubjectsPublishSubject *) nil_chk(val$a_)) onNextWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(n)) intValue] + 1)];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1 {
  RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$depth_);
  RELEASE_(val$a_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$depth_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$a_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;LRxSubjectsPublishSubject;", "(Ljava/util/concurrent/atomic/AtomicInteger;Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxExceptionsExceptionsTest;", "testStackOverflowWouldOccur", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$4 = { "", "rx.exceptions", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxExceptionsExceptionsTest_$4;
}

@end

void RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(RxExceptionsExceptionsTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  JreStrongAssign(&self->val$depth_, capture$0);
  JreStrongAssign(&self->val$a_, capture$1);
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$4 *new_RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

RxExceptionsExceptionsTest_$4 *create_RxExceptionsExceptionsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

@implementation RxExceptionsExceptionsTest_$5

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_JavaLangStackOverflowError_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testStackOverflowErrorIsThrown", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$5 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxExceptionsExceptionsTest_$5;
}

@end

void RxExceptionsExceptionsTest_$5_init(RxExceptionsExceptionsTest_$5 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$5 *new_RxExceptionsExceptionsTest_$5_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$5, init)
}

RxExceptionsExceptionsTest_$5 *create_RxExceptionsExceptionsTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$5, init)
}

@implementation RxExceptionsExceptionsTest_$6

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((NSException *) nil_chk(e)) printStackTrace];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  @throw create_JavaLangThreadDeath_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testThreadDeathIsThrown", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$6 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxExceptionsExceptionsTest_$6;
}

@end

void RxExceptionsExceptionsTest_$6_init(RxExceptionsExceptionsTest_$6 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$6 *new_RxExceptionsExceptionsTest_$6_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$6, init)
}

RxExceptionsExceptionsTest_$6 *create_RxExceptionsExceptionsTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$6, init)
}

@implementation RxExceptionsExceptionsTest_$7

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"This should be thrown");
}

- (void)onNextWithId:(id)o {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrown", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$7 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxExceptionsExceptionsTest_$7;
}

@end

void RxExceptionsExceptionsTest_$7_init(RxExceptionsExceptionsTest_$7 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$7 *new_RxExceptionsExceptionsTest_$7_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$7, init)
}

RxExceptionsExceptionsTest_$7 *create_RxExceptionsExceptionsTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$7, init)
}

@implementation RxExceptionsExceptionsTest_$8

- (JavaLangInteger *)callWithId:(JavaLangInteger *)integer {
  @throw create_JavaLangRuntimeException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromGroupBy", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$8 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsExceptionsTest_$8;
}

@end

void RxExceptionsExceptionsTest_$8_init(RxExceptionsExceptionsTest_$8 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$8 *new_RxExceptionsExceptionsTest_$8_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$8, init)
}

RxExceptionsExceptionsTest_$8 *create_RxExceptionsExceptionsTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$8, init)
}

@implementation RxExceptionsExceptionsTest_$9

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_JavaLangRuntimeException_init();
}

- (void)onNextWithId:(RxObservablesGroupedObservable *)integerIntegerGroupedObservable {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LRxObservablesGroupedObservable;", "(Lrx/observables/GroupedObservable<Ljava/lang/Integer;Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromGroupBy", "Ljava/lang/Object;Lrx/Observer<Lrx/observables/GroupedObservable<Ljava/lang/Integer;Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$9 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 5, -1, 6, 7, -1 };
  return &_RxExceptionsExceptionsTest_$9;
}

@end

void RxExceptionsExceptionsTest_$9_init(RxExceptionsExceptionsTest_$9 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$9 *new_RxExceptionsExceptionsTest_$9_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$9, init)
}

RxExceptionsExceptionsTest_$9 *create_RxExceptionsExceptionsTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$9, init)
}

@implementation RxExceptionsExceptionsTest_$10

- (void)callWithId:(JavaLangInteger *)integer {
  @throw create_JavaLangRuntimeException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromOnNext", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$10 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsExceptionsTest_$10;
}

@end

void RxExceptionsExceptionsTest_$10_init(RxExceptionsExceptionsTest_$10 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$10 *new_RxExceptionsExceptionsTest_$10_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$10, init)
}

RxExceptionsExceptionsTest_$10 *create_RxExceptionsExceptionsTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$10, init)
}

@implementation RxExceptionsExceptionsTest_$11

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_JavaLangRuntimeException_init();
}

- (void)onNextWithId:(JavaLangInteger *)integer {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromOnNext", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$11 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxExceptionsExceptionsTest_$11;
}

@end

void RxExceptionsExceptionsTest_$11_init(RxExceptionsExceptionsTest_$11 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$11 *new_RxExceptionsExceptionsTest_$11_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$11, init)
}

RxExceptionsExceptionsTest_$11 *create_RxExceptionsExceptionsTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$11, init)
}

@implementation RxExceptionsExceptionsTest_$12

- (void)callWithId:(RxSubscriber *)s1 {
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxExceptionsExceptionsTest_$12_$1_init()))) subscribeWithRxSubscriber:s1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromSubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$12 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$12;
}

@end

void RxExceptionsExceptionsTest_$12_init(RxExceptionsExceptionsTest_$12 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$12 *new_RxExceptionsExceptionsTest_$12_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$12, init)
}

RxExceptionsExceptionsTest_$12 *create_RxExceptionsExceptionsTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$12, init)
}

@implementation RxExceptionsExceptionsTest_$12_$1

- (void)callWithId:(RxSubscriber *)s2 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"original exception");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$12_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest_$12;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$12_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$12_$1;
}

@end

void RxExceptionsExceptionsTest_$12_$1_init(RxExceptionsExceptionsTest_$12_$1 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$12_$1 *new_RxExceptionsExceptionsTest_$12_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$12_$1, init)
}

RxExceptionsExceptionsTest_$12_$1 *create_RxExceptionsExceptionsTest_$12_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$12_$1, init)
}

@implementation RxExceptionsExceptionsTest_$13

- (void)callWithId:(RxSubscriber *)s1 {
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxExceptionsExceptionsTest_$13_$1_init()))) unsafeSubscribeWithRxSubscriber:s1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromUnsafeSubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$13 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$13;
}

@end

void RxExceptionsExceptionsTest_$13_init(RxExceptionsExceptionsTest_$13 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$13 *new_RxExceptionsExceptionsTest_$13_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$13, init)
}

RxExceptionsExceptionsTest_$13 *create_RxExceptionsExceptionsTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$13, init)
}

@implementation RxExceptionsExceptionsTest_$13_$1

- (void)callWithId:(RxSubscriber *)s2 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"original exception");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$13_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest_$13;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$13_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$13_$1;
}

@end

void RxExceptionsExceptionsTest_$13_$1_init(RxExceptionsExceptionsTest_$13_$1 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$13_$1 *new_RxExceptionsExceptionsTest_$13_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$13_$1, init)
}

RxExceptionsExceptionsTest_$13_$1 *create_RxExceptionsExceptionsTest_$13_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$13_$1, init)
}

@implementation RxExceptionsExceptionsTest_$14

- (void)callWithId:(JavaLangInteger *)integer {
  @throw create_JavaLangRuntimeException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromSingleDoOnSuccess", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$14 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxExceptionsExceptionsTest_$14;
}

@end

void RxExceptionsExceptionsTest_$14_init(RxExceptionsExceptionsTest_$14 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$14 *new_RxExceptionsExceptionsTest_$14_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$14, init)
}

RxExceptionsExceptionsTest_$14 *create_RxExceptionsExceptionsTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$14, init)
}

@implementation RxExceptionsExceptionsTest_$15

- (void)callWithId:(RxSingleSubscriber *)s1 {
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxExceptionsExceptionsTest_$15_$1_init()))) subscribeWithRxSingleSubscriber:s1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromSingleSubscribe", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$15 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$15;
}

@end

void RxExceptionsExceptionsTest_$15_init(RxExceptionsExceptionsTest_$15 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$15 *new_RxExceptionsExceptionsTest_$15_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$15, init)
}

RxExceptionsExceptionsTest_$15 *create_RxExceptionsExceptionsTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$15, init)
}

@implementation RxExceptionsExceptionsTest_$15_$1

- (void)callWithId:(RxSingleSubscriber *)s2 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"original exception");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$15_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest_$15;", "callWithId:", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$15_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$15_$1;
}

@end

void RxExceptionsExceptionsTest_$15_$1_init(RxExceptionsExceptionsTest_$15_$1 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$15_$1 *new_RxExceptionsExceptionsTest_$15_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$15_$1, init)
}

RxExceptionsExceptionsTest_$15_$1 *create_RxExceptionsExceptionsTest_$15_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$15_$1, init)
}

@implementation RxExceptionsExceptionsTest_$16

- (void)callWithId:(RxSingleSubscriber *)s1 {
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxExceptionsExceptionsTest_$16_$1_init()))) unsafeSubscribeWithRxSubscriber:create_RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(s1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest;", "testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$16 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$16;
}

@end

void RxExceptionsExceptionsTest_$16_init(RxExceptionsExceptionsTest_$16 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$16 *new_RxExceptionsExceptionsTest_$16_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$16, init)
}

RxExceptionsExceptionsTest_$16 *create_RxExceptionsExceptionsTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$16, init)
}

@implementation RxExceptionsExceptionsTest_$16_$1

- (void)callWithId:(RxSingleSubscriber *)s2 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"original exception");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsTest_$16_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LRxExceptionsExceptionsTest_$16;", "callWithId:", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$16_$1 = { "", "rx.exceptions", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxExceptionsExceptionsTest_$16_$1;
}

@end

void RxExceptionsExceptionsTest_$16_$1_init(RxExceptionsExceptionsTest_$16_$1 *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsTest_$16_$1 *new_RxExceptionsExceptionsTest_$16_$1_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$16_$1, init)
}

RxExceptionsExceptionsTest_$16_$1 *create_RxExceptionsExceptionsTest_$16_$1_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$16_$1, init)
}

@implementation RxExceptionsExceptionsTest_$16_$2

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSingleSubscriber *) nil_chk(val$s1_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(JavaLangInteger *)v {
  [((RxSingleSubscriber *) nil_chk(val$s1_)) onSuccessWithId:v];
}

- (instancetype)initWithRxSingleSubscriber:(RxSingleSubscriber *)capture$0 {
  RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxSingleSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s1_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "Lrx/SingleSubscriber<-Ljava/lang/Integer;>;", "LRxExceptionsExceptionsTest_$16;", "callWithId:", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxExceptionsExceptionsTest_$16_$2 = { "", "rx.exceptions", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxExceptionsExceptionsTest_$16_$2;
}

@end

void RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxExceptionsExceptionsTest_$16_$2 *self, RxSingleSubscriber *capture$0) {
  JreStrongAssign(&self->val$s1_, capture$0);
  RxSubscriber_init(self);
}

RxExceptionsExceptionsTest_$16_$2 *new_RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxSingleSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsTest_$16_$2, initWithRxSingleSubscriber_, capture$0)
}

RxExceptionsExceptionsTest_$16_$2 *create_RxExceptionsExceptionsTest_$16_$2_initWithRxSingleSubscriber_(RxSingleSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsTest_$16_$2, initWithRxSingleSubscriber_, capture$0)
}
