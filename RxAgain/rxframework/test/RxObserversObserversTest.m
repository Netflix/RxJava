//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/ObserversTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxObserver.h"
#include "RxObserversObservers.h"
#include "RxObserversObserversTest.h"
#include "RxObserversSerializedObserver.h"
#include "RxTestUtil.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxObserversObserversTest__Annotations$18();

@interface RxObserversObserversTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$1)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$1, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$1 *new_RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$1 *create_RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversObserversTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$2)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$2, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$2 *new_RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$2 *create_RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversObserversTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$3)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$3, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$3 *new_RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$3 *create_RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObserversObserversTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$4)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$4, val$value_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversObserversTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$4 *new_RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$4 *create_RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversObserversTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$5)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$5, val$value_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversObserversTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$5 *new_RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$5 *create_RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversObserversTest_$6 : NSObject < RxObserver > {
 @public
  IOSObjectArray *val$observer_;
  IOSBooleanArray *val$completeCalled_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxObserverArray:(IOSObjectArray *)capture$0
                       withBooleanArray:(IOSBooleanArray *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$6)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$6, val$observer_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxObserversObserversTest_$6, val$completeCalled_, IOSBooleanArray *)

__attribute__((unused)) static void RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(RxObserversObserversTest_$6 *self, IOSObjectArray *capture$0, IOSBooleanArray *capture$1);

__attribute__((unused)) static RxObserversObserversTest_$6 *new_RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(IOSObjectArray *capture$0, IOSBooleanArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$6 *create_RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(IOSObjectArray *capture$0, IOSBooleanArray *capture$1);

@interface RxObserversObserversTest_$7 : NSObject < RxObserver > {
 @public
  id<JavaUtilQueue> val$queue_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$7)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$7, val$queue_, id<JavaUtilQueue>)

__attribute__((unused)) static void RxObserversObserversTest_$7_initWithJavaUtilQueue_(RxObserversObserversTest_$7 *self, id<JavaUtilQueue> capture$0);

__attribute__((unused)) static RxObserversObserversTest_$7 *new_RxObserversObserversTest_$7_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$7 *create_RxObserversObserversTest_$7_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0);

@interface RxObserversObserversTest_$8 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserver *val$so_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserver:(RxObserversSerializedObserver *)capture$0
                 withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$8)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$8, val$so_, RxObserversSerializedObserver *)
J2OBJC_FIELD_SETTER(RxObserversObserversTest_$8, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversObserversTest_$8 *self, RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxObserversObserversTest_$8 *new_RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$8 *create_RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxObserversObserversTest_$9 : NSObject < RxObserver > {
 @public
  IOSIntArray *val$completed_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$9)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$9, val$completed_, IOSIntArray *)

__attribute__((unused)) static void RxObserversObserversTest_$9_initWithIntArray_(RxObserversObserversTest_$9 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxObserversObserversTest_$9 *new_RxObserversObserversTest_$9_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$9 *create_RxObserversObserversTest_$9_initWithIntArray_(IOSIntArray *capture$0);

@interface RxObserversObserversTest_$10 : NSObject < JavaLangRunnable > {
 @public
  RxObserversSerializedObserver *val$so_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)run;

- (instancetype)initWithRxObserversSerializedObserver:(RxObserversSerializedObserver *)capture$0
                 withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversObserversTest_$10)

J2OBJC_FIELD_SETTER(RxObserversObserversTest_$10, val$so_, RxObserversSerializedObserver *)
J2OBJC_FIELD_SETTER(RxObserversObserversTest_$10, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversObserversTest_$10 *self, RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxObserversObserversTest_$10 *new_RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversObserversTest_$10 *create_RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@implementation RxObserversObserversTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxObserversObservers_class_());
}

- (void)testEmptyOnErrorNotImplemented {
  @try {
    [((id<RxObserver>) nil_chk(RxObserversObservers_empty())) onErrorWithNSException:create_RxExceptionsTestException_init()];
    OrgJunitAssert_failWithNSString_(@"OnErrorNotImplementedException not thrown!");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *ex) {
    if (!([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsTestException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"TestException not wrapped, instead: ", [ex getCause]));
    }
  }
}

- (void)testCreate1OnErrorNotImplemented {
  @try {
    [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_(RxFunctionsActions_empty()))) onErrorWithNSException:create_RxExceptionsTestException_init()];
    OrgJunitAssert_failWithNSString_(@"OnErrorNotImplementedException not thrown!");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *ex) {
    if (!([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsTestException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"TestException not wrapped, instead: ", [ex getCause]));
    }
  }
}

- (void)testCreate1Null {
  RxObserversObservers_createWithRxFunctionsAction1_(nil);
}

- (void)testCreate2Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_(nil, throwAction);
}

- (void)testCreate3Null {
  RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), nil);
}

- (void)testCreate4Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(nil, throwAction, RxFunctionsActions_empty());
}

- (void)testCreate5Null {
  RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), nil, RxFunctionsActions_empty());
}

- (void)testCreate6Null {
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), throwAction, nil);
}

- (void)testCreate1Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_(action))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testCreate2Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_(action, throwAction))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testCreate3Value {
  JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxFunctionsAction1> action = create_RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(value);
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(action, throwAction, RxFunctionsActions_empty()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
}

- (void)testError2 {
  JavaUtilConcurrentAtomicAtomicReference *value = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxFunctionsAction1> action = create_RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(value);
  RxExceptionsTestException *exception = create_RxExceptionsTestException_init();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), action))) onErrorWithNSException:exception];
  OrgJunitAssert_assertEqualsWithId_withId_(exception, [value get]);
}

- (void)testError3 {
  JavaUtilConcurrentAtomicAtomicReference *value = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxFunctionsAction1> action = create_RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(value);
  RxExceptionsTestException *exception = create_RxExceptionsTestException_init();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), action, RxFunctionsActions_empty()))) onErrorWithNSException:exception];
  OrgJunitAssert_assertEqualsWithId_withId_(exception, [value get]);
}

- (void)testCompleted {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(RxFunctionsActions_empty(), throwAction, action))) onCompleted];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)testEmptyCompleted {
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_(RxFunctionsActions_empty()))) onCompleted];
  id<RxFunctionsAction1> throwAction = RxFunctionsActions_empty();
  [((id<RxObserver>) nil_chk(RxObserversObservers_createWithRxFunctionsAction1_withRxFunctionsAction1_(RxFunctionsActions_empty(), throwAction))) onCompleted];
}

- (void)onCompleteQueues {
  IOSObjectArray *observer = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:RxObserver_class_()];
  IOSBooleanArray *completeCalled = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false } count:1];
  RxObserversSerializedObserver *so = create_RxObserversSerializedObserver_initWithRxObserver_(create_RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(observer, completeCalled));
  IOSObjectArray_Set(observer, 0, so);
  [so onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(completeCalled, 0));
}

- (void)concurrentOnError {
  id<JavaUtilQueue> queue = create_JavaUtilConcurrentConcurrentLinkedQueue_init();
  RxObserversSerializedObserver *so = create_RxObserversSerializedObserver_initWithRxObserver_(create_RxObserversObserversTest_$7_initWithJavaUtilQueue_(queue));
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  @synchronized(so) {
    JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(so, cdl));
    [t start];
    JavaLangThread_sleepWithLong_(200);
    [so onErrorWithNSException:create_RxExceptionsTestException_init()];
  }
  if (![cdl awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"The wait timed out");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [queue size]);
  NSException *ex = [queue poll];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", ex), [ex isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)concurrentOnComplete {
  IOSIntArray *completed = [IOSIntArray arrayWithInts:(jint[]){ 0 } count:1];
  RxObserversSerializedObserver *so = create_RxObserversSerializedObserver_initWithRxObserver_(create_RxObserversObserversTest_$9_initWithIntArray_(completed));
  JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  @synchronized(so) {
    JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(so, cdl));
    [t start];
    JavaLangThread_sleepWithLong_(200);
    [so onCompleted];
  }
  if (![cdl awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"The wait timed out");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, IOSIntArray_Get(completed, 0));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversObserversTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, 17, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, 17, -1, 19, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testEmptyOnErrorNotImplemented);
  methods[2].selector = @selector(testCreate1OnErrorNotImplemented);
  methods[3].selector = @selector(testCreate1Null);
  methods[4].selector = @selector(testCreate2Null);
  methods[5].selector = @selector(testCreate3Null);
  methods[6].selector = @selector(testCreate4Null);
  methods[7].selector = @selector(testCreate5Null);
  methods[8].selector = @selector(testCreate6Null);
  methods[9].selector = @selector(testCreate1Value);
  methods[10].selector = @selector(testCreate2Value);
  methods[11].selector = @selector(testCreate3Value);
  methods[12].selector = @selector(testError2);
  methods[13].selector = @selector(testError3);
  methods[14].selector = @selector(testCompleted);
  methods[15].selector = @selector(testEmptyCompleted);
  methods[16].selector = @selector(onCompleteQueues);
  methods[17].selector = @selector(concurrentOnError);
  methods[18].selector = @selector(concurrentOnComplete);
  methods[19].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversObserversTest__Annotations$0, (void *)&RxObserversObserversTest__Annotations$1, (void *)&RxObserversObserversTest__Annotations$2, (void *)&RxObserversObserversTest__Annotations$3, (void *)&RxObserversObserversTest__Annotations$4, (void *)&RxObserversObserversTest__Annotations$5, (void *)&RxObserversObserversTest__Annotations$6, (void *)&RxObserversObserversTest__Annotations$7, (void *)&RxObserversObserversTest__Annotations$8, (void *)&RxObserversObserversTest__Annotations$9, (void *)&RxObserversObserversTest__Annotations$10, (void *)&RxObserversObserversTest__Annotations$11, (void *)&RxObserversObserversTest__Annotations$12, (void *)&RxObserversObserversTest__Annotations$13, (void *)&RxObserversObserversTest__Annotations$14, (void *)&RxObserversObserversTest__Annotations$15, (void *)&RxObserversObserversTest__Annotations$16, "LJavaLangException;", (void *)&RxObserversObserversTest__Annotations$17, (void *)&RxObserversObserversTest__Annotations$18 };
  static const J2ObjcClassInfo _RxObserversObserversTest = { "ObserversTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 20, 0, -1, -1, -1, -1, -1 };
  return &_RxObserversObserversTest;
}

@end

void RxObserversObserversTest_init(RxObserversObserversTest *self) {
  NSObject_init(self);
}

RxObserversObserversTest *new_RxObserversObserversTest_init() {
  J2OBJC_NEW_IMPL(RxObserversObserversTest, init)
}

RxObserversObserversTest *create_RxObserversObserversTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest, init)
}

IOSObjectArray *RxObserversObserversTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversObserversTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversObserversTest)

@implementation RxObserversObserversTest_$1

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversObserversTest;", "testCreate1Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversObserversTest_$1;
}

@end

void RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$1 *new_RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversObserversTest_$1 *create_RxObserversObserversTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversObserversTest_$2

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversObserversTest;", "testCreate2Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$2 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversObserversTest_$2;
}

@end

void RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$2 *new_RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversObserversTest_$2 *create_RxObserversObserversTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversObserversTest_$3

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObserversObserversTest;", "testCreate3Value", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$3 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObserversObserversTest_$3;
}

@end

void RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObserversObserversTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$3 *new_RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObserversObserversTest_$3 *create_RxObserversObserversTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObserversObserversTest_$4

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversObserversTest;", "testError2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$4 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObserversObserversTest_$4;
}

@end

void RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversObserversTest_$4 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$4 *new_RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversObserversTest_$4 *create_RxObserversObserversTest_$4_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$4, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversObserversTest_$5

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversObserversTest;", "testError3", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$5 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObserversObserversTest_$5;
}

@end

void RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversObserversTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$5 *new_RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversObserversTest_$5 *create_RxObserversObserversTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversObserversTest_$6

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<RxObserver>) nil_chk(IOSObjectArray_Get(nil_chk(val$observer_), 0))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(IOSObjectArray_Get(val$observer_, 0))) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
  *IOSBooleanArray_GetRef(nil_chk(val$completeCalled_), 0) = true;
}

- (instancetype)initWithRxObserverArray:(IOSObjectArray *)capture$0
                       withBooleanArray:(IOSBooleanArray *)capture$1 {
  RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  RELEASE_(val$completeCalled_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxObserverArray:withBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "[LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$completeCalled_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "[LRxObserver;[Z", "[Lrx/Observer<Ljava/lang/Integer;>;", "LRxObserversObserversTest;", "onCompleteQueues", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$6 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 2, 6, -1, 7, 8, -1 };
  return &_RxObserversObserversTest_$6;
}

@end

void RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(RxObserversObserversTest_$6 *self, IOSObjectArray *capture$0, IOSBooleanArray *capture$1) {
  JreStrongAssign(&self->val$observer_, capture$0);
  JreStrongAssign(&self->val$completeCalled_, capture$1);
  NSObject_init(self);
}

RxObserversObserversTest_$6 *new_RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(IOSObjectArray *capture$0, IOSBooleanArray *capture$1) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$6, initWithRxObserverArray_withBooleanArray_, capture$0, capture$1)
}

RxObserversObserversTest_$6 *create_RxObserversObserversTest_$6_initWithRxObserverArray_withBooleanArray_(IOSObjectArray *capture$0, IOSBooleanArray *capture$1) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$6, initWithRxObserverArray_withBooleanArray_, capture$0, capture$1)
}

@implementation RxObserversObserversTest_$7

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilQueue>) nil_chk(val$queue_)) offerWithId:e];
}

- (void)onCompleted {
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0 {
  RxObserversObserversTest_$7_initWithJavaUtilQueue_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LJavaUtilQueue;", "(Ljava/util/Queue<Ljava/lang/Throwable;>;)V", "Ljava/util/Queue<Ljava/lang/Throwable;>;", "LRxObserversObserversTest;", "concurrentOnError", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$7 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObserversObserversTest_$7;
}

@end

void RxObserversObserversTest_$7_initWithJavaUtilQueue_(RxObserversObserversTest_$7 *self, id<JavaUtilQueue> capture$0) {
  JreStrongAssign(&self->val$queue_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$7 *new_RxObserversObserversTest_$7_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$7, initWithJavaUtilQueue_, capture$0)
}

RxObserversObserversTest_$7 *create_RxObserversObserversTest_$7_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$7, initWithJavaUtilQueue_, capture$0)
}

@implementation RxObserversObserversTest_$8

- (void)run {
  [((RxObserversSerializedObserver *) nil_chk(val$so_)) onErrorWithNSException:create_JavaIoIOException_init()];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithRxObserversSerializedObserver:(RxObserversSerializedObserver *)capture$0
                 withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$so_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserver:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$so_", "LRxObserversSerializedObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserver;LJavaUtilConcurrentCountDownLatch;", "(Lrx/observers/SerializedObserver<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/observers/SerializedObserver<Ljava/lang/Integer;>;", "LRxObserversObserversTest;", "concurrentOnError" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$8 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxObserversObserversTest_$8;
}

@end

void RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversObserversTest_$8 *self, RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$so_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxObserversObserversTest_$8 *new_RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$8, initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxObserversObserversTest_$8 *create_RxObserversObserversTest_$8_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$8, initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxObserversObserversTest_$9

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
  (*IOSIntArray_GetRef(nil_chk(val$completed_), 0))++;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxObserversObserversTest_$9_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "[I", "LRxObserversObserversTest;", "concurrentOnComplete", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$9 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, 7, -1 };
  return &_RxObserversObserversTest_$9;
}

@end

void RxObserversObserversTest_$9_initWithIntArray_(RxObserversObserversTest_$9 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$completed_, capture$0);
  NSObject_init(self);
}

RxObserversObserversTest_$9 *new_RxObserversObserversTest_$9_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$9, initWithIntArray_, capture$0)
}

RxObserversObserversTest_$9 *create_RxObserversObserversTest_$9_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$9, initWithIntArray_, capture$0)
}

@implementation RxObserversObserversTest_$10

- (void)run {
  [((RxObserversSerializedObserver *) nil_chk(val$so_)) onCompleted];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithRxObserversSerializedObserver:(RxObserversSerializedObserver *)capture$0
                 withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$so_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObserversSerializedObserver:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$so_", "LRxObserversSerializedObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversSerializedObserver;LJavaUtilConcurrentCountDownLatch;", "(Lrx/observers/SerializedObserver<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/observers/SerializedObserver<Ljava/lang/Integer;>;", "LRxObserversObserversTest;", "concurrentOnComplete" };
  static const J2ObjcClassInfo _RxObserversObserversTest_$10 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxObserversObserversTest_$10;
}

@end

void RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversObserversTest_$10 *self, RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$so_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxObserversObserversTest_$10 *new_RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxObserversObserversTest_$10, initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxObserversObserversTest_$10 *create_RxObserversObserversTest_$10_initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_(RxObserversSerializedObserver *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxObserversObserversTest_$10, initWithRxObserversSerializedObserver_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}
