//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/AsyncCompletableSubscriberTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxExceptionsTestException.h"
#include "RxObservable.h"
#include "RxObserversAsyncCompletableSubscriber.h"
#include "RxObserversAsyncCompletableSubscriberTest.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$2();

@implementation RxObserversAsyncCompletableSubscriberTest

- (void)normal {
  RxObserversAsyncCompletableSubscriberTest_TestCS *ts = create_RxObserversAsyncCompletableSubscriberTest_TestCS_init();
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
  [((RxCompletable *) nil_chk(RxCompletable_complete())) subscribeWithRxCompletableSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, ts->started_);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, ts->completions_);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_([((id<JavaUtilList>) nil_chk(ts->errors_)) description], 0, [ts->errors_ size]);
  OrgJunitAssert_assertTrueWithBoolean_([ts isUnsubscribed]);
}

- (void)error {
  RxObserversAsyncCompletableSubscriberTest_TestCS *ts = create_RxObserversAsyncCompletableSubscriberTest_TestCS_init();
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
  [((RxCompletable *) nil_chk(RxCompletable_errorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure")))) subscribeWithRxCompletableSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, ts->started_);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, ts->completions_);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_([((id<JavaUtilList>) nil_chk(ts->errors_)) description], 1, [ts->errors_ size]);
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([ts->errors_ getWithInt:0])) description], [[ts->errors_ getWithInt:0] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"Forced failure", [((NSException *) nil_chk([ts->errors_ getWithInt:0])) getMessage]);
  OrgJunitAssert_assertTrueWithBoolean_([ts isUnsubscribed]);
}

- (void)unsubscribed {
  RxObserversAsyncCompletableSubscriberTest_TestCS *ts = create_RxObserversAsyncCompletableSubscriberTest_TestCS_init();
  [ts unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([ts isUnsubscribed]);
  [((RxCompletable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) toCompletable])) subscribeWithRxCompletableSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, ts->started_);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, ts->completions_);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_([((id<JavaUtilList>) nil_chk(ts->errors_)) description], 0, [ts->errors_ size]);
  OrgJunitAssert_assertTrueWithBoolean_([ts isUnsubscribed]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversAsyncCompletableSubscriberTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normal);
  methods[1].selector = @selector(error);
  methods[2].selector = @selector(unsubscribed);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversAsyncCompletableSubscriberTest__Annotations$0, (void *)&RxObserversAsyncCompletableSubscriberTest__Annotations$1, (void *)&RxObserversAsyncCompletableSubscriberTest__Annotations$2, "LRxObserversAsyncCompletableSubscriberTest_TestCS;" };
  static const J2ObjcClassInfo _RxObserversAsyncCompletableSubscriberTest = { "AsyncCompletableSubscriberTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 3, -1, -1, -1 };
  return &_RxObserversAsyncCompletableSubscriberTest;
}

@end

void RxObserversAsyncCompletableSubscriberTest_init(RxObserversAsyncCompletableSubscriberTest *self) {
  NSObject_init(self);
}

RxObserversAsyncCompletableSubscriberTest *new_RxObserversAsyncCompletableSubscriberTest_init() {
  J2OBJC_NEW_IMPL(RxObserversAsyncCompletableSubscriberTest, init)
}

RxObserversAsyncCompletableSubscriberTest *create_RxObserversAsyncCompletableSubscriberTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversAsyncCompletableSubscriberTest, init)
}

IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversAsyncCompletableSubscriberTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversAsyncCompletableSubscriberTest)

@implementation RxObserversAsyncCompletableSubscriberTest_TestCS

- (void)onStart {
  started_++;
}

- (void)onCompleted {
  completions_++;
  [self clear];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(errors_)) addWithId:e];
  [self clear];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversAsyncCompletableSubscriberTest_TestCS_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(errors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "started_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "completions_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxObserversAsyncCompletableSubscriberTest;" };
  static const J2ObjcClassInfo _RxObserversAsyncCompletableSubscriberTest_TestCS = { "TestCS", "rx.observers", ptrTable, methods, fields, 7, 0x18, 4, 3, 3, -1, -1, -1, -1 };
  return &_RxObserversAsyncCompletableSubscriberTest_TestCS;
}

@end

void RxObserversAsyncCompletableSubscriberTest_TestCS_init(RxObserversAsyncCompletableSubscriberTest_TestCS *self) {
  RxObserversAsyncCompletableSubscriber_init(self);
  JreStrongAssignAndConsume(&self->errors_, new_JavaUtilArrayList_init());
}

RxObserversAsyncCompletableSubscriberTest_TestCS *new_RxObserversAsyncCompletableSubscriberTest_TestCS_init() {
  J2OBJC_NEW_IMPL(RxObserversAsyncCompletableSubscriberTest_TestCS, init)
}

RxObserversAsyncCompletableSubscriberTest_TestCS *create_RxObserversAsyncCompletableSubscriberTest_TestCS_init() {
  J2OBJC_CREATE_IMPL(RxObserversAsyncCompletableSubscriberTest_TestCS, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversAsyncCompletableSubscriberTest_TestCS)
