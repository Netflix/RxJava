//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorConcatTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorConcatTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsSubject.h"
#include "RxSubjectsUnicastSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsBooleanSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$30();

@interface RxInternalOperatorsOperatorConcatTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxSubscription> s_;
  id<JavaUtilList> values_;
  JavaLangThread *t_;
  jint count_;
  jboolean subscribed_;
  JavaUtilConcurrentCountDownLatch *once_;
  JavaUtilConcurrentCountDownLatch *okToContinue_;
  JavaUtilConcurrentCountDownLatch *threadHasStarted_;
  id seed_;
  jint size_;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)values;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)once
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)okToContinue
                                       withNSObjectArray:(IOSObjectArray *)values;

- (instancetype)initWithId:(id)seed
                   withInt:(jint)size;

- (void)callWithId:(RxSubscriber *)observer;

- (void)waitForThreadDone;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, s_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, t_, JavaLangThread *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, once_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, okToContinue_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, threadHasStarted_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable, seed_, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(IOSObjectArray *values);

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values);

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, id seed, jint size);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(id seed, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(id seed, jint size);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorConcatTest_TestObservable)

@interface RxInternalOperatorsOperatorConcatTest_TestObservable_$1 : NSObject < RxSubscription > {
 @public
  RxInternalOperatorsOperatorConcatTest_TestObservable *this$0_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_TestObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable_$1, this$0_, RxInternalOperatorsOperatorConcatTest_TestObservable *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *new_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *create_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$);

@interface RxInternalOperatorsOperatorConcatTest_TestObservable_$2 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorConcatTest_TestObservable *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)outer$
                                                            withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_TestObservable_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable_$2, this$0_, RxInternalOperatorsOperatorConcatTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_TestObservable_$2, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *new_RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *create_RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorConcatTest_$1 : NSObject < RxFunctionsFunc1 >

- (id<JavaUtilList>)callWithId:(id<JavaUtilList>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$1_init(RxInternalOperatorsOperatorConcatTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$1 *new_RxInternalOperatorsOperatorConcatTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$1 *create_RxInternalOperatorsOperatorConcatTest_$1_init();

@interface RxInternalOperatorsOperatorConcatTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxObservable *val$odds_;
  RxObservable *val$even_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxObservable:(RxObservable *)capture$0
                    withRxObservable:(RxObservable *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$2, val$odds_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$2, val$even_, RxObservable *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxInternalOperatorsOperatorConcatTest_$2 *self, RxObservable *capture$0, RxObservable *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$2 *new_RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxObservable *capture$0, RxObservable *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$2 *create_RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxObservable *capture$0, RxObservable *capture$1);

@interface RxInternalOperatorsOperatorConcatTest_$3 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$parent_;
  RxInternalOperatorsOperatorConcatTest_TestObservable *val$o1_;
  RxInternalOperatorsOperatorConcatTest_TestObservable *val$o2_;
  JavaUtilConcurrentCountDownLatch *val$allowThird_;
  RxInternalOperatorsOperatorConcatTest_TestObservable *val$o3_;
  JavaUtilConcurrentCountDownLatch *val$parentHasStarted_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$1
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$2
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$4
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$5;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$parent_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$o1_, RxInternalOperatorsOperatorConcatTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$o2_, RxInternalOperatorsOperatorConcatTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$allowThird_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$o3_, RxInternalOperatorsOperatorConcatTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3, val$parentHasStarted_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorConcatTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$3 *new_RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$3 *create_RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5);

@interface RxInternalOperatorsOperatorConcatTest_$3_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorConcatTest_$3 *this$0_;
  RxSubscriptionsBooleanSubscription *val$s_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_$3:(RxInternalOperatorsOperatorConcatTest_$3 *)outer$
                          withRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0
                                                withRxSubscriber:(RxSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$3_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3_$1, this$0_, RxInternalOperatorsOperatorConcatTest_$3 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3_$1, val$s_, RxSubscriptionsBooleanSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$3_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3_$1 *self, RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$3_$1 *new_RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$3_$1 *create_RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1);

@interface RxInternalOperatorsOperatorConcatTest_$4 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorConcatTest_TestObservable *val$w1_;
  RxInternalOperatorsOperatorConcatTest_TestObservable *val$w2_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$0
                    withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$4, val$w1_, RxInternalOperatorsOperatorConcatTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$4, val$w2_, RxInternalOperatorsOperatorConcatTest_TestObservable *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_$4 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$4 *new_RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$4 *create_RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1);

@interface RxInternalOperatorsOperatorConcatTest_$5 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$5_init(RxInternalOperatorsOperatorConcatTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$5 *new_RxInternalOperatorsOperatorConcatTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$5 *create_RxInternalOperatorsOperatorConcatTest_$5_init();

@interface RxInternalOperatorsOperatorConcatTest_$6 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$6_init(RxInternalOperatorsOperatorConcatTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$6 *new_RxInternalOperatorsOperatorConcatTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$6 *create_RxInternalOperatorsOperatorConcatTest_$6_init();

@interface RxInternalOperatorsOperatorConcatTest_$7 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$7_init(RxInternalOperatorsOperatorConcatTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$7 *new_RxInternalOperatorsOperatorConcatTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$7 *create_RxInternalOperatorsOperatorConcatTest_$7_init();

@interface RxInternalOperatorsOperatorConcatTest_$8 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler *val$sch_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$8, val$sch_, RxScheduler *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxInternalOperatorsOperatorConcatTest_$8 *self, RxScheduler *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$8 *new_RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$8 *create_RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxScheduler *capture$0);

@interface RxInternalOperatorsOperatorConcatTest_$9 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
  id<JavaUtilConcurrentExecutorService> val$executor_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                        withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$9, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$9, val$executor_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(RxInternalOperatorsOperatorConcatTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$9 *new_RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$9 *create_RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1);

@interface RxInternalOperatorsOperatorConcatTest_$10 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$completed_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorConcatTest_$10, val$completed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorConcatTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$10 *new_RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$10 *create_RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorConcatTest_$11 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorConcatTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorConcatTest_$11_init(RxInternalOperatorsOperatorConcatTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$11 *new_RxInternalOperatorsOperatorConcatTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorConcatTest_$11 *create_RxInternalOperatorsOperatorConcatTest_$11_init();

@implementation RxInternalOperatorsOperatorConcatTest

- (void)testConcat {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  IOSObjectArray *o = [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"3", @"5", @"7" } count:4 type:NSString_class_()];
  IOSObjectArray *e = [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"4", @"6" } count:3 type:NSString_class_()];
  RxObservable *odds = RxObservable_fromWithNSObjectArray_(o);
  RxObservable *even = RxObservable_fromWithNSObjectArray_(e);
  RxObservable *concat = RxObservable_concatWithRxObservable_withRxObservable_(odds, even);
  [((RxObservable *) nil_chk(concat)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(7)))) onNextWithId:OrgMockitoMatchers_anyString()];
}

- (void)testConcatWithList {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  IOSObjectArray *o = [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"3", @"5", @"7" } count:4 type:NSString_class_()];
  IOSObjectArray *e = [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"4", @"6" } count:3 type:NSString_class_()];
  RxObservable *odds = RxObservable_fromWithNSObjectArray_(o);
  RxObservable *even = RxObservable_fromWithNSObjectArray_(e);
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  [list addWithId:odds];
  [list addWithId:even];
  RxObservable *concat = RxObservable_concatWithRxObservable_(RxObservable_fromWithJavaLangIterable_(list));
  [((RxObservable *) nil_chk(concat)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(7)))) onNextWithId:OrgMockitoMatchers_anyString()];
}

- (void)testConcatMapIterable {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  IOSObjectArray *l = [IOSObjectArray arrayWithObjects:(id[]){ @"a", @"b", @"c", @"d", @"e" } count:5 type:NSString_class_()];
  id<RxFunctionsFunc1> identity = create_RxInternalOperatorsOperatorConcatTest_$1_init();
  RxObservable *listObs = RxObservable_justWithId_(JavaUtilArrays_asListWithNSObjectArray_(l));
  RxObservable *concatMap = [((RxObservable *) nil_chk(listObs)) concatMapIterableWithRxFunctionsFunc1:identity];
  [((RxObservable *) nil_chk(concatMap)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"d"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"e"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
}

- (void)testConcatObservableOfObservables {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  IOSObjectArray *o = [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"3", @"5", @"7" } count:4 type:NSString_class_()];
  IOSObjectArray *e = [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"4", @"6" } count:3 type:NSString_class_()];
  RxObservable *odds = RxObservable_fromWithNSObjectArray_(o);
  RxObservable *even = RxObservable_fromWithNSObjectArray_(e);
  RxObservable *observableOfObservables = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(odds, even));
  RxObservable *concat = RxObservable_concatWithRxObservable_(observableOfObservables);
  [((RxObservable *) nil_chk(concat)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(7)))) onNextWithId:OrgMockitoMatchers_anyString()];
}

- (void)testSimpleAsyncConcat {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorConcatTest_TestObservable *o1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *o2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five", @"six" } count:3 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(o1), RxObservable_createWithRxObservable_OnSubscribe_(o2)))) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(o1->t_)) join];
    [((JavaLangThread *) nil_chk(o2->t_)) join];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"failed waiting on threads");
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"five"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"six"];
}

- (void)testNestedAsyncConcat {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorConcatTest_TestObservable *o1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *o2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five", @"six" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *o3 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"seven", @"eight", @"nine" } count:3 type:NSObject_class_()]);
  JavaUtilConcurrentCountDownLatch *allowThird = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicReference *parent = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *parentHasStarted = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObservable *observableOfObservables = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(parent, o1, o2, allowThird, o3, parentHasStarted));
  [((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(observableOfObservables))) subscribeWithRxObserver:observer];
  [parentHasStarted await];
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Thread1 is starting ... waiting for it to complete ..."];
    [o1 waitForThreadDone];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Thread2 is starting ... waiting for it to complete ..."];
    [o2 waitForThreadDone];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"failed waiting on threads", e);
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"five"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"six"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"seven"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"eight"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"nine"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [allowThird countDown];
  @try {
    [o3 waitForThreadDone];
  }
  @catch (NSException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"failed waiting on threads", e);
  }
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"seven"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"eight"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"nine"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testBlockedObservableOfObservables {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  IOSObjectArray *o = [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"3", @"5", @"7" } count:4 type:NSString_class_()];
  IOSObjectArray *e = [IOSObjectArray arrayWithObjects:(id[]){ @"2", @"4", @"6" } count:3 type:NSString_class_()];
  RxObservable *odds = RxObservable_fromWithNSObjectArray_(o);
  RxObservable *even = RxObservable_fromWithNSObjectArray_(e);
  JavaUtilConcurrentCountDownLatch *callOnce = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *okToContinue = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxInternalOperatorsOperatorConcatTest_TestObservable *observableOfObservables = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(callOnce, okToContinue, [IOSObjectArray arrayWithObjects:(id[]){ odds, even } count:2 type:NSObject_class_()]);
  RxObservable *concatF = RxObservable_concatWithRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(observableOfObservables));
  [((RxObservable *) nil_chk(concatF)) subscribeWithRxObserver:observer];
  @try {
    [callOnce await];
  }
  @catch (NSException *ex) {
    [((NSException *) nil_chk(ex)) printStackTrace];
    OrgJunitAssert_failWithNSString_([ex getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"1"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"3"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"5"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"7"];
  @try {
    [okToContinue countDown];
    [((JavaLangThread *) nil_chk(observableOfObservables->t_)) join];
  }
  @catch (NSException *ex) {
    [((NSException *) nil_chk(ex)) printStackTrace];
    OrgJunitAssert_failWithNSString_([ex getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"2"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"4"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"6"];
}

- (void)testConcatConcurrentWithInfinity {
  RxInternalOperatorsOperatorConcatTest_TestObservable *w1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(@"hello", JavaLangInteger_MAX_VALUE);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorConcatTest_TestObservable *observableOfObservables = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ RxObservable_createWithRxObservable_OnSubscribe_(w1), RxObservable_createWithRxObservable_OnSubscribe_(w2) } count:2 type:NSObject_class_()]);
  RxObservable *concatF = RxObservable_concatWithRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(observableOfObservables));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(concatF)) takeWithInt:50])) subscribeWithRxObserver:observer];
  @try {
    [w1 waitForThreadDone];
    [w2 waitForThreadDone];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(47)])) onNextWithId:@"hello"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testConcatNonBlockingObservables {
  JavaUtilConcurrentCountDownLatch *okToContinueW1 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *okToContinueW2 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(nil, okToContinueW1, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(nil, okToContinueW2, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five", @"six" } count:3 type:NSObject_class_()]);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *observableOfObservables = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(w1, w2));
  RxObservable *concat = RxObservable_concatWithRxObservable_(observableOfObservables);
  [((RxObservable *) nil_chk(concat)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  @try {
    [okToContinueW1 countDown];
    [okToContinueW2 countDown];
    [((JavaLangThread *) nil_chk(w1->t_)) join];
    [((JavaLangThread *) nil_chk(w2->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"five"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"six"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testConcatUnsubscribe {
  JavaUtilConcurrentCountDownLatch *callOnce = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *okToContinue = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(callOnce, okToContinue, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five", @"six" } count:3 type:NSObject_class_()]);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *concat = RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(w1), RxObservable_createWithRxObservable_OnSubscribe_(w2));
  @try {
    id<RxSubscription> s1 = [((RxObservable *) nil_chk(concat)) subscribeWithRxObserver:observer];
    [callOnce await];
    [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
    [okToContinue countDown];
    [((JavaLangThread *) nil_chk(w1->t_)) join];
    [((JavaLangThread *) nil_chk(w2->t_)) join];
  }
  @catch (NSException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"five"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"six"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
}

- (void)testConcatUnsubscribeConcurrent {
  JavaUtilConcurrentCountDownLatch *callOnce = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *okToContinue = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w1 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSObject_class_()]);
  RxInternalOperatorsOperatorConcatTest_TestObservable *w2 = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(callOnce, okToContinue, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five", @"six" } count:3 type:NSObject_class_()]);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxInternalOperatorsOperatorConcatTest_TestObservable *observableOfObservables = create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ RxObservable_createWithRxObservable_OnSubscribe_(w1), RxObservable_createWithRxObservable_OnSubscribe_(w2) } count:2 type:NSObject_class_()]);
  RxObservable *concatF = RxObservable_concatWithRxObservable_(RxObservable_createWithRxObservable_OnSubscribe_(observableOfObservables));
  id<RxSubscription> s1 = [((RxObservable *) nil_chk(concatF)) subscribeWithRxObserver:observer];
  @try {
    [callOnce await];
    [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
    [okToContinue countDown];
    [((JavaLangThread *) nil_chk(w1->t_)) join];
    [((JavaLangThread *) nil_chk(w2->t_)) join];
  }
  @catch (NSException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"five"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:@"six"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testMultipleObservers {
  id<RxObserver> o1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxObservable *timer = [((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(500, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), s))) takeWithInt:2];
  RxObservable *o = RxObservable_concatWithRxObservable_withRxObservable_(timer, timer);
  [((RxObservable *) nil_chk(o)) subscribeWithRxObserver:o1];
  [o subscribeWithRxObserver:o2];
  id<OrgMockitoInOrder> inOrder1 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o1 } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrder2 = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o2 } count:1 type:NSObject_class_()]);
  [s advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder1)) verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder2)) verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [s advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [s advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(0LL)];
  [s advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  [((id<RxObserver>) nil_chk([inOrder1 verifyWithId:o1 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder2 verifyWithId:o2 withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)concatVeryLongObservableOfObservables {
  jint n = 10000;
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$5_init());
  RxObservable *result = [((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(source))) toList];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(n);
  for (jint i = 0; i < n; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:list];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)concatVeryLongObservableOfObservablesTakeHalf {
  jint n = 10000;
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$6_init());
  RxObservable *result = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_(source))) takeWithInt:n / 2])) toList];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(n);
  for (jint i = 0; i < n / 2; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:list];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testConcatOuterBackpressure {
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_empty())) concatWithWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))])) takeWithInt:1])) toBlocking])) single])) intValue]);
}

- (void)testInnerBackpressureWithAlignedBoundaries {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2))) concatWithWithRxObservable:RxObservable_rangeWithInt_withInt_(0, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testInnerBackpressureWithoutAlignedBoundaries {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, (JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2) + 10))) concatWithWithRxObservable:RxObservable_rangeWithInt_withInt_(0, (JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2) + 10)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4) + 20, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
}

- (void)testConcatWithNonCompliantSourceDoubleOnComplete {
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorConcatTest_$7_init());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(o, o))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"hello", @"hello" } count:2 type:NSString_class_()])];
}

- (void)testIssue2890NoStackoverflow {
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(2);
  RxScheduler *sch = RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(executor);
  id<RxFunctionsFunc1> func = create_RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(sch);
  jint n = 5000;
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, n))) concatMapWithRxFunctionsFunc1:func])) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(counter, executor)];
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) awaitTerminationWithLong:20000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(n, [counter get]);
}

- (void)testRequestOverflowDoesNotStallStream {
  RxObservable *o1 = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6));
  JavaUtilConcurrentAtomicAtomicBoolean *completed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o1)) concatWithWithRxObservable:o2])) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(completed)];
  OrgJunitAssert_assertTrueWithBoolean_([completed get]);
}

- (void)concatMapRangeAsyncLoopIssue2876 {
  jlong durationSeconds = 2;
  jlong startTime = JavaLangSystem_currentTimeMillis();
  for (jint i = 0; ; i++) {
    if (JavaLangSystem_currentTimeMillis() - startTime > [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toMillisWithLong:durationSeconds]) return;
    if (i % 1000 == 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"concatMapRangeAsyncLoop > ", i)];
    }
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) concatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorConcatTest_$11_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
    [ts awaitTerminalEventWithLong:2500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [ts assertTerminalEvent];
    [ts assertNoErrors];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(999), [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:999]);
  }
}

- (void)scalarAndRangeBackpressured {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_rangeWithInt_withInt_(2, 3)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:5];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4) } count:4 type:JavaLangInteger_class_()]];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)scalarAndEmptyBackpressured {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_empty()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:5];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)rangeAndEmptyBackpressured {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) concatWithWithRxObservable:RxObservable_empty()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:5];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)emptyAndScalarBackpressured {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_empty())) concatWithWithRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:5];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)concatMany {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, RxObservable_class_());
    IOSObjectArray *obs = [IOSObjectArray arrayWithLength:i type:RxObservable_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(obs, RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)));
    IOSObjectArray *expected = [IOSObjectArray arrayWithLength:i type:JavaLangInteger_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(expected, JavaLangInteger_valueOfWithInt_(1));
    JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"concat" parameterTypes:clazz];
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(((RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:nil withNSObjectArray:obs], [RxObservable class])))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:expected];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
}

- (void)concatMapJustJust {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))))) concatMapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)concatMapJustRange {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(RxObservable_rangeWithInt_withInt_(1, 5)))) concatMapWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)concatMapDelayErrorJustJust {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))))) concatMapDelayErrorWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)concatMapDelayErrorJustRange {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(RxObservable_rangeWithInt_withInt_(1, 5)))) concatMapDelayErrorWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)startWith {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, NSObject_class_());
    IOSObjectArray *obs = [IOSObjectArray arrayWithLength:i type:NSObject_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(obs, JavaLangInteger_valueOfWithInt_(1));
    IOSObjectArray *expected = [IOSObjectArray arrayWithLength:i type:JavaLangInteger_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(expected, JavaLangInteger_valueOfWithInt_(1));
    JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"startWith" parameterTypes:clazz];
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(((RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:RxObservable_empty() withNSObjectArray:obs], [RxObservable class])))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:expected];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, 19, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, 33, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testConcat);
  methods[1].selector = @selector(testConcatWithList);
  methods[2].selector = @selector(testConcatMapIterable);
  methods[3].selector = @selector(testConcatObservableOfObservables);
  methods[4].selector = @selector(testSimpleAsyncConcat);
  methods[5].selector = @selector(testNestedAsyncConcat);
  methods[6].selector = @selector(testBlockedObservableOfObservables);
  methods[7].selector = @selector(testConcatConcurrentWithInfinity);
  methods[8].selector = @selector(testConcatNonBlockingObservables);
  methods[9].selector = @selector(testConcatUnsubscribe);
  methods[10].selector = @selector(testConcatUnsubscribeConcurrent);
  methods[11].selector = @selector(testMultipleObservers);
  methods[12].selector = @selector(concatVeryLongObservableOfObservables);
  methods[13].selector = @selector(concatVeryLongObservableOfObservablesTakeHalf);
  methods[14].selector = @selector(testConcatOuterBackpressure);
  methods[15].selector = @selector(testInnerBackpressureWithAlignedBoundaries);
  methods[16].selector = @selector(testInnerBackpressureWithoutAlignedBoundaries);
  methods[17].selector = @selector(testConcatWithNonCompliantSourceDoubleOnComplete);
  methods[18].selector = @selector(testIssue2890NoStackoverflow);
  methods[19].selector = @selector(testRequestOverflowDoesNotStallStream);
  methods[20].selector = @selector(concatMapRangeAsyncLoopIssue2876);
  methods[21].selector = @selector(scalarAndRangeBackpressured);
  methods[22].selector = @selector(scalarAndEmptyBackpressured);
  methods[23].selector = @selector(rangeAndEmptyBackpressured);
  methods[24].selector = @selector(emptyAndScalarBackpressured);
  methods[25].selector = @selector(concatMany);
  methods[26].selector = @selector(concatMapJustJust);
  methods[27].selector = @selector(concatMapJustRange);
  methods[28].selector = @selector(concatMapDelayErrorJustJust);
  methods[29].selector = @selector(concatMapDelayErrorJustRange);
  methods[30].selector = @selector(startWith);
  methods[31].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$0, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$1, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$2, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$3, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$4, "LNSException;", (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$5, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$6, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$7, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$8, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$9, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$10, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$11, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$12, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$13, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$14, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$15, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$16, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$17, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$18, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$19, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$20, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$21, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$22, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$23, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$24, "LJavaLangException;", (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$25, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$26, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$27, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$28, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$29, (void *)&RxInternalOperatorsOperatorConcatTest__Annotations$30, "LRxInternalOperatorsOperatorConcatTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest = { "OperatorConcatTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 32, 0, -1, 34, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorConcatTest;
}

@end

void RxInternalOperatorsOperatorConcatTest_init(RxInternalOperatorsOperatorConcatTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest *new_RxInternalOperatorsOperatorConcatTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest, init)
}

RxInternalOperatorsOperatorConcatTest *create_RxInternalOperatorsOperatorConcatTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 100000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorConcatTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorConcatTest)

@implementation RxInternalOperatorsOperatorConcatTest_TestObservable

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(self, values);
  return self;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)once
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)okToContinue
                                       withNSObjectArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(self, once, okToContinue, values);
  return self;
}

- (instancetype)initWithId:(id)seed
                   withInt:(jint)size {
  RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(self, seed, size);
  return self;
}

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:s_];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(self, observer)));
  [t_ start];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(threadHasStarted_)) countDown];
}

- (void)waitForThreadDone {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(threadHasStarted_)) await];
  [((JavaLangThread *) nil_chk(t_)) join];
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(values_);
  RELEASE_(t_);
  RELEASE_(once_);
  RELEASE_(okToContinue_);
  RELEASE_(threadHasStarted_);
  RELEASE_(seed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withNSObjectArray:);
  methods[2].selector = @selector(initWithId:withInt:);
  methods[3].selector = @selector(callWithId:);
  methods[4].selector = @selector(waitForThreadDone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subscribed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "okToContinue_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "threadHasStarted_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "seed_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;[LNSObject;", "LNSObject;I", "(TT;I)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "LJavaLangInterruptedException;", "Ljava/util/List<TT;>;", "TT;", "LRxInternalOperatorsOperatorConcatTest;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 5, 10, 10, -1, -1, 11, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, IOSObjectArray *values) {
  RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(self, nil, nil, values);
}

RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithNSObjectArray_, values)
}

RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithNSObjectArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithNSObjectArray_, values)
}

void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->s_, new_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(self));
  JreStrongAssign(&self->t_, nil);
  self->count_ = 0;
  self->subscribed_ = true;
  JreStrongAssignAndConsume(&self->threadHasStarted_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreStrongAssign(&self->values_, JavaUtilArrays_asListWithNSObjectArray_(values));
  self->size_ = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  JreStrongAssign(&self->once_, once);
  JreStrongAssign(&self->okToContinue_, okToContinue);
  JreStrongAssign(&self->seed_, nil);
}

RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_, once, okToContinue, values)
}

RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_(JavaUtilConcurrentCountDownLatch *once, JavaUtilConcurrentCountDownLatch *okToContinue, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withNSObjectArray_, once, okToContinue, values)
}

void RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(RxInternalOperatorsOperatorConcatTest_TestObservable *self, id seed, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->s_, new_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(self));
  JreStrongAssign(&self->t_, nil);
  self->count_ = 0;
  self->subscribed_ = true;
  JreStrongAssignAndConsume(&self->threadHasStarted_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreStrongAssign(&self->values_, nil);
  JreStrongAssign(&self->once_, nil);
  JreStrongAssign(&self->okToContinue_, nil);
  JreStrongAssign(&self->seed_, seed);
  self->size_ = size;
}

RxInternalOperatorsOperatorConcatTest_TestObservable *new_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(id seed, jint size) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithId_withInt_, seed, size)
}

RxInternalOperatorsOperatorConcatTest_TestObservable *create_RxInternalOperatorsOperatorConcatTest_TestObservable_initWithId_withInt_(id seed, jint size) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable, initWithId_withInt_, seed, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorConcatTest_TestObservable)

@implementation RxInternalOperatorsOperatorConcatTest_TestObservable_$1

- (void)unsubscribe {
  this$0_->subscribed_ = false;
}

- (jboolean)isUnsubscribed {
  return !this$0_->subscribed_;
}

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)outer$ {
  RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxInternalOperatorsOperatorConcatTest_TestObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorConcatTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_TestObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_TestObservable_$1;
}

@end

void RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *new_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable_$1, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_, outer$)
}

RxInternalOperatorsOperatorConcatTest_TestObservable_$1 *create_RxInternalOperatorsOperatorConcatTest_TestObservable_$1_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable_$1, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_, outer$)
}

@implementation RxInternalOperatorsOperatorConcatTest_TestObservable_$2

- (void)run {
  @try {
    while (this$0_->count_ < this$0_->size_ && this$0_->subscribed_) {
      if (nil != this$0_->values_) [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:[this$0_->values_ getWithInt:this$0_->count_]];
      else [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:this$0_->seed_];
      this$0_->count_++;
      if (nil != this$0_->once_) [this$0_->once_ countDown];
      if (nil != this$0_->okToContinue_) [this$0_->okToContinue_ awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    }
    if (this$0_->subscribed_) [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_failWithNSString_([e getMessage]);
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)outer$
                                                            withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorConcatTest_TestObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorConcatTest_TestObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorConcatTest$TestObservable;Lrx/Subscriber<-TT;>;)V", "Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_TestObservable_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_TestObservable_$2;
}

@end

void RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *new_RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable_$2, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorConcatTest_TestObservable_$2 *create_RxInternalOperatorsOperatorConcatTest_TestObservable_$2_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_TestObservable_$2, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorConcatTest_$1

- (id<JavaUtilList>)callWithId:(id<JavaUtilList>)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorConcatTest;", "testConcatMapIterable", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$1;
}

@end

void RxInternalOperatorsOperatorConcatTest_$1_init(RxInternalOperatorsOperatorConcatTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$1 *new_RxInternalOperatorsOperatorConcatTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$1, init)
}

RxInternalOperatorsOperatorConcatTest_$1 *create_RxInternalOperatorsOperatorConcatTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$1, init)
}

@implementation RxInternalOperatorsOperatorConcatTest_$2

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:val$odds_];
  [observer onNextWithId:val$even_];
  [observer onCompleted];
}

- (instancetype)initWithRxObservable:(RxObservable *)capture$0
                    withRxObservable:(RxObservable *)capture$1 {
  RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$odds_);
  RELEASE_(val$even_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxObservable:withRxObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$odds_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$even_", "LRxObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/Observable<Ljava/lang/String;>;>;)V", "LRxObservable;LRxObservable;", "(Lrx/Observable<Ljava/lang/String;>;Lrx/Observable<Ljava/lang/String;>;)V", "Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorConcatTest;", "testConcatObservableOfObservables", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$2;
}

@end

void RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxInternalOperatorsOperatorConcatTest_$2 *self, RxObservable *capture$0, RxObservable *capture$1) {
  JreStrongAssign(&self->val$odds_, capture$0);
  JreStrongAssign(&self->val$even_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$2 *new_RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxObservable *capture$0, RxObservable *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$2, initWithRxObservable_withRxObservable_, capture$0, capture$1)
}

RxInternalOperatorsOperatorConcatTest_$2 *create_RxInternalOperatorsOperatorConcatTest_$2_initWithRxObservable_withRxObservable_(RxObservable *capture$0, RxObservable *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$2, initWithRxObservable_withRxObservable_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorConcatTest_$3

- (void)callWithId:(RxSubscriber *)observer {
  RxSubscriptionsBooleanSubscription *s = create_RxSubscriptionsBooleanSubscription_init();
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:s];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$parent_)) setWithId:create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(self, s, observer))];
  [((JavaLangThread *) nil_chk([val$parent_ get])) start];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$parentHasStarted_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$1
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$2
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3
       withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$4
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$5 {
  RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5);
  return self;
}

- (void)dealloc {
  RELEASE_(val$parent_);
  RELEASE_(val$o1_);
  RELEASE_(val$o2_);
  RELEASE_(val$allowThird_);
  RELEASE_(val$o3_);
  RELEASE_(val$parentHasStarted_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withRxInternalOperatorsOperatorConcatTest_TestObservable:withRxInternalOperatorsOperatorConcatTest_TestObservable:withJavaUtilConcurrentCountDownLatch:withRxInternalOperatorsOperatorConcatTest_TestObservable:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$parent_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$o1_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$o2_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$allowThird_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$o3_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$parentHasStarted_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/Observable<Ljava/lang/String;>;>;)V", "LJavaUtilConcurrentAtomicAtomicReference;LRxInternalOperatorsOperatorConcatTest_TestObservable;LRxInternalOperatorsOperatorConcatTest_TestObservable;LJavaUtilConcurrentCountDownLatch;LRxInternalOperatorsOperatorConcatTest_TestObservable;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;Ljava/util/concurrent/CountDownLatch;Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;", "Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorConcatTest;", "testNestedAsyncConcat", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 6, 7, -1, 8, 9, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$3;
}

@end

void RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorConcatTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  JreStrongAssign(&self->val$parent_, capture$0);
  JreStrongAssign(&self->val$o1_, capture$1);
  JreStrongAssign(&self->val$o2_, capture$2);
  JreStrongAssign(&self->val$allowThird_, capture$3);
  JreStrongAssign(&self->val$o3_, capture$4);
  JreStrongAssign(&self->val$parentHasStarted_, capture$5);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$3 *new_RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

RxInternalOperatorsOperatorConcatTest_$3 *create_RxInternalOperatorsOperatorConcatTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$2, JavaUtilConcurrentCountDownLatch *capture$3, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_withRxInternalOperatorsOperatorConcatTest_TestObservable_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

@implementation RxInternalOperatorsOperatorConcatTest_$3_$1

- (void)run {
  @try {
    if (![((RxSubscriptionsBooleanSubscription *) nil_chk(val$s_)) isUnsubscribed]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Emit o1"];
      [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:RxObservable_createWithRxObservable_OnSubscribe_(this$0_->val$o1_)];
    }
    if (![val$s_ isUnsubscribed]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Emit o2"];
      [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:RxObservable_createWithRxObservable_OnSubscribe_(this$0_->val$o2_)];
    }
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$allowThird_)) await];
    }
    @catch (JavaLangInterruptedException *e) {
      [((RxSubscriber *) nil_chk(val$observer_)) onErrorWithNSException:e];
    }
    if (![val$s_ isUnsubscribed]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Emit o3"];
      [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:RxObservable_createWithRxObservable_OnSubscribe_(this$0_->val$o3_)];
    }
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(val$observer_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Done parent Observable"];
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_$3:(RxInternalOperatorsOperatorConcatTest_$3 *)outer$
                          withRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0
                                                withRxSubscriber:(RxSubscriber *)capture$1 {
  RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorConcatTest_$3:withRxSubscriptionsBooleanSubscription:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorConcatTest_$3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubscriptionsBooleanSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorConcatTest_$3;LRxSubscriptionsBooleanSubscription;LRxSubscriber;", "(Lrx/internal/operators/OperatorConcatTest$3;Lrx/subscriptions/BooleanSubscription;Lrx/Subscriber<-Lrx/Observable<Ljava/lang/String;>;>;)V", "Lrx/Subscriber<-Lrx/Observable<Ljava/lang/String;>;>;", "LRxInternalOperatorsOperatorConcatTest_$3;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$3_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$3_$1;
}

@end

void RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3_$1 *self, RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  JreStrongAssign(&self->val$observer_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$3_$1 *new_RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$3_$1, initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_, outer$, capture$0, capture$1)
}

RxInternalOperatorsOperatorConcatTest_$3_$1 *create_RxInternalOperatorsOperatorConcatTest_$3_$1_initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_(RxInternalOperatorsOperatorConcatTest_$3 *outer$, RxSubscriptionsBooleanSubscription *capture$0, RxSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$3_$1, initWithRxInternalOperatorsOperatorConcatTest_$3_withRxSubscriptionsBooleanSubscription_withRxSubscriber_, outer$, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorConcatTest_$4

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:RxObservable_createWithRxObservable_OnSubscribe_(val$w1_)];
  [observer onNextWithId:RxObservable_createWithRxObservable_OnSubscribe_(val$w2_)];
  [observer onCompleted];
}

- (instancetype)initWithRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$0
                    withRxInternalOperatorsOperatorConcatTest_TestObservable:(RxInternalOperatorsOperatorConcatTest_TestObservable *)capture$1 {
  RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$w1_);
  RELEASE_(val$w2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorConcatTest_TestObservable:withRxInternalOperatorsOperatorConcatTest_TestObservable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$w1_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$w2_", "LRxInternalOperatorsOperatorConcatTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/Observable<Ljava/lang/String;>;>;)V", "LRxInternalOperatorsOperatorConcatTest_TestObservable;LRxInternalOperatorsOperatorConcatTest_TestObservable;", "(Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;)V", "Lrx/internal/operators/OperatorConcatTest$TestObservable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorConcatTest;", "testConcatNonBlockingObservables", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$4;
}

@end

void RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_$4 *self, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1) {
  JreStrongAssign(&self->val$w1_, capture$0);
  JreStrongAssign(&self->val$w2_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$4 *new_RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$4, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_, capture$0, capture$1)
}

RxInternalOperatorsOperatorConcatTest_$4 *create_RxInternalOperatorsOperatorConcatTest_$4_initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_(RxInternalOperatorsOperatorConcatTest_TestObservable *capture$0, RxInternalOperatorsOperatorConcatTest_TestObservable *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$4, initWithRxInternalOperatorsOperatorConcatTest_TestObservable_withRxInternalOperatorsOperatorConcatTest_TestObservable_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorConcatTest_$5

- (void)callWithId:(RxSubscriber *)s {
  for (jint i = 0; i < 10000; i++) {
    if ([((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
      return;
    }
    [s onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(i))];
  }
  [((RxSubscriber *) nil_chk(s)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/Observable<Ljava/lang/Integer;>;>;)V", "LRxInternalOperatorsOperatorConcatTest;", "concatVeryLongObservableOfObservables", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$5;
}

@end

void RxInternalOperatorsOperatorConcatTest_$5_init(RxInternalOperatorsOperatorConcatTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$5 *new_RxInternalOperatorsOperatorConcatTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$5, init)
}

RxInternalOperatorsOperatorConcatTest_$5 *create_RxInternalOperatorsOperatorConcatTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$5, init)
}

@implementation RxInternalOperatorsOperatorConcatTest_$6

- (void)callWithId:(RxSubscriber *)s {
  for (jint i = 0; i < 10000; i++) {
    if ([((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
      return;
    }
    [s onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(i))];
  }
  [((RxSubscriber *) nil_chk(s)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/Observable<Ljava/lang/Integer;>;>;)V", "LRxInternalOperatorsOperatorConcatTest;", "concatVeryLongObservableOfObservablesTakeHalf", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$6;
}

@end

void RxInternalOperatorsOperatorConcatTest_$6_init(RxInternalOperatorsOperatorConcatTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$6 *new_RxInternalOperatorsOperatorConcatTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$6, init)
}

RxInternalOperatorsOperatorConcatTest_$6 *create_RxInternalOperatorsOperatorConcatTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$6, init)
}

@implementation RxInternalOperatorsOperatorConcatTest_$7

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) onNextWithId:@"hello"];
  [s onCompleted];
  [s onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorConcatTest;", "testConcatWithNonCompliantSourceDoubleOnComplete", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$7;
}

@end

void RxInternalOperatorsOperatorConcatTest_$7_init(RxInternalOperatorsOperatorConcatTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$7 *new_RxInternalOperatorsOperatorConcatTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$7, init)
}

RxInternalOperatorsOperatorConcatTest_$7 *create_RxInternalOperatorsOperatorConcatTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$7, init)
}

@implementation RxInternalOperatorsOperatorConcatTest_$8

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  RxObservable *observable = [((RxObservable *) nil_chk(RxObservable_justWithId_(t))) subscribeOnWithRxScheduler:val$sch_];
  RxSubjectsSubject *subject = RxSubjectsUnicastSubject_create();
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:subject];
  return subject;
}

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0 {
  RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sch_", "LRxScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxScheduler;", "LRxInternalOperatorsOperatorConcatTest;", "testIssue2890NoStackoverflow", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$8;
}

@end

void RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxInternalOperatorsOperatorConcatTest_$8 *self, RxScheduler *capture$0) {
  JreStrongAssign(&self->val$sch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$8 *new_RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$8, initWithRxScheduler_, capture$0)
}

RxInternalOperatorsOperatorConcatTest_$8 *create_RxInternalOperatorsOperatorConcatTest_$8_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$8, initWithRxScheduler_, capture$0)
}

@implementation RxInternalOperatorsOperatorConcatTest_$9

- (void)onNextWithId:(JavaLangInteger *)t {
  @try {
    JavaLangThread_sleepWithLong_(1);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) getAndIncrement] % 100 == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"testIssue2890NoStackoverflow -> "];
    [JreLoadStatic(JavaLangSystem, out) printlnWithInt:[val$counter_ get]];
  }
}

- (void)onCompleted {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(val$executor_)) shutdown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(val$executor_)) shutdown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                        withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$1 {
  RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorConcatTest_$9 class]);
  RELEASE_(val$counter_);
  RELEASE_(val$executor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentExecutorService:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$executor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentExecutorService;", "LRxInternalOperatorsOperatorConcatTest;", "testIssue2890NoStackoverflow", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$9;
}

@end

void RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(RxInternalOperatorsOperatorConcatTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1) {
  JreStrongAssign(&self->val$counter_, capture$0);
  JreStrongAssign(&self->val$executor_, capture$1);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorConcatTest_$9 *new_RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_, capture$0, capture$1)
}

RxInternalOperatorsOperatorConcatTest_$9 *create_RxInternalOperatorsOperatorConcatTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, id<JavaUtilConcurrentExecutorService> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentExecutorService_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorConcatTest_$10

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$completed_)) setWithBoolean:true];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self requestWithLong:2];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorConcatTest_$10 class]);
  RELEASE_(val$completed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorConcatTest;", "testRequestOverflowDoesNotStallStream", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$10;
}

@end

void RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorConcatTest_$10 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$completed_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorConcatTest_$10 *new_RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorConcatTest_$10 *create_RxInternalOperatorsOperatorConcatTest_$10_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$10, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorConcatTest_$11

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:JavaLangInteger_class_()]));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorConcatTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorConcatTest;", "concatMapRangeAsyncLoopIssue2876", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorConcatTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorConcatTest_$11;
}

@end

void RxInternalOperatorsOperatorConcatTest_$11_init(RxInternalOperatorsOperatorConcatTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorConcatTest_$11 *new_RxInternalOperatorsOperatorConcatTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorConcatTest_$11, init)
}

RxInternalOperatorsOperatorConcatTest_$11 *create_RxInternalOperatorsOperatorConcatTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorConcatTest_$11, init)
}
