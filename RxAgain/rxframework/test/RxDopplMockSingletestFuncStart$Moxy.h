//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/rx/doppl/mock/singletest/FuncStart$Moxy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxDopplMockSingletestFuncStart$Moxy")
#ifdef RESTRICT_RxDopplMockSingletestFuncStart$Moxy
#define INCLUDE_ALL_RxDopplMockSingletestFuncStart$Moxy 0
#else
#define INCLUDE_ALL_RxDopplMockSingletestFuncStart$Moxy 1
#endif
#undef RESTRICT_RxDopplMockSingletestFuncStart$Moxy

#if !defined (RxDopplMockSingletestFuncStart_Moxy_) && (INCLUDE_ALL_RxDopplMockSingletestFuncStart$Moxy || defined(INCLUDE_RxDopplMockSingletestFuncStart_Moxy))
#define RxDopplMockSingletestFuncStart_Moxy_

#define RESTRICT_RxDopplMockSingletestFuncStart 1
#define INCLUDE_RxDopplMockSingletestFuncStart 1
#include "RxDopplMockSingletestFuncStart.h"

@class RxSingle;
@protocol JavaLangReflectInvocationHandler;
@protocol RxSingle_OnSubscribe;

@interface RxDopplMockSingletestFuncStart_Moxy : RxDopplMockSingletestFuncStart {
 @public
  id<JavaLangReflectInvocationHandler> $__handler_;
}

#pragma mark Public

- (id<RxSingle_OnSubscribe>)callWithId:(RxSingle *)t1
                                withId:(id<RxSingle_OnSubscribe>)t2;

- (jboolean)isEqual:(id)arg0;

- (id<JavaLangReflectInvocationHandler>)getHandler;

- (NSUInteger)hash;

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler;

- (id<RxSingle_OnSubscribe>)super$callWithRxSingle:(RxSingle *)t1
                          withRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)t2;

- (jboolean)super$equalsWithId:(id)arg0;

- (jint)super$hashCode;

- (NSString *)super$toString;

- (NSString *)description;

#pragma mark Protected

- (id)clone;

- (id)super$clone;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMockSingletestFuncStart_Moxy)

J2OBJC_FIELD_SETTER(RxDopplMockSingletestFuncStart_Moxy, $__handler_, id<JavaLangReflectInvocationHandler>)

FOUNDATION_EXPORT void RxDopplMockSingletestFuncStart_Moxy_init(RxDopplMockSingletestFuncStart_Moxy *self);

FOUNDATION_EXPORT RxDopplMockSingletestFuncStart_Moxy *new_RxDopplMockSingletestFuncStart_Moxy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxDopplMockSingletestFuncStart_Moxy *create_RxDopplMockSingletestFuncStart_Moxy_init();

J2OBJC_TYPE_LITERAL_HEADER(RxDopplMockSingletestFuncStart_Moxy)

@compatibility_alias RxDopplMockSingletestFuncStart$Moxy RxDopplMockSingletestFuncStart_Moxy;

#endif

#pragma pop_macro("INCLUDE_ALL_RxDopplMockSingletestFuncStart$Moxy")
