//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/util/AssertObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxObservable.h"
#include "RxUtilAssertObservable.h"
#include "RxUtilAssertObservableTest.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxUtilAssertObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxUtilAssertObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxUtilAssertObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxUtilAssertObservableTest__Annotations$3();

@implementation RxUtilAssertObservableTest

- (void)testPassNotNull {
  RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(@"foo", RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)), RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)));
}

- (void)testPassNull {
  RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(@"foo", nil, nil);
}

- (void)testFailNotNull {
  @try {
    RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(@"foo", RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)), RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)));
    OrgJunitAssert_failWithNSString_(@"Failed to throw");
  }
  @catch (JavaLangAssertionError *expected) {
  }
}

- (void)testFailNull {
  @try {
    RxUtilAssertObservable_assertObservableEqualsBlockingWithNSString_withRxObservable_withRxObservable_(@"foo", RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)), nil);
    OrgJunitAssert_failWithNSString_(@"Failed to throw");
  }
  @catch (JavaLangAssertionError *expected) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxUtilAssertObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testPassNotNull);
  methods[1].selector = @selector(testPassNull);
  methods[2].selector = @selector(testFailNotNull);
  methods[3].selector = @selector(testFailNull);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxUtilAssertObservableTest__Annotations$0, (void *)&RxUtilAssertObservableTest__Annotations$1, (void *)&RxUtilAssertObservableTest__Annotations$2, (void *)&RxUtilAssertObservableTest__Annotations$3 };
  static const J2ObjcClassInfo _RxUtilAssertObservableTest = { "AssertObservableTest", "rx.util", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxUtilAssertObservableTest;
}

@end

void RxUtilAssertObservableTest_init(RxUtilAssertObservableTest *self) {
  NSObject_init(self);
}

RxUtilAssertObservableTest *new_RxUtilAssertObservableTest_init() {
  J2OBJC_NEW_IMPL(RxUtilAssertObservableTest, init)
}

RxUtilAssertObservableTest *create_RxUtilAssertObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxUtilAssertObservableTest, init)
}

IOSObjectArray *RxUtilAssertObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxUtilAssertObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxUtilAssertObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxUtilAssertObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxUtilAssertObservableTest)
