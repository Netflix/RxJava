//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTakeLastTimedTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTakeLastTimedTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$8();

@interface RxInternalOperatorsOperatorTakeLastTimedTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$go_;
  RxObserversTestSubscriber *val$ts_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeLastTimedTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeLastTimedTest_$1, val$go_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeLastTimedTest_$1, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorTakeLastTimedTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeLastTimedTest_$1 *new_RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeLastTimedTest_$1 *create_RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1);

@interface RxInternalOperatorsOperatorTakeLastTimedTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
}

- (RxScheduler *)callWithId:(RxScheduler *)t;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeLastTimedTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeLastTimedTest_$2, val$scheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTakeLastTimedTest_$2 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeLastTimedTest_$2 *new_RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeLastTimedTest_$2 *create_RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@implementation RxInternalOperatorsOperatorTakeLastTimedTest

- (void)testTakeLastTimedWithNegativeCount {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(@"one"))) takeLastWithInt:-1 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
}

- (void)takeLastTimed {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeLastWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)takeLastTimedDelayCompletion {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeLastWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [scheduler advanceTimeByWithLong:1250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)takeLastTimedWithCapacity {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeLastWithInt:2 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)takeLastTimedThrowingSource {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeLastWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)takeLastTimedWithZeroCapacity {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) takeLastWithInt:0 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [scheduler advanceTimeByWithLong:250 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)completionRequestRace {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    jint n = 1000;
    for (jint i = 0; i < 25000; i++) {
      if (i % 1000 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"completionRequestRace >> ", i)];
      }
      RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
      [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) takeLastWithInt:n withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)])) subscribeWithRxSubscriber:ts];
      for (jint j = 0; j < n; j++) {
        [ps onNextWithId:JavaLangInteger_valueOfWithInt_(j)];
      }
      JavaUtilConcurrentAtomicAtomicBoolean *go = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
      [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(go, ts)];
      [go setWithBoolean:true];
      [ps onCompleted];
      [ts awaitTerminalEventWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      [ts assertValueCountWithInt:n];
      [ts assertNoErrors];
      [ts assertCompleted];
      id<JavaUtilList> list = [ts getOnNextEvents];
      for (jint j = 0; j < n; j++) {
        OrgJunitAssert_assertEqualsWithLong_withLong_(j, [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:j])) intValue]);
      }
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

- (void)nullElements {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil, JavaLangInteger_valueOfWithInt_(2) } count:3 type:JavaLangInteger_class_()]))) takeLastWithInt:4 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil, JavaLangInteger_valueOfWithInt_(2) } count:3 type:JavaLangInteger_class_()]];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)takeLastDefaultScheduler {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxPluginsRxJavaHooks_setOnComputationSchedulerWithRxFunctionsFunc1_(create_RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(scheduler));
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
    [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) takeLastWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    [scheduler advanceTimeByWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
    [ps onCompleted];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:2 type:JavaLangInteger_class_()]];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeLastTimedTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTakeLastTimedWithNegativeCount);
  methods[1].selector = @selector(takeLastTimed);
  methods[2].selector = @selector(takeLastTimedDelayCompletion);
  methods[3].selector = @selector(takeLastTimedWithCapacity);
  methods[4].selector = @selector(takeLastTimedThrowingSource);
  methods[5].selector = @selector(takeLastTimedWithZeroCapacity);
  methods[6].selector = @selector(completionRequestRace);
  methods[7].selector = @selector(nullElements);
  methods[8].selector = @selector(takeLastDefaultScheduler);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$3, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$4, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$5, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$6, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$7, (void *)&RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$8 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeLastTimedTest = { "OperatorTakeLastTimedTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeLastTimedTest;
}

@end

void RxInternalOperatorsOperatorTakeLastTimedTest_init(RxInternalOperatorsOperatorTakeLastTimedTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeLastTimedTest *new_RxInternalOperatorsOperatorTakeLastTimedTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest, init)
}

RxInternalOperatorsOperatorTakeLastTimedTest *create_RxInternalOperatorsOperatorTakeLastTimedTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIndexOutOfBoundsException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 60000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeLastTimedTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeLastTimedTest)

@implementation RxInternalOperatorsOperatorTakeLastTimedTest_$1

- (void)call {
  while (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$go_)) get]) ;
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) requestMoreWithLong:1000 + 1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1 {
  RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$go_);
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$go_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;LRxObserversTestSubscriber;", "(Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTakeLastTimedTest;", "completionRequestRace" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeLastTimedTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeLastTimedTest_$1;
}

@end

void RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorTakeLastTimedTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1) {
  JreStrongAssign(&self->val$go_, capture$0);
  JreStrongAssign(&self->val$ts_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeLastTimedTest_$1 *new_RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_, capture$0, capture$1)
}

RxInternalOperatorsOperatorTakeLastTimedTest_$1 *create_RxInternalOperatorsOperatorTakeLastTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxObserversTestSubscriber_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorTakeLastTimedTest_$2

- (RxScheduler *)callWithId:(RxScheduler *)t {
  return val$scheduler_;
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxScheduler;", "LRxSchedulersTestScheduler;", "LRxInternalOperatorsOperatorTakeLastTimedTest;", "takeLastDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeLastTimedTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTakeLastTimedTest_$2;
}

@end

void RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTakeLastTimedTest_$2 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeLastTimedTest_$2 *new_RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}

RxInternalOperatorsOperatorTakeLastTimedTest_$2 *create_RxInternalOperatorsOperatorTakeLastTimedTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeLastTimedTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}
