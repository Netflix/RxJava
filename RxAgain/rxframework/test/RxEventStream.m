//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/EventStream.java
//

#include "J2ObjC_source.h"
#include "RxEventStream.h"
#include "RxFunctionsAction0.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"

@interface RxEventStream ()

- (instancetype)init;

+ (jint)randomIntFrom0toWithInt:(jint)max;

@end

__attribute__((unused)) static void RxEventStream_init(RxEventStream *self);

__attribute__((unused)) static RxEventStream *new_RxEventStream_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxEventStream *create_RxEventStream_init();

__attribute__((unused)) static jint RxEventStream_randomIntFrom0toWithInt_(jint max);

@interface RxEventStream_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  NSString *val$type_;
  jint val$numInstances_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithNSString:(NSString *)capture$0
                         withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxEventStream_$1)

J2OBJC_FIELD_SETTER(RxEventStream_$1, val$type_, NSString *)

__attribute__((unused)) static void RxEventStream_$1_initWithNSString_withInt_(RxEventStream_$1 *self, NSString *capture$0, jint capture$1);

__attribute__((unused)) static RxEventStream_$1 *new_RxEventStream_$1_initWithNSString_withInt_(NSString *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxEventStream_$1 *create_RxEventStream_$1_initWithNSString_withInt_(NSString *capture$0, jint capture$1);

@interface RxEventStream_$1_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxEventStream_$1 *this$0_;
  RxSubscriber *val$subscriber_;
}

- (void)call;

- (instancetype)initWithRxEventStream_$1:(RxEventStream_$1 *)outer$
                        withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxEventStream_$1_$1)

J2OBJC_FIELD_SETTER(RxEventStream_$1_$1, this$0_, RxEventStream_$1 *)
J2OBJC_FIELD_SETTER(RxEventStream_$1_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1_$1 *self, RxEventStream_$1 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxEventStream_$1_$1 *new_RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxEventStream_$1_$1 *create_RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1 *outer$, RxSubscriber *capture$0);

@implementation RxEventStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxEventStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxObservable *)getEventStreamWithNSString:(NSString *)type
                                     withInt:(jint)numInstances {
  return RxEventStream_getEventStreamWithNSString_withInt_(type, numInstances);
}

+ (RxEventStream_Event *)randomEventWithNSString:(NSString *)type
                                         withInt:(jint)numInstances {
  return RxEventStream_randomEventWithNSString_withInt_(type, numInstances);
}

+ (jint)randomIntFrom0toWithInt:(jint)max {
  return RxEventStream_randomIntFrom0toWithInt_(max);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LRxEventStream_Event;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getEventStreamWithNSString:withInt:);
  methods[2].selector = @selector(randomEventWithNSString:withInt:);
  methods[3].selector = @selector(randomIntFrom0toWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getEventStream", "LNSString;I", "(Ljava/lang/String;I)Lrx/Observable<Lrx/EventStream$Event;>;", "randomEvent", "randomIntFrom0to", "I", "LRxEventStream_Event;" };
  static const J2ObjcClassInfo _RxEventStream = { "EventStream", "rx", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, 6, -1, -1, -1 };
  return &_RxEventStream;
}

@end

void RxEventStream_init(RxEventStream *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxEventStream *new_RxEventStream_init() {
  J2OBJC_NEW_IMPL(RxEventStream, init)
}

RxEventStream *create_RxEventStream_init() {
  J2OBJC_CREATE_IMPL(RxEventStream, init)
}

RxObservable *RxEventStream_getEventStreamWithNSString_withInt_(NSString *type, jint numInstances) {
  RxEventStream_initialize();
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxEventStream_$1_initWithNSString_withInt_(type, numInstances));
}

RxEventStream_Event *RxEventStream_randomEventWithNSString_withInt_(NSString *type, jint numInstances) {
  RxEventStream_initialize();
  id<JavaUtilMap> values = create_JavaUtilLinkedHashMap_init();
  [values putWithId:@"count200" withId:JavaLangInteger_valueOfWithInt_(RxEventStream_randomIntFrom0toWithInt_(4000))];
  [values putWithId:@"count4xx" withId:JavaLangInteger_valueOfWithInt_(RxEventStream_randomIntFrom0toWithInt_(300))];
  [values putWithId:@"count5xx" withId:JavaLangInteger_valueOfWithInt_(RxEventStream_randomIntFrom0toWithInt_(500))];
  return create_RxEventStream_Event_initWithNSString_withNSString_withJavaUtilMap_(type, JreStrcat("$I", @"instance_", RxEventStream_randomIntFrom0toWithInt_(numInstances)), values);
}

jint RxEventStream_randomIntFrom0toWithInt_(jint max) {
  RxEventStream_initialize();
  jlong x = JavaLangSystem_nanoTime();
  x ^= (JreLShift64(x, 21));
  x ^= (JreURShift64(x, 35));
  x ^= (JreLShift64(x, 4));
  return JavaLangMath_absWithInt_((jint) x % max);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxEventStream)

@implementation RxEventStream_Event

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)instanceId
                 withJavaUtilMap:(id<JavaUtilMap>)values {
  RxEventStream_Event_initWithNSString_withNSString_withJavaUtilMap_(self, type, instanceId, values);
  return self;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(instanceId_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "instanceId_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "values_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x11, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LRxEventStream;" };
  static const J2ObjcClassInfo _RxEventStream_Event = { "Event", "rx", ptrTable, methods, fields, 7, 0x9, 1, 3, 3, -1, -1, -1, -1 };
  return &_RxEventStream_Event;
}

@end

void RxEventStream_Event_initWithNSString_withNSString_withJavaUtilMap_(RxEventStream_Event *self, NSString *type, NSString *instanceId, id<JavaUtilMap> values) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
  JreStrongAssign(&self->instanceId_, instanceId);
  JreStrongAssign(&self->values_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(values));
}

RxEventStream_Event *new_RxEventStream_Event_initWithNSString_withNSString_withJavaUtilMap_(NSString *type, NSString *instanceId, id<JavaUtilMap> values) {
  J2OBJC_NEW_IMPL(RxEventStream_Event, initWithNSString_withNSString_withJavaUtilMap_, type, instanceId, values)
}

RxEventStream_Event *create_RxEventStream_Event_initWithNSString_withNSString_withJavaUtilMap_(NSString *type, NSString *instanceId, id<JavaUtilMap> values) {
  J2OBJC_CREATE_IMPL(RxEventStream_Event, initWithNSString_withNSString_withJavaUtilMap_, type, instanceId, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxEventStream_Event)

@implementation RxEventStream_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) createWorker];
  [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:inner];
  [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(self, subscriber)];
}

- (instancetype)initWithNSString:(NSString *)capture$0
                         withInt:(jint)capture$1 {
  RxEventStream_$1_initWithNSString_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$type_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$numInstances_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/EventStream$Event;>;)V", "LNSString;I", "LRxEventStream;", "getEventStreamWithNSString:withInt:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/EventStream$Event;>;" };
  static const J2ObjcClassInfo _RxEventStream_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxEventStream_$1;
}

@end

void RxEventStream_$1_initWithNSString_withInt_(RxEventStream_$1 *self, NSString *capture$0, jint capture$1) {
  JreStrongAssign(&self->val$type_, capture$0);
  self->val$numInstances_ = capture$1;
  NSObject_init(self);
}

RxEventStream_$1 *new_RxEventStream_$1_initWithNSString_withInt_(NSString *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(RxEventStream_$1, initWithNSString_withInt_, capture$0, capture$1)
}

RxEventStream_$1 *create_RxEventStream_$1_initWithNSString_withInt_(NSString *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(RxEventStream_$1, initWithNSString_withInt_, capture$0, capture$1)
}

@implementation RxEventStream_$1_$1

- (void)call {
  while (!([((RxSubscriber *) nil_chk(val$subscriber_)) isUnsubscribed] || [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted])) {
    [val$subscriber_ onNextWithId:RxEventStream_randomEventWithNSString_withInt_(this$0_->val$type_, this$0_->val$numInstances_)];
    @try {
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
      [val$subscriber_ onErrorWithNSException:e];
    }
  }
  [val$subscriber_ onCompleted];
}

- (instancetype)initWithRxEventStream_$1:(RxEventStream_$1 *)outer$
                        withRxSubscriber:(RxSubscriber *)capture$0 {
  RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxEventStream_$1:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxEventStream_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxEventStream_$1;LRxSubscriber;", "(Lrx/EventStream$1;Lrx/Subscriber<-Lrx/EventStream$Event;>;)V", "Lrx/Subscriber<-Lrx/EventStream$Event;>;", "LRxEventStream_$1;", "callWithId:" };
  static const J2ObjcClassInfo _RxEventStream_$1_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxEventStream_$1_$1;
}

@end

void RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1_$1 *self, RxEventStream_$1 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxEventStream_$1_$1 *new_RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxEventStream_$1_$1, initWithRxEventStream_$1_withRxSubscriber_, outer$, capture$0)
}

RxEventStream_$1_$1 *create_RxEventStream_$1_$1_initWithRxEventStream_$1_withRxSubscriber_(RxEventStream_$1 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxEventStream_$1_$1, initWithRxEventStream_$1_withRxSubscriber_, outer$, capture$0)
}
