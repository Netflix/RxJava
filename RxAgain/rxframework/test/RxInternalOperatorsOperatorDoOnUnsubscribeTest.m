//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorDoOnUnsubscribeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOperatorDoOnUnsubscribeTest.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$1();

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$upperLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$upperCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1, val$upperLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1, val$upperCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$onNextLatch_;
}

- (void)callWithId:(JavaLangLong *)aLong;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2, val$onNextLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$lowerLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$lowerCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3, val$lowerLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3, val$lowerCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$upperLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$upperCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4, val$upperLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4, val$upperCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$onNextLatch_;
}

- (void)callWithId:(JavaLangLong *)aLong;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5, val$onNextLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$lowerLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$lowerCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6, val$lowerLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6, val$lowerCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest

- (void)testDoOnUnsubscribe {
  jint subCount = 3;
  JavaUtilConcurrentCountDownLatch *upperLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(subCount);
  JavaUtilConcurrentCountDownLatch *lowerLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(subCount);
  JavaUtilConcurrentCountDownLatch *onNextLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(subCount);
  JavaUtilConcurrentAtomicAtomicInteger *upperCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *lowerCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *longs = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(50, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(upperLatch, upperCount)])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(onNextLatch)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(lowerLatch, lowerCount)];
  id<JavaUtilList> subscriptions = create_JavaUtilArrayList_init();
  id<JavaUtilList> subscribers = create_JavaUtilArrayList_init();
  for (jint i = 0; i < subCount; ++i) {
    RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
    [subscriptions addWithId:[((RxObservable *) nil_chk(longs)) subscribeWithRxSubscriber:subscriber]];
    [subscribers addWithId:subscriber];
  }
  [onNextLatch await];
  for (jint i = 0; i < subCount; ++i) {
    [((id<RxSubscription>) nil_chk([subscriptions getWithInt:i])) unsubscribe];
    [((RxObserversTestSubscriber *) nil_chk([subscribers getWithInt:i])) assertUnsubscribed];
  }
  [upperLatch await];
  [lowerLatch await];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(NSString_formatWithNSString_withNSObjectArray_(@"There should exactly %d un-subscription events for upper stream", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(subCount) } count:1 type:NSObject_class_()]), subCount, [upperCount get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(NSString_formatWithNSString_withNSObjectArray_(@"There should exactly %d un-subscription events for lower stream", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(subCount) } count:1 type:NSObject_class_()]), subCount, [lowerCount get]);
}

- (void)testDoOnUnSubscribeWorksWithRefCount {
  jint subCount = 3;
  JavaUtilConcurrentCountDownLatch *upperLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *lowerLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *onNextLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(subCount);
  JavaUtilConcurrentAtomicAtomicInteger *upperCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *lowerCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *longs = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(50, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(upperLatch, upperCount)])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(onNextLatch)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(lowerLatch, lowerCount)])) publish])) refCount];
  id<JavaUtilList> subscriptions = create_JavaUtilArrayList_init();
  id<JavaUtilList> subscribers = create_JavaUtilArrayList_init();
  for (jint i = 0; i < subCount; ++i) {
    RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
    [subscriptions addWithId:[((RxObservable *) nil_chk(longs)) subscribeWithRxSubscriber:subscriber]];
    [subscribers addWithId:subscriber];
  }
  [onNextLatch await];
  for (jint i = 0; i < subCount; ++i) {
    [((id<RxSubscription>) nil_chk([subscriptions getWithInt:i])) unsubscribe];
    [((RxObserversTestSubscriber *) nil_chk([subscribers getWithInt:i])) assertUnsubscribed];
  }
  [upperLatch await];
  [lowerLatch await];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"There should exactly 1 un-subscription events for upper stream", 1, [upperCount get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"There should exactly 1 un-subscription events for lower stream", 1, [lowerCount get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testDoOnUnsubscribe);
  methods[1].selector = @selector(testDoOnUnSubscribeWorksWithRefCount);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$1 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest = { "OperatorDoOnUnsubscribeTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_init(RxInternalOperatorsOperatorDoOnUnsubscribeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest, init)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDoOnUnsubscribeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorDoOnUnsubscribeTest)

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$upperLatch_)) countDown];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$upperCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$upperLatch_);
  RELEASE_(val$upperCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$upperLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$upperCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnsubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$upperLatch_, capture$0);
  JreStrongAssign(&self->val$upperCount_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2

- (void)callWithId:(JavaLangLong *)aLong {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$onNextLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onNextLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onNextLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnsubscribe", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$onNextLatch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$lowerLatch_)) countDown];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$lowerCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lowerLatch_);
  RELEASE_(val$lowerCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lowerLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$lowerCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnsubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$lowerLatch_, capture$0);
  JreStrongAssign(&self->val$lowerCount_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$upperLatch_)) countDown];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$upperCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$upperLatch_);
  RELEASE_(val$upperCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$upperLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$upperCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$upperLatch_, capture$0);
  JreStrongAssign(&self->val$upperCount_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$4, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5

- (void)callWithId:(JavaLangLong *)aLong {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$onNextLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onNextLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onNextLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$onNextLatch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$lowerLatch_)) countDown];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$lowerCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lowerLatch_);
  RELEASE_(val$lowerCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lowerLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$lowerCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnUnsubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6;
}

@end

void RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$lowerLatch_, capture$0);
  JreStrongAssign(&self->val$lowerCount_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *new_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6 *create_RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnUnsubscribeTest_$6, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}
