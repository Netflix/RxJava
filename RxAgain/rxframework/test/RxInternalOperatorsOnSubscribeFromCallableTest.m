//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeFromCallableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOnSubscribeFromCallableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/invocation/InvocationOnMock.h"
#include "org/mockito/stubbing/Answer.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$4();

@interface RxInternalOperatorsOnSubscribeFromCallableTest_$1 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  JavaUtilConcurrentCountDownLatch *val$observerLatch_;
  JavaUtilConcurrentCountDownLatch *val$funcLatch_;
}

- (NSString *)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromCallableTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeFromCallableTest_$1, val$observerLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeFromCallableTest_$1, val$funcLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeFromCallableTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeFromCallableTest_$1 *new_RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeFromCallableTest_$1 *create_RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxInternalOperatorsOnSubscribeFromCallableTest_$2 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaLangException *val$checkedException_;
}

- (id)call;

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromCallableTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeFromCallableTest_$2, val$checkedException_, JavaLangException *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(RxInternalOperatorsOnSubscribeFromCallableTest_$2 *self, JavaLangException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeFromCallableTest_$2 *new_RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(JavaLangException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeFromCallableTest_$2 *create_RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(JavaLangException *capture$0);

@implementation RxInternalOperatorsOnSubscribeFromCallableTest

- (void)shouldNotInvokeFuncUntilSubscription {
  id<JavaUtilConcurrentCallable> func = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(func)) call]))) thenReturnWithId:create_NSObject_init()];
  RxObservable *fromCallableObservable = RxObservable_fromCallableWithJavaUtilConcurrentCallable_(func);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ func } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(fromCallableObservable)) subscribe];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(func))) call];
}

- (void)shouldCallOnNextAndOnCompleted {
  id<JavaUtilConcurrentCallable> func = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(func)) call]))) thenReturnWithId:@"test_value"];
  RxObservable *fromCallableObservable = RxObservable_fromCallableWithJavaUtilConcurrentCallable_(func);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(fromCallableObservable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:@"test_value"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)shouldCallOnError {
  id<JavaUtilConcurrentCallable> func = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  NSException *throwable = create_JavaLangIllegalStateException_initWithNSString_(@"Test exception");
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(func)) call]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ throwable } count:1 type:NSException_class_()]];
  RxObservable *fromCallableObservable = RxObservable_fromCallableWithJavaUtilConcurrentCallable_(func);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(fromCallableObservable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyObject()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onErrorWithNSException:throwable];
}

- (void)shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission {
  id<JavaUtilConcurrentCallable> func = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  JavaUtilConcurrentCountDownLatch *funcLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *observerLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(func)) call]))) thenAnswerWithOrgMockitoStubbingAnswer:create_RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(observerLatch, funcLatch)];
  RxObservable *fromCallableObservable = RxObservable_fromCallableWithJavaUtilConcurrentCallable_(func);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(fromCallableObservable)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxObserver:observer];
  [observerLatch await];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [funcLatch countDown];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(func))) call];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)shouldAllowToThrowCheckedException {
  JavaLangException *checkedException = create_JavaLangException_initWithNSString_(@"test exception");
  RxObservable *fromCallableObservable = RxObservable_fromCallableWithJavaUtilConcurrentCallable_(create_RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(checkedException));
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(fromCallableObservable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onErrorWithNSException:checkedException];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeFromCallableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotInvokeFuncUntilSubscription);
  methods[1].selector = @selector(shouldCallOnNextAndOnCompleted);
  methods[2].selector = @selector(shouldCallOnError);
  methods[3].selector = @selector(shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission);
  methods[4].selector = @selector(shouldAllowToThrowCheckedException);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$4 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFromCallableTest = { "OnSubscribeFromCallableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeFromCallableTest;
}

@end

void RxInternalOperatorsOnSubscribeFromCallableTest_init(RxInternalOperatorsOnSubscribeFromCallableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeFromCallableTest *new_RxInternalOperatorsOnSubscribeFromCallableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest, init)
}

RxInternalOperatorsOnSubscribeFromCallableTest *create_RxInternalOperatorsOnSubscribeFromCallableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeFromCallableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeFromCallableTest)

@implementation RxInternalOperatorsOnSubscribeFromCallableTest_$1

- (NSString *)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$observerLatch_)) countDown];
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$funcLatch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  }
  return @"should_not_be_delivered";
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observerLatch_);
  RELEASE_(val$funcLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observerLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$funcLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOnSubscribeFromCallableTest;", "shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission", "Ljava/lang/Object;Lorg/mockito/stubbing/Answer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFromCallableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeFromCallableTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeFromCallableTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$observerLatch_, capture$0);
  JreStrongAssign(&self->val$funcLatch_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeFromCallableTest_$1 *new_RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxInternalOperatorsOnSubscribeFromCallableTest_$1 *create_RxInternalOperatorsOnSubscribeFromCallableTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOnSubscribeFromCallableTest_$2

- (id)call {
  @throw val$checkedException_;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0 {
  RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$checkedException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaLangException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$checkedException_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxInternalOperatorsOnSubscribeFromCallableTest;", "shouldAllowToThrowCheckedException", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeFromCallableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeFromCallableTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(RxInternalOperatorsOnSubscribeFromCallableTest_$2 *self, JavaLangException *capture$0) {
  JreStrongAssign(&self->val$checkedException_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeFromCallableTest_$2 *new_RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest_$2, initWithJavaLangException_, capture$0)
}

RxInternalOperatorsOnSubscribeFromCallableTest_$2 *create_RxInternalOperatorsOnSubscribeFromCallableTest_$2_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeFromCallableTest_$2, initWithJavaLangException_, capture$0)
}
