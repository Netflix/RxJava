//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/exceptions/ExceptionsNullTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptionsNullTest.h"
#include "RxExceptionsOnCompletedFailedException.h"
#include "RxExceptionsOnErrorFailedException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsOnErrorThrowable.h"
#include "RxExceptionsUnsubscribeFailedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$9();

@implementation RxExceptionsExceptionsNullTest

- (void)testOnCompleteFailedExceptionNull {
  NSException *t = create_RxExceptionsOnCompletedFailedException_initWithNSException_(nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnCompleteFailedExceptionMessageAndNull {
  NSException *t = create_RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(@"Message", nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorFailedExceptionNull {
  NSException *t = create_RxExceptionsOnErrorFailedException_initWithNSException_(nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorFailedExceptionMessageAndNull {
  NSException *t = create_RxExceptionsOnErrorFailedException_initWithNSString_withNSException_(@"Message", nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testUnsubscribeFailedExceptionNull {
  NSException *t = create_RxExceptionsUnsubscribeFailedException_initWithNSException_(nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testUnsubscribeFailedExceptionMessageAndNull {
  NSException *t = create_RxExceptionsUnsubscribeFailedException_initWithNSString_withNSException_(@"Message", nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorNotImplementedExceptionNull {
  NSException *t = create_RxExceptionsOnErrorNotImplementedException_initWithNSException_(nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorNotImplementedExceptionMessageAndNull {
  NSException *t = create_RxExceptionsOnErrorNotImplementedException_initWithNSString_withNSException_(@"Message", nil);
  OrgJunitAssert_assertTrueWithBoolean_([[t getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorThrowableFrom {
  NSException *t = RxExceptionsOnErrorThrowable_fromWithNSException_(nil);
  OrgJunitAssert_assertTrueWithBoolean_([[((NSException *) nil_chk(t)) getCause] isKindOfClass:[JavaLangNullPointerException class]]);
}

- (void)testOnErrorThrowableAddValueAsLastCause {
  NSException *t = RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(nil, @"value");
  OrgJunitAssert_assertTrueWithBoolean_([t isKindOfClass:[JavaLangNullPointerException class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptionsNullTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testOnCompleteFailedExceptionNull);
  methods[1].selector = @selector(testOnCompleteFailedExceptionMessageAndNull);
  methods[2].selector = @selector(testOnErrorFailedExceptionNull);
  methods[3].selector = @selector(testOnErrorFailedExceptionMessageAndNull);
  methods[4].selector = @selector(testUnsubscribeFailedExceptionNull);
  methods[5].selector = @selector(testUnsubscribeFailedExceptionMessageAndNull);
  methods[6].selector = @selector(testOnErrorNotImplementedExceptionNull);
  methods[7].selector = @selector(testOnErrorNotImplementedExceptionMessageAndNull);
  methods[8].selector = @selector(testOnErrorThrowableFrom);
  methods[9].selector = @selector(testOnErrorThrowableAddValueAsLastCause);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxExceptionsExceptionsNullTest__Annotations$0, (void *)&RxExceptionsExceptionsNullTest__Annotations$1, (void *)&RxExceptionsExceptionsNullTest__Annotations$2, (void *)&RxExceptionsExceptionsNullTest__Annotations$3, (void *)&RxExceptionsExceptionsNullTest__Annotations$4, (void *)&RxExceptionsExceptionsNullTest__Annotations$5, (void *)&RxExceptionsExceptionsNullTest__Annotations$6, (void *)&RxExceptionsExceptionsNullTest__Annotations$7, (void *)&RxExceptionsExceptionsNullTest__Annotations$8, (void *)&RxExceptionsExceptionsNullTest__Annotations$9 };
  static const J2ObjcClassInfo _RxExceptionsExceptionsNullTest = { "ExceptionsNullTest", "rx.exceptions", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxExceptionsExceptionsNullTest;
}

@end

void RxExceptionsExceptionsNullTest_init(RxExceptionsExceptionsNullTest *self) {
  NSObject_init(self);
}

RxExceptionsExceptionsNullTest *new_RxExceptionsExceptionsNullTest_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptionsNullTest, init)
}

RxExceptionsExceptionsNullTest *create_RxExceptionsExceptionsNullTest_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptionsNullTest, init)
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxExceptionsExceptionsNullTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsExceptionsNullTest)
