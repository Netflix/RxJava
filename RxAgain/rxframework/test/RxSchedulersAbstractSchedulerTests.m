//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/AbstractSchedulerTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMockMAction0.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalSchedulersImmediateScheduler.h"
#include "RxInternalSchedulersTrampolineScheduler.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerTests.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/invocation/InvocationOnMock.h"
#include "org/mockito/stubbing/Answer.h"
#include "org/mockito/stubbing/Stubber.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$11();

@interface RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *concurrentCounter_;
  JavaUtilConcurrentAtomicAtomicReference *error_;
  JavaUtilConcurrentCountDownLatch *completed_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator, concurrentCounter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator, error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator, completed_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *self);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *new_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *create_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator)

@interface RxSchedulersAbstractSchedulerTests_$1 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxFunctionsAction0> val$firstStepStart_;
  id<RxFunctionsAction0> val$firstStepEnd_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$1, val$firstStepStart_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$1, val$firstStepEnd_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$1 *self, id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$1 *new_RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$1 *create_RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxSchedulersAbstractSchedulerTests_$2 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxFunctionsAction0> val$secondStepStart_;
  RxScheduler_Worker *val$inner_;
  id<RxFunctionsAction0> val$firstAction_;
  id<RxFunctionsAction0> val$secondStepEnd_;
}

- (void)call;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$2)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$2, val$secondStepStart_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$2, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$2, val$firstAction_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$2, val$secondStepEnd_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(RxSchedulersAbstractSchedulerTests_$2 *self, id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$2 *new_RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$2 *create_RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3);

@interface RxSchedulersAbstractSchedulerTests_$3 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxFunctionsAction0> val$thirdStepStart_;
  RxScheduler_Worker *val$inner_;
  id<RxFunctionsAction0> val$secondAction_;
  id<RxFunctionsAction0> val$thirdStepEnd_;
}

- (void)call;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$3)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$3, val$thirdStepStart_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$3, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$3, val$secondAction_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$3, val$thirdStepEnd_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(RxSchedulersAbstractSchedulerTests_$3 *self, id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$3 *new_RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$3 *create_RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3);

@interface RxSchedulersAbstractSchedulerTests_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersAbstractSchedulerTests *this$0_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)id_;

- (instancetype)initWithRxSchedulersAbstractSchedulerTests:(RxSchedulersAbstractSchedulerTests *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$4)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$4, this$0_, RxSchedulersAbstractSchedulerTests *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests_$4 *self, RxSchedulersAbstractSchedulerTests *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$4 *new_RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$4 *create_RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$);

@interface RxSchedulersAbstractSchedulerTests_$4_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$4_$1)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$4_$1_init(RxSchedulersAbstractSchedulerTests_$4_$1 *self);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$4_$1 *new_RxSchedulersAbstractSchedulerTests_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$4_$1 *create_RxSchedulersAbstractSchedulerTests_$4_$1_init();

@interface RxSchedulersAbstractSchedulerTests_$5 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$5)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$5, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$5 *new_RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$5 *create_RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$6 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$6)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$6, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$6 *new_RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$6 *create_RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$7 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *val$inner_;
  id<RxFunctionsAction0> val$first_;
  id<RxFunctionsAction0> val$second_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$7)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$7, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$7, val$first_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$7, val$second_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$7, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$7 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$7 *new_RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$7 *create_RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

@interface RxSchedulersAbstractSchedulerTests_$7_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerTests_$7 *this$0_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$7:(RxSchedulersAbstractSchedulerTests_$7 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$7_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$7_$1, this$0_, RxSchedulersAbstractSchedulerTests_$7 *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7_$1 *self, RxSchedulersAbstractSchedulerTests_$7 *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$7_$1 *new_RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$7_$1 *create_RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7 *outer$);

@interface RxSchedulersAbstractSchedulerTests_$8 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *val$inner_;
  id<RxFunctionsAction0> val$first_;
  id<RxFunctionsAction0> val$second_;
  id<RxFunctionsAction0> val$third_;
  id<RxFunctionsAction0> val$fourth_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$4
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$5;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$8)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$first_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$second_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$third_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$fourth_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$8 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$8 *new_RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$8 *create_RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5);

@interface RxSchedulersAbstractSchedulerTests_$8_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerTests_$8 *this$0_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$8:(RxSchedulersAbstractSchedulerTests_$8 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$8_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$8_$1, this$0_, RxSchedulersAbstractSchedulerTests_$8 *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8_$1 *self, RxSchedulersAbstractSchedulerTests_$8 *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$8_$1 *new_RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$8_$1 *create_RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8 *outer$);

@interface RxSchedulersAbstractSchedulerTests_$9 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$i_;
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$9)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$9, val$i_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$9, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$9, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$9 *new_RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$9 *create_RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxSchedulersAbstractSchedulerTests_$10 : NSObject < RxFunctionsAction0 > {
 @public
  jint state_;
  JavaUtilConcurrentAtomicAtomicInteger *val$i_;
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$10)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$10, val$i_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$10, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$10, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$10 *new_RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$10 *create_RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxSchedulersAbstractSchedulerTests_$11 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxSchedulersAbstractSchedulerTests *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxSchedulersAbstractSchedulerTests:(RxSchedulersAbstractSchedulerTests *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$11)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$11, this$0_, RxSchedulersAbstractSchedulerTests *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests_$11 *self, RxSchedulersAbstractSchedulerTests *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$11 *new_RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$11 *create_RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$);

@interface RxSchedulersAbstractSchedulerTests_$11_$1 : NSObject < RxFunctionsAction0 > {
 @public
  jint i_;
  RxSubscriber *val$observer_;
  RxScheduler_Worker *val$inner_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
              withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$11_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$11_$1, val$observer_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$11_$1, val$inner_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSchedulersAbstractSchedulerTests_$11_$1 *self, RxSubscriber *capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$11_$1 *new_RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$11_$1 *create_RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1);

@interface RxSchedulersAbstractSchedulerTests_$12 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$lastValue_;
}

- (void)callWithId:(JavaLangInteger *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$12)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$12, val$lastValue_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerTests_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$12 *new_RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$12 *create_RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$13 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$13)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$13, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$13 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$13 *new_RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$13 *create_RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$13_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSchedulersAbstractSchedulerTests_$13 *this$0_;
  RxSubscriber *val$observer_;
  jint val$v_;
}

- (void)run;

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$13:(RxSchedulersAbstractSchedulerTests_$13 *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                                                       withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$13_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$13_$1, this$0_, RxSchedulersAbstractSchedulerTests_$13 *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$13_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13_$1 *self, RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$13_$1 *new_RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$13_$1 *create_RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1);

@interface RxSchedulersAbstractSchedulerTests_$14 : NSObject < RxFunctionsFunc1 > {
 @public
  RxScheduler *val$scheduler_;
}

- (RxObservable *)callWithId:(NSString *)v;

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$14)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$14, val$scheduler_, RxScheduler *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxSchedulersAbstractSchedulerTests_$14 *self, RxScheduler *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$14 *new_RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$14 *create_RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxScheduler *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$14_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  NSString *val$v_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$14_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$14_$1, val$v_, NSString *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(RxSchedulersAbstractSchedulerTests_$14_$1 *self, NSString *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$14_$1 *new_RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$14_$1 *create_RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(NSString *capture$0);

@interface RxSchedulersAbstractSchedulerTests_$15 : NSObject < RxFunctionsAction0 > {
 @public
  IOSIntArray *val$executions_;
  JavaUtilConcurrentAtomicAtomicReference *val$cancel_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerTests_$15)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$15, val$executions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$15, val$cancel_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerTests_$15, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$15 *self, IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$15 *new_RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerTests_$15 *create_RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@implementation RxSchedulersAbstractSchedulerTests

- (RxScheduler *)getScheduler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)testNestedActions {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    id<RxFunctionsAction0> firstStepStart = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> firstStepEnd = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> secondStepStart = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> secondStepEnd = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> thirdStepStart = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> thirdStepEnd = OrgMockitoMockito_mockWithIOSClass_(RxDopplMockMAction0_class_());
    id<RxFunctionsAction0> firstAction = create_RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(firstStepStart, firstStepEnd, latch);
    id<RxFunctionsAction0> secondAction = create_RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(secondStepStart, inner, firstAction, secondStepEnd);
    id<RxFunctionsAction0> thirdAction = create_RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(thirdStepStart, inner, secondAction, thirdStepEnd);
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ firstStepStart, firstStepEnd, secondStepStart, secondStepEnd, thirdStepStart, thirdStepEnd } count:6 type:NSObject_class_()]);
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:thirdAction];
    [latch await];
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:thirdStepStart withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:thirdStepEnd withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:secondStepStart withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:secondStepEnd withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:firstStepStart withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:firstStepEnd withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testNestedScheduling {
  RxObservable *ids = [((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])))) subscribeOnWithRxScheduler:[self getScheduler]];
  RxObservable *m = [((RxObservable *) nil_chk(ids)) flatMapWithRxFunctionsFunc1:create_RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(self)];
  id<JavaUtilList> strings = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(m)) toList])) toBlocking])) last];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [((id<JavaUtilList>) nil_chk(strings)) size]);
  OrgJunitAssert_assertTrueWithBoolean_([strings containsWithId:@"names=>a-1"]);
  OrgJunitAssert_assertTrueWithBoolean_([strings containsWithId:@"names=>a-2"]);
  OrgJunitAssert_assertTrueWithBoolean_([strings containsWithId:@"names=>b-1"]);
  OrgJunitAssert_assertTrueWithBoolean_([strings containsWithId:@"names=>b-2"]);
}

- (void)testSequenceOfActions {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
    id<RxFunctionsAction0> first = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    id<RxFunctionsAction0> second = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doAnswerWithOrgMockitoStubbingAnswer_(create_RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(latch)))) whenWithId:first])) call];
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doAnswerWithOrgMockitoStubbingAnswer_(create_RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(latch)))) whenWithId:second])) call];
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:first];
    [inner scheduleWithRxFunctionsAction0:second];
    [latch await];
    [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(first, OrgMockitoMockito_timesWithInt_(1)))) call];
    [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(second, OrgMockitoMockito_timesWithInt_(1)))) call];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testSequenceOfDelayedActions {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    id<RxFunctionsAction0> first = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    id<RxFunctionsAction0> second = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(inner, first, second, latch)];
    [latch await];
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ first, second } count:2 type:NSObject_class_()]);
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:second withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:first withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testMixOfDelayedAndNonDelayedActions {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    id<RxFunctionsAction0> first = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    id<RxFunctionsAction0> second = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    id<RxFunctionsAction0> third = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    id<RxFunctionsAction0> fourth = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(inner, first, second, third, fourth, latch)];
    [latch await];
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ first, second, third, fourth } count:4 type:NSObject_class_()]);
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:first withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:fourth withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:third withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:second withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testRecursiveExecution {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentAtomicAtomicInteger *i = create_JavaUtilConcurrentAtomicAtomicInteger_init();
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(i, inner, latch)];
    [latch await];
    OrgJunitAssert_assertEqualsWithLong_withLong_(100, [i get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testRecursiveExecutionWithDelayTime {
  RxScheduler *scheduler = [self getScheduler];
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentAtomicAtomicInteger *i = create_JavaUtilConcurrentAtomicAtomicInteger_init();
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(i, inner, latch)];
    [latch await];
    OrgJunitAssert_assertEqualsWithLong_withLong_(100, [i get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testRecursiveSchedulerInObservable {
  RxObservable *obs = RxObservable_createWithRxObservable_OnSubscribe_(create_RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(self));
  JavaUtilConcurrentAtomicAtomicInteger *lastValue = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(obs)) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(lastValue)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(42, [lastValue get]);
}

- (void)testConcurrentOnNextFailsValidation {
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(count);
  RxObservable *o = RxObservable_createWithRxObservable_OnSubscribe_(create_RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(latch));
  RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *observer = create_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init();
  [((RxObservable *) nil_chk(o)) subscribeWithRxSubscriber:observer];
  if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(observer->completed_)) awaitWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"timed out");
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observer->error_)) get] == nil) {
    OrgJunitAssert_failWithNSString_(@"We expected error messages due to concurrency");
  }
}

- (void)testObserveOn {
  RxScheduler *scheduler = [self getScheduler];
  RxObservable *o = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(@"one", @"two", @"three", @"four", @"five", @"six", @"seven", @"eight", @"nine", @"ten");
  RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *observer = create_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) observeOnWithRxScheduler:scheduler])) subscribeWithRxSubscriber:observer];
  if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(observer->completed_)) awaitWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"timed out");
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observer->error_)) get] != nil) {
    [((NSException *) nil_chk([observer->error_ get])) printStackTrace];
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", @"Error: ", [((NSException *) nil_chk([observer->error_ get])) getMessage]));
  }
}

- (void)testSubscribeOnNestedConcurrency {
  RxScheduler *scheduler = [self getScheduler];
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(@"one", @"two", @"three", @"four", @"five", @"six", @"seven", @"eight", @"nine", @"ten"))) flatMapWithRxFunctionsFunc1:create_RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(scheduler)];
  RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *observer = create_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init();
  [((RxObservable *) nil_chk(o)) subscribeWithRxSubscriber:observer];
  if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(observer->completed_)) awaitWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"timed out");
  }
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(observer->error_)) get] != nil) {
    [((NSException *) nil_chk([observer->error_ get])) printStackTrace];
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", @"Error: ", [((NSException *) nil_chk([observer->error_ get])) getMessage]));
  }
}

- (void)periodicTaskCancelsItself {
  RxScheduler *scheduler = [self getScheduler];
  if ([scheduler isKindOfClass:[RxInternalSchedulersImmediateScheduler class]] || [scheduler isKindOfClass:[RxInternalSchedulersTrampolineScheduler class]]) {
    return;
  }
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    IOSIntArray *executions = [IOSIntArray arrayWithInts:(jint[]){ 0 } count:1];
    JavaUtilConcurrentAtomicAtomicReference *cancel = create_JavaUtilConcurrentAtomicAtomicReference_init();
    id<RxSubscription> s = [((RxScheduler_Worker *) nil_chk(w)) schedulePeriodicallyWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(executions, cancel, cdl) withLong:100 withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [cancel setWithId:s];
    if (![cdl awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
      OrgJunitAssert_failWithNSString_(@"The await timed out");
    }
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, IOSIntArray_Get(executions, 0));
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersAbstractSchedulerTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 7, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 9, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 10, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 12, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testNestedActions);
  methods[2].selector = @selector(testNestedScheduling);
  methods[3].selector = @selector(testSequenceOfActions);
  methods[4].selector = @selector(testSequenceOfDelayedActions);
  methods[5].selector = @selector(testMixOfDelayedAndNonDelayedActions);
  methods[6].selector = @selector(testRecursiveExecution);
  methods[7].selector = @selector(testRecursiveExecutionWithDelayTime);
  methods[8].selector = @selector(testRecursiveSchedulerInObservable);
  methods[9].selector = @selector(testConcurrentOnNextFailsValidation);
  methods[10].selector = @selector(testObserveOn);
  methods[11].selector = @selector(testSubscribeOnNestedConcurrency);
  methods[12].selector = @selector(periodicTaskCancelsItself);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxSchedulersAbstractSchedulerTests__Annotations$0, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$1, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$2, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$3, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$4, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$5, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$6, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$7, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$8, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$9, (void *)&RxSchedulersAbstractSchedulerTests__Annotations$10, "LJavaLangException;", (void *)&RxSchedulersAbstractSchedulerTests__Annotations$11, "LRxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests = { "AbstractSchedulerTests", "rx.schedulers", ptrTable, methods, NULL, 7, 0x401, 14, 0, -1, 14, -1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests;
}

@end

void RxSchedulersAbstractSchedulerTests_init(RxSchedulersAbstractSchedulerTests *self) {
  NSObject_init(self);
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerTests__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersAbstractSchedulerTests)

@implementation RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(completed_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(completed_)) countDown];
}

- (void)onNextWithId:(id)args {
  jint count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(concurrentCounter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"ConcurrentObserverValidator.onNext: ", args)];
  if (count > 1) {
    [self onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"we should not have concurrent execution of onNext")];
  }
  @try {
    @try {
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  @finally {
    [concurrentCounter_ decrementAndGet];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator class]);
  RELEASE_(concurrentCounter_);
  RELEASE_(error_);
  RELEASE_(completed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "concurrentCounter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "completed_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxSchedulersAbstractSchedulerTests;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator = { "ConcurrentObserverValidator", "rx.schedulers", ptrTable, methods, fields, 7, 0xa, 4, 3, 6, -1, -1, 7, -1 };
  return &_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator;
}

@end

void RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *self) {
  RxSubscriber_init(self);
  JreStrongAssignAndConsume(&self->concurrentCounter_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->error_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->completed_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *new_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init() {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator, init)
}

RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator *create_RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersAbstractSchedulerTests_ConcurrentObserverValidator)

@implementation RxSchedulersAbstractSchedulerTests_$1

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"firstAction start"];
  [((id<RxFunctionsAction0>) nil_chk(val$firstStepStart_)) call];
  [((id<RxFunctionsAction0>) nil_chk(val$firstStepEnd_)) call];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"firstAction end"];
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$firstStepStart_);
  RELEASE_(val$firstStepEnd_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxFunctionsAction0:withRxFunctionsAction0:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$firstStepStart_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$firstStepEnd_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;LRxFunctionsAction0;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testNestedActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$1 *self, id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$firstStepStart_, capture$0);
  JreStrongAssign(&self->val$firstStepEnd_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$1 *new_RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$1, initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersAbstractSchedulerTests_$1 *create_RxSchedulersAbstractSchedulerTests_$1_initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsAction0> capture$0, id<RxFunctionsAction0> capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$1, initWithRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersAbstractSchedulerTests_$2

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"secondAction start"];
  [((id<RxFunctionsAction0>) nil_chk(val$secondStepStart_)) call];
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:val$firstAction_];
  [((id<RxFunctionsAction0>) nil_chk(val$secondStepEnd_)) call];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"secondAction end"];
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3 {
  RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$secondStepStart_);
  RELEASE_(val$inner_);
  RELEASE_(val$firstAction_);
  RELEASE_(val$secondStepEnd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxFunctionsAction0:withRxScheduler_Worker:withRxFunctionsAction0:withRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$secondStepStart_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$firstAction_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$secondStepEnd_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;LRxScheduler_Worker;LRxFunctionsAction0;LRxFunctionsAction0;", "LRxSchedulersAbstractSchedulerTests;", "testNestedActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$2;
}

@end

void RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(RxSchedulersAbstractSchedulerTests_$2 *self, id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  JreStrongAssign(&self->val$secondStepStart_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  JreStrongAssign(&self->val$firstAction_, capture$2);
  JreStrongAssign(&self->val$secondStepEnd_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$2 *new_RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$2, initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerTests_$2 *create_RxSchedulersAbstractSchedulerTests_$2_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$2, initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerTests_$3

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"thirdAction start"];
  [((id<RxFunctionsAction0>) nil_chk(val$thirdStepStart_)) call];
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:val$secondAction_];
  [((id<RxFunctionsAction0>) nil_chk(val$thirdStepEnd_)) call];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"thirdAction end"];
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)capture$0
                    withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3 {
  RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$thirdStepStart_);
  RELEASE_(val$inner_);
  RELEASE_(val$secondAction_);
  RELEASE_(val$thirdStepEnd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxFunctionsAction0:withRxScheduler_Worker:withRxFunctionsAction0:withRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$thirdStepStart_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$secondAction_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$thirdStepEnd_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;LRxScheduler_Worker;LRxFunctionsAction0;LRxFunctionsAction0;", "LRxSchedulersAbstractSchedulerTests;", "testNestedActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$3;
}

@end

void RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(RxSchedulersAbstractSchedulerTests_$3 *self, id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  JreStrongAssign(&self->val$thirdStepStart_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  JreStrongAssign(&self->val$secondAction_, capture$2);
  JreStrongAssign(&self->val$thirdStepEnd_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$3 *new_RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$3, initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerTests_$3 *create_RxSchedulersAbstractSchedulerTests_$3_initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_(id<RxFunctionsAction0> capture$0, RxScheduler_Worker *capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$3, initWithRxFunctionsAction0_withRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerTests_$4

- (RxObservable *)callWithId:(JavaLangInteger *)id_ {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$@", @"a-", id_), JreStrcat("$@", @"b-", id_) } count:2 type:NSString_class_()])))) subscribeOnWithRxScheduler:[this$0_ getScheduler]])) mapWithRxFunctionsFunc1:create_RxSchedulersAbstractSchedulerTests_$4_$1_init()];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerTests:(RxSchedulersAbstractSchedulerTests *)outer$ {
  RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerTests:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/String;>;", "LRxSchedulersAbstractSchedulerTests;", "testNestedScheduling", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$4;
}

@end

void RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests_$4 *self, RxSchedulersAbstractSchedulerTests *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$4 *new_RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$4, initWithRxSchedulersAbstractSchedulerTests_, outer$)
}

RxSchedulersAbstractSchedulerTests_$4 *create_RxSchedulersAbstractSchedulerTests_$4_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$4, initWithRxSchedulersAbstractSchedulerTests_, outer$)
}

@implementation RxSchedulersAbstractSchedulerTests_$4_$1

- (NSString *)callWithId:(NSString *)s {
  return JreStrcat("$$", @"names=>", s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersAbstractSchedulerTests_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersAbstractSchedulerTests_$4;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$4_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$4_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$4_$1_init(RxSchedulersAbstractSchedulerTests_$4_$1 *self) {
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$4_$1 *new_RxSchedulersAbstractSchedulerTests_$4_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$4_$1, init)
}

RxSchedulersAbstractSchedulerTests_$4_$1 *create_RxSchedulersAbstractSchedulerTests_$4_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$4_$1, init)
}

@implementation RxSchedulersAbstractSchedulerTests_$5

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  @try {
    return [((id<OrgMockitoInvocationInvocationOnMock>) nil_chk(invocation)) getMock];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testSequenceOfActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$5 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$5;
}

@end

void RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$5 *new_RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$5 *create_RxSchedulersAbstractSchedulerTests_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$6

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  @try {
    return [((id<OrgMockitoInvocationInvocationOnMock>) nil_chk(invocation)) getMock];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testSequenceOfActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$6 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$6;
}

@end

void RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$6 *new_RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$6 *create_RxSchedulersAbstractSchedulerTests_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$7

- (void)call {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:val$first_ withLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [val$inner_ scheduleWithRxFunctionsAction0:val$second_ withLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [val$inner_ scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(self) withLong:40 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3 {
  RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$first_);
  RELEASE_(val$second_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withRxFunctionsAction0:withRxFunctionsAction0:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$first_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$second_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LRxFunctionsAction0;LRxFunctionsAction0;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testSequenceOfDelayedActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$7 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$7;
}

@end

void RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$7 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$first_, capture$1);
  JreStrongAssign(&self->val$second_, capture$2);
  JreStrongAssign(&self->val$latch_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$7 *new_RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$7, initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerTests_$7 *create_RxSchedulersAbstractSchedulerTests_$7_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$7, initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerTests_$7_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$7:(RxSchedulersAbstractSchedulerTests_$7 *)outer$ {
  RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerTests_$7:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerTests_$7;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerTests_$7;", "call" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$7_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$7_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7_$1 *self, RxSchedulersAbstractSchedulerTests_$7 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$7_$1 *new_RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$7_$1, initWithRxSchedulersAbstractSchedulerTests_$7_, outer$)
}

RxSchedulersAbstractSchedulerTests_$7_$1 *create_RxSchedulersAbstractSchedulerTests_$7_$1_initWithRxSchedulersAbstractSchedulerTests_$7_(RxSchedulersAbstractSchedulerTests_$7 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$7_$1, initWithRxSchedulersAbstractSchedulerTests_$7_, outer$)
}

@implementation RxSchedulersAbstractSchedulerTests_$8

- (void)call {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:val$first_];
  [val$inner_ scheduleWithRxFunctionsAction0:val$second_ withLong:300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [val$inner_ scheduleWithRxFunctionsAction0:val$third_ withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [val$inner_ scheduleWithRxFunctionsAction0:val$fourth_];
  [val$inner_ scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(self) withLong:400 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$4
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$5 {
  RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$first_);
  RELEASE_(val$second_);
  RELEASE_(val$third_);
  RELEASE_(val$fourth_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withRxFunctionsAction0:withRxFunctionsAction0:withRxFunctionsAction0:withRxFunctionsAction0:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$first_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$second_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$third_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$fourth_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LRxFunctionsAction0;LRxFunctionsAction0;LRxFunctionsAction0;LRxFunctionsAction0;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testMixOfDelayedAndNonDelayedActions" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$8 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 6, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$8;
}

@end

void RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$8 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$first_, capture$1);
  JreStrongAssign(&self->val$second_, capture$2);
  JreStrongAssign(&self->val$third_, capture$3);
  JreStrongAssign(&self->val$fourth_, capture$4);
  JreStrongAssign(&self->val$latch_, capture$5);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$8 *new_RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$8, initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

RxSchedulersAbstractSchedulerTests_$8 *create_RxSchedulersAbstractSchedulerTests_$8_initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1, id<RxFunctionsAction0> capture$2, id<RxFunctionsAction0> capture$3, id<RxFunctionsAction0> capture$4, JavaUtilConcurrentCountDownLatch *capture$5) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$8, initWithRxScheduler_Worker_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withRxFunctionsAction0_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

@implementation RxSchedulersAbstractSchedulerTests_$8_$1

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$8:(RxSchedulersAbstractSchedulerTests_$8 *)outer$ {
  RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerTests_$8:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerTests_$8;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerTests_$8;", "call" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$8_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$8_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8_$1 *self, RxSchedulersAbstractSchedulerTests_$8 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$8_$1 *new_RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$8_$1, initWithRxSchedulersAbstractSchedulerTests_$8_, outer$)
}

RxSchedulersAbstractSchedulerTests_$8_$1 *create_RxSchedulersAbstractSchedulerTests_$8_$1_initWithRxSchedulersAbstractSchedulerTests_$8_(RxSchedulersAbstractSchedulerTests_$8 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$8_$1, initWithRxSchedulersAbstractSchedulerTests_$8_, outer$)
}

@implementation RxSchedulersAbstractSchedulerTests_$9

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$i_)) incrementAndGet] < 100) {
    [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
  }
  else {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$i_);
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$i_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testRecursiveExecution" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$9 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$9;
}

@end

void RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$i_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$9 *new_RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersAbstractSchedulerTests_$9 *create_RxSchedulersAbstractSchedulerTests_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersAbstractSchedulerTests_$10

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$i_)) setWithInt:state_];
  if (state_++ < 100) {
    [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  else {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$i_);
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$i_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testRecursiveExecutionWithDelayTime" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$10 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$10;
}

@end

void RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$i_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
  self->state_ = 0;
}

RxSchedulersAbstractSchedulerTests_$10 *new_RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersAbstractSchedulerTests_$10 *create_RxSchedulersAbstractSchedulerTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersAbstractSchedulerTests_$11

- (void)callWithId:(RxSubscriber *)observer {
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([this$0_ getScheduler])) createWorker];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:inner];
  [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(observer, inner)];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerTests:(RxSchedulersAbstractSchedulerTests *)outer$ {
  RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerTests:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerTests;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxSchedulersAbstractSchedulerTests;", "testRecursiveSchedulerInObservable", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$11 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$11;
}

@end

void RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests_$11 *self, RxSchedulersAbstractSchedulerTests *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$11 *new_RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$11, initWithRxSchedulersAbstractSchedulerTests_, outer$)
}

RxSchedulersAbstractSchedulerTests_$11 *create_RxSchedulersAbstractSchedulerTests_$11_initWithRxSchedulersAbstractSchedulerTests_(RxSchedulersAbstractSchedulerTests *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$11, initWithRxSchedulersAbstractSchedulerTests_, outer$)
}

@implementation RxSchedulersAbstractSchedulerTests_$11_$1

- (void)call {
  if (i_ > 42) {
    [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
    return;
  }
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:JavaLangInteger_valueOfWithInt_(i_++)];
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
              withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  RELEASE_(val$inner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubscriber:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxScheduler_Worker;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;Lrx/Scheduler$Worker;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxSchedulersAbstractSchedulerTests_$11;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$11_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$11_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSchedulersAbstractSchedulerTests_$11_$1 *self, RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  JreStrongAssign(&self->val$observer_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  NSObject_init(self);
  self->i_ = 0;
}

RxSchedulersAbstractSchedulerTests_$11_$1 *new_RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$11_$1, initWithRxSubscriber_withRxScheduler_Worker_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerTests_$11_$1 *create_RxSchedulersAbstractSchedulerTests_$11_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$11_$1, initWithRxSubscriber_withRxScheduler_Worker_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerTests_$12

- (void)callWithId:(JavaLangInteger *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Value: ", v)];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$lastValue_)) setWithInt:[((JavaLangInteger *) nil_chk(v)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lastValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lastValue_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerTests;", "testRecursiveSchedulerInObservable", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$12 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$12;
}

@end

void RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerTests_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$lastValue_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$12 *new_RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$12 *create_RxSchedulersAbstractSchedulerTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$13

- (void)callWithId:(RxSubscriber *)observer {
  for (jint i = 0; i < 10; i++) {
    jint v = i;
    [create_JavaLangThread_initWithJavaLangRunnable_(create_RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(self, observer, v)) start];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerTests;", "testConcurrentOnNextFailsValidation", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$13 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$13;
}

@end

void RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$13 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$13 *new_RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$13, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$13 *create_RxSchedulersAbstractSchedulerTests_$13_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$13, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$13_$1

- (void)run {
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:JreStrcat("$I", @"v: ", val$v_)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerTests_$13:(RxSchedulersAbstractSchedulerTests_$13 *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0
                                                       withInt:(jint)capture$1 {
  RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerTests_$13:withRxSubscriber:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerTests_$13;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$v_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerTests_$13;LRxSubscriber;I", "(Lrx/schedulers/AbstractSchedulerTests$13;Lrx/Subscriber<-Ljava/lang/String;>;I)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxSchedulersAbstractSchedulerTests_$13;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$13_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$13_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13_$1 *self, RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  self->val$v_ = capture$1;
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$13_$1 *new_RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$13_$1, initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_, outer$, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerTests_$13_$1 *create_RxSchedulersAbstractSchedulerTests_$13_$1_initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_(RxSchedulersAbstractSchedulerTests_$13 *outer$, RxSubscriber *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$13_$1, initWithRxSchedulersAbstractSchedulerTests_$13_withRxSubscriber_withInt_, outer$, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerTests_$14

- (RxObservable *)callWithId:(NSString *)v {
  return [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(v)))) subscribeOnWithRxScheduler:val$scheduler_];
}

- (instancetype)initWithRxScheduler:(RxScheduler *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxScheduler;", "LRxSchedulersAbstractSchedulerTests;", "testSubscribeOnNestedConcurrency", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$14 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$14;
}

@end

void RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxSchedulersAbstractSchedulerTests_$14 *self, RxScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$14 *new_RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$14, initWithRxScheduler_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$14 *create_RxSchedulersAbstractSchedulerTests_$14_initWithRxScheduler_(RxScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$14, initWithRxScheduler_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$14_$1

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:JreStrcat("$$", @"value_after_map-", val$v_)];
  [observer onCompleted];
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$v_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$v_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LNSString;", "LRxSchedulersAbstractSchedulerTests_$14;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$14_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$14_$1;
}

@end

void RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(RxSchedulersAbstractSchedulerTests_$14_$1 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$v_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$14_$1 *new_RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$14_$1, initWithNSString_, capture$0)
}

RxSchedulersAbstractSchedulerTests_$14_$1 *create_RxSchedulersAbstractSchedulerTests_$14_$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$14_$1, initWithNSString_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerTests_$15

- (void)call {
  (*IOSIntArray_GetRef(nil_chk(val$executions_), 0))++;
  while ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$cancel_)) get] == nil) ;
  [((id<RxSubscription>) nil_chk([val$cancel_ get])) unsubscribe];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0
withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$executions_);
  RELEASE_(val$cancel_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithIntArray:withJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$executions_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cancel_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[ILJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "([ILjava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxSchedulersAbstractSchedulerTests;", "periodicTaskCancelsItself" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerTests_$15 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerTests_$15;
}

@end

void RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerTests_$15 *self, IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$executions_, capture$0);
  JreStrongAssign(&self->val$cancel_, capture$1);
  JreStrongAssign(&self->val$cdl_, capture$2);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerTests_$15 *new_RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerTests_$15, initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersAbstractSchedulerTests_$15 *create_RxSchedulersAbstractSchedulerTests_$15_initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(IOSIntArray *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerTests_$15, initWithIntArray_withJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}
