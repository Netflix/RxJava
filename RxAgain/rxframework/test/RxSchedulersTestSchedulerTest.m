//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/TestSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSchedulersTestSchedulerTest.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$4();

@interface RxSchedulersTestSchedulerTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
  id<RxFunctionsFunc1> val$calledOp_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
                             withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$1, val$scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$1, val$calledOp_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestSchedulerTest_$1 *self, RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$1 *new_RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$1 *create_RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1);

@interface RxSchedulersTestSchedulerTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
  id<RxFunctionsFunc1> val$calledOp_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
                             withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$2)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$2, val$scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$2, val$calledOp_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestSchedulerTest_$2 *self, RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$2 *new_RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$2 *create_RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1);

@interface RxSchedulersTestSchedulerTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
  RxScheduler_Worker *val$inner_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$3)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$3, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$3, val$inner_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(RxSchedulersTestSchedulerTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$3 *new_RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$3 *create_RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1);

@interface RxSchedulersTestSchedulerTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
  RxScheduler_Worker *val$inner_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$4)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$4, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$4, val$inner_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(RxSchedulersTestSchedulerTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$4 *new_RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$4 *create_RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1);

@interface RxSchedulersTestSchedulerTest_$5 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxScheduler_Worker *val$inner_;
  id<RxFunctionsAction0> val$calledOp_;
}

- (void)callWithId:(RxSubscriber *)aSubscriber;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$5)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$5, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$5, val$calledOp_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxSchedulersTestSchedulerTest_$5 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$5 *new_RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$5 *create_RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1);

@interface RxSchedulersTestSchedulerTest_$5_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersTestSchedulerTest_$5 *this$0_;
  RxSubscriber *val$aSubscriber_;
}

- (void)call;

- (instancetype)initWithRxSchedulersTestSchedulerTest_$5:(RxSchedulersTestSchedulerTest_$5 *)outer$
                                        withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestSchedulerTest_$5_$1)

J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$5_$1, this$0_, RxSchedulersTestSchedulerTest_$5 *)
J2OBJC_FIELD_SETTER(RxSchedulersTestSchedulerTest_$5_$1, val$aSubscriber_, RxSubscriber *)

__attribute__((unused)) static void RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5_$1 *self, RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$5_$1 *new_RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersTestSchedulerTest_$5_$1 *create_RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0);

@implementation RxSchedulersTestSchedulerTest

- (void)testPeriodicScheduling {
  id<RxFunctionsFunc1> calledOp = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc1_class_());
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxScheduler_Worker *inner = [scheduler createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) schedulePeriodicallyWithRxFunctionsAction0:create_RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(scheduler, calledOp) withLong:1 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(calledOp, OrgMockitoMockito_never()))) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ calledOp } count:1 type:NSObject_class_()]);
    [scheduler advanceTimeByWithLong:999LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
    [scheduler advanceTimeByWithLong:1LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(1000LL)];
    [scheduler advanceTimeByWithLong:1999LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(3000LL)];
    [scheduler advanceTimeByWithLong:1LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(3000LL)];
    [scheduler advanceTimeByWithLong:5LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(5000LL)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(7000LL)];
    [inner unsubscribe];
    [scheduler advanceTimeByWithLong:11LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testPeriodicSchedulingUnsubscription {
  id<RxFunctionsFunc1> calledOp = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc1_class_());
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxScheduler_Worker *inner = [scheduler createWorker];
  @try {
    id<RxSubscription> subscription = [((RxScheduler_Worker *) nil_chk(inner)) schedulePeriodicallyWithRxFunctionsAction0:create_RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(scheduler, calledOp) withLong:1 withLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(calledOp, OrgMockitoMockito_never()))) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ calledOp } count:1 type:NSObject_class_()]);
    [scheduler advanceTimeByWithLong:999LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
    [scheduler advanceTimeByWithLong:1LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(1000LL)];
    [scheduler advanceTimeByWithLong:1999LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(3000LL)];
    [scheduler advanceTimeByWithLong:1LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(3000LL)];
    [scheduler advanceTimeByWithLong:5LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(5000LL)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) callWithId:JavaLangLong_valueOfWithLong_(7000LL)];
    [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
    [scheduler advanceTimeByWithLong:11LL withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsFunc1>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) callWithId:JavaLangLong_valueOfWithLong_(OrgMockitoMatchers_anyLong())];
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testImmediateUnsubscribes {
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxScheduler_Worker *inner = [s createWorker];
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(counter, inner)];
    [inner unsubscribe];
    OrgJunitAssert_assertEqualsWithLong_withLong_(0, [counter get]);
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testImmediateUnsubscribes2 {
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxScheduler_Worker *inner = [s createWorker];
  @try {
    JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
    id<RxSubscription> subscription = [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(counter, inner)];
    [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
    OrgJunitAssert_assertEqualsWithLong_withLong_(0, [counter get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testNestedSchedule {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxScheduler_Worker *inner = [scheduler createWorker];
  @try {
    id<RxFunctionsAction0> calledOp = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
    RxObservable *poller;
    poller = RxObservable_createWithRxObservable_OnSubscribe_(create_RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(inner, calledOp));
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ calledOp } count:1 type:NSObject_class_()]);
    id<RxSubscription> sub;
    sub = [((RxObservable *) nil_chk(poller)) subscribe];
    [scheduler advanceTimeToWithLong:6 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(2)])) call];
    [((id<RxSubscription>) nil_chk(sub)) unsubscribe];
    [scheduler advanceTimeToWithLong:11 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
    sub = [poller subscribe];
    [scheduler advanceTimeToWithLong:12 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:calledOp withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersTestSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x11, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testPeriodicScheduling);
  methods[1].selector = @selector(testPeriodicSchedulingUnsubscription);
  methods[2].selector = @selector(testImmediateUnsubscribes);
  methods[3].selector = @selector(testImmediateUnsubscribes2);
  methods[4].selector = @selector(testNestedSchedule);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersTestSchedulerTest__Annotations$0, (void *)&RxSchedulersTestSchedulerTest__Annotations$1, (void *)&RxSchedulersTestSchedulerTest__Annotations$2, (void *)&RxSchedulersTestSchedulerTest__Annotations$3, (void *)&RxSchedulersTestSchedulerTest__Annotations$4 };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest = { "TestSchedulerTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersTestSchedulerTest;
}

@end

void RxSchedulersTestSchedulerTest_init(RxSchedulersTestSchedulerTest *self) {
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest *new_RxSchedulersTestSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest, init)
}

RxSchedulersTestSchedulerTest *create_RxSchedulersTestSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest, init)
}

IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersTestSchedulerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersTestSchedulerTest)

@implementation RxSchedulersTestSchedulerTest_$1

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithLong:[((RxSchedulersTestScheduler *) nil_chk(val$scheduler_)) now]];
  [((id<RxFunctionsFunc1>) nil_chk(val$calledOp_)) callWithId:JavaLangLong_valueOfWithLong_([val$scheduler_ now])];
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
                             withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1 {
  RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  RELEASE_(val$calledOp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:withRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$calledOp_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersTestScheduler;LRxFunctionsFunc1;", "(Lrx/schedulers/TestScheduler;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Void;>;)V", "Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Void;>;", "LRxSchedulersTestSchedulerTest;", "testPeriodicScheduling" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTestSchedulerTest_$1;
}

@end

void RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestSchedulerTest_$1 *self, RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  JreStrongAssign(&self->val$calledOp_, capture$1);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$1 *new_RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$1, initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_, capture$0, capture$1)
}

RxSchedulersTestSchedulerTest_$1 *create_RxSchedulersTestSchedulerTest_$1_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$1, initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_, capture$0, capture$1)
}

@implementation RxSchedulersTestSchedulerTest_$2

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithLong:[((RxSchedulersTestScheduler *) nil_chk(val$scheduler_)) now]];
  [((id<RxFunctionsFunc1>) nil_chk(val$calledOp_)) callWithId:JavaLangLong_valueOfWithLong_([val$scheduler_ now])];
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
                             withRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$1 {
  RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  RELEASE_(val$calledOp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:withRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$calledOp_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersTestScheduler;LRxFunctionsFunc1;", "(Lrx/schedulers/TestScheduler;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Void;>;)V", "Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Void;>;", "LRxSchedulersTestSchedulerTest;", "testPeriodicSchedulingUnsubscription" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTestSchedulerTest_$2;
}

@end

void RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestSchedulerTest_$2 *self, RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  JreStrongAssign(&self->val$calledOp_, capture$1);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$2 *new_RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$2, initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_, capture$0, capture$1)
}

RxSchedulersTestSchedulerTest_$2 *create_RxSchedulersTestSchedulerTest_$2_initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_(RxSchedulersTestScheduler *capture$0, id<RxFunctionsFunc1> capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$2, initWithRxSchedulersTestScheduler_withRxFunctionsFunc1_, capture$0, capture$1)
}

@implementation RxSchedulersTestSchedulerTest_$3

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"counter: ", [val$counter_ get])];
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  RELEASE_(val$inner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LRxScheduler_Worker;", "LRxSchedulersTestSchedulerTest;", "testImmediateUnsubscribes" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSchedulersTestSchedulerTest_$3;
}

@end

void RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(RxSchedulersTestSchedulerTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  JreStrongAssign(&self->val$counter_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$3 *new_RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_, capture$0, capture$1)
}

RxSchedulersTestSchedulerTest_$3 *create_RxSchedulersTestSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_, capture$0, capture$1)
}

@implementation RxSchedulersTestSchedulerTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"counter: ", [val$counter_ get])];
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                       withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  RELEASE_(val$inner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LRxScheduler_Worker;", "LRxSchedulersTestSchedulerTest;", "testImmediateUnsubscribes2" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSchedulersTestSchedulerTest_$4;
}

@end

void RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(RxSchedulersTestSchedulerTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  JreStrongAssign(&self->val$counter_, capture$0);
  JreStrongAssign(&self->val$inner_, capture$1);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$4 *new_RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_, capture$0, capture$1)
}

RxSchedulersTestSchedulerTest_$4 *create_RxSchedulersTestSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxScheduler_Worker_, capture$0, capture$1)
}

@implementation RxSchedulersTestSchedulerTest_$5

- (void)callWithId:(RxSubscriber *)aSubscriber {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:create_RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(self, aSubscriber)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$1 {
  RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$calledOp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withRxFunctionsAction0:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$calledOp_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Object;>;)V", "LRxScheduler_Worker;LRxFunctionsAction0;", "LRxSchedulersTestSchedulerTest;", "testNestedSchedule", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$5 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxSchedulersTestSchedulerTest_$5;
}

@end

void RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxSchedulersTestSchedulerTest_$5 *self, RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$calledOp_, capture$1);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$5 *new_RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$5, initWithRxScheduler_Worker_withRxFunctionsAction0_, capture$0, capture$1)
}

RxSchedulersTestSchedulerTest_$5 *create_RxSchedulersTestSchedulerTest_$5_initWithRxScheduler_Worker_withRxFunctionsAction0_(RxScheduler_Worker *capture$0, id<RxFunctionsAction0> capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$5, initWithRxScheduler_Worker_withRxFunctionsAction0_, capture$0, capture$1)
}

@implementation RxSchedulersTestSchedulerTest_$5_$1

- (void)call {
  if (![((RxSubscriber *) nil_chk(val$aSubscriber_)) isUnsubscribed]) {
    [((id<RxFunctionsAction0>) nil_chk(this$0_->val$calledOp_)) call];
    [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) scheduleWithRxFunctionsAction0:self withLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
}

- (instancetype)initWithRxSchedulersTestSchedulerTest_$5:(RxSchedulersTestSchedulerTest_$5 *)outer$
                                        withRxSubscriber:(RxSubscriber *)capture$0 {
  RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$aSubscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersTestSchedulerTest_$5:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersTestSchedulerTest_$5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$aSubscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersTestSchedulerTest_$5;LRxSubscriber;", "(Lrx/schedulers/TestSchedulerTest$5;Lrx/Subscriber<-Ljava/lang/Object;>;)V", "Lrx/Subscriber<-Ljava/lang/Object;>;", "LRxSchedulersTestSchedulerTest_$5;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersTestSchedulerTest_$5_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersTestSchedulerTest_$5_$1;
}

@end

void RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5_$1 *self, RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$aSubscriber_, capture$0);
  NSObject_init(self);
}

RxSchedulersTestSchedulerTest_$5_$1 *new_RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersTestSchedulerTest_$5_$1, initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_, outer$, capture$0)
}

RxSchedulersTestSchedulerTest_$5_$1 *create_RxSchedulersTestSchedulerTest_$5_$1_initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_(RxSchedulersTestSchedulerTest_$5 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersTestSchedulerTest_$5_$1, initWithRxSchedulersTestSchedulerTest_$5_withRxSubscriber_, outer$, capture$0)
}
