//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorDematerializeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxInternalOperatorsOperatorDematerializeTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversSubscribers.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$6();

@implementation RxInternalOperatorsOperatorDematerializeTest

- (void)testDematerialize1 {
  RxObservable *notifications = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)))) materialize];
  RxObservable *dematerialize = [((RxObservable *) nil_chk(notifications)) dematerialize];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dematerialize)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testDematerialize2 {
  NSException *exception = create_NSException_initWithNSString_(@"test");
  RxObservable *observable = RxObservable_errorWithNSException_(exception);
  RxObservable *dematerialize = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) materialize])) dematerialize];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dematerialize)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:exception];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testDematerialize3 {
  JavaLangException *exception = create_JavaLangException_initWithNSString_(@"test");
  RxObservable *observable = RxObservable_errorWithNSException_(exception);
  RxObservable *dematerialize = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) materialize])) dematerialize];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dematerialize)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:exception];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testErrorPassThru {
  JavaLangException *exception = create_JavaLangException_initWithNSString_(@"test");
  RxObservable *observable = RxObservable_errorWithNSException_(exception);
  RxObservable *dematerialize = [((RxObservable *) nil_chk(observable)) dematerialize];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dematerialize)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:exception];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testCompletePassThru {
  RxObservable *observable = RxObservable_empty();
  RxObservable *dematerialize = [((RxObservable *) nil_chk(observable)) dematerialize];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(dematerialize)) subscribeWithRxSubscriber:ts];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[ts getOnErrorEvents]];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testHonorsContractWhenCompleted {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObservable *result = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) materialize])) dematerialize];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_fromWithRxObserver_(o)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testHonorsContractWhenThrows {
  RxObservable *source = RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
  RxObservable *result = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) materialize])) dematerialize];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_fromWithRxObserver_(o)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorDematerializeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testDematerialize1);
  methods[1].selector = @selector(testDematerialize2);
  methods[2].selector = @selector(testDematerialize3);
  methods[3].selector = @selector(testErrorPassThru);
  methods[4].selector = @selector(testCompletePassThru);
  methods[5].selector = @selector(testHonorsContractWhenCompleted);
  methods[6].selector = @selector(testHonorsContractWhenThrows);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$2, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$3, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$4, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$5, (void *)&RxInternalOperatorsOperatorDematerializeTest__Annotations$6 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDematerializeTest = { "OperatorDematerializeTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorDematerializeTest;
}

@end

void RxInternalOperatorsOperatorDematerializeTest_init(RxInternalOperatorsOperatorDematerializeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorDematerializeTest *new_RxInternalOperatorsOperatorDematerializeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDematerializeTest, init)
}

RxInternalOperatorsOperatorDematerializeTest *create_RxInternalOperatorsOperatorDematerializeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDematerializeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDematerializeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorDematerializeTest)
