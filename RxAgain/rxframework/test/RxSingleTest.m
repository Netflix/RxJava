//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/SingleTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxDopplMockSingletestFuncCreate.h"
#include "RxDopplMockSingletestFuncReturn.h"
#include "RxDopplMockSingletestFuncStart.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxFunctionsFunc3.h"
#include "RxFunctionsFunc4.h"
#include "RxFunctionsFunc5.h"
#include "RxFunctionsFunc6.h"
#include "RxFunctionsFunc7.h"
#include "RxFunctionsFunc8.h"
#include "RxFunctionsFunc9.h"
#include "RxFunctionsFuncN.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversSafeSubscriber.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSingleTest.h"
#include "RxSinglesBlockingSingle.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/invocation/InvocationOnMock.h"
#include "org/mockito/stubbing/Answer.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/stubbing/Stubber.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxSingleTest () {
 @public
  id<RxFunctionsFunc1> onCreate_;
  id<RxFunctionsFunc2> onStart_;
  id<RxFunctionsFunc1> onReturn_;
}

@end

J2OBJC_FIELD_SETTER(RxSingleTest, onCreate_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxSingleTest, onStart_, id<RxFunctionsFunc2>)
J2OBJC_FIELD_SETTER(RxSingleTest, onReturn_, id<RxFunctionsFunc1>)

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$42();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$43();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$44();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$45();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$46();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$47();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$48();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$49();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$50();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$51();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$52();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$53();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$54();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$55();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$56();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$57();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$58();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$59();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$60();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$61();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$62();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$63();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$64();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$65();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$66();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$67();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$68();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$69();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$70();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$71();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$72();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$73();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$74();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$75();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$76();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$77();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$78();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$79();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$80();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$81();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$82();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$83();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$84();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$85();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$86();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$87();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$88();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$89();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$90();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$91();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$92();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$93();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$94();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$95();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$96();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$97();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$98();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$99();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$100();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$101();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$102();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$103();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$104();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$105();

__attribute__((unused)) static IOSObjectArray *RxSingleTest__Annotations$106();

@interface RxSingleTest_$1 : RxSingleSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$v_;
}

- (void)onSuccessWithId:(NSString *)value;

- (void)onErrorWithNSException:(NSException *)error;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$1)

J2OBJC_FIELD_SETTER(RxSingleTest_$1, val$v_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSingleTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxSingleTest_$1 *new_RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$1 *create_RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxSingleTest_$2 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$2)

__attribute__((unused)) static void RxSingleTest_$2_init(RxSingleTest_$2 *self);

__attribute__((unused)) static RxSingleTest_$2 *new_RxSingleTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$2 *create_RxSingleTest_$2_init();

@interface RxSingleTest_$3 : NSObject < RxFunctionsFunc2 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$3)

__attribute__((unused)) static void RxSingleTest_$3_init(RxSingleTest_$3 *self);

__attribute__((unused)) static RxSingleTest_$3 *new_RxSingleTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$3 *create_RxSingleTest_$3_init();

@interface RxSingleTest_$4 : NSObject < RxFunctionsFunc3 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$4)

__attribute__((unused)) static void RxSingleTest_$4_init(RxSingleTest_$4 *self);

__attribute__((unused)) static RxSingleTest_$4 *new_RxSingleTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$4 *create_RxSingleTest_$4_init();

@interface RxSingleTest_$5 : NSObject < RxFunctionsFunc4 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$5)

__attribute__((unused)) static void RxSingleTest_$5_init(RxSingleTest_$5 *self);

__attribute__((unused)) static RxSingleTest_$5 *new_RxSingleTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$5 *create_RxSingleTest_$5_init();

@interface RxSingleTest_$6 : NSObject < RxFunctionsFunc5 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$6)

__attribute__((unused)) static void RxSingleTest_$6_init(RxSingleTest_$6 *self);

__attribute__((unused)) static RxSingleTest_$6 *new_RxSingleTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$6 *create_RxSingleTest_$6_init();

@interface RxSingleTest_$7 : NSObject < RxFunctionsFunc6 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$7)

__attribute__((unused)) static void RxSingleTest_$7_init(RxSingleTest_$7 *self);

__attribute__((unused)) static RxSingleTest_$7 *new_RxSingleTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$7 *create_RxSingleTest_$7_init();

@interface RxSingleTest_$8 : NSObject < RxFunctionsFunc7 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$8)

__attribute__((unused)) static void RxSingleTest_$8_init(RxSingleTest_$8 *self);

__attribute__((unused)) static RxSingleTest_$8 *new_RxSingleTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$8 *create_RxSingleTest_$8_init();

@interface RxSingleTest_$9 : NSObject < RxFunctionsFunc8 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g
                  withId:(JavaLangInteger *)h;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$9)

__attribute__((unused)) static void RxSingleTest_$9_init(RxSingleTest_$9 *self);

__attribute__((unused)) static RxSingleTest_$9 *new_RxSingleTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$9 *create_RxSingleTest_$9_init();

@interface RxSingleTest_$10 : NSObject < RxFunctionsFunc9 >

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g
                  withId:(JavaLangInteger *)h
                  withId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$10)

__attribute__((unused)) static void RxSingleTest_$10_init(RxSingleTest_$10 *self);

__attribute__((unused)) static RxSingleTest_$10 *new_RxSingleTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$10 *create_RxSingleTest_$10_init();

@interface RxSingleTest_$11 : NSObject < RxFunctionsFuncN >

- (NSString *)callWithNSObjectArray:(IOSObjectArray *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$11)

__attribute__((unused)) static void RxSingleTest_$11_init(RxSingleTest_$11 *self);

__attribute__((unused)) static RxSingleTest_$11 *new_RxSingleTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$11 *create_RxSingleTest_$11_init();

@interface RxSingleTest_$12 : NSObject < RxFunctionsFuncN >

- (NSString *)callWithNSObjectArray:(IOSObjectArray *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$12)

__attribute__((unused)) static void RxSingleTest_$12_init(RxSingleTest_$12 *self);

__attribute__((unused)) static RxSingleTest_$12 *new_RxSingleTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$12 *create_RxSingleTest_$12_init();

@interface RxSingleTest_$13 : NSObject < RxFunctionsFuncN >

- (id)callWithNSObjectArray:(IOSObjectArray *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$13)

__attribute__((unused)) static void RxSingleTest_$13_init(RxSingleTest_$13 *self);

__attribute__((unused)) static RxSingleTest_$13 *new_RxSingleTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$13 *create_RxSingleTest_$13_init();

@interface RxSingleTest_$14 : NSObject < RxFunctionsFunc2 >

- (NSString *)callWithId:(NSString *)a
                  withId:(NSString *)b;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$14)

__attribute__((unused)) static void RxSingleTest_$14_init(RxSingleTest_$14 *self);

__attribute__((unused)) static RxSingleTest_$14 *new_RxSingleTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$14 *create_RxSingleTest_$14_init();

@interface RxSingleTest_$15 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$15)

__attribute__((unused)) static void RxSingleTest_$15_init(RxSingleTest_$15 *self);

__attribute__((unused)) static RxSingleTest_$15 *new_RxSingleTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$15 *create_RxSingleTest_$15_init();

@interface RxSingleTest_$16 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$16)

__attribute__((unused)) static void RxSingleTest_$16_init(RxSingleTest_$16 *self);

__attribute__((unused)) static RxSingleTest_$16 *new_RxSingleTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$16 *create_RxSingleTest_$16_init();

@interface RxSingleTest_$17 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$17)

__attribute__((unused)) static void RxSingleTest_$17_init(RxSingleTest_$17 *self);

__attribute__((unused)) static RxSingleTest_$17 *new_RxSingleTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$17 *create_RxSingleTest_$17_init();

@interface RxSingleTest_$18 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$18)

__attribute__((unused)) static void RxSingleTest_$18_init(RxSingleTest_$18 *self);

__attribute__((unused)) static RxSingleTest_$18 *new_RxSingleTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$18 *create_RxSingleTest_$18_init();

@interface RxSingleTest_$19 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$19)

__attribute__((unused)) static void RxSingleTest_$19_init(RxSingleTest_$19 *self);

__attribute__((unused)) static RxSingleTest_$19 *new_RxSingleTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$19 *create_RxSingleTest_$19_init();

@interface RxSingleTest_$20 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$20)

__attribute__((unused)) static void RxSingleTest_$20_init(RxSingleTest_$20 *self);

__attribute__((unused)) static RxSingleTest_$20 *new_RxSingleTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$20 *create_RxSingleTest_$20_init();

@interface RxSingleTest_$21 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$21)

__attribute__((unused)) static void RxSingleTest_$21_init(RxSingleTest_$21 *self);

__attribute__((unused)) static RxSingleTest_$21 *new_RxSingleTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$21 *create_RxSingleTest_$21_init();

@interface RxSingleTest_$22 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$22)

__attribute__((unused)) static void RxSingleTest_$22_init(RxSingleTest_$22 *self);

__attribute__((unused)) static RxSingleTest_$22 *new_RxSingleTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$22 *create_RxSingleTest_$22_init();

@interface RxSingleTest_$23 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$23)

__attribute__((unused)) static void RxSingleTest_$23_init(RxSingleTest_$23 *self);

__attribute__((unused)) static RxSingleTest_$23 *new_RxSingleTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$23 *create_RxSingleTest_$23_init();

@interface RxSingleTest_$24 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$24)

__attribute__((unused)) static void RxSingleTest_$24_init(RxSingleTest_$24 *self);

__attribute__((unused)) static RxSingleTest_$24 *new_RxSingleTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$24 *create_RxSingleTest_$24_init();

@interface RxSingleTest_$25 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$25)

__attribute__((unused)) static void RxSingleTest_$25_init(RxSingleTest_$25 *self);

__attribute__((unused)) static RxSingleTest_$25 *new_RxSingleTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$25 *create_RxSingleTest_$25_init();

@interface RxSingleTest_$26 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$26)

__attribute__((unused)) static void RxSingleTest_$26_init(RxSingleTest_$26 *self);

__attribute__((unused)) static RxSingleTest_$26 *new_RxSingleTest_$26_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$26 *create_RxSingleTest_$26_init();

@interface RxSingleTest_$27 : NSObject < RxSingle_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$interrupted_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$27)

J2OBJC_FIELD_SETTER(RxSingleTest_$27, val$interrupted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSingleTest_$27, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSingleTest_$27, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$27 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

__attribute__((unused)) static RxSingleTest_$27 *new_RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$27 *create_RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

@interface RxSingleTest_$27_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSingleTest_$27 *this$0_;
  RxSingleSubscriber *val$s_;
}

- (void)run;

- (instancetype)initWithRxSingleTest_$27:(RxSingleTest_$27 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$27_$1)

J2OBJC_FIELD_SETTER(RxSingleTest_$27_$1, this$0_, RxSingleTest_$27 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$27_$1, val$s_, RxSingleSubscriber *)

__attribute__((unused)) static void RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27_$1 *self, RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$27_$1 *new_RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$27_$1 *create_RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0);

@interface RxSingleTest_$27_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSingleTest_$27 *this$0_;
  JavaLangThread *val$t_;
}

- (void)call;

- (instancetype)initWithRxSingleTest_$27:(RxSingleTest_$27 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$27_$2)

J2OBJC_FIELD_SETTER(RxSingleTest_$27_$2, this$0_, RxSingleTest_$27 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$27_$2, val$t_, JavaLangThread *)

__attribute__((unused)) static void RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27_$2 *self, RxSingleTest_$27 *outer$, JavaLangThread *capture$0);

__attribute__((unused)) static RxSingleTest_$27_$2 *new_RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27 *outer$, JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$27_$2 *create_RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27 *outer$, JavaLangThread *capture$0);

@interface RxSingleTest_$28 : RxSingleSubscriber

- (void)onSuccessWithId:(NSString *)value;

- (void)onErrorWithNSException:(NSException *)error;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$28)

__attribute__((unused)) static void RxSingleTest_$28_init(RxSingleTest_$28 *self);

__attribute__((unused)) static RxSingleTest_$28 *new_RxSingleTest_$28_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$28 *create_RxSingleTest_$28_init();

@interface RxSingleTest_$29 : NSObject < RxSingle_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$interrupted_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$29)

J2OBJC_FIELD_SETTER(RxSingleTest_$29, val$interrupted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSingleTest_$29, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSingleTest_$29, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$29 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

__attribute__((unused)) static RxSingleTest_$29 *new_RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$29 *create_RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

@interface RxSingleTest_$29_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSingleTest_$29 *this$0_;
  RxSingleSubscriber *val$s_;
}

- (void)run;

- (instancetype)initWithRxSingleTest_$29:(RxSingleTest_$29 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$29_$1)

J2OBJC_FIELD_SETTER(RxSingleTest_$29_$1, this$0_, RxSingleTest_$29 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$29_$1, val$s_, RxSingleSubscriber *)

__attribute__((unused)) static void RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29_$1 *self, RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$29_$1 *new_RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$29_$1 *create_RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0);

@interface RxSingleTest_$29_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSingleTest_$29 *this$0_;
  JavaLangThread *val$t_;
}

- (void)call;

- (instancetype)initWithRxSingleTest_$29:(RxSingleTest_$29 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$29_$2)

J2OBJC_FIELD_SETTER(RxSingleTest_$29_$2, this$0_, RxSingleTest_$29 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$29_$2, val$t_, JavaLangThread *)

__attribute__((unused)) static void RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29_$2 *self, RxSingleTest_$29 *outer$, JavaLangThread *capture$0);

__attribute__((unused)) static RxSingleTest_$29_$2 *new_RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29 *outer$, JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$29_$2 *create_RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29 *outer$, JavaLangThread *capture$0);

@interface RxSingleTest_$30 : NSObject < RxSingle_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$interrupted_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)callWithId:(RxSingleSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$30)

J2OBJC_FIELD_SETTER(RxSingleTest_$30, val$interrupted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSingleTest_$30, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSingleTest_$30, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$30 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

__attribute__((unused)) static RxSingleTest_$30 *new_RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$30 *create_RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2);

@interface RxSingleTest_$30_$1 : NSObject < JavaLangRunnable > {
 @public
  RxSingleTest_$30 *this$0_;
  RxSingleSubscriber *val$s_;
}

- (void)run;

- (instancetype)initWithRxSingleTest_$30:(RxSingleTest_$30 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$30_$1)

J2OBJC_FIELD_SETTER(RxSingleTest_$30_$1, this$0_, RxSingleTest_$30 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$30_$1, val$s_, RxSingleSubscriber *)

__attribute__((unused)) static void RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30_$1 *self, RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$30_$1 *new_RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$30_$1 *create_RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0);

@interface RxSingleTest_$30_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSingleTest_$30 *this$0_;
  JavaLangThread *val$t_;
}

- (void)call;

- (instancetype)initWithRxSingleTest_$30:(RxSingleTest_$30 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$30_$2)

J2OBJC_FIELD_SETTER(RxSingleTest_$30_$2, this$0_, RxSingleTest_$30 *)
J2OBJC_FIELD_SETTER(RxSingleTest_$30_$2, val$t_, JavaLangThread *)

__attribute__((unused)) static void RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30_$2 *self, RxSingleTest_$30 *outer$, JavaLangThread *capture$0);

__attribute__((unused)) static RxSingleTest_$30_$2 *new_RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30 *outer$, JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$30_$2 *create_RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30 *outer$, JavaLangThread *capture$0);

@interface RxSingleTest_$31 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$31)

__attribute__((unused)) static void RxSingleTest_$31_init(RxSingleTest_$31 *self);

__attribute__((unused)) static RxSingleTest_$31 *new_RxSingleTest_$31_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$31 *create_RxSingleTest_$31_init();

@interface RxSingleTest_$32 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$32)

__attribute__((unused)) static void RxSingleTest_$32_init(RxSingleTest_$32 *self);

__attribute__((unused)) static RxSingleTest_$32 *new_RxSingleTest_$32_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$32 *create_RxSingleTest_$32_init();

@interface RxSingleTest_$33 : NSObject < RxSingle_OnSubscribe > {
 @public
  id<JavaUtilList> val$callSequence_;
}

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$33)

J2OBJC_FIELD_SETTER(RxSingleTest_$33, val$callSequence_, id<JavaUtilList>)

__attribute__((unused)) static void RxSingleTest_$33_initWithJavaUtilList_(RxSingleTest_$33 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSingleTest_$33 *new_RxSingleTest_$33_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$33 *create_RxSingleTest_$33_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxSingleTest_$34 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilList> val$callSequence_;
}

- (void)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$34)

J2OBJC_FIELD_SETTER(RxSingleTest_$34, val$callSequence_, id<JavaUtilList>)

__attribute__((unused)) static void RxSingleTest_$34_initWithJavaUtilList_(RxSingleTest_$34 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSingleTest_$34 *new_RxSingleTest_$34_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$34 *create_RxSingleTest_$34_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxSingleTest_$35 : NSObject < RxSingle_OnSubscribe > {
 @public
  JavaLangRuntimeException *val$expected_;
}

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$35)

J2OBJC_FIELD_SETTER(RxSingleTest_$35, val$expected_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxSingleTest_$35_initWithJavaLangRuntimeException_(RxSingleTest_$35 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxSingleTest_$35 *new_RxSingleTest_$35_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$35 *create_RxSingleTest_$35_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxSingleTest_$36 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  IOSObjectArray *val$singles_;
  JavaUtilConcurrentAtomicAtomicInteger *val$singleFactoryCallsCounter_;
}

- (RxSingle *)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithRxSingleArray:(IOSObjectArray *)capture$0
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$36)

J2OBJC_FIELD_SETTER(RxSingleTest_$36, val$singles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxSingleTest_$36, val$singleFactoryCallsCounter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$36 *self, IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxSingleTest_$36 *new_RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$36 *create_RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxSingleTest_$37 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$37)

__attribute__((unused)) static void RxSingleTest_$37_init(RxSingleTest_$37 *self);

__attribute__((unused)) static RxSingleTest_$37 *new_RxSingleTest_$37_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$37 *create_RxSingleTest_$37_init();

@interface RxSingleTest_$38 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$38)

__attribute__((unused)) static void RxSingleTest_$38_init(RxSingleTest_$38 *self);

__attribute__((unused)) static RxSingleTest_$38 *new_RxSingleTest_$38_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$38 *create_RxSingleTest_$38_init();

@interface RxSingleTest_$39 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$39)

__attribute__((unused)) static void RxSingleTest_$39_init(RxSingleTest_$39 *self);

__attribute__((unused)) static RxSingleTest_$39 *new_RxSingleTest_$39_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$39 *create_RxSingleTest_$39_init();

@interface RxSingleTest_$40 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$40)

__attribute__((unused)) static void RxSingleTest_$40_init(RxSingleTest_$40 *self);

__attribute__((unused)) static RxSingleTest_$40 *new_RxSingleTest_$40_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$40 *create_RxSingleTest_$40_init();

@interface RxSingleTest_$41 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxObserversTestSubscriber *val$retryCounter_;
}

- (NSString *)call;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$41)

J2OBJC_FIELD_SETTER(RxSingleTest_$41, val$retryCounter_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxSingleTest_$41 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$41 *new_RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$41 *create_RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxSingleTest_$42 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxObserversTestSubscriber *val$retryCounter_;
}

- (NSString *)call;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$42)

J2OBJC_FIELD_SETTER(RxSingleTest_$42, val$retryCounter_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxSingleTest_$42 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$42 *new_RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$42 *create_RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxSingleTest_$43 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxObserversTestSubscriber *val$retryCounter_;
}

- (NSString *)call;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$43)

J2OBJC_FIELD_SETTER(RxSingleTest_$43, val$retryCounter_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxSingleTest_$43 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$43 *new_RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$43 *create_RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxSingleTest_$44 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)integer
                         withId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$44)

__attribute__((unused)) static void RxSingleTest_$44_init(RxSingleTest_$44 *self);

__attribute__((unused)) static RxSingleTest_$44 *new_RxSingleTest_$44_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$44 *create_RxSingleTest_$44_init();

@interface RxSingleTest_$45 : NSObject < JavaUtilConcurrentCallable > {
 @public
  RxObserversTestSubscriber *val$retryCounter_;
}

- (NSString *)call;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$45)

J2OBJC_FIELD_SETTER(RxSingleTest_$45, val$retryCounter_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxSingleTest_$45 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxSingleTest_$45 *new_RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$45 *create_RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxSingleTest_$46 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)observable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$46)

__attribute__((unused)) static void RxSingleTest_$46_init(RxSingleTest_$46 *self);

__attribute__((unused)) static RxSingleTest_$46 *new_RxSingleTest_$46_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$46 *create_RxSingleTest_$46_init();

@interface RxSingleTest_$46_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$46_$1)

__attribute__((unused)) static void RxSingleTest_$46_$1_init(RxSingleTest_$46_$1 *self);

__attribute__((unused)) static RxSingleTest_$46_$1 *new_RxSingleTest_$46_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$46_$1 *create_RxSingleTest_$46_$1_init();

@interface RxSingleTest_$47 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$47)

__attribute__((unused)) static void RxSingleTest_$47_init(RxSingleTest_$47 *self);

__attribute__((unused)) static RxSingleTest_$47 *new_RxSingleTest_$47_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$47 *create_RxSingleTest_$47_init();

@interface RxSingleTest_$48 : NSObject < RxFunctionsFunc1 >

- (RxSingle *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$48)

__attribute__((unused)) static void RxSingleTest_$48_init(RxSingleTest_$48 *self);

__attribute__((unused)) static RxSingleTest_$48 *new_RxSingleTest_$48_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$48 *create_RxSingleTest_$48_init();

@interface RxSingleTest_$49 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$atomicInteger_;
}

- (RxCompletable *)callWithId:(JavaLangInteger *)integer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$49)

J2OBJC_FIELD_SETTER(RxSingleTest_$49, val$atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$49 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSingleTest_$49 *new_RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$49 *create_RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSingleTest_$49_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSingleTest_$49 *this$0_;
}

- (void)call;

- (instancetype)initWithRxSingleTest_$49:(RxSingleTest_$49 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$49_$1)

J2OBJC_FIELD_SETTER(RxSingleTest_$49_$1, this$0_, RxSingleTest_$49 *)

__attribute__((unused)) static void RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49_$1 *self, RxSingleTest_$49 *outer$);

__attribute__((unused)) static RxSingleTest_$49_$1 *new_RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$49_$1 *create_RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49 *outer$);

@interface RxSingleTest_$50 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaLangRuntimeException *val$error_;
}

- (RxCompletable *)callWithId:(JavaLangInteger *)integer;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$50)

J2OBJC_FIELD_SETTER(RxSingleTest_$50, val$error_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxSingleTest_$50_initWithJavaLangRuntimeException_(RxSingleTest_$50 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxSingleTest_$50 *new_RxSingleTest_$50_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$50 *create_RxSingleTest_$50_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@interface RxSingleTest_$51 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$51)

__attribute__((unused)) static void RxSingleTest_$51_init(RxSingleTest_$51 *self);

__attribute__((unused)) static RxSingleTest_$51 *new_RxSingleTest_$51_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$51 *create_RxSingleTest_$51_init();

@interface RxSingleTest_$52 : NSObject < RxFunctionsFunc1 >

- (RxCompletable *)callWithId:(JavaLangInteger *)integer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$52)

__attribute__((unused)) static void RxSingleTest_$52_init(RxSingleTest_$52 *self);

__attribute__((unused)) static RxSingleTest_$52 *new_RxSingleTest_$52_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$52 *create_RxSingleTest_$52_init();

@interface RxSingleTest_$53 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$singleRef_;
  id val$expectedResult_;
}

- (id)callWithId:(RxSingle *)single;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                         withId:(id)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$53)

J2OBJC_FIELD_SETTER(RxSingleTest_$53, val$singleRef_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSingleTest_$53, val$expectedResult_, id)

__attribute__((unused)) static void RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(RxSingleTest_$53 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1);

__attribute__((unused)) static RxSingleTest_$53 *new_RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$53 *create_RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1);

@interface RxSingleTest_$54 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$atomicInteger_;
}

- (void)callWithId:(RxNotification *)notification;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$54)

J2OBJC_FIELD_SETTER(RxSingleTest_$54, val$atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$54 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSingleTest_$54 *new_RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$54 *create_RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSingleTest_$55 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)throwable;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$55)

__attribute__((unused)) static void RxSingleTest_$55_init(RxSingleTest_$55 *self);

__attribute__((unused)) static RxSingleTest_$55 *new_RxSingleTest_$55_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$55 *create_RxSingleTest_$55_init();

@interface RxSingleTest_$56 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$atomicInteger_;
}

- (void)callWithId:(RxNotification *)notification;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleTest_$56)

J2OBJC_FIELD_SETTER(RxSingleTest_$56, val$atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$56 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSingleTest_$56 *new_RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSingleTest_$56 *create_RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxSingleTest

- (void)setUp {
  JreStrongAssign(&onCreate_, OrgMockitoMockito_spyWithId_(create_RxDopplMockSingletestFuncCreate_init()));
  RxPluginsRxJavaHooks_setOnSingleCreateWithRxFunctionsFunc1_(onCreate_);
  JreStrongAssign(&onStart_, OrgMockitoMockito_spyWithId_(create_RxDopplMockSingletestFuncStart_init()));
  RxPluginsRxJavaHooks_setOnSingleStartWithRxFunctionsFunc2_(onStart_);
  JreStrongAssign(&onReturn_, OrgMockitoMockito_spyWithId_(create_RxDopplMockSingletestFuncReturn_init()));
  RxPluginsRxJavaHooks_setOnSingleReturnWithRxFunctionsFunc1_(onReturn_);
}

- (void)after {
  RxPluginsRxJavaHooks_reset();
}

- (void)testHelloWorld {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_justWithId_(@"Hello World!"))) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Hello World!" } count:1 type:NSString_class_()])];
}

- (void)testHelloWorld2 {
  JavaUtilConcurrentAtomicAtomicReference *v = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxSingle *) nil_chk(RxSingle_justWithId_(@"Hello World!"))) subscribeWithRxSingleSubscriber:create_RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(v)];
  OrgJunitAssert_assertEqualsWithId_withId_(@"Hello World!", [v get]);
}

- (void)testMap {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"A"))) mapWithRxFunctionsFunc1:create_RxSingleTest_$2_init()])) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"AB" } count:1 type:NSString_class_()])];
}

- (void)zip2Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxFunctionsFunc2_(a, b, create_RxSingleTest_$3_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"12"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip3Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc3_(a, b, c, create_RxSingleTest_$4_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"123"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip4Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc4_(a, b, c, d, create_RxSingleTest_$5_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"1234"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip5Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  RxSingle *e = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(5));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc5_(a, b, c, d, e, create_RxSingleTest_$6_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"12345"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip6Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  RxSingle *e = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(5));
  RxSingle *f = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(6));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc6_(a, b, c, d, e, f, create_RxSingleTest_$7_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"123456"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip7Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  RxSingle *e = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(5));
  RxSingle *f = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(6));
  RxSingle *g = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(7));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc7_(a, b, c, d, e, f, g, create_RxSingleTest_$8_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"1234567"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip8Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  RxSingle *e = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(5));
  RxSingle *f = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(6));
  RxSingle *g = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(7));
  RxSingle *h = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(8));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc8_(a, b, c, d, e, f, g, h, create_RxSingleTest_$9_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"12345678"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zip9Singles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxSingle *b = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2));
  RxSingle *c = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3));
  RxSingle *d = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(4));
  RxSingle *e = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(5));
  RxSingle *f = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(6));
  RxSingle *g = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(7));
  RxSingle *h = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(8));
  RxSingle *i = RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(9));
  [((RxSingle *) nil_chk(RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc9_(a, b, c, d, e, f, g, h, i, create_RxSingleTest_$10_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"123456789"];
  [ts assertCompleted];
  [ts assertNoErrors];
}

- (void)zipIterableShouldZipListOfSingles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  id<JavaLangIterable> singles = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)), RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(2)), RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(3)) } count:3 type:RxSingle_class_()]);
  [((RxSingle *) nil_chk(RxSingle_zipWithJavaLangIterable_withRxFunctionsFuncN_(singles, create_RxSingleTest_$11_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"123"];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)zipIterableShouldZipSetOfSingles {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  id<JavaUtilSet> singlesSet = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(create_JavaUtilLinkedHashMap_initWithInt_(2));
  RxSingle *s1 = RxSingle_justWithId_(@"1");
  RxSingle *s2 = RxSingle_justWithId_(@"2");
  RxSingle *s3 = RxSingle_justWithId_(@"3");
  [((id<JavaUtilSet>) nil_chk(singlesSet)) addWithId:s1];
  [singlesSet addWithId:s2];
  [singlesSet addWithId:s3];
  [((RxSingle *) nil_chk(RxSingle_zipWithJavaLangIterable_withRxFunctionsFuncN_(singlesSet, create_RxSingleTest_$12_init()))) subscribeWithRxSubscriber:ts];
  [ts assertValueWithId:@"123"];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)zipEmptyIterableShouldThrow {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  id<JavaLangIterable> singles = JavaUtilCollections_emptyList();
  [((RxSingle *) nil_chk(RxSingle_zipWithJavaLangIterable_withRxFunctionsFuncN_(singles, create_RxSingleTest_$13_init()))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertNotCompleted];
  [testSubscriber assertErrorWithIOSClass:JavaUtilNoSuchElementException_class_()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"Can't zip 0 Singles.", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([testSubscriber getOnErrorEvents])) getWithInt:0])) getMessage]);
}

- (void)testZipWith {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"A"))) zipWithWithRxSingle:RxSingle_justWithId_(@"B") withRxFunctionsFunc2:create_RxSingleTest_$14_init()])) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"AB" } count:1 type:NSString_class_()])];
}

- (void)testMerge {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *a = RxSingle_justWithId_(@"A");
  RxSingle *b = RxSingle_justWithId_(@"B");
  [((RxObservable *) nil_chk(RxSingle_mergeWithRxSingle_withRxSingle_(a, b))) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"A", @"B" } count:2 type:NSString_class_()])];
}

- (void)testMergeWith {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"A"))) mergeWithWithRxSingle:RxSingle_justWithId_(@"B")])) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"A", @"B" } count:2 type:NSString_class_()])];
}

- (void)testHookCreate {
  id<RxSingle_OnSubscribe> subscriber = OrgMockitoMockito_mockWithIOSClass_(RxSingle_OnSubscribe_class_());
  RxSingle_createWithRxSingle_OnSubscribe_(subscriber);
  [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onCreate_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:subscriber];
}

- (void)testHookSubscribeStart {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *single = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$15_init());
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc2>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onStart_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_eqWithId_(single) withId:OrgMockitoMatchers_anyWithIOSClass_(RxSingle_OnSubscribe_class_())];
}

- (void)testHookUnsafeSubscribeStart {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *single = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$16_init());
  [((RxSingle *) nil_chk(single)) unsafeSubscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc2>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onStart_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_eqWithId_(single) withId:OrgMockitoMatchers_anyWithIOSClass_(RxSingle_OnSubscribe_class_())];
}

- (void)testHookSubscribeReturn {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *single = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$17_init());
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onReturn_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_anyWithIOSClass_(RxObserversSafeSubscriber_class_())];
}

- (void)testHookUnsafeSubscribeReturn {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *single = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$18_init());
  [((RxSingle *) nil_chk(single)) unsafeSubscribeWithRxSubscriber:ts];
  [((id<RxFunctionsFunc1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onReturn_, OrgMockitoMockito_timesWithInt_(1)))) callWithId:ts];
}

- (void)testReturnUnsubscribedWhenHookThrowsError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *single = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$19_init());
  id<RxSubscription> subscription = [((RxSingle *) nil_chk(single)) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([((id<RxSubscription>) nil_chk(subscription)) isUnsubscribed]);
}

- (void)testCreateSuccess {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$20_init()))) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Hello" } count:1 type:NSString_class_()])];
}

- (void)testCreateError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$21_init()))) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testAsync {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"Hello"))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()])) mapWithRxFunctionsFunc1:create_RxSingleTest_$22_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxSingleTest_$23_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Hello" } count:1 type:NSString_class_()])];
}

- (void)testFlatMap {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"Hello"))) flatMapWithRxFunctionsFunc1:create_RxSingleTest_$24_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Hello World!" } count:1 type:NSString_class_()])];
}

- (void)testTimeout {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *s = [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$25_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()];
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(s)) timeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentTimeoutException_class_()];
}

- (void)testTimeoutWithFallback {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSingle *s = [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$26_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()];
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(s)) timeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxSingle:RxSingle_justWithId_(@"hello")])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [ts assertValueWithId:@"hello"];
}

- (void)testToBlocking {
  RxSingle *s = RxSingle_justWithId_(@"one");
  RxSinglesBlockingSingle *blocking = [((RxSingle *) nil_chk(s)) toBlocking];
  OrgJunitAssert_assertNotNullWithId_(blocking);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((RxSinglesBlockingSingle *) nil_chk(blocking)) value]);
}

- (void)testUnsubscribe {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *interrupted = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  RxSingle *s = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(interrupted, latch, unsubscribed));
  [((RxSingle *) nil_chk(s)) subscribeWithRxSubscriber:ts];
  JavaLangThread_sleepWithLong_(100);
  [ts unsubscribe];
  if ([latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_assertTrueWithBoolean_([unsubscribed get]);
    OrgJunitAssert_assertTrueWithBoolean_([interrupted get]);
  }
  else {
    OrgJunitAssert_failWithNSString_(@"timed out waiting for latch");
  }
}

- (void)testUnsubscribe2 {
  RxSingleSubscriber *ts = create_RxSingleTest_$28_init();
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *interrupted = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  RxSingle *s = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(interrupted, latch, unsubscribed));
  [((RxSingle *) nil_chk(s)) subscribeWithRxSingleSubscriber:ts];
  JavaLangThread_sleepWithLong_(100);
  [ts unsubscribe];
  if ([latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_assertTrueWithBoolean_([unsubscribed get]);
    OrgJunitAssert_assertTrueWithBoolean_([interrupted get]);
  }
  else {
    OrgJunitAssert_failWithNSString_(@"timed out waiting for latch");
  }
}

- (void)testUnsubscribeViaReturnedSubscription {
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentAtomicAtomicBoolean *interrupted = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(2);
  RxSingle *s = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(interrupted, latch, unsubscribed));
  id<RxSubscription> subscription = [((RxSingle *) nil_chk(s)) subscribe];
  JavaLangThread_sleepWithLong_(100);
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  if ([latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    OrgJunitAssert_assertTrueWithBoolean_([unsubscribed get]);
    OrgJunitAssert_assertTrueWithBoolean_([interrupted get]);
  }
  else {
    OrgJunitAssert_failWithNSString_(@"timed out waiting for latch");
  }
}

- (void)testBackpressureAsObservable {
  RxSingle *s = RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$31_init());
  RxObserversTestSubscriber *ts = create_RxSingleTest_$32_init();
  [((RxSingle *) nil_chk(s)) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts requestMoreWithLong:1];
  [ts assertValueWithId:@"hello"];
}

- (void)testToObservable {
  RxObservable *a = [((RxSingle *) nil_chk(RxSingle_justWithId_(@"a"))) toObservable];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(a)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:@"a"];
  [ts assertCompleted];
}

- (void)toCompletableSuccess {
  RxCompletable *completable = [((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) toCompletable];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxCompletable *) nil_chk(completable)) unsafeSubscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertCompleted];
  [testSubscriber assertNoValues];
  [testSubscriber assertNoErrors];
}

- (void)toCompletableError {
  RxExceptionsTestException *exception = create_RxExceptionsTestException_init();
  RxCompletable *completable = [((RxSingle *) nil_chk(RxSingle_errorWithNSException_(exception))) toCompletable];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxCompletable *) nil_chk(completable)) unsafeSubscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertErrorWithNSException:exception];
  [testSubscriber assertNoValues];
  [testSubscriber assertNotCompleted];
}

- (void)doOnErrorNull {
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnErrorWithRxFunctionsAction1:nil];
}

- (void)doOnErrorShouldNotCallActionIfNoErrorHasOccurred {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doOnErrorWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"value"];
  [testSubscriber assertNoErrors];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
}

- (void)doOnErrorShouldCallActionIfErrorHasOccurred {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  NSException *error = create_JavaLangIllegalStateException_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(error))) doOnErrorWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) callWithId:error];
}

- (void)doOnErrorShouldThrowCompositeExceptionIfOnErrorActionThrows {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  NSException *error = create_JavaLangRuntimeException_init();
  NSException *exceptionFromOnErrorAction = create_JavaLangIllegalStateException_init();
  [((id<RxFunctionsAction1>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doThrowWithNSException_(exceptionFromOnErrorAction))) whenWithId:action])) callWithId:error];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(error))) doOnErrorWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  RxExceptionsCompositeException *compositeException = (RxExceptionsCompositeException *) cast_chk([((id<JavaUtilList>) nil_chk([testSubscriber getOnErrorEvents])) getWithInt:0], [RxExceptionsCompositeException class]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(compositeException)) getExceptions])) size]);
  OrgJunitAssert_assertSameWithId_withId_(error, [((id<JavaUtilList>) nil_chk([compositeException getExceptions])) getWithInt:0]);
  OrgJunitAssert_assertSameWithId_withId_(exceptionFromOnErrorAction, [((id<JavaUtilList>) nil_chk([compositeException getExceptions])) getWithInt:1]);
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) callWithId:error];
}

- (void)shouldEmitValueFromCallable {
  id<JavaUtilConcurrentCallable> callable = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call]))) thenReturnWithId:@"value"];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"value"];
  [testSubscriber assertNoErrors];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(callable))) call];
}

- (void)shouldPassErrorFromCallable {
  id<JavaUtilConcurrentCallable> callable = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  NSException *error = create_JavaLangIllegalStateException_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ error } count:1 type:NSException_class_()]];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(callable))) call];
}

- (void)doOnSuccessNull {
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSuccessWithRxFunctionsAction1:nil];
}

- (void)doOnSuccessShouldInvokeAction {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doOnSuccessWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"value"];
  [testSubscriber assertNoErrors];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) callWithId:OrgMockitoMatchers_eqWithId_(@"value")];
}

- (void)doOnSuccessShouldPassErrorFromActionToSubscriber {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  NSException *error = create_JavaLangIllegalStateException_init();
  [((id<RxFunctionsAction1>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doThrowWithNSException_(error))) whenWithId:action])) callWithId:OrgMockitoMatchers_eqWithId_(@"value")];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doOnSuccessWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) callWithId:OrgMockitoMatchers_eqWithId_(@"value")];
}

- (void)doOnSuccessShouldNotCallActionIfSingleThrowsError {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  NSException *error = create_JavaLangIllegalStateException_init();
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(error))) doOnSuccessWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
}

- (void)doOnSuccessShouldNotSwallowExceptionThrownByAction {
  id<RxFunctionsAction1> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  NSException *exceptionFromAction = create_JavaLangIllegalStateException_init();
  [((id<RxFunctionsAction1>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doThrowWithNSException_(exceptionFromAction))) whenWithId:action])) callWithId:OrgMockitoMatchers_eqWithId_(@"value")];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doOnSuccessWithRxFunctionsAction1:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:exceptionFromAction];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) callWithId:OrgMockitoMatchers_eqWithId_(@"value")];
}

- (void)doOnSubscribeShouldInvokeAction {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:action];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
  [((RxSingle *) nil_chk(single)) subscribe];
  [single subscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(action, OrgMockitoMockito_timesWithInt_(2)))) call];
}

- (void)doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes {
  id<JavaUtilList> callSequence = create_JavaUtilArrayList_initWithInt_(2);
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$33_initWithJavaUtilList_(callSequence)))) doOnSubscribeWithRxFunctionsAction0:create_RxSingleTest_$34_initWithJavaUtilList_(callSequence)];
  [((RxSingle *) nil_chk(single)) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [callSequence size]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"doOnSubscribe", [callSequence getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"onSubscribe", [callSequence getWithInt:1]);
}

- (void)delayWithSchedulerShouldDelayCompletion {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS) withRxScheduler:scheduler];
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:subscriber];
  [subscriber assertNotCompleted];
  [scheduler advanceTimeByWithLong:99 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  [subscriber assertNotCompleted];
  [scheduler advanceTimeByWithLong:91 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  [subscriber assertCompleted];
  [subscriber assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)delayWithSchedulerShouldShortCutWithFailure {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  JavaLangRuntimeException *expected = create_JavaLangRuntimeException_init();
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$35_initWithJavaLangRuntimeException_(expected)))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS) withRxScheduler:scheduler];
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:subscriber];
  [subscriber assertNotCompleted];
  [scheduler advanceTimeByWithLong:99 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  [subscriber assertNotCompleted];
  [scheduler advanceTimeByWithLong:91 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  [subscriber assertNoValues];
  [subscriber assertErrorWithNSException:expected];
}

- (void)deferShouldNotCallFactoryFuncUntilSubscriberSubscribes {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ singleFactory } count:1 type:NSObject_class_()]);
}

- (void)deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitValue {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  id value = create_NSObject_init();
  RxSingle *single = RxSingle_justWithId_(value);
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(singleFactory)) call]))) thenReturnWithId:single];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:value];
  [testSubscriber assertNoErrors];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(singleFactory))) call];
}

- (void)deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitError {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  NSException *error = create_JavaLangIllegalStateException_init();
  RxSingle *single = RxSingle_errorWithNSException_(error);
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(singleFactory)) call]))) thenReturnWithId:single];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(singleFactory))) call];
}

- (void)deferShouldPassErrorFromSingleFactoryToTheSubscriber {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  NSException *errorFromSingleFactory = create_JavaLangIllegalStateException_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(singleFactory)) call]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ errorFromSingleFactory } count:1 type:NSException_class_()]];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:errorFromSingleFactory];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(singleFactory))) call];
}

- (void)deferShouldCallSingleFactoryForEachSubscriber {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  IOSObjectArray *values = [IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2", @"3" } count:3 type:NSString_class_()];
  IOSObjectArray *singles = [IOSObjectArray arrayWithObjects:(id[]){ RxSingle_justWithId_(IOSObjectArray_Get(values, 0)), RxSingle_justWithId_(IOSObjectArray_Get(values, 1)), RxSingle_justWithId_(IOSObjectArray_Get(values, 2)) } count:3 type:RxSingle_class_()];
  JavaUtilConcurrentAtomicAtomicInteger *singleFactoryCallsCounter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(singleFactory)) call]))) thenAnswerWithOrgMockitoStubbingAnswer:create_RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(singles, singleFactoryCallsCounter)];
  RxSingle *deferredSingle = RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory);
  for (jint i = 0; i < singles->size_; i++) {
    RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
    [((RxSingle *) nil_chk(deferredSingle)) subscribeWithRxSubscriber:testSubscriber];
    [testSubscriber assertValueWithId:IOSObjectArray_Get(values, i)];
    [testSubscriber assertNoErrors];
  }
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(singleFactory, OrgMockitoMockito_timesWithInt_(3)))) call];
}

- (void)deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_deferWithJavaUtilConcurrentCallable_(nil))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithIOSClass:JavaLangNullPointerException_class_()];
}

- (void)deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull {
  id<JavaUtilConcurrentCallable> singleFactory = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentCallable_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<JavaUtilConcurrentCallable>) nil_chk(singleFactory)) call]))) thenReturnWithId:nil];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(RxSingle_deferWithJavaUtilConcurrentCallable_(singleFactory))) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithIOSClass:JavaLangNullPointerException_class_()];
  [((id<JavaUtilConcurrentCallable>) nil_chk(OrgMockitoMockito_verifyWithId_(singleFactory))) call];
}

- (void)doOnUnsubscribeShouldInvokeActionAfterSuccess {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_justWithId_(@"test"))) doOnUnsubscribeWithRxFunctionsAction0:action];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"test"];
  [testSubscriber assertCompleted];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)doOnUnsubscribeShouldInvokeActionAfterError {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"test")))) doOnUnsubscribeWithRxFunctionsAction0:action];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertErrorWithIOSClass:JavaLangRuntimeException_class_()];
  OrgJunitAssert_assertEqualsWithId_withId_(@"test", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([testSubscriber getOnErrorEvents])) getWithInt:0])) getMessage]);
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxSingle *single = [((RxSingle *) nil_chk(RxSingle_createWithRxSingle_OnSubscribe_(create_RxSingleTest_$37_init()))) doOnUnsubscribeWithRxFunctionsAction0:action];
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  id<RxSubscription> subscription = [((RxSingle *) nil_chk(single)) subscribeWithRxSubscriber:testSubscriber];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
  [testSubscriber assertNoValues];
  [testSubscriber assertNoTerminalEvent];
}

- (void)doAfterTerminateActionShouldBeInvokedAfterOnSuccess {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doAfterTerminateWithRxFunctionsAction0:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"value"];
  [testSubscriber assertNoErrors];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)doAfterTerminateActionShouldBeInvokedAfterOnError {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  NSException *error = create_JavaLangIllegalStateException_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(error))) doAfterTerminateWithRxFunctionsAction0:action])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertNoValues];
  [testSubscriber assertErrorWithNSException:error];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_(action))) call];
}

- (void)doAfterTerminateActionShouldNotBeInvokedUntilSubscriberSubscribes {
  id<RxFunctionsAction0> action = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  [((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) doAfterTerminateWithRxFunctionsAction0:action];
  [((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_JavaLangIllegalStateException_init()))) doAfterTerminateWithRxFunctionsAction0:action];
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ action } count:1 type:NSObject_class_()]);
}

- (void)onErrorResumeNextViaSingleShouldNotInterruptSuccessfulSingle {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"success"))) onErrorResumeNextWithRxSingle:RxSingle_justWithId_(@"fail")])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"success"];
}

- (void)onErrorResumeNextViaSingleShouldResumeWithPassedSingleInCaseOfError {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"test exception")))) onErrorResumeNextWithRxSingle:RxSingle_justWithId_(@"fallback")])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"fallback"];
}

- (void)onErrorResumeNextViaSingleShouldPreventNullSingle {
  @try {
    [((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) onErrorResumeNextWithRxSingle:nil];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"resumeSingleInCaseOfError must not be null", [((JavaLangNullPointerException *) nil_chk(expected)) getMessage]);
  }
}

- (void)onErrorResumeNextViaFunctionShouldNotInterruptSuccessfulSingle {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(@"success"))) onErrorResumeNextWithRxFunctionsFunc1:create_RxSingleTest_$38_init()])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"success"];
}

- (void)onErrorResumeNextViaFunctionShouldResumeWithPassedSingleInCaseOfError {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"test exception")))) onErrorResumeNextWithRxFunctionsFunc1:create_RxSingleTest_$39_init()])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertValueWithId:@"fallback"];
}

- (void)onErrorResumeNextViaFunctionShouldPreventNullFunction {
  @try {
    [((RxSingle *) nil_chk(RxSingle_justWithId_(@"value"))) onErrorResumeNextWithRxFunctionsFunc1:nil];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangNullPointerException *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"resumeFunctionInCaseOfError must not be null", [((JavaLangNullPointerException *) nil_chk(expected)) getMessage]);
  }
}

- (void)onErrorResumeNextViaFunctionShouldFailIfFunctionReturnsNull {
  @try {
    [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_RxExceptionsTestException_init()))) onErrorResumeNextWithRxFunctionsFunc1:create_RxSingleTest_$40_init()])) subscribe];
    OrgJunitAssert_fail();
  }
  @catch (RxExceptionsOnErrorNotImplementedException *expected) {
    OrgJunitAssert_assertTrueWithBoolean_([[((RxExceptionsOnErrorNotImplementedException *) nil_chk(expected)) getCause] isKindOfClass:[JavaLangNullPointerException class]]);
  }
}

- (void)iterableToArrayShouldThrowNullPointerExceptionIfIterableNull {
  RxSingle_iterableToArrayWithJavaLangIterable_(nil);
}

- (void)iterableToArrayShouldConvertList {
  id<JavaUtilList> singlesList = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ RxSingle_justWithId_(@"1"), RxSingle_justWithId_(@"2") } count:2 type:RxSingle_class_()]);
  IOSObjectArray *singlesArray = RxSingle_iterableToArrayWithJavaLangIterable_(singlesList);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, ((IOSObjectArray *) nil_chk(singlesArray))->size_);
  OrgJunitAssert_assertSameWithId_withId_([((id<JavaUtilList>) nil_chk(singlesList)) getWithInt:0], IOSObjectArray_Get(singlesArray, 0));
  OrgJunitAssert_assertSameWithId_withId_([singlesList getWithInt:1], IOSObjectArray_Get(singlesArray, 1));
}

- (void)iterableToArrayShouldConvertSet {
  id<JavaUtilSet> singlesSet = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(create_JavaUtilLinkedHashMap_initWithInt_(2));
  RxSingle *s1 = RxSingle_justWithId_(@"1");
  RxSingle *s2 = RxSingle_justWithId_(@"2");
  [((id<JavaUtilSet>) nil_chk(singlesSet)) addWithId:s1];
  [singlesSet addWithId:s2];
  IOSObjectArray *singlesArray = RxSingle_iterableToArrayWithJavaLangIterable_(singlesSet);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, ((IOSObjectArray *) nil_chk(singlesArray))->size_);
  OrgJunitAssert_assertSameWithId_withId_(s1, IOSObjectArray_Get(singlesArray, 0));
  OrgJunitAssert_assertSameWithId_withId_(s2, IOSObjectArray_Get(singlesArray, 1));
}

- (void)testRetry {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *retryCounter = create_RxObserversTestSubscriber_init();
  jint retryCount = 100;
  id<JavaUtilConcurrentCallable> callable = create_RxSingleTest_$41_initWithRxObserversTestSubscriber_(retryCounter);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) retry])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertCompleted];
  jint numberOfErrors = [((id<JavaUtilList>) nil_chk([retryCounter getOnErrorEvents])) size];
  OrgJunitAssert_assertEqualsWithLong_withLong_(retryCount, numberOfErrors);
}

- (void)testRetryWithCount {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *retryCounter = create_RxObserversTestSubscriber_init();
  jint retryCount = 100;
  id<JavaUtilConcurrentCallable> callable = create_RxSingleTest_$42_initWithRxObserversTestSubscriber_(retryCounter);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) retryWithLong:retryCount])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertCompleted];
  jint numberOfErrors = [((id<JavaUtilList>) nil_chk([retryCounter getOnErrorEvents])) size];
  OrgJunitAssert_assertEqualsWithLong_withLong_(retryCount, numberOfErrors);
}

- (void)testRetryWithPredicate {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *retryCounter = create_RxObserversTestSubscriber_init();
  jint retryCount = 100;
  id<JavaUtilConcurrentCallable> callable = create_RxSingleTest_$43_initWithRxObserversTestSubscriber_(retryCounter);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) retryWithRxFunctionsFunc2:create_RxSingleTest_$44_init()])) subscribeWithRxSubscriber:testSubscriber];
  [testSubscriber assertCompleted];
  jint numberOfErrors = [((id<JavaUtilList>) nil_chk([retryCounter getOnErrorEvents])) size];
  OrgJunitAssert_assertEqualsWithLong_withLong_(retryCount, numberOfErrors);
}

- (void)testRetryWhen {
  RxObserversTestSubscriber *testSubscriber = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *retryCounter = create_RxObserversTestSubscriber_init();
  jint retryCount = 100;
  id<JavaUtilConcurrentCallable> callable = create_RxSingleTest_$45_initWithRxObserversTestSubscriber_(retryCounter);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_fromCallableWithJavaUtilConcurrentCallable_(callable))) retryWhenWithRxFunctionsFunc1:create_RxSingleTest_$46_init()])) subscribeWithRxSubscriber:testSubscriber];
  jint numberOfErrors = [((id<JavaUtilList>) nil_chk([retryCounter getOnErrorEvents])) size];
  OrgJunitAssert_assertEqualsWithLong_withLong_(retryCount, numberOfErrors);
}

- (void)takeUntilCompletableFires {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxCompletable:[((RxSubjectsPublishSubject *) nil_chk(until)) toCompletable]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [until onCompleted];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentCancellationException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilObservableFires {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxObservable:[((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [until onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentCancellationException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSingleFires {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxSingle:[((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1])) toSingle]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [until onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentCancellationException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilObservableCompletes {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxObservable:[((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [until onCompleted];
  [ts assertErrorWithIOSClass:JavaUtilConcurrentCancellationException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceUnsubscribes_withCompletable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxCompletable:[((RxSubjectsPublishSubject *) nil_chk(until)) toCompletable]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceUnsubscribes_withObservable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxObservable:until])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceUnsubscribes_withSingle {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxSingle:[((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1])) toSingle]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceErrorUnsubscribes_withCompletable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxCompletable:[((RxSubjectsPublishSubject *) nil_chk(until)) toCompletable]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  JavaLangException *e = create_JavaLangException_init();
  [source onErrorWithNSException:e];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceErrorUnsubscribes_withObservable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxObservable:until])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [source onErrorWithNSException:create_NSException_init()];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:NSException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilSourceErrorUnsubscribes_withSingle {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxSingle:[((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1])) toSingle]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  [source onErrorWithNSException:create_NSException_init()];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:NSException_class_()];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilError_withCompletable_shouldMatch {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxCompletable:[((RxSubjectsPublishSubject *) nil_chk(until)) toCompletable]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  JavaLangException *e = create_JavaLangException_init();
  [until onErrorWithNSException:e];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilError_withObservable_shouldMatch {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxObservable:[((RxSubjectsPublishSubject *) nil_chk(until)) asObservable]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  JavaLangException *e = create_JavaLangException_init();
  [until onErrorWithNSException:e];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)takeUntilError_withSingle_shouldMatch {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeWithInt:1])) toSingle])) takeUntilWithRxSingle:[((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(until)) takeWithInt:1])) toSingle]])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([until hasObservers]);
  JavaLangException *e = create_JavaLangException_init();
  [until onErrorWithNSException:e];
  [ts assertNoValues];
  [ts assertErrorWithNSException:e];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([until hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([ts isUnsubscribed]);
}

- (void)subscribeWithObserver {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)subscribeWithObserverAndGetError {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_RxExceptionsTestException_init()))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)subscribeWithNullObserver {
  @try {
    [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxObserver:nil];
    OrgJunitAssert_failWithNSString_(@"Failed to throw NullPointerException");
  }
  @catch (JavaLangNullPointerException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"observer is null", [((JavaLangNullPointerException *) nil_chk(ex)) getMessage]);
  }
}

- (void)unsubscribeComposesThrough {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  id<RxSubscription> s = [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) toSingle])) flatMapWithRxFunctionsFunc1:create_RxSingleTest_$47_init()])) subscribe];
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Observers present?!", [ps hasObservers]);
}

- (void)unsubscribeComposesThroughAsync {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  id<RxSubscription> s = [((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSingle *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) toSingle])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()])) flatMapWithRxFunctionsFunc1:create_RxSingleTest_$48_init()])) subscribe];
  while (![ps hasObservers] && ![((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted]) ;
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Observers present?!", [ps hasObservers]);
}

- (void)flatMapCompletableComplete {
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *testSubscriber = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) flatMapCompletableWithRxFunctionsFunc1:create_RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(atomicInteger)])) subscribeWithRxSubscriber:testSubscriber];
  [((RxObserversTestSubscriber *) nil_chk(testSubscriber)) assertCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [atomicInteger get]);
}

- (void)flatMapCompletableError {
  JavaLangRuntimeException *error = create_JavaLangRuntimeException_initWithNSString_(@"some error");
  RxObserversTestSubscriber *testSubscriber = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) flatMapCompletableWithRxFunctionsFunc1:create_RxSingleTest_$50_initWithJavaLangRuntimeException_(error)])) subscribeWithRxSubscriber:testSubscriber];
  [((RxObserversTestSubscriber *) nil_chk(testSubscriber)) assertErrorWithNSException:error];
}

- (void)flatMapCompletableNullCompletable {
  RxObserversTestSubscriber *testSubscriber = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) flatMapCompletableWithRxFunctionsFunc1:create_RxSingleTest_$51_init()])) subscribeWithRxSubscriber:testSubscriber];
  [((RxObserversTestSubscriber *) nil_chk(testSubscriber)) assertErrorWithIOSClass:JavaLangNullPointerException_class_()];
}

- (void)flatMapCompletableException {
  RxObserversTestSubscriber *testSubscriber = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) flatMapCompletableWithRxFunctionsFunc1:create_RxSingleTest_$52_init()])) subscribeWithRxSubscriber:testSubscriber];
  [((RxObserversTestSubscriber *) nil_chk(testSubscriber)) assertErrorWithIOSClass:JavaLangUnsupportedOperationException_class_()];
}

- (void)toFunctionReceivesObservableReturnsResult {
  RxSingle *s = RxSingle_justWithId_(@"Hi");
  id expectedResult = create_NSObject_init();
  JavaUtilConcurrentAtomicAtomicReference *singleRef = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id actualResult = [((RxSingle *) nil_chk(s)) toWithRxFunctionsFunc1:create_RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(singleRef, expectedResult)];
  OrgJunitAssert_assertSameWithId_withId_(expectedResult, actualResult);
  OrgJunitAssert_assertSameWithId_withId_(s, [singleRef get]);
}

- (void)doOnEachNull {
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnEachWithRxFunctionsAction1:nil];
}

- (void)doOnEachError {
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_errorWithNSException_(create_JavaLangRuntimeException_init()))) doOnEachWithRxFunctionsAction1:create_RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(atomicInteger)])) subscribeWithRxFunctionsAction1:RxFunctionsActions_empty() withRxFunctionsAction1:create_RxSingleTest_$55_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [atomicInteger get]);
}

- (void)doOnEachSuccess {
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  [((RxSingle *) nil_chk([((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnEachWithRxFunctionsAction1:create_RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(atomicInteger)])) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [atomicInteger get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(onCreate_);
  RELEASE_(onStart_);
  RELEASE_(onReturn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, 33, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, 33, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, 33, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 49, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 50, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 51, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 52, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 53, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 54, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 55, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 56, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 57, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 58, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 59, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 60, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 61, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 62, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 63, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 64, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 65, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 66, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 67, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 68, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 69, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 70, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 71, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 72, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 73, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 74, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 75, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 76, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 77, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 78, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 79, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 80, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 81, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 82, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 83, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 84, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 85, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 86, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 87, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 88, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 89, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 90, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 91, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 92, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 93, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 94, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 95, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 96, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 97, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 98, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 99, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 100, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 101, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 102, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 103, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 104, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 105, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 106, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 107, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 108, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(after);
  methods[2].selector = @selector(testHelloWorld);
  methods[3].selector = @selector(testHelloWorld2);
  methods[4].selector = @selector(testMap);
  methods[5].selector = @selector(zip2Singles);
  methods[6].selector = @selector(zip3Singles);
  methods[7].selector = @selector(zip4Singles);
  methods[8].selector = @selector(zip5Singles);
  methods[9].selector = @selector(zip6Singles);
  methods[10].selector = @selector(zip7Singles);
  methods[11].selector = @selector(zip8Singles);
  methods[12].selector = @selector(zip9Singles);
  methods[13].selector = @selector(zipIterableShouldZipListOfSingles);
  methods[14].selector = @selector(zipIterableShouldZipSetOfSingles);
  methods[15].selector = @selector(zipEmptyIterableShouldThrow);
  methods[16].selector = @selector(testZipWith);
  methods[17].selector = @selector(testMerge);
  methods[18].selector = @selector(testMergeWith);
  methods[19].selector = @selector(testHookCreate);
  methods[20].selector = @selector(testHookSubscribeStart);
  methods[21].selector = @selector(testHookUnsafeSubscribeStart);
  methods[22].selector = @selector(testHookSubscribeReturn);
  methods[23].selector = @selector(testHookUnsafeSubscribeReturn);
  methods[24].selector = @selector(testReturnUnsubscribedWhenHookThrowsError);
  methods[25].selector = @selector(testCreateSuccess);
  methods[26].selector = @selector(testCreateError);
  methods[27].selector = @selector(testAsync);
  methods[28].selector = @selector(testFlatMap);
  methods[29].selector = @selector(testTimeout);
  methods[30].selector = @selector(testTimeoutWithFallback);
  methods[31].selector = @selector(testToBlocking);
  methods[32].selector = @selector(testUnsubscribe);
  methods[33].selector = @selector(testUnsubscribe2);
  methods[34].selector = @selector(testUnsubscribeViaReturnedSubscription);
  methods[35].selector = @selector(testBackpressureAsObservable);
  methods[36].selector = @selector(testToObservable);
  methods[37].selector = @selector(toCompletableSuccess);
  methods[38].selector = @selector(toCompletableError);
  methods[39].selector = @selector(doOnErrorNull);
  methods[40].selector = @selector(doOnErrorShouldNotCallActionIfNoErrorHasOccurred);
  methods[41].selector = @selector(doOnErrorShouldCallActionIfErrorHasOccurred);
  methods[42].selector = @selector(doOnErrorShouldThrowCompositeExceptionIfOnErrorActionThrows);
  methods[43].selector = @selector(shouldEmitValueFromCallable);
  methods[44].selector = @selector(shouldPassErrorFromCallable);
  methods[45].selector = @selector(doOnSuccessNull);
  methods[46].selector = @selector(doOnSuccessShouldInvokeAction);
  methods[47].selector = @selector(doOnSuccessShouldPassErrorFromActionToSubscriber);
  methods[48].selector = @selector(doOnSuccessShouldNotCallActionIfSingleThrowsError);
  methods[49].selector = @selector(doOnSuccessShouldNotSwallowExceptionThrownByAction);
  methods[50].selector = @selector(doOnSubscribeShouldInvokeAction);
  methods[51].selector = @selector(doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes);
  methods[52].selector = @selector(delayWithSchedulerShouldDelayCompletion);
  methods[53].selector = @selector(delayWithSchedulerShouldShortCutWithFailure);
  methods[54].selector = @selector(deferShouldNotCallFactoryFuncUntilSubscriberSubscribes);
  methods[55].selector = @selector(deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitValue);
  methods[56].selector = @selector(deferShouldSubscribeSubscriberToSingleFromFactoryFuncAndEmitError);
  methods[57].selector = @selector(deferShouldPassErrorFromSingleFactoryToTheSubscriber);
  methods[58].selector = @selector(deferShouldCallSingleFactoryForEachSubscriber);
  methods[59].selector = @selector(deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull);
  methods[60].selector = @selector(deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull);
  methods[61].selector = @selector(doOnUnsubscribeShouldInvokeActionAfterSuccess);
  methods[62].selector = @selector(doOnUnsubscribeShouldInvokeActionAfterError);
  methods[63].selector = @selector(doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription);
  methods[64].selector = @selector(doAfterTerminateActionShouldBeInvokedAfterOnSuccess);
  methods[65].selector = @selector(doAfterTerminateActionShouldBeInvokedAfterOnError);
  methods[66].selector = @selector(doAfterTerminateActionShouldNotBeInvokedUntilSubscriberSubscribes);
  methods[67].selector = @selector(onErrorResumeNextViaSingleShouldNotInterruptSuccessfulSingle);
  methods[68].selector = @selector(onErrorResumeNextViaSingleShouldResumeWithPassedSingleInCaseOfError);
  methods[69].selector = @selector(onErrorResumeNextViaSingleShouldPreventNullSingle);
  methods[70].selector = @selector(onErrorResumeNextViaFunctionShouldNotInterruptSuccessfulSingle);
  methods[71].selector = @selector(onErrorResumeNextViaFunctionShouldResumeWithPassedSingleInCaseOfError);
  methods[72].selector = @selector(onErrorResumeNextViaFunctionShouldPreventNullFunction);
  methods[73].selector = @selector(onErrorResumeNextViaFunctionShouldFailIfFunctionReturnsNull);
  methods[74].selector = @selector(iterableToArrayShouldThrowNullPointerExceptionIfIterableNull);
  methods[75].selector = @selector(iterableToArrayShouldConvertList);
  methods[76].selector = @selector(iterableToArrayShouldConvertSet);
  methods[77].selector = @selector(testRetry);
  methods[78].selector = @selector(testRetryWithCount);
  methods[79].selector = @selector(testRetryWithPredicate);
  methods[80].selector = @selector(testRetryWhen);
  methods[81].selector = @selector(takeUntilCompletableFires);
  methods[82].selector = @selector(takeUntilObservableFires);
  methods[83].selector = @selector(takeUntilSingleFires);
  methods[84].selector = @selector(takeUntilObservableCompletes);
  methods[85].selector = @selector(takeUntilSourceUnsubscribes_withCompletable);
  methods[86].selector = @selector(takeUntilSourceUnsubscribes_withObservable);
  methods[87].selector = @selector(takeUntilSourceUnsubscribes_withSingle);
  methods[88].selector = @selector(takeUntilSourceErrorUnsubscribes_withCompletable);
  methods[89].selector = @selector(takeUntilSourceErrorUnsubscribes_withObservable);
  methods[90].selector = @selector(takeUntilSourceErrorUnsubscribes_withSingle);
  methods[91].selector = @selector(takeUntilError_withCompletable_shouldMatch);
  methods[92].selector = @selector(takeUntilError_withObservable_shouldMatch);
  methods[93].selector = @selector(takeUntilError_withSingle_shouldMatch);
  methods[94].selector = @selector(subscribeWithObserver);
  methods[95].selector = @selector(subscribeWithObserverAndGetError);
  methods[96].selector = @selector(subscribeWithNullObserver);
  methods[97].selector = @selector(unsubscribeComposesThrough);
  methods[98].selector = @selector(unsubscribeComposesThroughAsync);
  methods[99].selector = @selector(flatMapCompletableComplete);
  methods[100].selector = @selector(flatMapCompletableError);
  methods[101].selector = @selector(flatMapCompletableNullCompletable);
  methods[102].selector = @selector(flatMapCompletableException);
  methods[103].selector = @selector(toFunctionReceivesObservableReturnsResult);
  methods[104].selector = @selector(doOnEachNull);
  methods[105].selector = @selector(doOnEachError);
  methods[106].selector = @selector(doOnEachSuccess);
  methods[107].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "onCreate_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x2, -1, -1, 109, -1 },
    { "onStart_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x2, -1, -1, 110, -1 },
    { "onReturn_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x2, -1, -1, 111, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxSingleTest__Annotations$0, (void *)&RxSingleTest__Annotations$1, (void *)&RxSingleTest__Annotations$2, (void *)&RxSingleTest__Annotations$3, (void *)&RxSingleTest__Annotations$4, (void *)&RxSingleTest__Annotations$5, (void *)&RxSingleTest__Annotations$6, (void *)&RxSingleTest__Annotations$7, (void *)&RxSingleTest__Annotations$8, (void *)&RxSingleTest__Annotations$9, (void *)&RxSingleTest__Annotations$10, (void *)&RxSingleTest__Annotations$11, (void *)&RxSingleTest__Annotations$12, (void *)&RxSingleTest__Annotations$13, (void *)&RxSingleTest__Annotations$14, (void *)&RxSingleTest__Annotations$15, (void *)&RxSingleTest__Annotations$16, (void *)&RxSingleTest__Annotations$17, (void *)&RxSingleTest__Annotations$18, (void *)&RxSingleTest__Annotations$19, (void *)&RxSingleTest__Annotations$20, (void *)&RxSingleTest__Annotations$21, (void *)&RxSingleTest__Annotations$22, (void *)&RxSingleTest__Annotations$23, (void *)&RxSingleTest__Annotations$24, (void *)&RxSingleTest__Annotations$25, (void *)&RxSingleTest__Annotations$26, (void *)&RxSingleTest__Annotations$27, (void *)&RxSingleTest__Annotations$28, (void *)&RxSingleTest__Annotations$29, (void *)&RxSingleTest__Annotations$30, (void *)&RxSingleTest__Annotations$31, "LJavaLangInterruptedException;", (void *)&RxSingleTest__Annotations$32, (void *)&RxSingleTest__Annotations$33, (void *)&RxSingleTest__Annotations$34, (void *)&RxSingleTest__Annotations$35, (void *)&RxSingleTest__Annotations$36, (void *)&RxSingleTest__Annotations$37, (void *)&RxSingleTest__Annotations$38, (void *)&RxSingleTest__Annotations$39, (void *)&RxSingleTest__Annotations$40, (void *)&RxSingleTest__Annotations$41, (void *)&RxSingleTest__Annotations$42, (void *)&RxSingleTest__Annotations$43, (void *)&RxSingleTest__Annotations$44, (void *)&RxSingleTest__Annotations$45, (void *)&RxSingleTest__Annotations$46, (void *)&RxSingleTest__Annotations$47, (void *)&RxSingleTest__Annotations$48, (void *)&RxSingleTest__Annotations$49, (void *)&RxSingleTest__Annotations$50, (void *)&RxSingleTest__Annotations$51, (void *)&RxSingleTest__Annotations$52, (void *)&RxSingleTest__Annotations$53, (void *)&RxSingleTest__Annotations$54, (void *)&RxSingleTest__Annotations$55, (void *)&RxSingleTest__Annotations$56, (void *)&RxSingleTest__Annotations$57, (void *)&RxSingleTest__Annotations$58, (void *)&RxSingleTest__Annotations$59, (void *)&RxSingleTest__Annotations$60, (void *)&RxSingleTest__Annotations$61, (void *)&RxSingleTest__Annotations$62, (void *)&RxSingleTest__Annotations$63, (void *)&RxSingleTest__Annotations$64, (void *)&RxSingleTest__Annotations$65, (void *)&RxSingleTest__Annotations$66, (void *)&RxSingleTest__Annotations$67, (void *)&RxSingleTest__Annotations$68, (void *)&RxSingleTest__Annotations$69, (void *)&RxSingleTest__Annotations$70, (void *)&RxSingleTest__Annotations$71, (void *)&RxSingleTest__Annotations$72, (void *)&RxSingleTest__Annotations$73, (void *)&RxSingleTest__Annotations$74, (void *)&RxSingleTest__Annotations$75, (void *)&RxSingleTest__Annotations$76, (void *)&RxSingleTest__Annotations$77, (void *)&RxSingleTest__Annotations$78, (void *)&RxSingleTest__Annotations$79, (void *)&RxSingleTest__Annotations$80, (void *)&RxSingleTest__Annotations$81, (void *)&RxSingleTest__Annotations$82, (void *)&RxSingleTest__Annotations$83, (void *)&RxSingleTest__Annotations$84, (void *)&RxSingleTest__Annotations$85, (void *)&RxSingleTest__Annotations$86, (void *)&RxSingleTest__Annotations$87, (void *)&RxSingleTest__Annotations$88, (void *)&RxSingleTest__Annotations$89, (void *)&RxSingleTest__Annotations$90, (void *)&RxSingleTest__Annotations$91, (void *)&RxSingleTest__Annotations$92, (void *)&RxSingleTest__Annotations$93, (void *)&RxSingleTest__Annotations$94, (void *)&RxSingleTest__Annotations$95, (void *)&RxSingleTest__Annotations$96, (void *)&RxSingleTest__Annotations$97, (void *)&RxSingleTest__Annotations$98, (void *)&RxSingleTest__Annotations$99, (void *)&RxSingleTest__Annotations$100, (void *)&RxSingleTest__Annotations$101, (void *)&RxSingleTest__Annotations$102, (void *)&RxSingleTest__Annotations$103, (void *)&RxSingleTest__Annotations$104, (void *)&RxSingleTest__Annotations$105, (void *)&RxSingleTest__Annotations$106, "Lrx/functions/Func1<Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;", "Lrx/functions/Func2<Lrx/Single;Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;", "Lrx/functions/Func1<Lrx/Subscription;Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxSingleTest = { "SingleTest", "rx", ptrTable, methods, fields, 7, 0x1, 108, 3, -1, -1, -1, -1, -1 };
  return &_RxSingleTest;
}

@end

void RxSingleTest_init(RxSingleTest *self) {
  NSObject_init(self);
}

RxSingleTest *new_RxSingleTest_init() {
  J2OBJC_NEW_IMPL(RxSingleTest, init)
}

RxSingleTest *create_RxSingleTest_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest, init)
}

IOSObjectArray *RxSingleTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$48() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$49() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$50() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$51() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$52() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$53() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$54() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$55() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$56() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$57() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$58() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$59() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$60() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$61() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$62() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$63() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$64() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$65() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$66() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$67() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$68() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$69() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$70() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$71() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$72() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$73() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$74() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$75() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$76() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$77() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$78() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$79() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$80() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$81() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$82() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$83() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$84() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$85() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$86() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$87() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$88() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$89() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$90() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$91() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$92() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$93() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$94() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$95() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$96() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$97() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$98() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$99() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$100() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$101() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$102() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$103() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$104() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$105() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSingleTest__Annotations$106() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSingleTest)

@implementation RxSingleTest_$1

- (void)onSuccessWithId:(NSString *)value {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$v_)) setWithId:value];
}

- (void)onErrorWithNSException:(NSException *)error {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$v_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSuccessWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$v_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onSuccess", "LNSString;", "(Ljava/lang/String;)V", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxSingleTest;", "testHelloWorld2", "Lrx/SingleSubscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 3, 1, 8, -1, 9, 10, -1 };
  return &_RxSingleTest_$1;
}

@end

void RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSingleTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$v_, capture$0);
  RxSingleSubscriber_init(self);
}

RxSingleTest_$1 *new_RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxSingleTest_$1 *create_RxSingleTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxSingleTest_$2

- (NSString *)callWithId:(NSString *)s {
  return JreStrcat("$C", s, 'B');
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSingleTest;", "testMap", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$2;
}

@end

void RxSingleTest_$2_init(RxSingleTest_$2 *self) {
  NSObject_init(self);
}

RxSingleTest_$2 *new_RxSingleTest_$2_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$2, init)
}

RxSingleTest_$2 *create_RxSingleTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$2, init)
}

@implementation RxSingleTest_$3

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b {
  return JreStrcat("@@", a, b);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip2Singles", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$3 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$3;
}

@end

void RxSingleTest_$3_init(RxSingleTest_$3 *self) {
  NSObject_init(self);
}

RxSingleTest_$3 *new_RxSingleTest_$3_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$3, init)
}

RxSingleTest_$3 *create_RxSingleTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$3, init)
}

@implementation RxSingleTest_$4

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c {
  return JreStrcat("@@@", a, b, c);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip3Singles", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$4 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$4;
}

@end

void RxSingleTest_$4_init(RxSingleTest_$4 *self) {
  NSObject_init(self);
}

RxSingleTest_$4 *new_RxSingleTest_$4_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$4, init)
}

RxSingleTest_$4 *create_RxSingleTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$4, init)
}

@implementation RxSingleTest_$5

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d {
  return JreStrcat("@@@@", a, b, c, d);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip4Singles", "Ljava/lang/Object;Lrx/functions/Func4<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$5 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$5;
}

@end

void RxSingleTest_$5_init(RxSingleTest_$5 *self) {
  NSObject_init(self);
}

RxSingleTest_$5 *new_RxSingleTest_$5_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$5, init)
}

RxSingleTest_$5 *create_RxSingleTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$5, init)
}

@implementation RxSingleTest_$6

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e {
  return JreStrcat("@@@@@", a, b, c, d, e);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip5Singles", "Ljava/lang/Object;Lrx/functions/Func5<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$6 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$6;
}

@end

void RxSingleTest_$6_init(RxSingleTest_$6 *self) {
  NSObject_init(self);
}

RxSingleTest_$6 *new_RxSingleTest_$6_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$6, init)
}

RxSingleTest_$6 *create_RxSingleTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$6, init)
}

@implementation RxSingleTest_$7

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f {
  return JreStrcat("@@@@@@", a, b, c, d, e, f);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip6Singles", "Ljava/lang/Object;Lrx/functions/Func6<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$7 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$7;
}

@end

void RxSingleTest_$7_init(RxSingleTest_$7 *self) {
  NSObject_init(self);
}

RxSingleTest_$7 *new_RxSingleTest_$7_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$7, init)
}

RxSingleTest_$7 *create_RxSingleTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$7, init)
}

@implementation RxSingleTest_$8

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g {
  return JreStrcat("@@@@@@@", a, b, c, d, e, f, g);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip7Singles", "Ljava/lang/Object;Lrx/functions/Func7<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$8 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$8;
}

@end

void RxSingleTest_$8_init(RxSingleTest_$8 *self) {
  NSObject_init(self);
}

RxSingleTest_$8 *new_RxSingleTest_$8_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$8, init)
}

RxSingleTest_$8 *create_RxSingleTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$8, init)
}

@implementation RxSingleTest_$9

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g
                  withId:(JavaLangInteger *)h {
  return JreStrcat("@@@@@@@@", a, b, c, d, e, f, g, h);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:withId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip8Singles", "Ljava/lang/Object;Lrx/functions/Func8<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$9 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$9;
}

@end

void RxSingleTest_$9_init(RxSingleTest_$9 *self) {
  NSObject_init(self);
}

RxSingleTest_$9 *new_RxSingleTest_$9_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$9, init)
}

RxSingleTest_$9 *create_RxSingleTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$9, init)
}

@implementation RxSingleTest_$10

- (NSString *)callWithId:(JavaLangInteger *)a
                  withId:(JavaLangInteger *)b
                  withId:(JavaLangInteger *)c
                  withId:(JavaLangInteger *)d
                  withId:(JavaLangInteger *)e
                  withId:(JavaLangInteger *)f
                  withId:(JavaLangInteger *)g
                  withId:(JavaLangInteger *)h
                  withId:(JavaLangInteger *)i {
  return JreStrcat("@@@@@@@@@", a, b, c, d, e, f, g, h, i);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:withId:withId:withId:withId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;LJavaLangInteger;", "LRxSingleTest;", "zip9Singles", "Ljava/lang/Object;Lrx/functions/Func9<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$10 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$10;
}

@end

void RxSingleTest_$10_init(RxSingleTest_$10 *self) {
  NSObject_init(self);
}

RxSingleTest_$10 *new_RxSingleTest_$10_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$10, init)
}

RxSingleTest_$10 *create_RxSingleTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$10, init)
}

@implementation RxSingleTest_$11

- (NSString *)callWithNSObjectArray:(IOSObjectArray *)args {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = args;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id arg = *b__++;
      [stringBuilder appendWithId:arg];
    }
  }
  return [stringBuilder description];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithNSObjectArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "[LNSObject;", "LRxSingleTest;", "zipIterableShouldZipListOfSingles", "Ljava/lang/Object;Lrx/functions/FuncN<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$11 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$11;
}

@end

void RxSingleTest_$11_init(RxSingleTest_$11 *self) {
  NSObject_init(self);
}

RxSingleTest_$11 *new_RxSingleTest_$11_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$11, init)
}

RxSingleTest_$11 *create_RxSingleTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$11, init)
}

@implementation RxSingleTest_$12

- (NSString *)callWithNSObjectArray:(IOSObjectArray *)args {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = args;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id arg = *b__++;
      [stringBuilder appendWithId:arg];
    }
  }
  return [stringBuilder description];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithNSObjectArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "[LNSObject;", "LRxSingleTest;", "zipIterableShouldZipSetOfSingles", "Ljava/lang/Object;Lrx/functions/FuncN<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$12 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$12;
}

@end

void RxSingleTest_$12_init(RxSingleTest_$12 *self) {
  NSObject_init(self);
}

RxSingleTest_$12 *new_RxSingleTest_$12_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$12, init)
}

RxSingleTest_$12 *create_RxSingleTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$12, init)
}

@implementation RxSingleTest_$13

- (id)callWithNSObjectArray:(IOSObjectArray *)args {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Should not be called");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithNSObjectArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "[LNSObject;", "LRxSingleTest;", "zipEmptyIterableShouldThrow", "Ljava/lang/Object;Lrx/functions/FuncN<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$13 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$13;
}

@end

void RxSingleTest_$13_init(RxSingleTest_$13 *self) {
  NSObject_init(self);
}

RxSingleTest_$13 *new_RxSingleTest_$13_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$13, init)
}

RxSingleTest_$13 *create_RxSingleTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$13, init)
}

@implementation RxSingleTest_$14

- (NSString *)callWithId:(NSString *)a
                  withId:(NSString *)b {
  return JreStrcat("$$", a, b);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;LNSString;", "LRxSingleTest;", "testZipWith", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$14 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$14;
}

@end

void RxSingleTest_$14_init(RxSingleTest_$14 *self) {
  NSObject_init(self);
}

RxSingleTest_$14 *new_RxSingleTest_$14_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$14, init)
}

RxSingleTest_$14 *create_RxSingleTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$14, init)
}

@implementation RxSingleTest_$15

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"Hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testHookSubscribeStart", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$15 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$15;
}

@end

void RxSingleTest_$15_init(RxSingleTest_$15 *self) {
  NSObject_init(self);
}

RxSingleTest_$15 *new_RxSingleTest_$15_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$15, init)
}

RxSingleTest_$15 *create_RxSingleTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$15, init)
}

@implementation RxSingleTest_$16

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"Hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testHookUnsafeSubscribeStart", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$16 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$16;
}

@end

void RxSingleTest_$16_init(RxSingleTest_$16 *self) {
  NSObject_init(self);
}

RxSingleTest_$16 *new_RxSingleTest_$16_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$16, init)
}

RxSingleTest_$16 *create_RxSingleTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$16, init)
}

@implementation RxSingleTest_$17

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"Hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testHookSubscribeReturn", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$17 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$17;
}

@end

void RxSingleTest_$17_init(RxSingleTest_$17 *self) {
  NSObject_init(self);
}

RxSingleTest_$17 *new_RxSingleTest_$17_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$17, init)
}

RxSingleTest_$17 *create_RxSingleTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$17, init)
}

@implementation RxSingleTest_$18

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"Hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testHookUnsafeSubscribeReturn", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$18 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$18;
}

@end

void RxSingleTest_$18_init(RxSingleTest_$18 *self) {
  NSObject_init(self);
}

RxSingleTest_$18 *new_RxSingleTest_$18_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$18, init)
}

RxSingleTest_$18 *create_RxSingleTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$18, init)
}

@implementation RxSingleTest_$19

- (void)callWithId:(RxSingleSubscriber *)s {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Exception");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testReturnUnsubscribedWhenHookThrowsError", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$19 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$19;
}

@end

void RxSingleTest_$19_init(RxSingleTest_$19 *self) {
  NSObject_init(self);
}

RxSingleTest_$19 *new_RxSingleTest_$19_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$19, init)
}

RxSingleTest_$19 *create_RxSingleTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$19, init)
}

@implementation RxSingleTest_$20

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"Hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testCreateSuccess", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$20 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$20;
}

@end

void RxSingleTest_$20_init(RxSingleTest_$20 *self) {
  NSObject_init(self);
}

RxSingleTest_$20 *new_RxSingleTest_$20_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$20, init)
}

RxSingleTest_$20 *create_RxSingleTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$20, init)
}

@implementation RxSingleTest_$21

- (void)callWithId:(RxSingleSubscriber *)s {
  [((RxSingleSubscriber *) nil_chk(s)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"fail")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testCreateError", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$21 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$21;
}

@end

void RxSingleTest_$21_init(RxSingleTest_$21 *self) {
  NSObject_init(self);
}

RxSingleTest_$21 *new_RxSingleTest_$21_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$21, init)
}

RxSingleTest_$21 *create_RxSingleTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$21, init)
}

@implementation RxSingleTest_$22

- (NSString *)callWithId:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"SubscribeOn Thread: ", JavaLangThread_currentThread())];
  return v;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSingleTest;", "testAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$22 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$22;
}

@end

void RxSingleTest_$22_init(RxSingleTest_$22 *self) {
  NSObject_init(self);
}

RxSingleTest_$22 *new_RxSingleTest_$22_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$22, init)
}

RxSingleTest_$22 *create_RxSingleTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$22, init)
}

@implementation RxSingleTest_$23

- (NSString *)callWithId:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"ObserveOn Thread: ", JavaLangThread_currentThread())];
  return v;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSingleTest;", "testAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$23 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$23;
}

@end

void RxSingleTest_$23_init(RxSingleTest_$23 *self) {
  NSObject_init(self);
}

RxSingleTest_$23 *new_RxSingleTest_$23_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$23, init)
}

RxSingleTest_$23 *create_RxSingleTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$23, init)
}

@implementation RxSingleTest_$24

- (RxSingle *)callWithId:(NSString *)s {
  return [((RxSingle *) nil_chk(RxSingle_justWithId_(JreStrcat("$$", s, @" World!")))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Single<Ljava/lang/String;>;", "LRxSingleTest;", "testFlatMap", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Single<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$24 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$24;
}

@end

void RxSingleTest_$24_init(RxSingleTest_$24 *self) {
  NSObject_init(self);
}

RxSingleTest_$24 *new_RxSingleTest_$24_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$24, init)
}

RxSingleTest_$24 *create_RxSingleTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$24, init)
}

@implementation RxSingleTest_$25

- (void)callWithId:(RxSingleSubscriber *)s {
  @try {
    JavaLangThread_sleepWithLong_(5000);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"success"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testTimeout", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$25 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$25;
}

@end

void RxSingleTest_$25_init(RxSingleTest_$25 *self) {
  NSObject_init(self);
}

RxSingleTest_$25 *new_RxSingleTest_$25_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$25, init)
}

RxSingleTest_$25 *create_RxSingleTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$25, init)
}

@implementation RxSingleTest_$26

- (void)callWithId:(RxSingleSubscriber *)s {
  @try {
    JavaLangThread_sleepWithLong_(5000);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((RxSingleSubscriber *) nil_chk(s)) onSuccessWithId:@"success"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$26_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testTimeoutWithFallback", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$26 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$26;
}

@end

void RxSingleTest_$26_init(RxSingleTest_$26 *self) {
  NSObject_init(self);
}

RxSingleTest_$26 *new_RxSingleTest_$26_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$26, init)
}

RxSingleTest_$26 *create_RxSingleTest_$26_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$26, init)
}

@implementation RxSingleTest_$27

- (void)callWithId:(RxSingleSubscriber *)s {
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(self, s));
  [((RxSingleSubscriber *) nil_chk(s)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(self, t))];
  [t start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2 {
  RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$interrupted_);
  RELEASE_(val$latch_);
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$interrupted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxSingleTest;", "testUnsubscribe", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$27 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$27;
}

@end

void RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$27 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  JreStrongAssign(&self->val$interrupted_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$unsubscribed_, capture$2);
  NSObject_init(self);
}

RxSingleTest_$27 *new_RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_NEW_IMPL(RxSingleTest_$27, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

RxSingleTest_$27 *create_RxSingleTest_$27_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$27, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

@implementation RxSingleTest_$27_$1

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(5000);
    [((RxSingleSubscriber *) nil_chk(val$s_)) onSuccessWithId:@"success"];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$interrupted_)) setWithBoolean:true];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
  }
}

- (instancetype)initWithRxSingleTest_$27:(RxSingleTest_$27 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0 {
  RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSingleTest_$27:withRxSingleSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$27;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$27;LRxSingleSubscriber;", "(Lrx/SingleTest$27;Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "Lrx/SingleSubscriber<-Ljava/lang/String;>;", "LRxSingleTest_$27;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$27_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSingleTest_$27_$1;
}

@end

void RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27_$1 *self, RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$27_$1 *new_RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$27_$1, initWithRxSingleTest_$27_withRxSingleSubscriber_, outer$, capture$0)
}

RxSingleTest_$27_$1 *create_RxSingleTest_$27_$1_initWithRxSingleTest_$27_withRxSingleSubscriber_(RxSingleTest_$27 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$27_$1, initWithRxSingleTest_$27_withRxSingleSubscriber_, outer$, capture$0)
}

@implementation RxSingleTest_$27_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unsubscribed_)) setWithBoolean:true];
  [((JavaLangThread *) nil_chk(val$t_)) interrupt];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSingleTest_$27:(RxSingleTest_$27 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0 {
  RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSingleTest_$27:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$27;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$27;LJavaLangThread;", "LRxSingleTest_$27;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$27_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSingleTest_$27_$2;
}

@end

void RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27_$2 *self, RxSingleTest_$27 *outer$, JavaLangThread *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$t_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$27_$2 *new_RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27 *outer$, JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$27_$2, initWithRxSingleTest_$27_withJavaLangThread_, outer$, capture$0)
}

RxSingleTest_$27_$2 *create_RxSingleTest_$27_$2_initWithRxSingleTest_$27_withJavaLangThread_(RxSingleTest_$27 *outer$, JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$27_$2, initWithRxSingleTest_$27_withJavaLangThread_, outer$, capture$0)
}

@implementation RxSingleTest_$28

- (void)onSuccessWithId:(NSString *)value {
}

- (void)onErrorWithNSException:(NSException *)error {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$28_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSuccessWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSuccess", "LNSString;", "(Ljava/lang/String;)V", "onError", "LNSException;", "LRxSingleTest;", "testUnsubscribe2", "Lrx/SingleSubscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$28 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 5, -1, 6, 7, -1 };
  return &_RxSingleTest_$28;
}

@end

void RxSingleTest_$28_init(RxSingleTest_$28 *self) {
  RxSingleSubscriber_init(self);
}

RxSingleTest_$28 *new_RxSingleTest_$28_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$28, init)
}

RxSingleTest_$28 *create_RxSingleTest_$28_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$28, init)
}

@implementation RxSingleTest_$29

- (void)callWithId:(RxSingleSubscriber *)s {
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(self, s));
  [((RxSingleSubscriber *) nil_chk(s)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(self, t))];
  [t start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2 {
  RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$interrupted_);
  RELEASE_(val$latch_);
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$interrupted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxSingleTest;", "testUnsubscribe2", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$29 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$29;
}

@end

void RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$29 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  JreStrongAssign(&self->val$interrupted_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$unsubscribed_, capture$2);
  NSObject_init(self);
}

RxSingleTest_$29 *new_RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_NEW_IMPL(RxSingleTest_$29, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

RxSingleTest_$29 *create_RxSingleTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$29, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

@implementation RxSingleTest_$29_$1

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(5000);
    [((RxSingleSubscriber *) nil_chk(val$s_)) onSuccessWithId:@"success"];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$interrupted_)) setWithBoolean:true];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
  }
}

- (instancetype)initWithRxSingleTest_$29:(RxSingleTest_$29 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0 {
  RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSingleTest_$29:withRxSingleSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$29;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$29;LRxSingleSubscriber;", "(Lrx/SingleTest$29;Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "Lrx/SingleSubscriber<-Ljava/lang/String;>;", "LRxSingleTest_$29;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$29_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSingleTest_$29_$1;
}

@end

void RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29_$1 *self, RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$29_$1 *new_RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$29_$1, initWithRxSingleTest_$29_withRxSingleSubscriber_, outer$, capture$0)
}

RxSingleTest_$29_$1 *create_RxSingleTest_$29_$1_initWithRxSingleTest_$29_withRxSingleSubscriber_(RxSingleTest_$29 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$29_$1, initWithRxSingleTest_$29_withRxSingleSubscriber_, outer$, capture$0)
}

@implementation RxSingleTest_$29_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unsubscribed_)) setWithBoolean:true];
  [((JavaLangThread *) nil_chk(val$t_)) interrupt];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSingleTest_$29:(RxSingleTest_$29 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0 {
  RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSingleTest_$29:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$29;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$29;LJavaLangThread;", "LRxSingleTest_$29;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$29_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSingleTest_$29_$2;
}

@end

void RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29_$2 *self, RxSingleTest_$29 *outer$, JavaLangThread *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$t_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$29_$2 *new_RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29 *outer$, JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$29_$2, initWithRxSingleTest_$29_withJavaLangThread_, outer$, capture$0)
}

RxSingleTest_$29_$2 *create_RxSingleTest_$29_$2_initWithRxSingleTest_$29_withJavaLangThread_(RxSingleTest_$29 *outer$, JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$29_$2, initWithRxSingleTest_$29_withJavaLangThread_, outer$, capture$0)
}

@implementation RxSingleTest_$30

- (void)callWithId:(RxSingleSubscriber *)s {
  JavaLangThread *t = create_JavaLangThread_initWithJavaLangRunnable_(create_RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(self, s));
  [((RxSingleSubscriber *) nil_chk(s)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(self, t))];
  [t start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2 {
  RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$interrupted_);
  RELEASE_(val$latch_);
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$interrupted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxSingleTest;", "testUnsubscribeViaReturnedSubscription", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$30 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$30;
}

@end

void RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSingleTest_$30 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  JreStrongAssign(&self->val$interrupted_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$unsubscribed_, capture$2);
  NSObject_init(self);
}

RxSingleTest_$30 *new_RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_NEW_IMPL(RxSingleTest_$30, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

RxSingleTest_$30 *create_RxSingleTest_$30_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$30, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1, capture$2)
}

@implementation RxSingleTest_$30_$1

- (void)run {
  @try {
    JavaLangThread_sleepWithLong_(5000);
    [((RxSingleSubscriber *) nil_chk(val$s_)) onSuccessWithId:@"success"];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$interrupted_)) setWithBoolean:true];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
  }
}

- (instancetype)initWithRxSingleTest_$30:(RxSingleTest_$30 *)outer$
                  withRxSingleSubscriber:(RxSingleSubscriber *)capture$0 {
  RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxSingleTest_$30:withRxSingleSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$30;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$30;LRxSingleSubscriber;", "(Lrx/SingleTest$30;Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "Lrx/SingleSubscriber<-Ljava/lang/String;>;", "LRxSingleTest_$30;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$30_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSingleTest_$30_$1;
}

@end

void RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30_$1 *self, RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$30_$1 *new_RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$30_$1, initWithRxSingleTest_$30_withRxSingleSubscriber_, outer$, capture$0)
}

RxSingleTest_$30_$1 *create_RxSingleTest_$30_$1_initWithRxSingleTest_$30_withRxSingleSubscriber_(RxSingleTest_$30 *outer$, RxSingleSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$30_$1, initWithRxSingleTest_$30_withRxSingleSubscriber_, outer$, capture$0)
}

@implementation RxSingleTest_$30_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$unsubscribed_)) setWithBoolean:true];
  [((JavaLangThread *) nil_chk(val$t_)) interrupt];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
}

- (instancetype)initWithRxSingleTest_$30:(RxSingleTest_$30 *)outer$
                      withJavaLangThread:(JavaLangThread *)capture$0 {
  RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSingleTest_$30:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$30;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$30;LJavaLangThread;", "LRxSingleTest_$30;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$30_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSingleTest_$30_$2;
}

@end

void RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30_$2 *self, RxSingleTest_$30 *outer$, JavaLangThread *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$t_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$30_$2 *new_RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30 *outer$, JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$30_$2, initWithRxSingleTest_$30_withJavaLangThread_, outer$, capture$0)
}

RxSingleTest_$30_$2 *create_RxSingleTest_$30_$2_initWithRxSingleTest_$30_withJavaLangThread_(RxSingleTest_$30 *outer$, JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$30_$2, initWithRxSingleTest_$30_withJavaLangThread_, outer$, capture$0)
}

@implementation RxSingleTest_$31

- (void)callWithId:(RxSingleSubscriber *)t {
  [((RxSingleSubscriber *) nil_chk(t)) onSuccessWithId:@"hello"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$31_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/String;>;)V", "LRxSingleTest;", "testBackpressureAsObservable", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$31 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$31;
}

@end

void RxSingleTest_$31_init(RxSingleTest_$31 *self) {
  NSObject_init(self);
}

RxSingleTest_$31 *new_RxSingleTest_$31_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$31, init)
}

RxSingleTest_$31 *create_RxSingleTest_$31_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$31, init)
}

@implementation RxSingleTest_$32

- (void)onStart {
  [self requestWithLong:0];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$32_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxSingleTest_$32 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSingleTest;", "testBackpressureAsObservable", "Lrx/observers/TestSubscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$32 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxSingleTest_$32;
}

@end

void RxSingleTest_$32_init(RxSingleTest_$32 *self) {
  RxObserversTestSubscriber_init(self);
}

RxSingleTest_$32 *new_RxSingleTest_$32_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$32, init)
}

RxSingleTest_$32 *create_RxSingleTest_$32_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$32, init)
}

@implementation RxSingleTest_$33

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber {
  [((id<JavaUtilList>) nil_chk(val$callSequence_)) addWithId:@"onSubscribe"];
  [((RxSingleSubscriber *) nil_chk(singleSubscriber)) onSuccessWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSingleTest_$33_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$callSequence_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$callSequence_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxSingleTest;", "doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$33 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxSingleTest_$33;
}

@end

void RxSingleTest_$33_initWithJavaUtilList_(RxSingleTest_$33 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$callSequence_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$33 *new_RxSingleTest_$33_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$33, initWithJavaUtilList_, capture$0)
}

RxSingleTest_$33 *create_RxSingleTest_$33_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$33, initWithJavaUtilList_, capture$0)
}

@implementation RxSingleTest_$34

- (void)call {
  [((id<JavaUtilList>) nil_chk(val$callSequence_)) addWithId:@"doOnSubscribe"];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSingleTest_$34_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$callSequence_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$callSequence_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "LRxSingleTest;", "doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes" };
  static const J2ObjcClassInfo _RxSingleTest_$34 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSingleTest_$34;
}

@end

void RxSingleTest_$34_initWithJavaUtilList_(RxSingleTest_$34 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$callSequence_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$34 *new_RxSingleTest_$34_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$34, initWithJavaUtilList_, capture$0)
}

RxSingleTest_$34 *create_RxSingleTest_$34_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$34, initWithJavaUtilList_, capture$0)
}

@implementation RxSingleTest_$35

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber {
  [((RxSingleSubscriber *) nil_chk(singleSubscriber)) onSuccessWithId:JavaLangInteger_valueOfWithInt_(1)];
  [singleSubscriber onErrorWithNSException:val$expected_];
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxSingleTest_$35_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$expected_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$expected_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Integer;>;)V", "LJavaLangRuntimeException;", "LRxSingleTest;", "delayWithSchedulerShouldShortCutWithFailure", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$35 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$35;
}

@end

void RxSingleTest_$35_initWithJavaLangRuntimeException_(RxSingleTest_$35 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$expected_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$35 *new_RxSingleTest_$35_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$35, initWithJavaLangRuntimeException_, capture$0)
}

RxSingleTest_$35 *create_RxSingleTest_$35_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$35, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxSingleTest_$36

- (RxSingle *)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  return IOSObjectArray_Get(nil_chk(val$singles_), [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$singleFactoryCallsCounter_)) getAndIncrement]);
}

- (instancetype)initWithRxSingleArray:(IOSObjectArray *)capture$0
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$singles_);
  RELEASE_(val$singleFactoryCallsCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, 2, 3, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithRxSingleArray:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$singles_", "[LRxSingle;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$singleFactoryCallsCounter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "(Lorg/mockito/invocation/InvocationOnMock;)Lrx/Single<Ljava/lang/String;>;", "[LRxSingle;LJavaUtilConcurrentAtomicAtomicInteger;", "[Lrx/Single<Ljava/lang/String;>;", "LRxSingleTest;", "deferShouldCallSingleFactoryForEachSubscriber", "Ljava/lang/Object;Lorg/mockito/stubbing/Answer<Lrx/Single<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$36 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxSingleTest_$36;
}

@end

void RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$36 *self, IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$singles_, capture$0);
  JreStrongAssign(&self->val$singleFactoryCallsCounter_, capture$1);
  NSObject_init(self);
}

RxSingleTest_$36 *new_RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxSingleTest_$36, initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxSingleTest_$36 *create_RxSingleTest_$36_initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_(IOSObjectArray *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$36, initWithRxSingleArray_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxSingleTest_$37

- (void)callWithId:(RxSingleSubscriber *)singleSubscriber {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$37_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Object;>;)V", "LRxSingleTest;", "doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$37 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$37;
}

@end

void RxSingleTest_$37_init(RxSingleTest_$37 *self) {
  NSObject_init(self);
}

RxSingleTest_$37 *new_RxSingleTest_$37_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$37, init)
}

RxSingleTest_$37 *create_RxSingleTest_$37_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$37, init)
}

@implementation RxSingleTest_$38

- (RxSingle *)callWithId:(NSException *)throwable {
  return RxSingle_justWithId_(@"fail");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$38_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "(Ljava/lang/Throwable;)Lrx/Single<+Ljava/lang/String;>;", "LRxSingleTest;", "onErrorResumeNextViaFunctionShouldNotInterruptSuccessfulSingle", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Single<+Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$38 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$38;
}

@end

void RxSingleTest_$38_init(RxSingleTest_$38 *self) {
  NSObject_init(self);
}

RxSingleTest_$38 *new_RxSingleTest_$38_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$38, init)
}

RxSingleTest_$38 *create_RxSingleTest_$38_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$38, init)
}

@implementation RxSingleTest_$39

- (RxSingle *)callWithId:(NSException *)throwable {
  return RxSingle_justWithId_(@"fallback");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$39_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "(Ljava/lang/Throwable;)Lrx/Single<+Ljava/lang/String;>;", "LRxSingleTest;", "onErrorResumeNextViaFunctionShouldResumeWithPassedSingleInCaseOfError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Single<+Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$39 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$39;
}

@end

void RxSingleTest_$39_init(RxSingleTest_$39 *self) {
  NSObject_init(self);
}

RxSingleTest_$39 *new_RxSingleTest_$39_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$39, init)
}

RxSingleTest_$39 *create_RxSingleTest_$39_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$39, init)
}

@implementation RxSingleTest_$40

- (RxSingle *)callWithId:(NSException *)throwable {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$40_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "(Ljava/lang/Throwable;)Lrx/Single<+Ljava/lang/String;>;", "LRxSingleTest;", "onErrorResumeNextViaFunctionShouldFailIfFunctionReturnsNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Single<+Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$40 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$40;
}

@end

void RxSingleTest_$40_init(RxSingleTest_$40 *self) {
  NSObject_init(self);
}

RxSingleTest_$40 *new_RxSingleTest_$40_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$40, init)
}

RxSingleTest_$40 *create_RxSingleTest_$40_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$40, init)
}

@implementation RxSingleTest_$41

- (NSString *)call {
  jint errors = [((id<JavaUtilList>) nil_chk([((RxObserversTestSubscriber *) nil_chk(val$retryCounter_)) getOnErrorEvents])) size];
  if (errors < 100) {
    JavaLangException *exception = create_JavaLangException_init();
    [val$retryCounter_ onErrorWithNSException:exception];
    @throw exception;
  }
  return nil;
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxSingleTest_$41_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$retryCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$retryCounter_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxSingleTest;", "testRetry", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$41 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$41;
}

@end

void RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxSingleTest_$41 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$retryCounter_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$41 *new_RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$41, initWithRxObserversTestSubscriber_, capture$0)
}

RxSingleTest_$41 *create_RxSingleTest_$41_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$41, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxSingleTest_$42

- (NSString *)call {
  jint errors = [((id<JavaUtilList>) nil_chk([((RxObserversTestSubscriber *) nil_chk(val$retryCounter_)) getOnErrorEvents])) size];
  if (errors < 100) {
    JavaLangException *exception = create_JavaLangException_init();
    [val$retryCounter_ onErrorWithNSException:exception];
    @throw exception;
  }
  return nil;
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxSingleTest_$42_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$retryCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$retryCounter_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxSingleTest;", "testRetryWithCount", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$42 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$42;
}

@end

void RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxSingleTest_$42 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$retryCounter_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$42 *new_RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$42, initWithRxObserversTestSubscriber_, capture$0)
}

RxSingleTest_$42 *create_RxSingleTest_$42_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$42, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxSingleTest_$43

- (NSString *)call {
  jint errors = [((id<JavaUtilList>) nil_chk([((RxObserversTestSubscriber *) nil_chk(val$retryCounter_)) getOnErrorEvents])) size];
  if (errors < 100) {
    JavaIoIOException *exception = create_JavaIoIOException_init();
    [val$retryCounter_ onErrorWithNSException:exception];
    @throw exception;
  }
  return nil;
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxSingleTest_$43_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$retryCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$retryCounter_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxSingleTest;", "testRetryWithPredicate", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$43 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$43;
}

@end

void RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxSingleTest_$43 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$retryCounter_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$43 *new_RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$43, initWithRxObserversTestSubscriber_, capture$0)
}

RxSingleTest_$43 *create_RxSingleTest_$43_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$43, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxSingleTest_$44

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)integer
                         withId:(NSException *)throwable {
  return JavaLangBoolean_valueOfWithBoolean_([throwable isKindOfClass:[JavaIoIOException class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$44_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LNSException;", "LRxSingleTest;", "testRetryWithPredicate", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Throwable;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$44 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$44;
}

@end

void RxSingleTest_$44_init(RxSingleTest_$44 *self) {
  NSObject_init(self);
}

RxSingleTest_$44 *new_RxSingleTest_$44_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$44, init)
}

RxSingleTest_$44 *create_RxSingleTest_$44_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$44, init)
}

@implementation RxSingleTest_$45

- (NSString *)call {
  jint errors = [((id<JavaUtilList>) nil_chk([((RxObserversTestSubscriber *) nil_chk(val$retryCounter_)) getOnErrorEvents])) size];
  if (errors < 100) {
    JavaIoIOException *exception = create_JavaIoIOException_init();
    [val$retryCounter_ onErrorWithNSException:exception];
    @throw exception;
  }
  return nil;
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxSingleTest_$45_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$retryCounter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$retryCounter_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxSingleTest;", "testRetryWhen", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$45 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$45;
}

@end

void RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxSingleTest_$45 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$retryCounter_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$45 *new_RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$45, initWithRxObserversTestSubscriber_, capture$0)
}

RxSingleTest_$45 *create_RxSingleTest_$45_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$45, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxSingleTest_$46

- (RxObservable *)callWithId:(RxObservable *)observable {
  return [((RxObservable *) nil_chk(observable)) flatMapWithRxFunctionsFunc1:create_RxSingleTest_$46_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$46_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<+Ljava/lang/Throwable;>;)Lrx/Observable<*>;", "LRxSingleTest;", "testRetryWhen", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<+Ljava/lang/Throwable;>;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$46 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$46;
}

@end

void RxSingleTest_$46_init(RxSingleTest_$46 *self) {
  NSObject_init(self);
}

RxSingleTest_$46 *new_RxSingleTest_$46_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$46, init)
}

RxSingleTest_$46 *create_RxSingleTest_$46_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$46, init)
}

@implementation RxSingleTest_$46_$1

- (RxObservable *)callWithId:(NSException *)throwable {
  return [throwable isKindOfClass:[JavaIoIOException class]] ? RxObservable_justWithId_(nil) : RxObservable_errorWithNSException_(throwable);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$46_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "(Ljava/lang/Throwable;)Lrx/Observable<*>;", "LRxSingleTest_$46;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Observable<*>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$46_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$46_$1;
}

@end

void RxSingleTest_$46_$1_init(RxSingleTest_$46_$1 *self) {
  NSObject_init(self);
}

RxSingleTest_$46_$1 *new_RxSingleTest_$46_$1_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$46_$1, init)
}

RxSingleTest_$46_$1 *create_RxSingleTest_$46_$1_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$46_$1, init)
}

@implementation RxSingleTest_$47

- (RxSingle *)callWithId:(JavaLangInteger *)v {
  return RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$47_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Single<Ljava/lang/Integer;>;", "LRxSingleTest;", "unsubscribeComposesThrough", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Single<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$47 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$47;
}

@end

void RxSingleTest_$47_init(RxSingleTest_$47 *self) {
  NSObject_init(self);
}

RxSingleTest_$47 *new_RxSingleTest_$47_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$47, init)
}

RxSingleTest_$47 *create_RxSingleTest_$47_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$47, init)
}

@implementation RxSingleTest_$48

- (RxSingle *)callWithId:(JavaLangInteger *)v {
  return RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$48_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Single<Ljava/lang/Integer;>;", "LRxSingleTest;", "unsubscribeComposesThroughAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Single<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$48 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$48;
}

@end

void RxSingleTest_$48_init(RxSingleTest_$48 *self) {
  NSObject_init(self);
}

RxSingleTest_$48 *new_RxSingleTest_$48_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$48, init)
}

RxSingleTest_$48 *create_RxSingleTest_$48_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$48, init)
}

@implementation RxSingleTest_$49

- (RxCompletable *)callWithId:(JavaLangInteger *)integer {
  return RxCompletable_fromActionWithRxFunctionsAction0_(create_RxSingleTest_$49_$1_initWithRxSingleTest_$49_(self));
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$atomicInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$atomicInteger_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSingleTest;", "flatMapCompletableComplete", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$49 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$49;
}

@end

void RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$49 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$atomicInteger_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$49 *new_RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$49, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSingleTest_$49 *create_RxSingleTest_$49_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$49, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSingleTest_$49_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$atomicInteger_)) setWithInt:5];
}

- (instancetype)initWithRxSingleTest_$49:(RxSingleTest_$49 *)outer$ {
  RxSingleTest_$49_$1_initWithRxSingleTest_$49_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSingleTest_$49:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSingleTest_$49;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSingleTest_$49;", "callWithId:" };
  static const J2ObjcClassInfo _RxSingleTest_$49_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxSingleTest_$49_$1;
}

@end

void RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49_$1 *self, RxSingleTest_$49 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSingleTest_$49_$1 *new_RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49 *outer$) {
  J2OBJC_NEW_IMPL(RxSingleTest_$49_$1, initWithRxSingleTest_$49_, outer$)
}

RxSingleTest_$49_$1 *create_RxSingleTest_$49_$1_initWithRxSingleTest_$49_(RxSingleTest_$49 *outer$) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$49_$1, initWithRxSingleTest_$49_, outer$)
}

@implementation RxSingleTest_$50

- (RxCompletable *)callWithId:(JavaLangInteger *)integer {
  return RxCompletable_errorWithNSException_(val$error_);
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxSingleTest_$50_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaLangRuntimeException;", "LRxSingleTest;", "flatMapCompletableError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$50 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSingleTest_$50;
}

@end

void RxSingleTest_$50_initWithJavaLangRuntimeException_(RxSingleTest_$50 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$error_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$50 *new_RxSingleTest_$50_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$50, initWithJavaLangRuntimeException_, capture$0)
}

RxSingleTest_$50 *create_RxSingleTest_$50_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$50, initWithJavaLangRuntimeException_, capture$0)
}

@implementation RxSingleTest_$51

- (RxCompletable *)callWithId:(JavaLangInteger *)integer {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$51_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSingleTest;", "flatMapCompletableNullCompletable", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$51 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$51;
}

@end

void RxSingleTest_$51_init(RxSingleTest_$51 *self) {
  NSObject_init(self);
}

RxSingleTest_$51 *new_RxSingleTest_$51_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$51, init)
}

RxSingleTest_$51 *create_RxSingleTest_$51_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$51, init)
}

@implementation RxSingleTest_$52

- (RxCompletable *)callWithId:(JavaLangInteger *)integer {
  @throw create_JavaLangUnsupportedOperationException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$52_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSingleTest;", "flatMapCompletableException", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$52 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$52;
}

@end

void RxSingleTest_$52_init(RxSingleTest_$52 *self) {
  NSObject_init(self);
}

RxSingleTest_$52 *new_RxSingleTest_$52_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$52, init)
}

RxSingleTest_$52 *create_RxSingleTest_$52_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$52, init)
}

@implementation RxSingleTest_$53

- (id)callWithId:(RxSingle *)single {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$singleRef_)) setWithId:single];
  return val$expectedResult_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                         withId:(id)capture$1 {
  RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$singleRef_);
  RELEASE_(val$expectedResult_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$singleRef_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$expectedResult_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingle;", "(Lrx/Single<Ljava/lang/String;>;)Ljava/lang/Object;", "LJavaUtilConcurrentAtomicAtomicReference;LNSObject;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Single<*>;>;Ljava/lang/Object;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Single<*>;>;", "LRxSingleTest;", "toFunctionReceivesObservableReturnsResult", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Single<Ljava/lang/String;>;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$53 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxSingleTest_$53;
}

@end

void RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(RxSingleTest_$53 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  JreStrongAssign(&self->val$singleRef_, capture$0);
  JreStrongAssign(&self->val$expectedResult_, capture$1);
  NSObject_init(self);
}

RxSingleTest_$53 *new_RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  J2OBJC_NEW_IMPL(RxSingleTest_$53, initWithJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1)
}

RxSingleTest_$53 *create_RxSingleTest_$53_initWithJavaUtilConcurrentAtomicAtomicReference_withId_(JavaUtilConcurrentAtomicAtomicReference *capture$0, id capture$1) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$53, initWithJavaUtilConcurrentAtomicAtomicReference_withId_, capture$0, capture$1)
}

@implementation RxSingleTest_$54

- (void)callWithId:(RxNotification *)notification {
  if ([((RxNotification *) nil_chk(notification)) isOnError]) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$atomicInteger_)) incrementAndGet];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$atomicInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$atomicInteger_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<*>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSingleTest;", "doOnEachError", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<*>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$54 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$54;
}

@end

void RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$54 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$atomicInteger_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$54 *new_RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$54, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSingleTest_$54 *create_RxSingleTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$54, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSingleTest_$55

- (void)callWithId:(NSException *)throwable {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSingleTest_$55_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxSingleTest;", "doOnEachError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$55 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSingleTest_$55;
}

@end

void RxSingleTest_$55_init(RxSingleTest_$55 *self) {
  NSObject_init(self);
}

RxSingleTest_$55 *new_RxSingleTest_$55_init() {
  J2OBJC_NEW_IMPL(RxSingleTest_$55, init)
}

RxSingleTest_$55 *create_RxSingleTest_$55_init() {
  J2OBJC_CREATE_IMPL(RxSingleTest_$55, init)
}

@implementation RxSingleTest_$56

- (void)callWithId:(RxNotification *)notification {
  if ([((RxNotification *) nil_chk(notification)) isOnNext]) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$atomicInteger_)) getAndAddWithInt:[((JavaLangInteger *) nil_chk([notification getValue])) intValue]];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$atomicInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$atomicInteger_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxNotification;", "(Lrx/Notification<+Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSingleTest;", "doOnEachSuccess", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Notification<+Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxSingleTest_$56 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxSingleTest_$56;
}

@end

void RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSingleTest_$56 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$atomicInteger_, capture$0);
  NSObject_init(self);
}

RxSingleTest_$56 *new_RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSingleTest_$56, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSingleTest_$56 *create_RxSingleTest_$56_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSingleTest_$56, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
