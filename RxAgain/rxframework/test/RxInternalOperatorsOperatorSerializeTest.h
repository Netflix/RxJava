//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSerializeTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest")
#ifdef RESTRICT_RxInternalOperatorsOperatorSerializeTest
#define INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorSerializeTest

#if !defined (RxInternalOperatorsOperatorSerializeTest_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest || defined(INCLUDE_RxInternalOperatorsOperatorSerializeTest))
#define RxInternalOperatorsOperatorSerializeTest_

@protocol RxObserver;

@interface RxInternalOperatorsOperatorSerializeTest : NSObject {
 @public
  id<RxObserver> observer_;
}

#pragma mark Public

- (instancetype)init;

- (void)before;

- (void)testMultiThreadedBasic;

- (void)testMultiThreadedWithNPE;

- (void)testMultiThreadedWithNPEinMiddle;

- (void)testSingleThreadedBasic;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSerializeTest, observer_, id<RxObserver>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSerializeTest_init(RxInternalOperatorsOperatorSerializeTest *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest *new_RxInternalOperatorsOperatorSerializeTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest *create_RxInternalOperatorsOperatorSerializeTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest)

#endif

#if !defined (RxInternalOperatorsOperatorSerializeTest_OnNextThread_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest || defined(INCLUDE_RxInternalOperatorsOperatorSerializeTest_OnNextThread))
#define RxInternalOperatorsOperatorSerializeTest_OnNextThread_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@protocol RxObserver;

@interface RxInternalOperatorsOperatorSerializeTest_OnNextThread : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
                           withInt:(jint)numStringsToSend;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_OnNextThread)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(RxInternalOperatorsOperatorSerializeTest_OnNextThread *self, id<RxObserver> observer, jint numStringsToSend);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_OnNextThread *new_RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_OnNextThread *create_RxInternalOperatorsOperatorSerializeTest_OnNextThread_initWithRxObserver_withInt_(id<RxObserver> observer, jint numStringsToSend);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_OnNextThread)

#endif

#if !defined (RxInternalOperatorsOperatorSerializeTest_CompletionThread_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest || defined(INCLUDE_RxInternalOperatorsOperatorSerializeTest_CompletionThread))
#define RxInternalOperatorsOperatorSerializeTest_CompletionThread_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IOSObjectArray;
@class RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent;
@protocol RxObserver;

@interface RxInternalOperatorsOperatorSerializeTest_CompletionThread : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithRxObserver:(id<RxObserver>)observer
withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent:(RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *)event
 withJavaUtilConcurrentFutureArray:(IOSObjectArray *)waitOnThese;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSerializeTest_CompletionThread)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(RxInternalOperatorsOperatorSerializeTest_CompletionThread *self, id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_CompletionThread *new_RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSerializeTest_CompletionThread *create_RxInternalOperatorsOperatorSerializeTest_CompletionThread_initWithRxObserver_withRxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent_withJavaUtilConcurrentFutureArray_(id<RxObserver> observer, RxInternalOperatorsOperatorSerializeTest_TestConcurrencyobserverEvent *event, IOSObjectArray *waitOnThese);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSerializeTest_CompletionThread)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSerializeTest")
