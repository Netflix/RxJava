//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/doppl/mock/singletest/FuncStart.java
//

#include "J2ObjC_source.h"
#include "RxDopplMockSingletestFuncStart.h"
#include "RxSingle.h"

@implementation RxDopplMockSingletestFuncStart

- (id<RxSingle_OnSubscribe>)callWithId:(RxSingle *)t1
                                withId:(id<RxSingle_OnSubscribe>)t2 {
  return t2;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMockSingletestFuncStart_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingle;LRxSingle_OnSubscribe;", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Single;Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxDopplMockSingletestFuncStart = { "FuncStart", "rx.doppl.mock.singletest", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, 2, -1 };
  return &_RxDopplMockSingletestFuncStart;
}

@end

void RxDopplMockSingletestFuncStart_init(RxDopplMockSingletestFuncStart *self) {
  NSObject_init(self);
}

RxDopplMockSingletestFuncStart *new_RxDopplMockSingletestFuncStart_init() {
  J2OBJC_NEW_IMPL(RxDopplMockSingletestFuncStart, init)
}

RxDopplMockSingletestFuncStart *create_RxDopplMockSingletestFuncStart_init() {
  J2OBJC_CREATE_IMPL(RxDopplMockSingletestFuncStart, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMockSingletestFuncStart)
