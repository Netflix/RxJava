//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/IoSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"
#include "RxSchedulersIoSchedulerTest.h"
#include "RxSchedulersSchedulerTests.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$4();

@interface RxSchedulersIoSchedulerTest_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersIoSchedulerTest_$1)

__attribute__((unused)) static void RxSchedulersIoSchedulerTest_$1_init(RxSchedulersIoSchedulerTest_$1 *self);

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$1 *new_RxSchedulersIoSchedulerTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$1 *create_RxSchedulersIoSchedulerTest_$1_init();

@interface RxSchedulersIoSchedulerTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersIoSchedulerTest_$2)

__attribute__((unused)) static void RxSchedulersIoSchedulerTest_$2_init(RxSchedulersIoSchedulerTest_$2 *self);

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$2 *new_RxSchedulersIoSchedulerTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$2 *create_RxSchedulersIoSchedulerTest_$2_init();

@interface RxSchedulersIoSchedulerTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$running_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$shouldQuit_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersIoSchedulerTest_$3)

J2OBJC_FIELD_SETTER(RxSchedulersIoSchedulerTest_$3, val$running_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSchedulersIoSchedulerTest_$3, val$shouldQuit_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSchedulersIoSchedulerTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$3 *new_RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$3 *create_RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxSchedulersIoSchedulerTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$otherActionRan_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersIoSchedulerTest_$4)

J2OBJC_FIELD_SETTER(RxSchedulersIoSchedulerTest_$4, val$otherActionRan_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxSchedulersIoSchedulerTest_$4 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$4 *new_RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersIoSchedulerTest_$4 *create_RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxSchedulersIoSchedulerTest

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_io();
}

- (void)testIOScheduler {
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) mapWithRxFunctionsFunc1:create_RxSchedulersIoSchedulerTest_$1_init()];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()])) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersIoSchedulerTest_$2_init()];
}

- (void)testUnhandledErrorIsDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testUnhandledErrorIsDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testHandledErrorIsNotDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testHandledErrorIsNotDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testCancelledTaskRetention {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  @try {
    RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, false);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
  w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  @try {
    RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, true);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

- (void)testUninterruptibleActionDoesNotBlockOtherAction {
  RxScheduler_Worker *uninterruptibleWorker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  JavaUtilConcurrentAtomicAtomicBoolean *running = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  JavaUtilConcurrentAtomicAtomicBoolean *shouldQuit = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  @try {
    [((RxScheduler_Worker *) nil_chk(uninterruptibleWorker)) scheduleWithRxFunctionsAction0:create_RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(running, shouldQuit)];
    @synchronized(running) {
      while (![running get]) {
        [running wait];
      }
    }
  }
  @finally {
    [uninterruptibleWorker unsubscribe];
  }
  RxScheduler_Worker *otherWorker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  JavaUtilConcurrentAtomicAtomicBoolean *otherActionRan = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  @try {
    [((RxScheduler_Worker *) nil_chk(otherWorker)) scheduleWithRxFunctionsAction0:create_RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(otherActionRan)];
    JavaLangThread_sleepWithLong_(1000);
  }
  @finally {
    [otherWorker unsubscribe];
  }
  OrgJunitAssert_assertTrueWithBoolean_([running get]);
  OrgJunitAssert_assertTrueWithBoolean_([otherActionRan get]);
  @synchronized(shouldQuit) {
    [shouldQuit setWithBoolean:true];
    [shouldQuit notifyAll];
  }
  @synchronized(running) {
    while ([running get]) {
      [running wait];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersIoSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x11, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x11, -1, -1, 1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testIOScheduler);
  methods[2].selector = @selector(testUnhandledErrorIsDeliveredToThreadHandler);
  methods[3].selector = @selector(testHandledErrorIsNotDeliveredToThreadHandler);
  methods[4].selector = @selector(testCancelledTaskRetention);
  methods[5].selector = @selector(testUninterruptibleActionDoesNotBlockOtherAction);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersIoSchedulerTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxSchedulersIoSchedulerTest__Annotations$1, (void *)&RxSchedulersIoSchedulerTest__Annotations$2, (void *)&RxSchedulersIoSchedulerTest__Annotations$3, (void *)&RxSchedulersIoSchedulerTest__Annotations$4 };
  static const J2ObjcClassInfo _RxSchedulersIoSchedulerTest = { "IoSchedulerTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersIoSchedulerTest;
}

@end

void RxSchedulersIoSchedulerTest_init(RxSchedulersIoSchedulerTest *self) {
  RxSchedulersAbstractSchedulerConcurrencyTests_init(self);
}

RxSchedulersIoSchedulerTest *new_RxSchedulersIoSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersIoSchedulerTest, init)
}

RxSchedulersIoSchedulerTest *create_RxSchedulersIoSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersIoSchedulerTest, init)
}

IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 60000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersIoSchedulerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersIoSchedulerTest)

@implementation RxSchedulersIoSchedulerTest_$1

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxIoScheduler"]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersIoSchedulerTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSchedulersIoSchedulerTest;", "testIOScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersIoSchedulerTest_$1 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersIoSchedulerTest_$1;
}

@end

void RxSchedulersIoSchedulerTest_$1_init(RxSchedulersIoSchedulerTest_$1 *self) {
  NSObject_init(self);
}

RxSchedulersIoSchedulerTest_$1 *new_RxSchedulersIoSchedulerTest_$1_init() {
  J2OBJC_NEW_IMPL(RxSchedulersIoSchedulerTest_$1, init)
}

RxSchedulersIoSchedulerTest_$1 *create_RxSchedulersIoSchedulerTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersIoSchedulerTest_$1, init)
}

@implementation RxSchedulersIoSchedulerTest_$2

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersIoSchedulerTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersIoSchedulerTest;", "testIOScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersIoSchedulerTest_$2 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersIoSchedulerTest_$2;
}

@end

void RxSchedulersIoSchedulerTest_$2_init(RxSchedulersIoSchedulerTest_$2 *self) {
  NSObject_init(self);
}

RxSchedulersIoSchedulerTest_$2 *new_RxSchedulersIoSchedulerTest_$2_init() {
  J2OBJC_NEW_IMPL(RxSchedulersIoSchedulerTest_$2, init)
}

RxSchedulersIoSchedulerTest_$2 *create_RxSchedulersIoSchedulerTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersIoSchedulerTest_$2, init)
}

@implementation RxSchedulersIoSchedulerTest_$3

- (void)call {
  @synchronized(val$running_) {
    [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$running_)) setWithBoolean:true];
    [val$running_ notifyAll];
  }
  @synchronized(val$shouldQuit_) {
    while (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$shouldQuit_)) get]) {
      @try {
        [val$shouldQuit_ wait];
      }
      @catch (JavaLangInterruptedException *ignored) {
      }
    }
  }
  @synchronized(val$running_) {
    [val$running_ setWithBoolean:false];
    [val$running_ notifyAll];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$running_);
  RELEASE_(val$shouldQuit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$running_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$shouldQuit_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxSchedulersIoSchedulerTest;", "testUninterruptibleActionDoesNotBlockOtherAction" };
  static const J2ObjcClassInfo _RxSchedulersIoSchedulerTest_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSchedulersIoSchedulerTest_$3;
}

@end

void RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(RxSchedulersIoSchedulerTest_$3 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$running_, capture$0);
  JreStrongAssign(&self->val$shouldQuit_, capture$1);
  NSObject_init(self);
}

RxSchedulersIoSchedulerTest_$3 *new_RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersIoSchedulerTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxSchedulersIoSchedulerTest_$3 *create_RxSchedulersIoSchedulerTest_$3_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersIoSchedulerTest_$3, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxSchedulersIoSchedulerTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$otherActionRan_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$otherActionRan_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$otherActionRan_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxSchedulersIoSchedulerTest;", "testUninterruptibleActionDoesNotBlockOtherAction" };
  static const J2ObjcClassInfo _RxSchedulersIoSchedulerTest_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxSchedulersIoSchedulerTest_$4;
}

@end

void RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxSchedulersIoSchedulerTest_$4 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$otherActionRan_, capture$0);
  NSObject_init(self);
}

RxSchedulersIoSchedulerTest_$4 *new_RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersIoSchedulerTest_$4, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxSchedulersIoSchedulerTest_$4 *create_RxSchedulersIoSchedulerTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersIoSchedulerTest_$4, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
