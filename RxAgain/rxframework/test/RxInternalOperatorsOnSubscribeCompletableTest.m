//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeCompletableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOnSubscribeCompletableTest.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$5();

@interface RxInternalOperatorsOnSubscribeCompletableTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsubscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeCompletableTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeCompletableTest_$1, val$unsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeCompletableTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeCompletableTest_$1 *new_RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeCompletableTest_$1 *create_RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOnSubscribeCompletableTest

- (void)testJustSingleItemObservable {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  RxCompletable *cmp = [((RxObservable *) nil_chk(RxObservable_justWithId_(@"Hello World!"))) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertNoValues];
  [subscriber assertCompleted];
  [subscriber assertNoErrors];
}

- (void)testErrorObservable {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  JavaLangIllegalArgumentException *error = create_JavaLangIllegalArgumentException_initWithNSString_(@"Error");
  RxCompletable *cmp = [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(error))) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertErrorWithNSException:error];
  [subscriber assertNoValues];
}

- (void)testJustTwoEmissionsObservableThrowsError {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  RxCompletable *cmp = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_(@"First", @"Second"))) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertNoErrors];
  [subscriber assertNoValues];
}

- (void)testEmptyObservable {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  RxCompletable *cmp = [((RxObservable *) nil_chk(RxObservable_empty())) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertNoErrors];
  [subscriber assertNoValues];
  [subscriber assertCompleted];
}

- (void)testNeverObservable {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  RxCompletable *cmp = [((RxObservable *) nil_chk(RxObservable_never())) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertNoTerminalEvent];
  [subscriber assertNoValues];
}

- (void)testShouldUseUnsafeSubscribeInternallyNotSubscribe {
  RxObserversTestSubscriber *subscriber = RxObserversTestSubscriber_create();
  JavaUtilConcurrentAtomicAtomicBoolean *unsubscribed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  RxCompletable *cmp = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"Hello World!"))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsubscribed)])) toCompletable];
  [((RxCompletable *) nil_chk(cmp)) unsafeSubscribeWithRxSubscriber:subscriber];
  [((RxObserversTestSubscriber *) nil_chk(subscriber)) assertCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([unsubscribed get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeCompletableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testJustSingleItemObservable);
  methods[1].selector = @selector(testErrorObservable);
  methods[2].selector = @selector(testJustTwoEmissionsObservableThrowsError);
  methods[3].selector = @selector(testEmptyObservable);
  methods[4].selector = @selector(testNeverObservable);
  methods[5].selector = @selector(testShouldUseUnsafeSubscribeInternallyNotSubscribe);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeCompletableTest__Annotations$5 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeCompletableTest = { "OnSubscribeCompletableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeCompletableTest;
}

@end

void RxInternalOperatorsOnSubscribeCompletableTest_init(RxInternalOperatorsOnSubscribeCompletableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeCompletableTest *new_RxInternalOperatorsOnSubscribeCompletableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeCompletableTest, init)
}

RxInternalOperatorsOnSubscribeCompletableTest *create_RxInternalOperatorsOnSubscribeCompletableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeCompletableTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeCompletableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeCompletableTest)

@implementation RxInternalOperatorsOnSubscribeCompletableTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsubscribed_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOnSubscribeCompletableTest;", "testShouldUseUnsafeSubscribeInternallyNotSubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeCompletableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeCompletableTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOnSubscribeCompletableTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeCompletableTest_$1 *new_RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeCompletableTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOnSubscribeCompletableTest_$1 *create_RxInternalOperatorsOnSubscribeCompletableTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeCompletableTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
