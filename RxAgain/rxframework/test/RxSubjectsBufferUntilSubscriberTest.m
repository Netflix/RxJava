//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/BufferUntilSubscriberTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsBufferUntilSubscriberTest.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsUnicastSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$4();

@interface RxSubjectsBufferUntilSubscriberTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$completed_;
  RxSubjectsPublishSubject *val$s_;
}

- (RxObservable *)callWithId:(RxObservable *)integerObservable;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBufferUntilSubscriberTest_$1)

J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$1, val$completed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$1, val$s_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(RxSubjectsBufferUntilSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1);

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$1 *new_RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$1 *create_RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1);

@interface RxSubjectsBufferUntilSubscriberTest_$1_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsBufferUntilSubscriberTest_$1 *this$0_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)integer;

- (instancetype)initWithRxSubjectsBufferUntilSubscriberTest_$1:(RxSubjectsBufferUntilSubscriberTest_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBufferUntilSubscriberTest_$1_$1)

J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$1_$1, this$0_, RxSubjectsBufferUntilSubscriberTest_$1 *)

__attribute__((unused)) static void RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1_$1 *self, RxSubjectsBufferUntilSubscriberTest_$1 *outer$);

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$1_$1 *new_RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$1_$1 *create_RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1 *outer$);

@interface RxSubjectsBufferUntilSubscriberTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$counter_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentCountDownLatch *val$innerLatch_;
}

- (void)callWithId:(id<JavaUtilList>)integers;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBufferUntilSubscriberTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$2, val$counter_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsBufferUntilSubscriberTest_$2, val$innerLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubjectsBufferUntilSubscriberTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$2 *new_RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBufferUntilSubscriberTest_$2 *create_RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@implementation RxSubjectsBufferUntilSubscriberTest

- (void)testIssue1677 {
  JavaUtilConcurrentAtomicAtomicLong *counter = create_JavaUtilConcurrentAtomicAtomicLong_init();
  IOSObjectArray *numbers = [IOSObjectArray arrayWithLength:5000 type:JavaLangInteger_class_()];
  for (jint i = 0; i < numbers->size_; i++) IOSObjectArray_Set(numbers, i, JavaLangInteger_valueOfWithInt_(i + 1));
  jint NITERS = 250;
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(NITERS);
  for (jint iters = 0; iters < NITERS; iters++) {
    JavaUtilConcurrentCountDownLatch *innerLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    RxSubjectsPublishSubject *s = RxSubjectsPublishSubject_create();
    JavaUtilConcurrentAtomicAtomicBoolean *completed = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithNSObjectArray_(numbers))) takeUntilWithRxObservable:s])) windowWithInt:50])) flatMapWithRxFunctionsFunc1:create_RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(completed, s)])) toList])) doOnNextWithRxFunctionsAction1:create_RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(counter, latch, innerLatch)])) subscribe];
    if (![innerLatch awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"Failed inner latch wait, iteration ", iters));
  }
  if (![latch awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) OrgJunitAssert_failWithNSString_(JreStrcat("$J$", @"Incomplete! Went through ", [latch getCount], @" iterations"));
  else OrgJunitAssert_assertEqualsWithLong_withLong_(NITERS, [counter get]);
}

- (void)testBackpressure {
  RxSubjectsUnicastSubject *bus = RxSubjectsUnicastSubject_create();
  for (jint i = 0; i < 32; i++) {
    [((RxSubjectsUnicastSubject *) nil_chk(bus)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxSubjectsUnicastSubject *) nil_chk(bus)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueCountWithInt:0];
  [ts assertNoTerminalEvent];
  [ts requestMoreWithLong:10];
  [ts assertValueCountWithInt:10];
  [ts requestMoreWithLong:22];
  [ts assertValueCountWithInt:32];
  OrgJunitAssert_assertFalseWithBoolean_(JreLoadVolatileBoolean(&((RxSubjectsUnicastSubject_State *) nil_chk(bus->state_))->caughtUp_));
  [ts requestMoreWithLong:JavaLangLong_MAX_VALUE];
  OrgJunitAssert_assertTrueWithBoolean_(JreLoadVolatileBoolean(&bus->state_->caughtUp_));
  for (jint i = 32; i < 64; i++) {
    [bus onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [bus onCompleted];
  [ts assertValueCountWithInt:64];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)testErrorCutsAhead {
  RxSubjectsUnicastSubject *bus = RxSubjectsUnicastSubject_create();
  for (jint i = 0; i < 32; i++) {
    [((RxSubjectsUnicastSubject *) nil_chk(bus)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxSubjectsUnicastSubject *) nil_chk(bus)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [bus subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testErrorCutsAheadAfterSubscribed {
  RxSubjectsUnicastSubject *bus = RxSubjectsUnicastSubject_create();
  for (jint i = 0; i < 32; i++) {
    [((RxSubjectsUnicastSubject *) nil_chk(bus)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxSubjectsUnicastSubject *) nil_chk(bus)) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoTerminalEvent];
  [bus onErrorWithNSException:create_RxExceptionsTestException_init()];
  [ts assertNoValues];
  [ts assertNotCompleted];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testUnsubscribeClearsQueue {
  RxSubjectsUnicastSubject *bus = RxSubjectsUnicastSubject_create();
  for (jint i = 0; i < 32; i++) {
    [((RxSubjectsUnicastSubject *) nil_chk(bus)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObserversTestSubscriber *) nil_chk(ts)) unsubscribe];
  [((RxSubjectsUnicastSubject *) nil_chk(bus)) subscribeWithRxSubscriber:ts];
  [ts assertNoTerminalEvent];
  [ts assertNoValues];
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilQueue>) nil_chk(((RxSubjectsUnicastSubject_State *) nil_chk(bus->state_))->queue_)) isEmpty]);
  [bus onNextWithId:JavaLangInteger_valueOfWithInt_(32)];
  OrgJunitAssert_assertTrueWithBoolean_([bus->state_->queue_ isEmpty]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsBufferUntilSubscriberTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testIssue1677);
  methods[1].selector = @selector(testBackpressure);
  methods[2].selector = @selector(testErrorCutsAhead);
  methods[3].selector = @selector(testErrorCutsAheadAfterSubscribed);
  methods[4].selector = @selector(testUnsubscribeClearsQueue);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxSubjectsBufferUntilSubscriberTest__Annotations$0, (void *)&RxSubjectsBufferUntilSubscriberTest__Annotations$1, (void *)&RxSubjectsBufferUntilSubscriberTest__Annotations$2, (void *)&RxSubjectsBufferUntilSubscriberTest__Annotations$3, (void *)&RxSubjectsBufferUntilSubscriberTest__Annotations$4 };
  static const J2ObjcClassInfo _RxSubjectsBufferUntilSubscriberTest = { "BufferUntilSubscriberTest", "rx.subjects", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxSubjectsBufferUntilSubscriberTest;
}

@end

void RxSubjectsBufferUntilSubscriberTest_init(RxSubjectsBufferUntilSubscriberTest *self) {
  NSObject_init(self);
}

RxSubjectsBufferUntilSubscriberTest *new_RxSubjectsBufferUntilSubscriberTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsBufferUntilSubscriberTest, init)
}

RxSubjectsBufferUntilSubscriberTest *create_RxSubjectsBufferUntilSubscriberTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsBufferUntilSubscriberTest, init)
}

IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBufferUntilSubscriberTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsBufferUntilSubscriberTest)

@implementation RxSubjectsBufferUntilSubscriberTest_$1

- (RxObservable *)callWithId:(RxObservable *)integerObservable {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(integerObservable)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1 {
  RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completed_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicBoolean;LRxSubjectsPublishSubject;", "(Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/subjects/PublishSubject<Ljava/lang/Void;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Void;>;", "LRxSubjectsBufferUntilSubscriberTest;", "testIssue1677", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsBufferUntilSubscriberTest_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxSubjectsBufferUntilSubscriberTest_$1;
}

@end

void RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(RxSubjectsBufferUntilSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  JreStrongAssign(&self->val$completed_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  NSObject_init(self);
}

RxSubjectsBufferUntilSubscriberTest_$1 *new_RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsBufferUntilSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

RxSubjectsBufferUntilSubscriberTest_$1 *create_RxSubjectsBufferUntilSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsBufferUntilSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

@implementation RxSubjectsBufferUntilSubscriberTest_$1_$1

- (JavaLangInteger *)callWithId:(JavaLangInteger *)integer {
  if ([((JavaLangInteger *) nil_chk(integer)) intValue] >= 5 && [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$completed_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubjectsPublishSubject *) nil_chk(this$0_->val$s_)) onCompleted];
  }
  JavaLangMath_powWithDouble_withDouble_(JavaLangMath_random(), JavaLangMath_random());
  return JavaLangInteger_valueOfWithInt_([integer intValue] * 2);
}

- (instancetype)initWithRxSubjectsBufferUntilSubscriberTest_$1:(RxSubjectsBufferUntilSubscriberTest_$1 *)outer$ {
  RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsBufferUntilSubscriberTest_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubjectsBufferUntilSubscriberTest_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSubjectsBufferUntilSubscriberTest_$1;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubjectsBufferUntilSubscriberTest_$1_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxSubjectsBufferUntilSubscriberTest_$1_$1;
}

@end

void RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1_$1 *self, RxSubjectsBufferUntilSubscriberTest_$1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubjectsBufferUntilSubscriberTest_$1_$1 *new_RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1 *outer$) {
  J2OBJC_NEW_IMPL(RxSubjectsBufferUntilSubscriberTest_$1_$1, initWithRxSubjectsBufferUntilSubscriberTest_$1_, outer$)
}

RxSubjectsBufferUntilSubscriberTest_$1_$1 *create_RxSubjectsBufferUntilSubscriberTest_$1_$1_initWithRxSubjectsBufferUntilSubscriberTest_$1_(RxSubjectsBufferUntilSubscriberTest_$1 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubjectsBufferUntilSubscriberTest_$1_$1, initWithRxSubjectsBufferUntilSubscriberTest_$1_, outer$)
}

@implementation RxSubjectsBufferUntilSubscriberTest_$2

- (void)callWithId:(id<JavaUtilList>)integers {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$counter_)) incrementAndGet];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$innerLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  RELEASE_(val$latch_);
  RELEASE_(val$innerLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$innerLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicLong;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxSubjectsBufferUntilSubscriberTest;", "testIssue1677", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsBufferUntilSubscriberTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxSubjectsBufferUntilSubscriberTest_$2;
}

@end

void RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSubjectsBufferUntilSubscriberTest_$2 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$counter_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$innerLatch_, capture$2);
  NSObject_init(self);
}

RxSubjectsBufferUntilSubscriberTest_$2 *new_RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSubjectsBufferUntilSubscriberTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSubjectsBufferUntilSubscriberTest_$2 *create_RxSubjectsBufferUntilSubscriberTest_$2_initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicLong *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSubjectsBufferUntilSubscriberTest_$2, initWithJavaUtilConcurrentAtomicAtomicLong_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}
