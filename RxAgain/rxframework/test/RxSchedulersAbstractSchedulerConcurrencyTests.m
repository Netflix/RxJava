//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/AbstractSchedulerConcurrencyTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"
#include "RxSchedulersAbstractSchedulerTests.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$8();

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countGenerated_;
}

- (JavaLangLong *)callWithId:(JavaLangLong *)aLong;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$1, val$countGenerated_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countReceived_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangLong *)args;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$2)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$2, val$countReceived_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$2 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$2 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$3 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentCountDownLatch *val$unsubscribeLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$3)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$3, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$3, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$3, val$unsubscribeLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$3, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$3 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$3 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerConcurrencyTests_$3 *this$0_;
  jint i_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3:(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1, this$0_, RxSchedulersAbstractSchedulerConcurrencyTests_$3 *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$4 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$4)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$4, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$4, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$4 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$4 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerConcurrencyTests_$4 *this$0_;
  jint i_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4:(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1, this$0_, RxSchedulersAbstractSchedulerConcurrencyTests_$4 *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$5 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentCountDownLatch *val$unsubscribeLatch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$5)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$5, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$5, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$5, val$unsubscribeLatch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$5, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$5 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$5 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerConcurrencyTests_$5 *this$0_;
  jlong i_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5:(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1, this$0_, RxSchedulersAbstractSchedulerConcurrencyTests_$5 *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$6 : NSObject < RxFunctionsAction0 > {
 @public
  jint i_;
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$6)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$6, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$6, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$6 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$6 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$6 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$7 : NSObject < RxFunctionsAction0 > {
 @public
  jlong i_;
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$7)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$7, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$7, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$7 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$7 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$7 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$8 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentCountDownLatch *val$completionLatch_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$8)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8, val$completionLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerConcurrencyTests_$8 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)outer$
                                                        withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1, this$0_, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxSchedulersAbstractSchedulerConcurrencyTests_$8 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)call;

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)outer$
                                                        withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2, this$0_, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$9 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$completed_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)args;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$9)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$9, val$completed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$9, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$9 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$9 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$9 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$10 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$10)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$10, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$10 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$10 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$11 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$first_;
  NSString *val$currentThreadName_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                            withNSString:(NSString *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$11)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$11, val$first_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$11, val$currentThreadName_, NSString *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$11, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$11, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$11 *self, JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$11 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$11 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$12 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilQueue> val$q_;
}

- (void)call;

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$12)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$12, val$q_, id<JavaUtilQueue>)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(RxSchedulersAbstractSchedulerConcurrencyTests_$12 *self, id<JavaUtilQueue> capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$12 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$12 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0);

@interface RxSchedulersAbstractSchedulerConcurrencyTests_$13 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilQueue> val$q_;
}

- (void)call;

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersAbstractSchedulerConcurrencyTests_$13)

J2OBJC_FIELD_SETTER(RxSchedulersAbstractSchedulerConcurrencyTests_$13, val$q_, id<JavaUtilQueue>)

__attribute__((unused)) static void RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(RxSchedulersAbstractSchedulerConcurrencyTests_$13 *self, id<JavaUtilQueue> capture$0);

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$13 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersAbstractSchedulerConcurrencyTests_$13 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0);

@implementation RxSchedulersAbstractSchedulerConcurrencyTests

- (void)testUnSubscribeForScheduler {
  JavaUtilConcurrentAtomicAtomicInteger *countReceived = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *countGenerated = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(50, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) mapWithRxFunctionsFunc1:create_RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(countGenerated)])) subscribeOnWithRxScheduler:[self getScheduler]])) observeOnWithRxScheduler:[self getScheduler]])) subscribeWithRxSubscriber:create_RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(countReceived, latch)];
  [latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"----------- it thinks it is finished ------------------ "];
  JavaLangThread_sleepWithLong_(100);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [countGenerated get]);
}

- (void)testUnsubscribeRecursiveScheduleFromOutside {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *unsubscribeLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(inner, latch, unsubscribeLatch, counter)];
    [latch await];
    [inner unsubscribe];
    [unsubscribeLatch countDown];
    JavaLangThread_sleepWithLong_(200);
    OrgJunitAssert_assertEqualsWithLong_withLong_(10, [counter get]);
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testUnsubscribeRecursiveScheduleFromInside {
  JavaUtilConcurrentCountDownLatch *unsubscribeLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(inner, counter)];
    [unsubscribeLatch countDown];
    JavaLangThread_sleepWithLong_(200);
    OrgJunitAssert_assertEqualsWithLong_withLong_(10, [counter get]);
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testUnsubscribeRecursiveScheduleWithDelay {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *unsubscribeLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(inner, latch, unsubscribeLatch, counter)];
    [latch await];
    [inner unsubscribe];
    [unsubscribeLatch countDown];
    JavaLangThread_sleepWithLong_(200);
    OrgJunitAssert_assertEqualsWithLong_withLong_(10, [counter get]);
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)recursionFromOuterActionAndUnsubscribeInside {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(inner, latch)];
    [latch await];
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testRecursion {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(inner, latch)];
    [latch await];
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testRecursionAndOuterUnsubscribe {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(10);
  JavaUtilConcurrentCountDownLatch *completionLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk([self getScheduler])) createWorker];
  @try {
    RxObservable *obs = RxObservable_createWithRxObservable_OnSubscribe_(create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(inner, latch, completionLatch));
    JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
    JavaUtilConcurrentAtomicAtomicBoolean *completed = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
    id<RxSubscription> subscribe = [((RxObservable *) nil_chk(obs)) subscribeWithRxSubscriber:create_RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(completed, count)];
    if (![latch awaitWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
      OrgJunitAssert_failWithNSString_(@"Timed out waiting on onNext latch");
    }
    [((id<RxSubscription>) nil_chk(subscribe)) unsubscribe];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"unsubscribe"];
    if (![completionLatch awaitWithLong:5000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
      OrgJunitAssert_failWithNSString_(@"Timed out waiting on completion latch");
    }
    OrgJunitAssert_assertTrueWithBoolean_([count get] >= 10);
    OrgJunitAssert_assertTrueWithBoolean_([completed get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(inner)) unsubscribe];
  }
}

- (void)testSubscribeWithScheduler {
  RxScheduler *scheduler = [self getScheduler];
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  [((RxObservable *) nil_chk(o1)) subscribeWithRxFunctionsAction1:create_RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [count get]);
  [count setWithInt:0];
  NSString *currentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(5);
  JavaUtilConcurrentCountDownLatch *first = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((RxObservable *) nil_chk([o1 subscribeOnWithRxScheduler:scheduler])) subscribeWithRxFunctionsAction1:create_RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(first, currentThreadName, count, latch)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [count get]);
  [first countDown];
  [latch await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [count get]);
}

- (void)workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace {
  RxScheduler *scheduler = [self getScheduler];
  for (jint i = 0; i < 1000; i++) {
    RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler)) createWorker];
    id<JavaUtilQueue> q = create_JavaUtilConcurrentConcurrentLinkedQueue_init();
    id<RxFunctionsAction0> action1 = create_RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(q);
    id<RxFunctionsAction0> action2 = create_RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(q);
    [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:action1];
    [worker scheduleWithRxFunctionsAction0:action2];
    [worker unsubscribe];
    if ([q size] == 1 && [((JavaLangInteger *) nil_chk([q poll])) intValue] == 2) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"wrong order on loop ", i));
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersAbstractSchedulerConcurrencyTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x11, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 7, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testUnSubscribeForScheduler);
  methods[1].selector = @selector(testUnsubscribeRecursiveScheduleFromOutside);
  methods[2].selector = @selector(testUnsubscribeRecursiveScheduleFromInside);
  methods[3].selector = @selector(testUnsubscribeRecursiveScheduleWithDelay);
  methods[4].selector = @selector(recursionFromOuterActionAndUnsubscribeInside);
  methods[5].selector = @selector(testRecursion);
  methods[6].selector = @selector(testRecursionAndOuterUnsubscribe);
  methods[7].selector = @selector(testSubscribeWithScheduler);
  methods[8].selector = @selector(workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BIG_COUNT", "J", .constantValue.asLong = RxSchedulersAbstractSchedulerConcurrencyTests_BIG_COUNT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$0, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$1, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$2, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$3, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$4, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$5, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$6, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$7, (void *)&RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$8 };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests = { "AbstractSchedulerConcurrencyTests", "rx.schedulers", ptrTable, methods, fields, 7, 0x401, 10, 1, -1, -1, -1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_init(RxSchedulersAbstractSchedulerConcurrencyTests *self) {
  RxSchedulersAbstractSchedulerTests_init(self);
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersAbstractSchedulerConcurrencyTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersAbstractSchedulerConcurrencyTests)

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$1

- (JavaLangLong *)callWithId:(JavaLangLong *)aLong {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countGenerated_)) incrementAndGet];
  return aLong;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countGenerated_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countGenerated_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testUnSubscribeForScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$1;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$countGenerated_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$2

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"--- completed"];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"--- onError"];
}

- (void)onNextWithId:(JavaLangLong *)args {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countReceived_)) incrementAndGet] == 2) {
    [self unsubscribe];
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"==> Received ", args)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSchedulersAbstractSchedulerConcurrencyTests_$2 class]);
  RELEASE_(val$countReceived_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countReceived_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testUnSubscribeForScheduler", "Lrx/Subscriber<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$2;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$countReceived_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  RxSubscriber_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$2 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$2 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$3

- (void)call {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(self)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  RELEASE_(val$unsubscribeLatch_);
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribeLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testUnsubscribeRecursiveScheduleFromOutside" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$3 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$3;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$unsubscribeLatch_, capture$2);
  JreStrongAssign(&self->val$counter_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$3 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$3, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$3 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$3, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Run: ", i_++)];
  if (i_ == 10) {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$unsubscribeLatch_)) await];
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3:(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *)outer$ {
  RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerConcurrencyTests_$3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerConcurrencyTests_$3;", "call" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->i_ = 0;
}

RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_, outer$)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_(RxSchedulersAbstractSchedulerConcurrencyTests_$3 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$3_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$3_, outer$)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$4

- (void)call {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(self)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testUnsubscribeRecursiveScheduleFromInside" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$4;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$counter_, capture$1);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$4 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$4, initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$4 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$4, initWithRxScheduler_Worker_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Run: ", i_++)];
  if (i_ == 10) {
    [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) unsubscribe];
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4:(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *)outer$ {
  RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerConcurrencyTests_$4;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerConcurrencyTests_$4;", "call" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->i_ = 0;
}

RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_, outer$)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_(RxSchedulersAbstractSchedulerConcurrencyTests_$4 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$4_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$4_, outer$)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$5

- (void)call {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(self) withLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  RELEASE_(val$unsubscribeLatch_);
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscribeLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testUnsubscribeRecursiveScheduleWithDelay" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$5 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$5;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$unsubscribeLatch_, capture$2);
  JreStrongAssign(&self->val$counter_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$5 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$5, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$5 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$5, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1

- (void)call {
  if (i_++ == 10) {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$unsubscribeLatch_)) await];
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) scheduleWithRxFunctionsAction0:self withLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5:(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *)outer$ {
  RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerConcurrencyTests_$5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerConcurrencyTests_$5;", "call" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 0, -1, 1, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->i_ = 1LL;
}

RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_, outer$)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_(RxSchedulersAbstractSchedulerConcurrencyTests_$5 *outer$) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$5_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$5_, outer$)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$6

- (void)call {
  i_++;
  if (i_ % 100000 == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$J$J", i_, @"  Total Memory: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) totalMemory], @"  Free: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory])];
  }
  if (i_ < RxSchedulersAbstractSchedulerConcurrencyTests_BIG_COUNT) {
    [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
  }
  else {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "recursionFromOuterActionAndUnsubscribeInside" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$6 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$6;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$6 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
  self->i_ = 0;
}

RxSchedulersAbstractSchedulerConcurrencyTests_$6 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$6, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$6 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$6_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$6, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$7

- (void)call {
  i_++;
  if (i_ % 100000 == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("J$J$J", i_, @"  Total Memory: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) totalMemory], @"  Free: ", [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory])];
  }
  if (i_ < RxSchedulersAbstractSchedulerConcurrencyTests_BIG_COUNT) {
    [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
  }
  else {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testRecursion" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$7 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 1, -1, 2, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$7;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$7 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  NSObject_init(self);
  self->i_ = 0;
}

RxSchedulersAbstractSchedulerConcurrencyTests_$7 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$7, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$7 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$7_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$7, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$8

- (void)callWithId:(RxSubscriber *)observer {
  [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(self, observer)];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(self, observer))];
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)capture$0
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
      withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  RELEASE_(val$completionLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$completionLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testRecursionAndOuterUnsubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$8 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$8;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *self, RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$inner_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$completionLatch_, capture$2);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxScheduler_Worker *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8, initWithRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1

- (void)call {
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$latch_)) countDown];
  [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) scheduleWithRxFunctionsAction0:self];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)outer$
                                                        withRxSubscriber:(RxSubscriber *)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;LRxSubscriber;", "(Lrx/schedulers/AbstractSchedulerConcurrencyTests$8;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_, outer$, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$1, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_, outer$, capture$0)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2

- (void)call {
  [((RxScheduler_Worker *) nil_chk(this$0_->val$inner_)) unsubscribe];
  [((RxSubscriber *) nil_chk(val$observer_)) onCompleted];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$completionLatch_)) countDown];
}

- (instancetype)initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *)outer$
                                                        withRxSubscriber:(RxSubscriber *)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;LRxSubscriber;", "(Lrx/schedulers/AbstractSchedulerConcurrencyTests$8;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxSchedulersAbstractSchedulerConcurrencyTests_$8;", "callWithId:" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *self, RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_, outer$, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2_initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_(RxSchedulersAbstractSchedulerConcurrencyTests_$8 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$8_$2, initWithRxSchedulersAbstractSchedulerConcurrencyTests_$8_withRxSubscriber_, outer$, capture$0)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$9

- (void)onCompleted {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Completed"];
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$completed_)) setWithBoolean:true];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Error"];
}

- (void)onNextWithId:(JavaLangInteger *)args {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:args];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxSchedulersAbstractSchedulerConcurrencyTests_$9 class]);
  RELEASE_(val$completed_);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testRecursionAndOuterUnsubscribe", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$9 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$9;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$9 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$completed_, capture$0);
  JreStrongAssign(&self->val$count_, capture$1);
  RxSubscriber_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$9 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$9, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$9 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$9_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$9, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$10

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Thread: ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"t: ", t)];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testSubscribeWithScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$10 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$10;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSchedulersAbstractSchedulerConcurrencyTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$10 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$10 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$11

- (void)callWithId:(JavaLangInteger *)t {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$first_)) awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"The latch should have released if we are async.", e);
  }
  OrgJunitAssert_assertFalseWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) isEqual:val$currentThreadName_]);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Thread: ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"t: ", t)];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                            withNSString:(NSString *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$first_);
  RELEASE_(val$currentThreadName_);
  RELEASE_(val$count_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withNSString:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$first_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$currentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;LNSString;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "testSubscribeWithScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$11 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 3, -1, 4, 5, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$11;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxSchedulersAbstractSchedulerConcurrencyTests_$11 *self, JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  JreStrongAssign(&self->val$first_, capture$0);
  JreStrongAssign(&self->val$currentThreadName_, capture$1);
  JreStrongAssign(&self->val$count_, capture$2);
  JreStrongAssign(&self->val$latch_, capture$3);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$11 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$11, initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$11 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$11_initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$11, initWithJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$12

- (void)call {
  [((id<JavaUtilQueue>) nil_chk(val$q_)) addWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$q_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilQueue;", "(Ljava/util/Queue<Ljava/lang/Integer;>;)V", "Ljava/util/Queue<Ljava/lang/Integer;>;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$12 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$12;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(RxSchedulersAbstractSchedulerConcurrencyTests_$12 *self, id<JavaUtilQueue> capture$0) {
  JreStrongAssign(&self->val$q_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$12 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$12, initWithJavaUtilQueue_, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$12 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$12_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$12, initWithJavaUtilQueue_, capture$0)
}

@implementation RxSchedulersAbstractSchedulerConcurrencyTests_$13

- (void)call {
  [((id<JavaUtilQueue>) nil_chk(val$q_)) addWithId:JavaLangInteger_valueOfWithInt_(2)];
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)capture$0 {
  RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$q_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$q_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilQueue;", "(Ljava/util/Queue<Ljava/lang/Integer;>;)V", "Ljava/util/Queue<Ljava/lang/Integer;>;", "LRxSchedulersAbstractSchedulerConcurrencyTests;", "workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace" };
  static const J2ObjcClassInfo _RxSchedulersAbstractSchedulerConcurrencyTests_$13 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSchedulersAbstractSchedulerConcurrencyTests_$13;
}

@end

void RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(RxSchedulersAbstractSchedulerConcurrencyTests_$13 *self, id<JavaUtilQueue> capture$0) {
  JreStrongAssign(&self->val$q_, capture$0);
  NSObject_init(self);
}

RxSchedulersAbstractSchedulerConcurrencyTests_$13 *new_RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$13, initWithJavaUtilQueue_, capture$0)
}

RxSchedulersAbstractSchedulerConcurrencyTests_$13 *create_RxSchedulersAbstractSchedulerConcurrencyTests_$13_initWithJavaUtilQueue_(id<JavaUtilQueue> capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersAbstractSchedulerConcurrencyTests_$13, initWithJavaUtilQueue_, capture$0)
}
