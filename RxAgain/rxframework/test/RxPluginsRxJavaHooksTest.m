//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/plugins/RxJavaHooksTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxCompletable.h"
#include "RxCompletableSubscriber.h"
#include "RxExceptionsAssemblyStackTraceException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsActions.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOnSubscribeRange.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaCompletableExecutionHook.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxPluginsRxJavaHooksTest.h"
#include "RxPluginsRxJavaObservableExecutionHook.h"
#include "RxPluginsRxJavaPlugins.h"
#include "RxPluginsRxJavaSingleExecutionHook.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "RxTestUtil.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$28();

@interface RxPluginsRxJavaHooksTest_$2 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$2)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$2_init(RxPluginsRxJavaHooksTest_$2 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$2 *new_RxPluginsRxJavaHooksTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$2 *create_RxPluginsRxJavaHooksTest_$2_init();

@interface RxPluginsRxJavaHooksTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$3)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$3_init(RxPluginsRxJavaHooksTest_$3 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$3 *new_RxPluginsRxJavaHooksTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$3 *create_RxPluginsRxJavaHooksTest_$3_init();

@interface RxPluginsRxJavaHooksTest_$4 : NSObject < RxFunctionsFunc0 >

- (NSException *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$4)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$4_init(RxPluginsRxJavaHooksTest_$4 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$4 *new_RxPluginsRxJavaHooksTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$4 *create_RxPluginsRxJavaHooksTest_$4_init();

@interface RxPluginsRxJavaHooksTest_$5 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$5)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$5_init(RxPluginsRxJavaHooksTest_$5 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$5 *new_RxPluginsRxJavaHooksTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$5 *create_RxPluginsRxJavaHooksTest_$5_init();

@interface RxPluginsRxJavaHooksTest_$6 : NSObject < RxFunctionsFunc2 >

- (id)callWithId:(id)t1
          withId:(id)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$6)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$6_init(RxPluginsRxJavaHooksTest_$6 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$6 *new_RxPluginsRxJavaHooksTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$6 *create_RxPluginsRxJavaHooksTest_$6_init();

@interface RxPluginsRxJavaHooksTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxScheduler *)callWithId:(RxScheduler *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$1)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$1_init(RxPluginsRxJavaHooksTest_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$1 *new_RxPluginsRxJavaHooksTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$1 *create_RxPluginsRxJavaHooksTest_$1_init();

@interface RxPluginsRxJavaHooksTest_$7 : NSObject < RxFunctionsFunc1 >

- (id<RxObservable_OnSubscribe>)callWithId:(id<RxObservable_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$7)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$7_init(RxPluginsRxJavaHooksTest_$7 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$7 *new_RxPluginsRxJavaHooksTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$7 *create_RxPluginsRxJavaHooksTest_$7_init();

@interface RxPluginsRxJavaHooksTest_$8 : NSObject < RxFunctionsFunc2 >

- (id<RxObservable_OnSubscribe>)callWithId:(RxObservable *)o
                                    withId:(id<RxObservable_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$8)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$8_init(RxPluginsRxJavaHooksTest_$8 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$8 *new_RxPluginsRxJavaHooksTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$8 *create_RxPluginsRxJavaHooksTest_$8_init();

@interface RxPluginsRxJavaHooksTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  id<RxSubscription> val$s_;
}

- (id<RxSubscription>)callWithId:(id<RxSubscription>)t;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$9)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$9, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(RxPluginsRxJavaHooksTest_$9 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$9 *new_RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$9 *create_RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxPluginsRxJavaHooksTest_$10 : NSObject < RxFunctionsFunc1 >

- (id<RxSingle_OnSubscribe>)callWithId:(id<RxSingle_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$10)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$10_init(RxPluginsRxJavaHooksTest_$10 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$10 *new_RxPluginsRxJavaHooksTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$10 *create_RxPluginsRxJavaHooksTest_$10_init();

@interface RxPluginsRxJavaHooksTest_$10_$1 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$10_$1)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$10_$1_init(RxPluginsRxJavaHooksTest_$10_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$10_$1 *new_RxPluginsRxJavaHooksTest_$10_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$10_$1 *create_RxPluginsRxJavaHooksTest_$10_$1_init();

@interface RxPluginsRxJavaHooksTest_$11 : NSObject < RxFunctionsFunc2 >

- (id<RxSingle_OnSubscribe>)callWithId:(RxSingle *)o
                                withId:(id<RxSingle_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$11)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$11_init(RxPluginsRxJavaHooksTest_$11 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$11 *new_RxPluginsRxJavaHooksTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$11 *create_RxPluginsRxJavaHooksTest_$11_init();

@interface RxPluginsRxJavaHooksTest_$11_$1 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(RxSingleSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$11_$1)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$11_$1_init(RxPluginsRxJavaHooksTest_$11_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$11_$1 *new_RxPluginsRxJavaHooksTest_$11_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$11_$1 *create_RxPluginsRxJavaHooksTest_$11_$1_init();

@interface RxPluginsRxJavaHooksTest_$12 : NSObject < RxFunctionsFunc1 > {
 @public
  id<RxSubscription> val$s_;
}

- (id<RxSubscription>)callWithId:(id<RxSubscription>)t;

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$12)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$12, val$s_, id<RxSubscription>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(RxPluginsRxJavaHooksTest_$12 *self, id<RxSubscription> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$12 *new_RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(id<RxSubscription> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$12 *create_RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(id<RxSubscription> capture$0);

@interface RxPluginsRxJavaHooksTest_$13 : NSObject < RxFunctionsFunc1 >

- (id<RxCompletable_OnSubscribe>)callWithId:(id<RxCompletable_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$13)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$13_init(RxPluginsRxJavaHooksTest_$13 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$13 *new_RxPluginsRxJavaHooksTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$13 *create_RxPluginsRxJavaHooksTest_$13_init();

@interface RxPluginsRxJavaHooksTest_$13_$1 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$13_$1)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$13_$1_init(RxPluginsRxJavaHooksTest_$13_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$13_$1 *new_RxPluginsRxJavaHooksTest_$13_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$13_$1 *create_RxPluginsRxJavaHooksTest_$13_$1_init();

@interface RxPluginsRxJavaHooksTest_$14 : NSObject < RxFunctionsFunc2 >

- (id<RxCompletable_OnSubscribe>)callWithId:(RxCompletable *)o
                                     withId:(id<RxCompletable_OnSubscribe>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$14)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$14_init(RxPluginsRxJavaHooksTest_$14 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$14 *new_RxPluginsRxJavaHooksTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$14 *create_RxPluginsRxJavaHooksTest_$14_init();

@interface RxPluginsRxJavaHooksTest_$14_$1 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$14_$1)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$14_$1_init(RxPluginsRxJavaHooksTest_$14_$1 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$14_$1 *new_RxPluginsRxJavaHooksTest_$14_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$14_$1 *create_RxPluginsRxJavaHooksTest_$14_$1_init();

@interface RxPluginsRxJavaHooksTest_$15 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (id<RxFunctionsAction0>)callWithId:(id<RxFunctionsAction0>)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$15)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$15, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$15, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$15 *new_RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$15 *create_RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxPluginsRxJavaHooksTest_$15_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxPluginsRxJavaHooksTest_$15 *this$0_;
}

- (void)call;

- (instancetype)initWithRxPluginsRxJavaHooksTest_$15:(RxPluginsRxJavaHooksTest_$15 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$15_$1)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$15_$1, this$0_, RxPluginsRxJavaHooksTest_$15 *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15_$1 *self, RxPluginsRxJavaHooksTest_$15 *outer$);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$15_$1 *new_RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$15_$1 *create_RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15 *outer$);

@interface RxPluginsRxJavaHooksTest_$16 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$16)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$16, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$16, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$16 *new_RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$16 *create_RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxPluginsRxJavaHooksTest_$17 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$value_;
  JavaUtilConcurrentCountDownLatch *val$cdl_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$17)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$17, val$value_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$17, val$cdl_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$17 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$17 *new_RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$17 *create_RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxPluginsRxJavaHooksTest_$18 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$18)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$18, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$18 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$18 *new_RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$18 *create_RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxPluginsRxJavaHooksTest_$19 : NSObject < JavaLangThread_UncaughtExceptionHandler > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$19)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$19, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$19 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$19 *new_RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$19 *create_RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxPluginsRxJavaHooksTest_$20 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$20)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$20_init(RxPluginsRxJavaHooksTest_$20 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$20 *new_RxPluginsRxJavaHooksTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$20 *create_RxPluginsRxJavaHooksTest_$20_init();

@interface RxPluginsRxJavaHooksTest_$21 : NSObject < JavaLangThread_UncaughtExceptionHandler > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$21)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$21, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$21 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$21 *new_RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$21 *create_RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxPluginsRxJavaHooksTest_$22 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$22)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$22_init(RxPluginsRxJavaHooksTest_$22 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$22 *new_RxPluginsRxJavaHooksTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$22 *create_RxPluginsRxJavaHooksTest_$22_init();

@interface RxPluginsRxJavaHooksTest_$23 : NSObject < RxSingle_OnSubscribe >

- (void)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$23)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$23_init(RxPluginsRxJavaHooksTest_$23 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$23 *new_RxPluginsRxJavaHooksTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$23 *create_RxPluginsRxJavaHooksTest_$23_init();

@interface RxPluginsRxJavaHooksTest_$24 : NSObject < RxCompletable_OnSubscribe >

- (void)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$24)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$24_init(RxPluginsRxJavaHooksTest_$24 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$24 *new_RxPluginsRxJavaHooksTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$24 *create_RxPluginsRxJavaHooksTest_$24_init();

@interface RxPluginsRxJavaHooksTest_$25 : NSObject < RxObservable_Operator >

- (id)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$25)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$25_init(RxPluginsRxJavaHooksTest_$25 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$25 *new_RxPluginsRxJavaHooksTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$25 *create_RxPluginsRxJavaHooksTest_$25_init();

@interface RxPluginsRxJavaHooksTest_$26 : NSObject < RxCompletable_Operator >

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$26)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$26_init(RxPluginsRxJavaHooksTest_$26 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$26 *new_RxPluginsRxJavaHooksTest_$26_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$26 *create_RxPluginsRxJavaHooksTest_$26_init();

@interface RxPluginsRxJavaHooksTest_$27 : NSObject < RxFunctionsFunc1 > {
 @public
  id<JavaUtilList> val$list_;
  RxExceptionsTestException *val$ex_;
}

- (NSException *)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
       withRxExceptionsTestException:(RxExceptionsTestException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$27)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$27, val$list_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$27, val$ex_, RxExceptionsTestException *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(RxPluginsRxJavaHooksTest_$27 *self, id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$27 *new_RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$27 *create_RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1);

@interface RxPluginsRxJavaHooksTest_$28 : NSObject < RxFunctionsFunc1 > {
 @public
  id<JavaUtilList> val$list_;
  RxExceptionsTestException *val$ex_;
}

- (NSException *)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
       withRxExceptionsTestException:(RxExceptionsTestException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$28)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$28, val$list_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$28, val$ex_, RxExceptionsTestException *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(RxPluginsRxJavaHooksTest_$28 *self, id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$28 *new_RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$28 *create_RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1);

@interface RxPluginsRxJavaHooksTest_$29 : RxPluginsRxJavaObservableExecutionHook {
 @public
  id<RxFunctionsFunc1> val$errorHandler_;
}

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$29)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$29, val$errorHandler_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$29 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$29 *new_RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$29 *create_RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$30 : RxPluginsRxJavaSingleExecutionHook {
 @public
  id<RxFunctionsFunc1> val$errorHandler_;
}

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$30)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$30, val$errorHandler_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$30 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$30 *new_RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$30 *create_RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$31 : RxPluginsRxJavaCompletableExecutionHook {
 @public
  id<RxFunctionsFunc1> val$errorHandler_;
}

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$31)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$31, val$errorHandler_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$31 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$31 *new_RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$31 *create_RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$32 : NSObject < RxCompletable_Operator >

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$32)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$32_init(RxPluginsRxJavaHooksTest_$32 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$32 *new_RxPluginsRxJavaHooksTest_$32_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$32 *create_RxPluginsRxJavaHooksTest_$32_init();

@interface RxPluginsRxJavaHooksTest_$33 : NSObject < RxObservable_Operator >

- (id)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$33)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$33_init(RxPluginsRxJavaHooksTest_$33 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$33 *new_RxPluginsRxJavaHooksTest_$33_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$33 *create_RxPluginsRxJavaHooksTest_$33_init();

@interface RxPluginsRxJavaHooksTest_$34 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$counter_;
}

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$34)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$34, val$counter_, IOSIntArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$34_initWithIntArray_(RxPluginsRxJavaHooksTest_$34 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$34 *new_RxPluginsRxJavaHooksTest_$34_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$34 *create_RxPluginsRxJavaHooksTest_$34_initWithIntArray_(IOSIntArray *capture$0);

@interface RxPluginsRxJavaHooksTest_$35 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$counter_;
}

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$35)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$35, val$counter_, IOSIntArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$35_initWithIntArray_(RxPluginsRxJavaHooksTest_$35 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$35 *new_RxPluginsRxJavaHooksTest_$35_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$35 *create_RxPluginsRxJavaHooksTest_$35_initWithIntArray_(IOSIntArray *capture$0);

@interface RxPluginsRxJavaHooksTest_$36 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$counter_;
}

- (id<RxCompletable_Operator>)callWithId:(id<RxCompletable_Operator>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$36)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$36, val$counter_, IOSIntArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$36_initWithIntArray_(RxPluginsRxJavaHooksTest_$36 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$36 *new_RxPluginsRxJavaHooksTest_$36_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$36 *create_RxPluginsRxJavaHooksTest_$36_initWithIntArray_(IOSIntArray *capture$0);

@interface RxPluginsRxJavaHooksTest_$37 : NSObject < RxCompletable_Operator >

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$37)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$37_init(RxPluginsRxJavaHooksTest_$37 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$37 *new_RxPluginsRxJavaHooksTest_$37_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$37 *create_RxPluginsRxJavaHooksTest_$37_init();

@interface RxPluginsRxJavaHooksTest_$38 : NSObject < RxObservable_Operator >

- (id)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$38)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$38_init(RxPluginsRxJavaHooksTest_$38 *self);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$38 *new_RxPluginsRxJavaHooksTest_$38_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$38 *create_RxPluginsRxJavaHooksTest_$38_init();

@interface RxPluginsRxJavaHooksTest_$39 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$counter_;
}

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$39)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$39, val$counter_, IOSIntArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$39_initWithIntArray_(RxPluginsRxJavaHooksTest_$39 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$39 *new_RxPluginsRxJavaHooksTest_$39_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$39 *create_RxPluginsRxJavaHooksTest_$39_initWithIntArray_(IOSIntArray *capture$0);

@interface RxPluginsRxJavaHooksTest_$40 : NSObject < RxFunctionsFunc1 > {
 @public
  IOSIntArray *val$counter_;
}

- (id<RxCompletable_Operator>)callWithId:(id<RxCompletable_Operator>)t;

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$40)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$40, val$counter_, IOSIntArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$40_initWithIntArray_(RxPluginsRxJavaHooksTest_$40 *self, IOSIntArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$40 *new_RxPluginsRxJavaHooksTest_$40_initWithIntArray_(IOSIntArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$40 *create_RxPluginsRxJavaHooksTest_$40_initWithIntArray_(IOSIntArray *capture$0);

@interface RxPluginsRxJavaHooksTest_$41 : RxPluginsRxJavaObservableExecutionHook {
 @public
  id<RxFunctionsFunc1> val$onObservableLift_;
}

- (id<RxObservable_Operator>)onLiftWithRxObservable_Operator:(id<RxObservable_Operator>)lift;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$41)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$41, val$onObservableLift_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$41 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$41 *new_RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$41 *create_RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$42 : RxPluginsRxJavaSingleExecutionHook {
 @public
  id<RxFunctionsFunc1> val$onObservableLift_;
}

- (id<RxObservable_Operator>)onLiftWithRxObservable_Operator:(id<RxObservable_Operator>)lift;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$42)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$42, val$onObservableLift_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$42 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$42 *new_RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$42 *create_RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$43 : RxPluginsRxJavaCompletableExecutionHook {
 @public
  id<RxFunctionsFunc1> val$onCompletableLift_;
}

- (id<RxCompletable_Operator>)onLiftWithRxCompletable_Operator:(id<RxCompletable_Operator>)lift;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$43)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$43, val$onCompletableLift_, id<RxFunctionsFunc1>)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$43 *self, id<RxFunctionsFunc1> capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$43 *new_RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$43 *create_RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0);

@interface RxPluginsRxJavaHooksTest_$44 : NSObject < RxFunctionsAction1 > {
 @public
  IOSBooleanArray *val$called_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaHooksTest_$44)

J2OBJC_FIELD_SETTER(RxPluginsRxJavaHooksTest_$44, val$called_, IOSBooleanArray *)

__attribute__((unused)) static void RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(RxPluginsRxJavaHooksTest_$44 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$44 *new_RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxPluginsRxJavaHooksTest_$44 *create_RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(IOSBooleanArray *capture$0);

@implementation RxPluginsRxJavaHooksTest

+ (RxObservable *)createObservable {
  return RxPluginsRxJavaHooksTest_createObservable();
}

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxPluginsRxJavaHooks_class_());
}

- (void)assemblyTrackingObservable {
  RxPluginsRxJavaHooks_enableAssemblyTracking();
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(RxPluginsRxJavaHooksTest_createObservable())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    NSException *ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    RxExceptionsAssemblyStackTraceException *aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNotNullWithId_(aste);
    JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
    JavaIoPrintWriter *printWriter = create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter);
    [((RxExceptionsAssemblyStackTraceException *) nil_chk(aste)) printStackTraceWithJavaIoPrintWriter:printWriter];
    [printWriter close];
    NSString *stackTrace = [stringWriter description];
    NSString *message = [aste getMessage];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Message: ", message)];
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(message, [((NSString *) nil_chk(message)) contains:@"createObservable"]);
    RxPluginsRxJavaHooks_clearAssemblyTracking();
    ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(RxPluginsRxJavaHooksTest_createObservable())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNullWithId_(aste);
  }
  @finally {
    RxPluginsRxJavaHooks_resetAssemblyTracking();
  }
}

+ (RxSingle *)createSingle {
  return RxPluginsRxJavaHooksTest_createSingle();
}

- (void)assemblyTrackingSingle {
  RxPluginsRxJavaHooks_enableAssemblyTracking();
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxSingle *) nil_chk(RxPluginsRxJavaHooksTest_createSingle())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    NSException *ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    RxExceptionsAssemblyStackTraceException *aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNotNullWithId_(aste);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_([((RxExceptionsAssemblyStackTraceException *) nil_chk(aste)) getMessage], [((NSString *) nil_chk([aste getMessage])) contains:@"createSingle"]);
    RxPluginsRxJavaHooks_clearAssemblyTracking();
    ts = RxObserversTestSubscriber_create();
    [((RxSingle *) nil_chk(RxPluginsRxJavaHooksTest_createSingle())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNullWithId_(aste);
  }
  @finally {
    RxPluginsRxJavaHooks_resetAssemblyTracking();
  }
}

+ (RxCompletable *)createCompletable {
  return RxPluginsRxJavaHooksTest_createCompletable();
}

- (void)assemblyTrackingCompletable {
  RxPluginsRxJavaHooks_enableAssemblyTracking();
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxCompletable *) nil_chk(RxPluginsRxJavaHooksTest_createCompletable())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    NSException *ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    RxExceptionsAssemblyStackTraceException *aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNotNullWithId_(aste);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_([((RxExceptionsAssemblyStackTraceException *) nil_chk(aste)) getMessage], [((NSString *) nil_chk([aste getMessage])) contains:@"createCompletable"]);
    RxPluginsRxJavaHooks_clearAssemblyTracking();
    ts = RxObserversTestSubscriber_create();
    [((RxCompletable *) nil_chk(RxPluginsRxJavaHooksTest_createCompletable())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
    ex = [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0];
    aste = RxExceptionsAssemblyStackTraceException_findWithNSException_(ex);
    OrgJunitAssert_assertNullWithId_(aste);
  }
  @finally {
    RxPluginsRxJavaHooks_resetAssemblyTracking();
  }
}

- (void)lockdown {
  RxPluginsRxJavaHooks_reset();
  RxPluginsRxJavaHooks_lockdown();
  @try {
    OrgJunitAssert_assertTrueWithBoolean_(RxPluginsRxJavaHooks_isLockdown());
    id<RxFunctionsAction1> a1 = RxFunctionsActions_empty();
    id<RxFunctionsFunc0> f0 = create_RxPluginsRxJavaHooksTest_$5_init();
    id<RxFunctionsFunc1> f1 = RxInternalUtilUtilityFunctions_identity();
    id<RxFunctionsFunc2> f2 = create_RxPluginsRxJavaHooksTest_$6_init();
    {
      IOSObjectArray *a__ = [RxPluginsRxJavaHooks_class_() getMethods];
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *m = *b__++;
        if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getName])) hasPrefix:@"setOn"]) {
          JavaLangReflectMethod *getter = [RxPluginsRxJavaHooks_class_() getMethod:JreStrcat("$$", @"get", [((NSString *) nil_chk([m getName])) substring:3]) parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
          id before = [((JavaLangReflectMethod *) nil_chk(getter)) invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
          if ([((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk([m getParameterTypes]), 0))) isAssignableFrom:RxFunctionsFunc0_class_()]) {
            [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ f0 } count:1 type:NSObject_class_()]];
          }
          else if ([((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk([m getParameterTypes]), 0))) isAssignableFrom:RxFunctionsFunc1_class_()]) {
            [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ f1 } count:1 type:NSObject_class_()]];
          }
          else if ([((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk([m getParameterTypes]), 0))) isAssignableFrom:RxFunctionsAction1_class_()]) {
            [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ a1 } count:1 type:NSObject_class_()]];
          }
          else {
            [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ f2 } count:1 type:NSObject_class_()]];
          }
          id after = [getter invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
          OrgJunitAssert_assertSameWithNSString_withId_withId_([m description], before, after);
          if (before != nil) {
            RxPluginsRxJavaHooks_clear();
            RxPluginsRxJavaHooks_reset();
            OrgJunitAssert_assertSameWithNSString_withId_withId_([m description], before, [getter invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
          }
        }
      }
    }
    id o1 = RxPluginsRxJavaHooks_getOnObservableCreate();
    id o2 = RxPluginsRxJavaHooks_getOnSingleCreate();
    id o3 = RxPluginsRxJavaHooks_getOnCompletableCreate();
    RxPluginsRxJavaHooks_enableAssemblyTracking();
    RxPluginsRxJavaHooks_clearAssemblyTracking();
    RxPluginsRxJavaHooks_resetAssemblyTracking();
    OrgJunitAssert_assertSameWithId_withId_(o1, RxPluginsRxJavaHooks_getOnObservableCreate());
    OrgJunitAssert_assertSameWithId_withId_(o2, RxPluginsRxJavaHooks_getOnSingleCreate());
    OrgJunitAssert_assertSameWithId_withId_(o3, RxPluginsRxJavaHooks_getOnCompletableCreate());
  }
  @finally {
    JreAssignVolatileBoolean(JreLoadStaticRef(RxPluginsRxJavaHooks, lockdown_), false);
    RxPluginsRxJavaHooks_reset();
    OrgJunitAssert_assertFalseWithBoolean_(RxPluginsRxJavaHooks_isLockdown());
  }
}

- (void)overrideComputationScheduler {
  @try {
    RxPluginsRxJavaHooks_setOnComputationSchedulerWithRxFunctionsFunc1_(replaceWithImmediate_);
    OrgJunitAssert_assertSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_computation());
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  OrgJunitAssert_assertNotSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_computation());
}

- (void)overrideIoScheduler {
  @try {
    RxPluginsRxJavaHooks_setOnIOSchedulerWithRxFunctionsFunc1_(replaceWithImmediate_);
    OrgJunitAssert_assertSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_io());
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  OrgJunitAssert_assertNotSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_io());
}

- (void)overrideNewThreadScheduler {
  @try {
    RxPluginsRxJavaHooks_setOnNewThreadSchedulerWithRxFunctionsFunc1_(replaceWithImmediate_);
    OrgJunitAssert_assertSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_newThread());
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  OrgJunitAssert_assertNotSameWithId_withId_(RxSchedulersSchedulers_immediate(), RxSchedulersSchedulers_newThread());
}

- (void)observableCreate {
  @try {
    RxPluginsRxJavaHooks_setOnObservableCreateWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$7_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(10, 3))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(10, 3))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(11), JavaLangInteger_valueOfWithInt_(12) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)observableStart {
  @try {
    RxPluginsRxJavaHooks_setOnObservableStartWithRxFunctionsFunc2_(create_RxPluginsRxJavaHooksTest_$8_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(10, 3))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(10, 3))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(11), JavaLangInteger_valueOfWithInt_(12) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)observableReturn {
  @try {
    id<RxSubscription> s = RxSubscriptionsSubscriptions_empty();
    RxPluginsRxJavaHooks_setOnObservableReturnWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(s));
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    id<RxSubscription> u = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(10, 3))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(11), JavaLangInteger_valueOfWithInt_(12) } count:3 type:JavaLangInteger_class_()]];
    [ts assertNoErrors];
    [ts assertCompleted];
    OrgJunitAssert_assertSameWithId_withId_(s, u);
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)singleCreate {
  @try {
    RxPluginsRxJavaHooks_setOnSingleCreateWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$10_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(10)];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)singleStart {
  @try {
    RxPluginsRxJavaHooks_setOnSingleStartWithRxFunctionsFunc2_(create_RxPluginsRxJavaHooksTest_$11_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(10)];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)singleReturn {
  @try {
    id<RxSubscription> s = RxSubscriptionsSubscriptions_empty();
    RxPluginsRxJavaHooks_setOnSingleReturnWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(s));
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    id<RxSubscription> u = [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
    [ts assertNoErrors];
    [ts assertCompleted];
    OrgJunitAssert_assertSameWithId_withId_(s, u);
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)completableCreate {
  @try {
    RxPluginsRxJavaHooks_setOnCompletableCreateWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$13_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxCompletable *) nil_chk(RxCompletable_complete())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
    [ts assertNotCompleted];
    [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_complete())) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)completableStart {
  @try {
    RxPluginsRxJavaHooks_setOnCompletableStartWithRxFunctionsFunc2_(create_RxPluginsRxJavaHooksTest_$14_init());
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxCompletable *) nil_chk(RxCompletable_complete())) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
    [ts assertNotCompleted];
    [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_complete())) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)onScheduleWithRxScheduler_Worker:(RxScheduler_Worker *)w {
  @try {
    @try {
      JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
      RxPluginsRxJavaHooks_setOnScheduleActionWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(value, cdl));
      [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(value, cdl)];
      [cdl await];
      OrgJunitAssert_assertEqualsWithLong_withLong_(10, [value get]);
    }
    @finally {
      RxPluginsRxJavaHooks_reset();
    }
    JavaUtilConcurrentAtomicAtomicInteger *value = create_JavaUtilConcurrentAtomicAtomicInteger_init();
    JavaUtilConcurrentCountDownLatch *cdl = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(value, cdl)];
    [cdl await];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [value get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

- (void)onScheduleComputation {
  [self onScheduleWithRxScheduler_Worker:[((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker]];
}

- (void)onScheduleIO {
  [self onScheduleWithRxScheduler_Worker:[((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker]];
}

- (void)onScheduleNewThread {
  [self onScheduleWithRxScheduler_Worker:[((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) createWorker]];
}

- (void)onError {
  @try {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(create_RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(list));
    RxPluginsRxJavaHooks_onErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure"));
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [list size]);
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 0, @"Forced failure");
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)clear {
  RxPluginsRxJavaHooks_reset();
  @try {
    RxPluginsRxJavaHooks_clear();
    {
      IOSObjectArray *a__ = [RxPluginsRxJavaHooks_class_() getMethods];
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *m = *b__++;
        if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getName])) hasPrefix:@"getOn"]) {
          OrgJunitAssert_assertNullWithNSString_withId_([m description], [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
        }
      }
    }
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
  {
    IOSObjectArray *a__ = [RxPluginsRxJavaHooks_class_() getMethods];
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *m = *b__++;
      if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getName])) hasPrefix:@"getOn"] && ![((NSString *) nil_chk([m getName])) hasSuffix:@"Scheduler"] && ![((NSString *) nil_chk([m getName])) contains:@"GenericScheduledExecutorService"]) {
        OrgJunitAssert_assertNotNullWithNSString_withId_([m description], [m invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
      }
    }
  }
}

- (void)onErrorNoHandler {
  @try {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(nil);
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:create_RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(list)];
    RxPluginsRxJavaHooks_onErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure"));
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:nil];
    RxPluginsRxJavaHooks_onErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 3"));
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [list size]);
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 0, @"Forced failure");
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:nil];
  }
}

- (void)onErrorCrashes {
  @try {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(create_RxPluginsRxJavaHooksTest_$20_init());
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:create_RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(list)];
    RxPluginsRxJavaHooks_onErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure"));
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [list size]);
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 0, @"Forced failure 2");
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 1, @"Forced failure");
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:nil];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:nil];
  }
}

- (void)clearIsPassthrough {
  @try {
    RxPluginsRxJavaHooks_clear();
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCreateWithRxObservable_OnSubscribe_(nil));
    id<RxObservable_OnSubscribe> oos = create_RxPluginsRxJavaHooksTest_$22_init();
    OrgJunitAssert_assertSameWithId_withId_(oos, RxPluginsRxJavaHooks_onCreateWithRxObservable_OnSubscribe_(oos));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCreateWithRxSingle_OnSubscribe_(nil));
    id<RxSingle_OnSubscribe> sos = create_RxPluginsRxJavaHooksTest_$23_init();
    OrgJunitAssert_assertSameWithId_withId_(sos, RxPluginsRxJavaHooks_onCreateWithRxSingle_OnSubscribe_(sos));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCreateWithRxSingle_OnSubscribe_(nil));
    id<RxCompletable_OnSubscribe> cos = create_RxPluginsRxJavaHooksTest_$24_init();
    OrgJunitAssert_assertSameWithId_withId_(cos, RxPluginsRxJavaHooks_onCreateWithRxCompletable_OnSubscribe_(cos));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onScheduledActionWithRxFunctionsAction0_(nil));
    id<RxFunctionsAction0> action = RxFunctionsActions_empty();
    OrgJunitAssert_assertSameWithId_withId_(action, RxPluginsRxJavaHooks_onScheduledActionWithRxFunctionsAction0_(action));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onObservableStartWithRxObservable_withRxObservable_OnSubscribe_(RxObservable_never(), nil));
    OrgJunitAssert_assertSameWithId_withId_(oos, RxPluginsRxJavaHooks_onObservableStartWithRxObservable_withRxObservable_OnSubscribe_(RxObservable_never(), oos));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onSingleStartWithRxSingle_withRxSingle_OnSubscribe_(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)), nil));
    OrgJunitAssert_assertSameWithId_withId_(sos, RxPluginsRxJavaHooks_onSingleStartWithRxSingle_withRxSingle_OnSubscribe_(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)), sos));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCompletableStartWithRxCompletable_withRxCompletable_OnSubscribe_(RxCompletable_never(), nil));
    OrgJunitAssert_assertSameWithId_withId_(cos, RxPluginsRxJavaHooks_onCompletableStartWithRxCompletable_withRxCompletable_OnSubscribe_(RxCompletable_never(), cos));
    id<RxSubscription> subscription = RxSubscriptionsSubscriptions_empty();
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onObservableReturnWithRxSubscription_(nil));
    OrgJunitAssert_assertSameWithId_withId_(subscription, RxPluginsRxJavaHooks_onObservableReturnWithRxSubscription_(subscription));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onSingleReturnWithRxSubscription_(nil));
    OrgJunitAssert_assertSameWithId_withId_(subscription, RxPluginsRxJavaHooks_onSingleReturnWithRxSubscription_(subscription));
    RxExceptionsTestException *ex = create_RxExceptionsTestException_init();
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onObservableErrorWithNSException_(nil));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onObservableErrorWithNSException_(ex));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onSingleErrorWithNSException_(nil));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onSingleErrorWithNSException_(ex));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCompletableErrorWithNSException_(nil));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onCompletableErrorWithNSException_(ex));
    id<RxObservable_Operator> oop = create_RxPluginsRxJavaHooksTest_$25_init();
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onObservableLiftWithRxObservable_Operator_(nil));
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onObservableLiftWithRxObservable_Operator_(oop));
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onSingleLiftWithRxObservable_Operator_(nil));
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onSingleLiftWithRxObservable_Operator_(oop));
    id<RxCompletable_Operator> cop = create_RxPluginsRxJavaHooksTest_$26_init();
    OrgJunitAssert_assertNullWithId_(RxPluginsRxJavaHooks_onCompletableLiftWithRxCompletable_Operator_(nil));
    OrgJunitAssert_assertSameWithId_withId_(cop, RxPluginsRxJavaHooks_onCompletableLiftWithRxCompletable_Operator_(cop));
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

+ (void)assertTestExceptionWithJavaUtilList:(id<JavaUtilList>)list
                                    withInt:(jint)index
                               withNSString:(NSString *)message {
  RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, index, message);
}

- (void)onXError {
  @try {
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    RxExceptionsTestException *ex = create_RxExceptionsTestException_init();
    id<RxFunctionsFunc1> errorHandler = create_RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(list, ex);
    RxPluginsRxJavaHooks_setOnObservableSubscribeErrorWithRxFunctionsFunc1_(errorHandler);
    RxPluginsRxJavaHooks_setOnSingleSubscribeErrorWithRxFunctionsFunc1_(errorHandler);
    RxPluginsRxJavaHooks_setOnCompletableSubscribeErrorWithRxFunctionsFunc1_(errorHandler);
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onObservableErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 1")));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onSingleErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 2")));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onCompletableErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 3")));
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 0, @"Forced failure 1");
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 1, @"Forced failure 2");
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 2, @"Forced failure 3");
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)onPluginsXError {
  @try {
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
    RxPluginsRxJavaHooks_reset();
    id<JavaUtilList> list = create_JavaUtilArrayList_init();
    RxExceptionsTestException *ex = create_RxExceptionsTestException_init();
    id<RxFunctionsFunc1> errorHandler = create_RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(list, ex);
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:create_RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(errorHandler)];
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:create_RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(errorHandler)];
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerCompletableExecutionHookWithRxPluginsRxJavaCompletableExecutionHook:create_RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(errorHandler)];
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onObservableErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 1")));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onSingleErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 2")));
    OrgJunitAssert_assertSameWithId_withId_(ex, RxPluginsRxJavaHooks_onCompletableErrorWithNSException_(create_RxExceptionsTestException_initWithNSString_(@"Forced failure 3")));
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 0, @"Forced failure 1");
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 1, @"Forced failure 2");
    RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(list, 2, @"Forced failure 3");
  }
  @finally {
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)onXLift {
  @try {
    id<RxCompletable_Operator> cop = create_RxPluginsRxJavaHooksTest_$32_init();
    id<RxObservable_Operator> oop = create_RxPluginsRxJavaHooksTest_$33_init();
    IOSIntArray *counter = [IOSIntArray arrayWithInts:(jint[]){ 0 } count:1];
    RxPluginsRxJavaHooks_setOnObservableLiftWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$34_initWithIntArray_(counter));
    RxPluginsRxJavaHooks_setOnSingleLiftWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$35_initWithIntArray_(counter));
    RxPluginsRxJavaHooks_setOnCompletableLiftWithRxFunctionsFunc1_(create_RxPluginsRxJavaHooksTest_$36_initWithIntArray_(counter));
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onObservableLiftWithRxObservable_Operator_(oop));
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onSingleLiftWithRxObservable_Operator_(oop));
    OrgJunitAssert_assertSameWithId_withId_(cop, RxPluginsRxJavaHooks_onCompletableLiftWithRxCompletable_Operator_(cop));
    OrgJunitAssert_assertEqualsWithLong_withLong_(3, IOSIntArray_Get(counter, 0));
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)onPluginsXLift {
  @try {
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
    RxPluginsRxJavaHooks_reset();
    id<RxCompletable_Operator> cop = create_RxPluginsRxJavaHooksTest_$37_init();
    id<RxObservable_Operator> oop = create_RxPluginsRxJavaHooksTest_$38_init();
    IOSIntArray *counter = [IOSIntArray arrayWithInts:(jint[]){ 0 } count:1];
    id<RxFunctionsFunc1> onObservableLift = create_RxPluginsRxJavaHooksTest_$39_initWithIntArray_(counter);
    id<RxFunctionsFunc1> onCompletableLift = create_RxPluginsRxJavaHooksTest_$40_initWithIntArray_(counter);
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:create_RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(onObservableLift)];
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:create_RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(onObservableLift)];
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerCompletableExecutionHookWithRxPluginsRxJavaCompletableExecutionHook:create_RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(onCompletableLift)];
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onObservableLiftWithRxObservable_Operator_(oop));
    OrgJunitAssert_assertSameWithId_withId_(oop, RxPluginsRxJavaHooks_onSingleLiftWithRxObservable_Operator_(oop));
    OrgJunitAssert_assertSameWithId_withId_(cop, RxPluginsRxJavaHooks_onCompletableLiftWithRxCompletable_Operator_(cop));
    OrgJunitAssert_assertEqualsWithLong_withLong_(3, IOSIntArray_Get(counter, 0));
  }
  @finally {
    [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
    RxPluginsRxJavaHooks_reset();
  }
}

- (void)noCallToHooksOnPlainError {
  IOSBooleanArray *called = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false } count:1];
  RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(create_RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(called));
  @try {
    [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) subscribeWithRxSubscriber:create_RxObserversTestSubscriber_init()];
    OrgJunitAssert_assertFalseWithBoolean_(IOSBooleanArray_Get(called, 0));
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(replaceWithImmediate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x8, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "LRxSingle;", 0x8, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "LRxCompletable;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x0, 19, 20, 21, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 21, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, 21, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, 21, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x8, 30, 31, -1, 32, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createObservable);
  methods[1].selector = @selector(constructorShouldBePrivate);
  methods[2].selector = @selector(assemblyTrackingObservable);
  methods[3].selector = @selector(createSingle);
  methods[4].selector = @selector(assemblyTrackingSingle);
  methods[5].selector = @selector(createCompletable);
  methods[6].selector = @selector(assemblyTrackingCompletable);
  methods[7].selector = @selector(lockdown);
  methods[8].selector = @selector(overrideComputationScheduler);
  methods[9].selector = @selector(overrideIoScheduler);
  methods[10].selector = @selector(overrideNewThreadScheduler);
  methods[11].selector = @selector(observableCreate);
  methods[12].selector = @selector(observableStart);
  methods[13].selector = @selector(observableReturn);
  methods[14].selector = @selector(singleCreate);
  methods[15].selector = @selector(singleStart);
  methods[16].selector = @selector(singleReturn);
  methods[17].selector = @selector(completableCreate);
  methods[18].selector = @selector(completableStart);
  methods[19].selector = @selector(onScheduleWithRxScheduler_Worker:);
  methods[20].selector = @selector(onScheduleComputation);
  methods[21].selector = @selector(onScheduleIO);
  methods[22].selector = @selector(onScheduleNewThread);
  methods[23].selector = @selector(onError);
  methods[24].selector = @selector(clear);
  methods[25].selector = @selector(onErrorNoHandler);
  methods[26].selector = @selector(onErrorCrashes);
  methods[27].selector = @selector(clearIsPassthrough);
  methods[28].selector = @selector(assertTestExceptionWithJavaUtilList:withInt:withNSString:);
  methods[29].selector = @selector(onXError);
  methods[30].selector = @selector(onPluginsXError);
  methods[31].selector = @selector(onXLift);
  methods[32].selector = @selector(onPluginsXLift);
  methods[33].selector = @selector(noCallToHooksOnPlainError);
  methods[34].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "replaceWithImmediate_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x0, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", (void *)&RxPluginsRxJavaHooksTest__Annotations$0, (void *)&RxPluginsRxJavaHooksTest__Annotations$1, "()Lrx/Single<Ljava/lang/Integer;>;", (void *)&RxPluginsRxJavaHooksTest__Annotations$2, (void *)&RxPluginsRxJavaHooksTest__Annotations$3, "LJavaLangException;", (void *)&RxPluginsRxJavaHooksTest__Annotations$4, (void *)&RxPluginsRxJavaHooksTest__Annotations$5, (void *)&RxPluginsRxJavaHooksTest__Annotations$6, (void *)&RxPluginsRxJavaHooksTest__Annotations$7, (void *)&RxPluginsRxJavaHooksTest__Annotations$8, (void *)&RxPluginsRxJavaHooksTest__Annotations$9, (void *)&RxPluginsRxJavaHooksTest__Annotations$10, (void *)&RxPluginsRxJavaHooksTest__Annotations$11, (void *)&RxPluginsRxJavaHooksTest__Annotations$12, (void *)&RxPluginsRxJavaHooksTest__Annotations$13, (void *)&RxPluginsRxJavaHooksTest__Annotations$14, (void *)&RxPluginsRxJavaHooksTest__Annotations$15, "onSchedule", "LRxScheduler_Worker;", "LJavaLangInterruptedException;", (void *)&RxPluginsRxJavaHooksTest__Annotations$16, (void *)&RxPluginsRxJavaHooksTest__Annotations$17, (void *)&RxPluginsRxJavaHooksTest__Annotations$18, (void *)&RxPluginsRxJavaHooksTest__Annotations$19, (void *)&RxPluginsRxJavaHooksTest__Annotations$20, (void *)&RxPluginsRxJavaHooksTest__Annotations$21, (void *)&RxPluginsRxJavaHooksTest__Annotations$22, (void *)&RxPluginsRxJavaHooksTest__Annotations$23, "assertTestException", "LJavaUtilList;ILNSString;", "(Ljava/util/List<Ljava/lang/Throwable;>;ILjava/lang/String;)V", (void *)&RxPluginsRxJavaHooksTest__Annotations$24, (void *)&RxPluginsRxJavaHooksTest__Annotations$25, (void *)&RxPluginsRxJavaHooksTest__Annotations$26, (void *)&RxPluginsRxJavaHooksTest__Annotations$27, (void *)&RxPluginsRxJavaHooksTest__Annotations$28, "Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest = { "RxJavaHooksTest", "rx.plugins", ptrTable, methods, fields, 7, 0x1, 35, 1, -1, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaHooksTest;
}

@end

RxObservable *RxPluginsRxJavaHooksTest_createObservable() {
  RxPluginsRxJavaHooksTest_initialize();
  return [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) mapWithRxFunctionsFunc1:create_RxPluginsRxJavaHooksTest_$2_init()];
}

RxSingle *RxPluginsRxJavaHooksTest_createSingle() {
  RxPluginsRxJavaHooksTest_initialize();
  return [((RxSingle *) nil_chk(RxSingle_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) mapWithRxFunctionsFunc1:create_RxPluginsRxJavaHooksTest_$3_init()];
}

RxCompletable *RxPluginsRxJavaHooksTest_createCompletable() {
  RxPluginsRxJavaHooksTest_initialize();
  return RxCompletable_errorWithRxFunctionsFunc0_(create_RxPluginsRxJavaHooksTest_$4_init());
}

void RxPluginsRxJavaHooksTest_assertTestExceptionWithJavaUtilList_withInt_withNSString_(id<JavaUtilList> list, jint index, NSString *message) {
  RxPluginsRxJavaHooksTest_initialize();
  OrgJunitAssert_assertTrueWithNSString_withBoolean_([((NSException *) nil_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:index])) description], [[list getWithInt:index] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertEqualsWithId_withId_(message, [((NSException *) nil_chk([list getWithInt:index])) getMessage]);
}

void RxPluginsRxJavaHooksTest_init(RxPluginsRxJavaHooksTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->replaceWithImmediate_, new_RxPluginsRxJavaHooksTest_$1_init());
}

RxPluginsRxJavaHooksTest *new_RxPluginsRxJavaHooksTest_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest, init)
}

RxPluginsRxJavaHooksTest *create_RxPluginsRxJavaHooksTest_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest, init)
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxPluginsRxJavaHooksTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaHooksTest)

@implementation RxPluginsRxJavaHooksTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxPluginsRxJavaHooksTest;", "createObservable", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$2 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$2;
}

@end

void RxPluginsRxJavaHooksTest_$2_init(RxPluginsRxJavaHooksTest_$2 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$2 *new_RxPluginsRxJavaHooksTest_$2_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$2, init)
}

RxPluginsRxJavaHooksTest_$2 *create_RxPluginsRxJavaHooksTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$2, init)
}

@implementation RxPluginsRxJavaHooksTest_$3

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxPluginsRxJavaHooksTest;", "createSingle", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$3 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$3;
}

@end

void RxPluginsRxJavaHooksTest_$3_init(RxPluginsRxJavaHooksTest_$3 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$3 *new_RxPluginsRxJavaHooksTest_$3_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$3, init)
}

RxPluginsRxJavaHooksTest_$3 *create_RxPluginsRxJavaHooksTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$3, init)
}

@implementation RxPluginsRxJavaHooksTest_$4

- (NSException *)call {
  return create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaHooksTest;", "createCompletable", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$4 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxPluginsRxJavaHooksTest_$4;
}

@end

void RxPluginsRxJavaHooksTest_$4_init(RxPluginsRxJavaHooksTest_$4 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$4 *new_RxPluginsRxJavaHooksTest_$4_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$4, init)
}

RxPluginsRxJavaHooksTest_$4 *create_RxPluginsRxJavaHooksTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$4, init)
}

@implementation RxPluginsRxJavaHooksTest_$5

- (id)call {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxPluginsRxJavaHooksTest;", "lockdown" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$5 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$5;
}

@end

void RxPluginsRxJavaHooksTest_$5_init(RxPluginsRxJavaHooksTest_$5 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$5 *new_RxPluginsRxJavaHooksTest_$5_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$5, init)
}

RxPluginsRxJavaHooksTest_$5 *create_RxPluginsRxJavaHooksTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$5, init)
}

@implementation RxPluginsRxJavaHooksTest_$6

- (id)callWithId:(id)t1
          withId:(id)t2 {
  return t2;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;LNSObject;", "LRxPluginsRxJavaHooksTest;", "lockdown" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$6 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$6;
}

@end

void RxPluginsRxJavaHooksTest_$6_init(RxPluginsRxJavaHooksTest_$6 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$6 *new_RxPluginsRxJavaHooksTest_$6_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$6, init)
}

RxPluginsRxJavaHooksTest_$6 *create_RxPluginsRxJavaHooksTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$6, init)
}

@implementation RxPluginsRxJavaHooksTest_$1

- (RxScheduler *)callWithId:(RxScheduler *)t {
  return RxSchedulersSchedulers_immediate();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxScheduler;", "LRxPluginsRxJavaHooksTest;", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxPluginsRxJavaHooksTest_$1;
}

@end

void RxPluginsRxJavaHooksTest_$1_init(RxPluginsRxJavaHooksTest_$1 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$1 *new_RxPluginsRxJavaHooksTest_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$1, init)
}

RxPluginsRxJavaHooksTest_$1 *create_RxPluginsRxJavaHooksTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$1, init)
}

@implementation RxPluginsRxJavaHooksTest_$7

- (id<RxObservable_OnSubscribe>)callWithId:(id<RxObservable_OnSubscribe>)t {
  return create_RxInternalOperatorsOnSubscribeRange_initWithInt_withInt_(1, 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "observableCreate", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable$OnSubscribe;Lrx/Observable$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$7 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$7;
}

@end

void RxPluginsRxJavaHooksTest_$7_init(RxPluginsRxJavaHooksTest_$7 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$7 *new_RxPluginsRxJavaHooksTest_$7_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$7, init)
}

RxPluginsRxJavaHooksTest_$7 *create_RxPluginsRxJavaHooksTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$7, init)
}

@implementation RxPluginsRxJavaHooksTest_$8

- (id<RxObservable_OnSubscribe>)callWithId:(RxObservable *)o
                                    withId:(id<RxObservable_OnSubscribe>)t {
  return create_RxInternalOperatorsOnSubscribeRange_initWithInt_withInt_(1, 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;LRxObservable_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "observableStart", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Observable;Lrx/Observable$OnSubscribe;Lrx/Observable$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$8 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$8;
}

@end

void RxPluginsRxJavaHooksTest_$8_init(RxPluginsRxJavaHooksTest_$8 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$8 *new_RxPluginsRxJavaHooksTest_$8_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$8, init)
}

RxPluginsRxJavaHooksTest_$8 *create_RxPluginsRxJavaHooksTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$8, init)
}

@implementation RxPluginsRxJavaHooksTest_$9

- (id<RxSubscription>)callWithId:(id<RxSubscription>)t {
  return val$s_;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LRxPluginsRxJavaHooksTest;", "observableReturn", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Subscription;Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$9 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$9;
}

@end

void RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(RxPluginsRxJavaHooksTest_$9 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$9 *new_RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$9, initWithRxSubscription_, capture$0)
}

RxPluginsRxJavaHooksTest_$9 *create_RxPluginsRxJavaHooksTest_$9_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$9, initWithRxSubscription_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$10

- (id<RxSingle_OnSubscribe>)callWithId:(id<RxSingle_OnSubscribe>)t {
  return create_RxPluginsRxJavaHooksTest_$10_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingle_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "singleCreate", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$10 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$10;
}

@end

void RxPluginsRxJavaHooksTest_$10_init(RxPluginsRxJavaHooksTest_$10 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$10 *new_RxPluginsRxJavaHooksTest_$10_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$10, init)
}

RxPluginsRxJavaHooksTest_$10 *create_RxPluginsRxJavaHooksTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$10, init)
}

@implementation RxPluginsRxJavaHooksTest_$10_$1

- (void)callWithId:(RxSingleSubscriber *)t {
  [((RxSingleSubscriber *) nil_chk(t)) onSuccessWithId:JavaLangInteger_valueOfWithInt_(10)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$10_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Object;>;)V", "LRxPluginsRxJavaHooksTest_$10;", "callWithId:", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$10_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$10_$1;
}

@end

void RxPluginsRxJavaHooksTest_$10_$1_init(RxPluginsRxJavaHooksTest_$10_$1 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$10_$1 *new_RxPluginsRxJavaHooksTest_$10_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$10_$1, init)
}

RxPluginsRxJavaHooksTest_$10_$1 *create_RxPluginsRxJavaHooksTest_$10_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$10_$1, init)
}

@implementation RxPluginsRxJavaHooksTest_$11

- (id<RxSingle_OnSubscribe>)callWithId:(RxSingle *)o
                                withId:(id<RxSingle_OnSubscribe>)t {
  return create_RxPluginsRxJavaHooksTest_$11_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingle;LRxSingle_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "singleStart", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Single;Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$11 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$11;
}

@end

void RxPluginsRxJavaHooksTest_$11_init(RxPluginsRxJavaHooksTest_$11 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$11 *new_RxPluginsRxJavaHooksTest_$11_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$11, init)
}

RxPluginsRxJavaHooksTest_$11 *create_RxPluginsRxJavaHooksTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$11, init)
}

@implementation RxPluginsRxJavaHooksTest_$11_$1

- (void)callWithId:(RxSingleSubscriber *)t {
  [((RxSingleSubscriber *) nil_chk(t)) onSuccessWithId:JavaLangInteger_valueOfWithInt_(10)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$11_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-Ljava/lang/Object;>;)V", "LRxPluginsRxJavaHooksTest_$11;", "callWithId:withId:", "Ljava/lang/Object;Lrx/Single$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$11_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$11_$1;
}

@end

void RxPluginsRxJavaHooksTest_$11_$1_init(RxPluginsRxJavaHooksTest_$11_$1 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$11_$1 *new_RxPluginsRxJavaHooksTest_$11_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$11_$1, init)
}

RxPluginsRxJavaHooksTest_$11_$1 *create_RxPluginsRxJavaHooksTest_$11_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$11_$1, init)
}

@implementation RxPluginsRxJavaHooksTest_$12

- (id<RxSubscription>)callWithId:(id<RxSubscription>)t {
  return val$s_;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)capture$0 {
  RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$s_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LRxPluginsRxJavaHooksTest;", "singleReturn", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Subscription;Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$12 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$12;
}

@end

void RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(RxPluginsRxJavaHooksTest_$12 *self, id<RxSubscription> capture$0) {
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$12 *new_RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$12, initWithRxSubscription_, capture$0)
}

RxPluginsRxJavaHooksTest_$12 *create_RxPluginsRxJavaHooksTest_$12_initWithRxSubscription_(id<RxSubscription> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$12, initWithRxSubscription_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$13

- (id<RxCompletable_OnSubscribe>)callWithId:(id<RxCompletable_OnSubscribe>)t {
  return create_RxPluginsRxJavaHooksTest_$13_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletable_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "completableCreate", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable$OnSubscribe;Lrx/Completable$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$13 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$13;
}

@end

void RxPluginsRxJavaHooksTest_$13_init(RxPluginsRxJavaHooksTest_$13 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$13 *new_RxPluginsRxJavaHooksTest_$13_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$13, init)
}

RxPluginsRxJavaHooksTest_$13 *create_RxPluginsRxJavaHooksTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$13, init)
}

@implementation RxPluginsRxJavaHooksTest_$13_$1

- (void)callWithId:(id<RxCompletableSubscriber>)t {
  [((id<RxCompletableSubscriber>) nil_chk(t)) onErrorWithNSException:create_RxExceptionsTestException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$13_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest_$13;", "callWithId:" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$13_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$13_$1;
}

@end

void RxPluginsRxJavaHooksTest_$13_$1_init(RxPluginsRxJavaHooksTest_$13_$1 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$13_$1 *new_RxPluginsRxJavaHooksTest_$13_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$13_$1, init)
}

RxPluginsRxJavaHooksTest_$13_$1 *create_RxPluginsRxJavaHooksTest_$13_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$13_$1, init)
}

@implementation RxPluginsRxJavaHooksTest_$14

- (id<RxCompletable_OnSubscribe>)callWithId:(RxCompletable *)o
                                     withId:(id<RxCompletable_OnSubscribe>)t {
  return create_RxPluginsRxJavaHooksTest_$14_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletable;LRxCompletable_OnSubscribe;", "LRxPluginsRxJavaHooksTest;", "completableStart", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/Completable;Lrx/Completable$OnSubscribe;Lrx/Completable$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$14 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$14;
}

@end

void RxPluginsRxJavaHooksTest_$14_init(RxPluginsRxJavaHooksTest_$14 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$14 *new_RxPluginsRxJavaHooksTest_$14_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$14, init)
}

RxPluginsRxJavaHooksTest_$14 *create_RxPluginsRxJavaHooksTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$14, init)
}

@implementation RxPluginsRxJavaHooksTest_$14_$1

- (void)callWithId:(id<RxCompletableSubscriber>)t {
  [((id<RxCompletableSubscriber>) nil_chk(t)) onErrorWithNSException:create_RxExceptionsTestException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$14_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest_$14;", "callWithId:withId:" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$14_$1 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$14_$1;
}

@end

void RxPluginsRxJavaHooksTest_$14_$1_init(RxPluginsRxJavaHooksTest_$14_$1 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$14_$1 *new_RxPluginsRxJavaHooksTest_$14_$1_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$14_$1, init)
}

RxPluginsRxJavaHooksTest_$14_$1 *create_RxPluginsRxJavaHooksTest_$14_$1_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$14_$1, init)
}

@implementation RxPluginsRxJavaHooksTest_$15

- (id<RxFunctionsAction0>)callWithId:(id<RxFunctionsAction0>)t {
  return create_RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(self);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxFunctionsAction0;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxFunctionsAction0;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "LRxPluginsRxJavaHooksTest;", "onScheduleWithRxScheduler_Worker:", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/functions/Action0;Lrx/functions/Action0;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$15 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$15;
}

@end

void RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$value_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$15 *new_RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxPluginsRxJavaHooksTest_$15 *create_RxPluginsRxJavaHooksTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxPluginsRxJavaHooksTest_$15_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$value_)) setWithInt:10];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$cdl_)) countDown];
}

- (instancetype)initWithRxPluginsRxJavaHooksTest_$15:(RxPluginsRxJavaHooksTest_$15 *)outer$ {
  RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxPluginsRxJavaHooksTest_$15:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxPluginsRxJavaHooksTest_$15;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxPluginsRxJavaHooksTest_$15;", "callWithId:" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$15_$1 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$15_$1;
}

@end

void RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15_$1 *self, RxPluginsRxJavaHooksTest_$15 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$15_$1 *new_RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15 *outer$) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$15_$1, initWithRxPluginsRxJavaHooksTest_$15_, outer$)
}

RxPluginsRxJavaHooksTest_$15_$1 *create_RxPluginsRxJavaHooksTest_$15_$1_initWithRxPluginsRxJavaHooksTest_$15_(RxPluginsRxJavaHooksTest_$15 *outer$) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$15_$1, initWithRxPluginsRxJavaHooksTest_$15_, outer$)
}

@implementation RxPluginsRxJavaHooksTest_$16

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:1];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "LRxPluginsRxJavaHooksTest;", "onScheduleWithRxScheduler_Worker:" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$16 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$16;
}

@end

void RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$value_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$16 *new_RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxPluginsRxJavaHooksTest_$16 *create_RxPluginsRxJavaHooksTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxPluginsRxJavaHooksTest_$17

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$value_)) setWithInt:1];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$cdl_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  RELEASE_(val$cdl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cdl_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentCountDownLatch;", "LRxPluginsRxJavaHooksTest;", "onScheduleWithRxScheduler_Worker:" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$17 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$17;
}

@end

void RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(RxPluginsRxJavaHooksTest_$17 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$value_, capture$0);
  JreStrongAssign(&self->val$cdl_, capture$1);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$17 *new_RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$17, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxPluginsRxJavaHooksTest_$17 *create_RxPluginsRxJavaHooksTest_$17_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$17, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxPluginsRxJavaHooksTest_$18

- (void)callWithId:(NSException *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$18 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxPluginsRxJavaHooksTest_$18;
}

@end

void RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$18 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$18 *new_RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$18, initWithJavaUtilList_, capture$0)
}

RxPluginsRxJavaHooksTest_$18 *create_RxPluginsRxJavaHooksTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$18, initWithJavaUtilList_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$19

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:e];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "uncaughtException", "LJavaLangThread;LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onErrorNoHandler" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$19 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$19;
}

@end

void RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$19 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$19 *new_RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$19, initWithJavaUtilList_, capture$0)
}

RxPluginsRxJavaHooksTest_$19 *create_RxPluginsRxJavaHooksTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$19, initWithJavaUtilList_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$20

- (void)callWithId:(NSException *)t {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure 2");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxPluginsRxJavaHooksTest;", "onErrorCrashes", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$20 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxPluginsRxJavaHooksTest_$20;
}

@end

void RxPluginsRxJavaHooksTest_$20_init(RxPluginsRxJavaHooksTest_$20 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$20 *new_RxPluginsRxJavaHooksTest_$20_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$20, init)
}

RxPluginsRxJavaHooksTest_$20 *create_RxPluginsRxJavaHooksTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$20, init)
}

@implementation RxPluginsRxJavaHooksTest_$21

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:e];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "uncaughtException", "LJavaLangThread;LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onErrorCrashes" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$21 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$21;
}

@end

void RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(RxPluginsRxJavaHooksTest_$21 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$21 *new_RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$21, initWithJavaUtilList_, capture$0)
}

RxPluginsRxJavaHooksTest_$21 *create_RxPluginsRxJavaHooksTest_$21_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$21, initWithJavaUtilList_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$22

- (void)callWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxPluginsRxJavaHooksTest;", "clearIsPassthrough" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$22 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$22;
}

@end

void RxPluginsRxJavaHooksTest_$22_init(RxPluginsRxJavaHooksTest_$22 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$22 *new_RxPluginsRxJavaHooksTest_$22_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$22, init)
}

RxPluginsRxJavaHooksTest_$22 *create_RxPluginsRxJavaHooksTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$22, init)
}

@implementation RxPluginsRxJavaHooksTest_$23

- (void)callWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxPluginsRxJavaHooksTest;", "clearIsPassthrough" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$23 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$23;
}

@end

void RxPluginsRxJavaHooksTest_$23_init(RxPluginsRxJavaHooksTest_$23 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$23 *new_RxPluginsRxJavaHooksTest_$23_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$23, init)
}

RxPluginsRxJavaHooksTest_$23 *create_RxPluginsRxJavaHooksTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$23, init)
}

@implementation RxPluginsRxJavaHooksTest_$24

- (void)callWithId:(id<RxCompletableSubscriber>)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest;", "clearIsPassthrough" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$24 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$24;
}

@end

void RxPluginsRxJavaHooksTest_$24_init(RxPluginsRxJavaHooksTest_$24 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$24 *new_RxPluginsRxJavaHooksTest_$24_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$24, init)
}

RxPluginsRxJavaHooksTest_$24 *create_RxPluginsRxJavaHooksTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$24, init)
}

@implementation RxPluginsRxJavaHooksTest_$25

- (id)callWithId:(id)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxPluginsRxJavaHooksTest;", "clearIsPassthrough" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$25 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$25;
}

@end

void RxPluginsRxJavaHooksTest_$25_init(RxPluginsRxJavaHooksTest_$25 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$25 *new_RxPluginsRxJavaHooksTest_$25_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$25, init)
}

RxPluginsRxJavaHooksTest_$25 *create_RxPluginsRxJavaHooksTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$25, init)
}

@implementation RxPluginsRxJavaHooksTest_$26

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$26_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletableSubscriber;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest;", "clearIsPassthrough" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$26 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$26;
}

@end

void RxPluginsRxJavaHooksTest_$26_init(RxPluginsRxJavaHooksTest_$26 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$26 *new_RxPluginsRxJavaHooksTest_$26_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$26, init)
}

RxPluginsRxJavaHooksTest_$26 *create_RxPluginsRxJavaHooksTest_$26_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$26, init)
}

@implementation RxPluginsRxJavaHooksTest_$27

- (NSException *)callWithId:(NSException *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
  return val$ex_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
       withRxExceptionsTestException:(RxExceptionsTestException *)capture$1 {
  RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$ex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:withRxExceptionsTestException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$ex_", "LRxExceptionsTestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;LRxExceptionsTestException;", "(Ljava/util/List<Ljava/lang/Throwable;>;Lrx/exceptions/TestException;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onXError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$27 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxPluginsRxJavaHooksTest_$27;
}

@end

void RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(RxPluginsRxJavaHooksTest_$27 *self, id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$ex_, capture$1);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$27 *new_RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$27, initWithJavaUtilList_withRxExceptionsTestException_, capture$0, capture$1)
}

RxPluginsRxJavaHooksTest_$27 *create_RxPluginsRxJavaHooksTest_$27_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$27, initWithJavaUtilList_withRxExceptionsTestException_, capture$0, capture$1)
}

@implementation RxPluginsRxJavaHooksTest_$28

- (NSException *)callWithId:(NSException *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
  return val$ex_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
       withRxExceptionsTestException:(RxExceptionsTestException *)capture$1 {
  RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  RELEASE_(val$ex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:withRxExceptionsTestException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$ex_", "LRxExceptionsTestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;LRxExceptionsTestException;", "(Ljava/util/List<Ljava/lang/Throwable;>;Lrx/exceptions/TestException;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$28 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxPluginsRxJavaHooksTest_$28;
}

@end

void RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(RxPluginsRxJavaHooksTest_$28 *self, id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  JreStrongAssign(&self->val$ex_, capture$1);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$28 *new_RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$28, initWithJavaUtilList_withRxExceptionsTestException_, capture$0, capture$1)
}

RxPluginsRxJavaHooksTest_$28 *create_RxPluginsRxJavaHooksTest_$28_initWithJavaUtilList_withRxExceptionsTestException_(id<JavaUtilList> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$28, initWithJavaUtilList_withRxExceptionsTestException_, capture$0, capture$1)
}

@implementation RxPluginsRxJavaHooksTest_$29

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e {
  return [((id<RxFunctionsFunc1>) nil_chk(val$errorHandler_)) callWithId:e];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeErrorWithNSException:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$errorHandler_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onSubscribeError", "LNSException;", "<T:Ljava/lang/Object;>(Ljava/lang/Throwable;)Ljava/lang/Throwable;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;)V", "Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXError" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$29 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$29;
}

@end

void RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$29 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$errorHandler_, capture$0);
  RxPluginsRxJavaObservableExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$29 *new_RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$29, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$29 *create_RxPluginsRxJavaHooksTest_$29_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$29, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$30

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e {
  return [((id<RxFunctionsFunc1>) nil_chk(val$errorHandler_)) callWithId:e];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeErrorWithNSException:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$errorHandler_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onSubscribeError", "LNSException;", "<T:Ljava/lang/Object;>(Ljava/lang/Throwable;)Ljava/lang/Throwable;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;)V", "Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXError" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$30 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$30;
}

@end

void RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$30 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$errorHandler_, capture$0);
  RxPluginsRxJavaSingleExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$30 *new_RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$30, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$30 *create_RxPluginsRxJavaHooksTest_$30_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$30, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$31

- (NSException *)onSubscribeErrorWithNSException:(NSException *)e {
  return [((id<RxFunctionsFunc1>) nil_chk(val$errorHandler_)) callWithId:e];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSException;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeErrorWithNSException:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$errorHandler_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "onSubscribeError", "LNSException;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;)V", "Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Throwable;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXError" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$31 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$31;
}

@end

void RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$31 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$errorHandler_, capture$0);
  RxPluginsRxJavaCompletableExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$31 *new_RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$31, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$31 *create_RxPluginsRxJavaHooksTest_$31_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$31, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$32

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$32_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletableSubscriber;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest;", "onXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$32 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$32;
}

@end

void RxPluginsRxJavaHooksTest_$32_init(RxPluginsRxJavaHooksTest_$32 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$32 *new_RxPluginsRxJavaHooksTest_$32_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$32, init)
}

RxPluginsRxJavaHooksTest_$32 *create_RxPluginsRxJavaHooksTest_$32_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$32, init)
}

@implementation RxPluginsRxJavaHooksTest_$33

- (id)callWithId:(id)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$33_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxPluginsRxJavaHooksTest;", "onXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$33 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$33;
}

@end

void RxPluginsRxJavaHooksTest_$33_init(RxPluginsRxJavaHooksTest_$33 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$33 *new_RxPluginsRxJavaHooksTest_$33_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$33, init)
}

RxPluginsRxJavaHooksTest_$33 *create_RxPluginsRxJavaHooksTest_$33_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$33, init)
}

@implementation RxPluginsRxJavaHooksTest_$34

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t {
  (*IOSIntArray_GetRef(nil_chk(val$counter_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$34_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable_Operator;", "[I", "LRxPluginsRxJavaHooksTest;", "onXLift", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$34 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$34;
}

@end

void RxPluginsRxJavaHooksTest_$34_initWithIntArray_(RxPluginsRxJavaHooksTest_$34 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$34 *new_RxPluginsRxJavaHooksTest_$34_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$34, initWithIntArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$34 *create_RxPluginsRxJavaHooksTest_$34_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$34, initWithIntArray_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$35

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t {
  (*IOSIntArray_GetRef(nil_chk(val$counter_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$35_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable_Operator;", "[I", "LRxPluginsRxJavaHooksTest;", "onXLift", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$35 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$35;
}

@end

void RxPluginsRxJavaHooksTest_$35_initWithIntArray_(RxPluginsRxJavaHooksTest_$35 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$35 *new_RxPluginsRxJavaHooksTest_$35_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$35, initWithIntArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$35 *create_RxPluginsRxJavaHooksTest_$35_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$35, initWithIntArray_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$36

- (id<RxCompletable_Operator>)callWithId:(id<RxCompletable_Operator>)t {
  (*IOSIntArray_GetRef(nil_chk(val$counter_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$36_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletable_Operator;", "[I", "LRxPluginsRxJavaHooksTest;", "onXLift", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable$Operator;Lrx/Completable$Operator;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$36 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$36;
}

@end

void RxPluginsRxJavaHooksTest_$36_initWithIntArray_(RxPluginsRxJavaHooksTest_$36 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$36 *new_RxPluginsRxJavaHooksTest_$36_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$36, initWithIntArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$36 *create_RxPluginsRxJavaHooksTest_$36_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$36, initWithIntArray_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$37

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$37_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletableSubscriber;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableSubscriber;", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$37 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$37;
}

@end

void RxPluginsRxJavaHooksTest_$37_init(RxPluginsRxJavaHooksTest_$37 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$37 *new_RxPluginsRxJavaHooksTest_$37_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$37, init)
}

RxPluginsRxJavaHooksTest_$37 *create_RxPluginsRxJavaHooksTest_$37_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$37, init)
}

@implementation RxPluginsRxJavaHooksTest_$38

- (id)callWithId:(id)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaHooksTest_$38_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$38 = { "", "rx.plugins", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$38;
}

@end

void RxPluginsRxJavaHooksTest_$38_init(RxPluginsRxJavaHooksTest_$38 *self) {
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$38 *new_RxPluginsRxJavaHooksTest_$38_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$38, init)
}

RxPluginsRxJavaHooksTest_$38 *create_RxPluginsRxJavaHooksTest_$38_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$38, init)
}

@implementation RxPluginsRxJavaHooksTest_$39

- (id<RxObservable_Operator>)callWithId:(id<RxObservable_Operator>)t {
  (*IOSIntArray_GetRef(nil_chk(val$counter_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$39_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable_Operator;", "[I", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$39 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$39;
}

@end

void RxPluginsRxJavaHooksTest_$39_initWithIntArray_(RxPluginsRxJavaHooksTest_$39 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$39 *new_RxPluginsRxJavaHooksTest_$39_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$39, initWithIntArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$39 *create_RxPluginsRxJavaHooksTest_$39_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$39, initWithIntArray_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$40

- (id<RxCompletable_Operator>)callWithId:(id<RxCompletable_Operator>)t {
  (*IOSIntArray_GetRef(nil_chk(val$counter_), 0))++;
  return t;
}

- (instancetype)initWithIntArray:(IOSIntArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$40_initWithIntArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletable_Operator;", "[I", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Completable$Operator;Lrx/Completable$Operator;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$40 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$40;
}

@end

void RxPluginsRxJavaHooksTest_$40_initWithIntArray_(RxPluginsRxJavaHooksTest_$40 *self, IOSIntArray *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$40 *new_RxPluginsRxJavaHooksTest_$40_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$40, initWithIntArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$40 *create_RxPluginsRxJavaHooksTest_$40_initWithIntArray_(IOSIntArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$40, initWithIntArray_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$41

- (id<RxObservable_Operator>)onLiftWithRxObservable_Operator:(id<RxObservable_Operator>)lift {
  return [((id<RxFunctionsFunc1>) nil_chk(val$onObservableLift_)) callWithId:lift];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onObservableLift_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_Operator;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onLiftWithRxObservable_Operator:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onObservableLift_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onLift", "LRxObservable_Operator;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lrx/Observable$Operator<+TR;-TT;>;)Lrx/Observable$Operator<+TR;-TT;>;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;)V", "Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$41 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$41;
}

@end

void RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$41 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$onObservableLift_, capture$0);
  RxPluginsRxJavaObservableExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$41 *new_RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$41, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$41 *create_RxPluginsRxJavaHooksTest_$41_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$41, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$42

- (id<RxObservable_Operator>)onLiftWithRxObservable_Operator:(id<RxObservable_Operator>)lift {
  return [((id<RxFunctionsFunc1>) nil_chk(val$onObservableLift_)) callWithId:lift];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onObservableLift_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable_Operator;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onLiftWithRxObservable_Operator:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onObservableLift_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onLift", "LRxObservable_Operator;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lrx/Observable$Operator<+TR;-TT;>;)Lrx/Observable$Operator<+TR;-TT;>;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;)V", "Lrx/functions/Func1<Lrx/Observable$Operator;Lrx/Observable$Operator;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$42 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$42;
}

@end

void RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$42 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$onObservableLift_, capture$0);
  RxPluginsRxJavaSingleExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$42 *new_RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$42, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$42 *create_RxPluginsRxJavaHooksTest_$42_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$42, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$43

- (id<RxCompletable_Operator>)onLiftWithRxCompletable_Operator:(id<RxCompletable_Operator>)lift {
  return [((id<RxFunctionsFunc1>) nil_chk(val$onCompletableLift_)) callWithId:lift];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0 {
  RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onCompletableLift_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxCompletable_Operator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onLiftWithRxCompletable_Operator:);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onCompletableLift_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "onLift", "LRxCompletable_Operator;", "LRxFunctionsFunc1;", "(Lrx/functions/Func1<Lrx/Completable$Operator;Lrx/Completable$Operator;>;)V", "Lrx/functions/Func1<Lrx/Completable$Operator;Lrx/Completable$Operator;>;", "LRxPluginsRxJavaHooksTest;", "onPluginsXLift" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$43 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxPluginsRxJavaHooksTest_$43;
}

@end

void RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(RxPluginsRxJavaHooksTest_$43 *self, id<RxFunctionsFunc1> capture$0) {
  JreStrongAssign(&self->val$onCompletableLift_, capture$0);
  RxPluginsRxJavaCompletableExecutionHook_init(self);
}

RxPluginsRxJavaHooksTest_$43 *new_RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$43, initWithRxFunctionsFunc1_, capture$0)
}

RxPluginsRxJavaHooksTest_$43 *create_RxPluginsRxJavaHooksTest_$43_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$43, initWithRxFunctionsFunc1_, capture$0)
}

@implementation RxPluginsRxJavaHooksTest_$44

- (void)callWithId:(NSException *)t {
  *IOSBooleanArray_GetRef(nil_chk(val$called_), 0) = true;
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$called_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$called_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "[Z", "LRxPluginsRxJavaHooksTest;", "noCallToHooksOnPlainError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxPluginsRxJavaHooksTest_$44 = { "", "rx.plugins", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxPluginsRxJavaHooksTest_$44;
}

@end

void RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(RxPluginsRxJavaHooksTest_$44 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$called_, capture$0);
  NSObject_init(self);
}

RxPluginsRxJavaHooksTest_$44 *new_RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaHooksTest_$44, initWithBooleanArray_, capture$0)
}

RxPluginsRxJavaHooksTest_$44 *create_RxPluginsRxJavaHooksTest_$44_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaHooksTest_$44, initWithBooleanArray_, capture$0)
}
