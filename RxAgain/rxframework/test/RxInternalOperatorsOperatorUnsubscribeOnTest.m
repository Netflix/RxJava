//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorUnsubscribeOnTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorUnsubscribeOnTest.h"
#include "RxInternalUtilRxThreadFactory.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$1();

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription : NSObject < RxSubscription > {
 @public
  volatile_id thread_;
  JavaUtilConcurrentCountDownLatch *latch_;
  id<RxSubscription> s_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (JavaLangThread *)getThread;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription)

J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription, s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *self);

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *new_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription)

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1, this$0_, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)

__attribute__((unused)) static void RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *self, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$);

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler () {
 @public
  id<JavaUtilConcurrentExecutorService> eventLoop_;
  volatile_id t_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler, eventLoop_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler, t_, JavaLangThread *)

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *this$0_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler:(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *)outer$
                                                     withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1, this$0_, RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *self, RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscribeThread_;
  RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *val$subscription_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorUnsubscribeOnTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_$1, val$subscribeThread_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_$1, val$subscription_, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)

__attribute__((unused)) static void RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1);

@interface RxInternalOperatorsOperatorUnsubscribeOnTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$subscribeThread_;
  RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *val$subscription_;
}

- (void)callWithId:(RxSubscriber *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorUnsubscribeOnTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_$2, val$subscribeThread_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorUnsubscribeOnTest_$2, val$subscription_, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)

__attribute__((unused)) static void RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1);

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest

- (void)testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread {
  RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *UI_EVENT_LOOP = create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init();
  @try {
    RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *subscription = create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init();
    JavaUtilConcurrentAtomicAtomicReference *subscribeThread = create_JavaUtilConcurrentAtomicAtomicReference_init();
    RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(subscribeThread, subscription));
    RxObserversTestSubscriber *observer = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) subscribeOnWithRxScheduler:UI_EVENT_LOOP])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) unsubscribeOnWithRxScheduler:UI_EVENT_LOOP])) subscribeWithRxSubscriber:observer];
    JavaLangThread *unsubscribeThread = [subscription getThread];
    OrgJunitAssert_assertNotNullWithId_(unsubscribeThread);
    OrgJunitAssert_assertNotSameWithId_withId_(JavaLangThread_currentThread(), unsubscribeThread);
    OrgJunitAssert_assertNotNullWithId_([subscribeThread get]);
    OrgJunitAssert_assertNotSameWithId_withId_(JavaLangThread_currentThread(), [subscribeThread get]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"unsubscribeThread: ", unsubscribeThread)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"subscribeThread.get(): ", [subscribeThread get])];
    OrgJunitAssert_assertTrueWithBoolean_(unsubscribeThread == [UI_EVENT_LOOP getThread]);
    [observer assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
    [observer assertTerminalEvent];
  }
  @finally {
    [UI_EVENT_LOOP shutdown];
  }
}

- (void)testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnDifferentThreads {
  RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *UI_EVENT_LOOP = create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init();
  @try {
    RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *subscription = create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init();
    JavaUtilConcurrentAtomicAtomicReference *subscribeThread = create_JavaUtilConcurrentAtomicAtomicReference_init();
    RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(subscribeThread, subscription));
    RxObserversTestSubscriber *observer = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) unsubscribeOnWithRxScheduler:UI_EVENT_LOOP])) subscribeWithRxSubscriber:observer];
    JavaLangThread *unsubscribeThread = [subscription getThread];
    OrgJunitAssert_assertNotNullWithId_(unsubscribeThread);
    OrgJunitAssert_assertNotSameWithId_withId_(JavaLangThread_currentThread(), unsubscribeThread);
    OrgJunitAssert_assertNotNullWithId_([subscribeThread get]);
    OrgJunitAssert_assertNotSameWithId_withId_(JavaLangThread_currentThread(), [subscribeThread get]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"unsubscribeThread: ", unsubscribeThread)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"subscribeThread.get(): ", [subscribeThread get])];
    JavaLangThread *uiThread = [UI_EVENT_LOOP getThread];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"UI_EVENT_LOOP: ", uiThread)];
    OrgJunitAssert_assertTrueWithBoolean_(unsubscribeThread == uiThread);
    [observer assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
    [observer assertTerminalEvent];
  }
  @finally {
    [UI_EVENT_LOOP shutdown];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorUnsubscribeOnTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread);
  methods[1].selector = @selector(testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnDifferentThreads);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$0, (void *)&RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$1, "LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;LRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest = { "OperatorUnsubscribeOnTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 3, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_init(RxInternalOperatorsOperatorUnsubscribeOnTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorUnsubscribeOnTest *new_RxInternalOperatorsOperatorUnsubscribeOnTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest, init)
}

RxInternalOperatorsOperatorUnsubscribeOnTest *create_RxInternalOperatorsOperatorUnsubscribeOnTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorUnsubscribeOnTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorUnsubscribeOnTest)

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription

- (void)unsubscribe {
  [((id<RxSubscription>) nil_chk(s_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((id<RxSubscription>) nil_chk(s_)) isUnsubscribed];
}

- (JavaLangThread *)getThread {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  return JreLoadVolatileId(&thread_);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)__javaClone:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&thread_, &original->thread_);
}

- (void)dealloc {
  JreReleaseVolatile(&thread_);
  RELEASE_(latch_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(getThread);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "thread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", "LRxInternalOperatorsOperatorUnsubscribeOnTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription = { "ThreadSubscription", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 4, 3, 1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  JreStrongAssign(&self->s_, RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(self)));
}

RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *new_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription, init)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription)

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"unsubscribe invoked: ", JavaLangThread_currentThread())];
  JreVolatileStrongAssign(&this$0_->thread_, JavaLangThread_currentThread());
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->latch_)) countDown];
}

- (instancetype)initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)outer$ {
  RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *self, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1, initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, outer$)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_$1, initWithRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, outer$)
}

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxScheduler_Worker *)createWorker {
  return [((RxScheduler *) nil_chk(single_)) createWorker];
}

- (void)shutdown {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(eventLoop_)) shutdownNow];
}

- (JavaLangThread *)getThread {
  return JreLoadVolatileId(&t_);
}

- (void)__javaClone:(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&t_, &original->t_);
}

- (void)dealloc {
  RELEASE_(eventLoop_);
  RELEASE_(single_);
  JreReleaseVolatile(&t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWorker);
  methods[2].selector = @selector(shutdown);
  methods[3].selector = @selector(getThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventLoop_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "single_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorUnsubscribeOnTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler = { "UIEventLoopScheduler", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 4, 3, 0, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *self) {
  RxScheduler_init(self);
  JreStrongAssign(&self->eventLoop_, JavaUtilConcurrentExecutors_newSingleThreadExecutorWithJavaUtilConcurrentThreadFactory_(create_RxInternalUtilRxThreadFactory_initWithNSString_(@"Test-EventLoop")));
  JreStrongAssign(&self->single_, RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(self->eventLoop_));
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(self->eventLoop_)) submitWithJavaLangRunnable:create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(self, latch)];
  @try {
    [latch await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"failed to initialize and get inner thread");
  }
}

RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *new_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler, init)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler)

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1

- (void)run {
  JreVolatileStrongAssign(&this$0_->t_, JavaLangThread_currentThread());
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler:(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *)outer$
                                                     withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler;", "init" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *self, RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1, initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1_initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler *outer$, JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_$1, initWithRxInternalOperatorsOperatorUnsubscribeOnTest_UIEventLoopScheduler_withJavaUtilConcurrentCountDownLatch_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_$1

- (void)callWithId:(RxSubscriber *)t1 {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscribeThread_)) setWithId:JavaLangThread_currentThread()];
  [((RxSubscriber *) nil_chk(t1)) addWithRxSubscription:val$subscription_];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [t1 onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)capture$1 {
  RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeThread_);
  RELEASE_(val$subscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeThread_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$subscription_", "LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicReference;LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;Lrx/internal/operators/OperatorUnsubscribeOnTest$ThreadSubscription;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;", "LRxInternalOperatorsOperatorUnsubscribeOnTest;", "testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_$1;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  JreStrongAssign(&self->val$subscribeThread_, capture$0);
  JreStrongAssign(&self->val$subscription_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, capture$0, capture$1)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_$1 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorUnsubscribeOnTest_$2

- (void)callWithId:(RxSubscriber *)t1 {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$subscribeThread_)) setWithId:JavaLangThread_currentThread()];
  [((RxSubscriber *) nil_chk(t1)) addWithRxSubscription:val$subscription_];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [t1 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [t1 onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:(RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *)capture$1 {
  RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeThread_);
  RELEASE_(val$subscription_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeThread_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$subscription_", "LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicReference;LRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;Lrx/internal/operators/OperatorUnsubscribeOnTest$ThreadSubscription;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;", "LRxInternalOperatorsOperatorUnsubscribeOnTest;", "testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnDifferentThreads", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorUnsubscribeOnTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorUnsubscribeOnTest_$2;
}

@end

void RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  JreStrongAssign(&self->val$subscribeThread_, capture$0);
  JreStrongAssign(&self->val$subscription_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *new_RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, capture$0, capture$1)
}

RxInternalOperatorsOperatorUnsubscribeOnTest_$2 *create_RxInternalOperatorsOperatorUnsubscribeOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorUnsubscribeOnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withRxInternalOperatorsOperatorUnsubscribeOnTest_ThreadSubscription_, capture$0, capture$1)
}
