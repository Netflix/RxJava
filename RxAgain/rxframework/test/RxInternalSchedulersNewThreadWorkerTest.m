//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/schedulers/NewThreadWorkerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalSchedulersNewThreadWorker.h"
#include "RxInternalSchedulersNewThreadWorkerTest.h"
#include "java/lang/Boolean.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$3();

@implementation RxInternalSchedulersNewThreadWorkerTest

- (void)findSetRemoveOnCancelPolicyMethodShouldFindMethod {
  id<JavaUtilConcurrentScheduledExecutorService> executor = OrgMockitoMockito_spyWithId_(create_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_(1));
  JavaLangReflectMethod *setRemoveOnCancelPolicyMethod = RxInternalSchedulersNewThreadWorker_findSetRemoveOnCancelPolicyMethodWithJavaUtilConcurrentScheduledExecutorService_(executor);
  OrgJunitAssert_assertNotNullWithId_(setRemoveOnCancelPolicyMethod);
  OrgJunitAssert_assertEqualsWithId_withId_(@"setRemoveOnCancelPolicy", [((JavaLangReflectMethod *) nil_chk(setRemoveOnCancelPolicyMethod)) getName]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, ((IOSObjectArray *) nil_chk([setRemoveOnCancelPolicyMethod getParameterTypes]))->size_);
  OrgJunitAssert_assertEqualsWithId_withId_(JreLoadStatic(JavaLangBoolean, TYPE), IOSObjectArray_Get(nil_chk([setRemoveOnCancelPolicyMethod getParameterTypes]), 0));
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ executor } count:1 type:NSObject_class_()]);
}

- (void)findSetRemoveOnCancelPolicyMethodShouldNotFindMethod {
  id<JavaUtilConcurrentScheduledExecutorService> executor = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentScheduledExecutorService_class_());
  JavaLangReflectMethod *setRemoveOnCancelPolicyMethod = RxInternalSchedulersNewThreadWorker_findSetRemoveOnCancelPolicyMethodWithJavaUtilConcurrentScheduledExecutorService_(executor);
  OrgJunitAssert_assertNullWithId_(setRemoveOnCancelPolicyMethod);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ executor } count:1 type:NSObject_class_()]);
}

- (void)tryEnableCancelPolicyShouldInvokeMethodOnExecutor {
  RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *executor = OrgMockitoMockito_mockWithIOSClass_(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_class_());
  jboolean result = RxInternalSchedulersNewThreadWorker_tryEnableCancelPolicyWithJavaUtilConcurrentScheduledExecutorService_(executor);
  OrgJunitAssert_assertTrueWithBoolean_(result);
  [((RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *) nil_chk(OrgMockitoMockito_verifyWithId_(executor))) setRemoveOnCancelPolicyWithBoolean:true];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ executor } count:1 type:NSObject_class_()]);
}

- (void)tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor {
  id<JavaUtilConcurrentScheduledExecutorService> executor = OrgMockitoMockito_mockWithIOSClass_(JavaUtilConcurrentScheduledExecutorService_class_());
  jboolean result = RxInternalSchedulersNewThreadWorker_tryEnableCancelPolicyWithJavaUtilConcurrentScheduledExecutorService_(executor);
  OrgJunitAssert_assertFalseWithBoolean_(result);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ executor } count:1 type:NSObject_class_()]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersNewThreadWorkerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(findSetRemoveOnCancelPolicyMethodShouldFindMethod);
  methods[1].selector = @selector(findSetRemoveOnCancelPolicyMethodShouldNotFindMethod);
  methods[2].selector = @selector(tryEnableCancelPolicyShouldInvokeMethodOnExecutor);
  methods[3].selector = @selector(tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalSchedulersNewThreadWorkerTest__Annotations$0, (void *)&RxInternalSchedulersNewThreadWorkerTest__Annotations$1, (void *)&RxInternalSchedulersNewThreadWorkerTest__Annotations$2, (void *)&RxInternalSchedulersNewThreadWorkerTest__Annotations$3, "LRxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy;" };
  static const J2ObjcClassInfo _RxInternalSchedulersNewThreadWorkerTest = { "NewThreadWorkerTest", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, 4, -1, -1, -1 };
  return &_RxInternalSchedulersNewThreadWorkerTest;
}

@end

void RxInternalSchedulersNewThreadWorkerTest_init(RxInternalSchedulersNewThreadWorkerTest *self) {
  NSObject_init(self);
}

RxInternalSchedulersNewThreadWorkerTest *new_RxInternalSchedulersNewThreadWorkerTest_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersNewThreadWorkerTest, init)
}

RxInternalSchedulersNewThreadWorkerTest *create_RxInternalSchedulersNewThreadWorkerTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersNewThreadWorkerTest, init)
}

IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalSchedulersNewThreadWorkerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersNewThreadWorkerTest)

@implementation RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)value {
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (void)shutdown {
}

- (id<JavaUtilList>)shutdownNow {
  return nil;
}

- (jboolean)isShutdown {
  return false;
}

- (jboolean)isTerminated {
  return false;
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return false;
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  return nil;
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result {
  return nil;
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  return nil;
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return nil;
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return nil;
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return nil;
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 10, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 15, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 15, 20, -1, 21, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 22, 23, 14, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 22, 25, 14, 26, -1, -1 },
    { NULL, "LNSObject;", 0x1, 27, 23, 28, 29, -1, -1 },
    { NULL, "LNSObject;", 0x1, 27, 25, 30, 31, -1, -1 },
    { NULL, "V", 0x1, 32, 20, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setRemoveOnCancelPolicyWithBoolean:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(shutdown);
  methods[6].selector = @selector(shutdownNow);
  methods[7].selector = @selector(isShutdown);
  methods[8].selector = @selector(isTerminated);
  methods[9].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[10].selector = @selector(submitWithJavaUtilConcurrentCallable:);
  methods[11].selector = @selector(submitWithJavaLangRunnable:withId:);
  methods[12].selector = @selector(submitWithJavaLangRunnable:);
  methods[13].selector = @selector(invokeAllWithJavaUtilCollection:);
  methods[14].selector = @selector(invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[15].selector = @selector(invokeAnyWithJavaUtilCollection:);
  methods[16].selector = @selector(invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[17].selector = @selector(executeWithJavaLangRunnable:);
  methods[18].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setRemoveOnCancelPolicy", "Z", "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<*>;", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "<V:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TV;>;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<TV;>;", "scheduleAtFixedRate", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<*>;", "scheduleWithFixedDelay", "()Ljava/util/List<Ljava/lang/Runnable;>;", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "submit", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Future<TT;>;", "LJavaLangRunnable;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Ljava/util/concurrent/Future<TT;>;", "LJavaLangRunnable;", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "invokeAll", "LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "LJavaUtilCollection;JLJavaUtilConcurrentTimeUnit;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "invokeAny", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)TT;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)TT;", "execute", "LRxInternalSchedulersNewThreadWorkerTest;" };
  static const J2ObjcClassInfo _RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy = { "ScheduledExecutorServiceWithSetRemoveOnCancelPolicy", "rx.internal.schedulers", ptrTable, methods, NULL, 7, 0x9, 19, 0, 33, -1, -1, -1, -1 };
  return &_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy;
}

@end

void RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *self) {
  NSObject_init(self);
}

RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *new_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy, init)
}

RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *create_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy)
