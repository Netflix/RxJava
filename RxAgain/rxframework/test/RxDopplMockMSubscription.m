//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/doppl/mock/MSubscription.java
//

#include "J2ObjC_source.h"
#include "RxDopplMockMSubscription.h"

@implementation RxDopplMockMSubscription

- (void)unsubscribe {
  unsubscribed_ = true;
}

- (jboolean)isUnsubscribed {
  return unsubscribed_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMockMSubscription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unsubscribed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _RxDopplMockMSubscription = { "MSubscription", "rx.doppl.mock", NULL, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_RxDopplMockMSubscription;
}

@end

void RxDopplMockMSubscription_init(RxDopplMockMSubscription *self) {
  NSObject_init(self);
  self->unsubscribed_ = false;
}

RxDopplMockMSubscription *new_RxDopplMockMSubscription_init() {
  J2OBJC_NEW_IMPL(RxDopplMockMSubscription, init)
}

RxDopplMockMSubscription *create_RxDopplMockMSubscription_init() {
  J2OBJC_CREATE_IMPL(RxDopplMockMSubscription, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMockMSubscription)
