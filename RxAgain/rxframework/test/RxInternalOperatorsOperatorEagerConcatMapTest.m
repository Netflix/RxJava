//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorEagerConcatMapTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorEagerConcatMapTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$28();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$1_init(RxInternalOperatorsOperatorEagerConcatMapTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$1 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$1 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$1_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$2 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$2_init(RxInternalOperatorsOperatorEagerConcatMapTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$2 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$2 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$2_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$3, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$3 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$3 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$4, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$4 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$4 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$5 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$5 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$6, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$6 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$6 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$7, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$7 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$7 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$8 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$8, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$8 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$8 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$9 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$9, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$9 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$9 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$10 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$10, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$10 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$10 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$11 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$11_init(RxInternalOperatorsOperatorEagerConcatMapTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$11 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$11 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$11_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$12 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$12_init(RxInternalOperatorsOperatorEagerConcatMapTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$12 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$12 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$12_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$13 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$13)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$13_init(RxInternalOperatorsOperatorEagerConcatMapTest_$13 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$13 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$13 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$13_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$14 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  RxSubjectsPublishSubject *val$subject_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$14, val$once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$14, val$subject_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(RxInternalOperatorsOperatorEagerConcatMapTest_$14 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$14 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$14 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$15 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$15, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$15 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$15 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 : NSObject < RxFunctionsAction1 > {
 @public
  RxInternalOperatorsOperatorEagerConcatMapTest_$15 *this$0_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15:(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1, this$0_, RxInternalOperatorsOperatorEagerConcatMapTest_$15 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *self, RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$);

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$16 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$16)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$16_init(RxInternalOperatorsOperatorEagerConcatMapTest_$16 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$16 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$16 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$16_init();

@interface RxInternalOperatorsOperatorEagerConcatMapTest_$17 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$requests_;
}

- (void)callWithId:(JavaLangLong *)reqCount;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorEagerConcatMapTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorEagerConcatMapTest_$17, val$requests_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(RxInternalOperatorsOperatorEagerConcatMapTest_$17 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$17 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorEagerConcatMapTest_$17 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@implementation RxInternalOperatorsOperatorEagerConcatMapTest

- (void)before {
  JreStrongAssignAndConsume(&ts_, new_RxObserversTestSubscriber_init());
  JreStrongAssignAndConsume(&tsBp_, new_RxObserversTestSubscriber_initWithLong_(0LL));
}

- (void)testSimple {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) concatMapEagerWithRxFunctionsFunc1:toJust_])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueCountWithInt:100];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
}

- (void)testSimple2 {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) concatMapEagerWithRxFunctionsFunc1:toRange_])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueCountWithInt:200];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
}

- (void)testEagerness2 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_(source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness3 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_(source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness4 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness5 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness6 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness7 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(7, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness8 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source, source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(8, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testEagerness9 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_withRxObservable_(source, source, source, source, source, source, source, source, source))) subscribeWithRxSubscriber:tsBp_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(9, [count get]);
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:JavaLangLong_MAX_VALUE];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueCountWithInt:[count get]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testMainError {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) concatMapEagerWithRxFunctionsFunc1:toJust_])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNotCompleted];
}

- (void)testInnerError {
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)), RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())))) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNotCompleted];
}

- (void)testInnerEmpty {
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_(RxObservable_empty(), RxObservable_empty()))) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
}

- (void)testMapperThrows {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatMapEagerWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$11_init()])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

- (void)testInvalidCapacityHint {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatMapEagerWithRxFunctionsFunc1:toJust_ withInt:0];
}

- (void)testInvalidMaxConcurrent {
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatMapEagerWithRxFunctionsFunc1:toJust_ withInt:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) withInt:0];
}

- (void)testBackpressure {
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withRxObservable_(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)), RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))))) subscribeWithRxSubscriber:tsBp_];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(tsBp_)) assertCompleted];
}

- (void)testAsynchronousRun {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) concatMapEagerWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$12_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) awaitTerminalEvent];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueCountWithInt:2000];
}

- (void)testReentrantWork {
  RxSubjectsPublishSubject *subject = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(subject)) concatMapEagerWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$13_init()])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(once, subject)])) subscribeWithRxSubscriber:ts_];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:NSObject_class_()]];
}

- (void)testPrefetchIsBounded {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatMapEagerWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoErrors];
  [ts assertNoValues];
  [ts assertNotCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE), [count get]);
}

- (void)testInnerNull {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatMapEagerWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$16_init()])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueWithId:nil];
}

- (void)testMaxConcurrent5 {
  id<JavaUtilList> requests = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 100))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(requests)])) concatMapEagerWithRxFunctionsFunc1:toJust_ withInt:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) withInt:5])) subscribeWithRxSubscriber:ts_];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueCountWithInt:100];
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((JavaLangLong *) nil_chk([requests getWithInt:0])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangLong *) nil_chk([requests getWithInt:1])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangLong *) nil_chk([requests getWithInt:2])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangLong *) nil_chk([requests getWithInt:3])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangLong *) nil_chk([requests getWithInt:4])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangLong *) nil_chk([requests getWithInt:5])) longLongValue]);
}

- (void)many {
  for (jint i = 2; i < 10; i++) {
    IOSObjectArray *clazz = [IOSObjectArray arrayWithLength:i type:IOSClass_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(clazz, RxObservable_class_());
    IOSObjectArray *obs = [IOSObjectArray arrayWithLength:i type:RxObservable_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(obs, RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)));
    IOSObjectArray *expected = [IOSObjectArray arrayWithLength:i type:JavaLangInteger_class_()];
    JavaUtilArrays_fillWithNSObjectArray_withId_(expected, JavaLangInteger_valueOfWithInt_(1));
    JavaLangReflectMethod *m = [RxObservable_class_() getMethod:@"concatEager" parameterTypes:clazz];
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    [((RxObservable *) nil_chk(((RxObservable *) cast_chk([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:nil withNSObjectArray:obs], [RxObservable class])))) subscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:expected];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
}

- (void)capacityHint {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithJavaLangIterable_withInt_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ source, source, source } count:3 type:RxObservable_class_()]), 1))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)observable {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_(RxObservable_justWithId_withId_withId_(source, source, source)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)observableCapacityHint {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(RxObservable_concatEagerWithRxObservable_withInt_(RxObservable_justWithId_withId_withId_(source, source, source), 1))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)badCapacityHint {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  @try {
    RxObservable_concatEagerWithJavaLangIterable_withInt_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ source, source, source } count:3 type:RxObservable_class_()]), -99);
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"capacityHint > 0 required but it was -99", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

- (void)mappingBadCapacityHint {
  RxObservable *source = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  @try {
    [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(source, source, source))) concatMapEagerWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_identity() withInt:-99 withInt:10];
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"capacityHint > 0 required but it was -99", [((JavaLangIllegalArgumentException *) nil_chk(ex)) getMessage]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(ts_);
  RELEASE_(tsBp_);
  RELEASE_(toJust_);
  RELEASE_(toRange_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, 23, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, 23, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, 23, -1, 29, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testSimple);
  methods[2].selector = @selector(testSimple2);
  methods[3].selector = @selector(testEagerness2);
  methods[4].selector = @selector(testEagerness3);
  methods[5].selector = @selector(testEagerness4);
  methods[6].selector = @selector(testEagerness5);
  methods[7].selector = @selector(testEagerness6);
  methods[8].selector = @selector(testEagerness7);
  methods[9].selector = @selector(testEagerness8);
  methods[10].selector = @selector(testEagerness9);
  methods[11].selector = @selector(testMainError);
  methods[12].selector = @selector(testInnerError);
  methods[13].selector = @selector(testInnerEmpty);
  methods[14].selector = @selector(testMapperThrows);
  methods[15].selector = @selector(testInvalidCapacityHint);
  methods[16].selector = @selector(testInvalidMaxConcurrent);
  methods[17].selector = @selector(testBackpressure);
  methods[18].selector = @selector(testAsynchronousRun);
  methods[19].selector = @selector(testReentrantWork);
  methods[20].selector = @selector(testPrefetchIsBounded);
  methods[21].selector = @selector(testInnerNull);
  methods[22].selector = @selector(testMaxConcurrent5);
  methods[23].selector = @selector(many);
  methods[24].selector = @selector(capacityHint);
  methods[25].selector = @selector(observable);
  methods[26].selector = @selector(observableCapacityHint);
  methods[27].selector = @selector(badCapacityHint);
  methods[28].selector = @selector(mappingBadCapacityHint);
  methods[29].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x0, -1, -1, 30, -1 },
    { "tsBp_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x0, -1, -1, 30, -1 },
    { "toJust_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x0, -1, -1, 31, -1 },
    { "toRange_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x0, -1, -1, 31, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$0, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$1, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$2, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$3, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$4, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$5, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$6, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$7, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$8, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$9, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$10, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$11, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$12, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$13, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$14, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$15, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$16, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$17, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$18, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$19, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$20, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$21, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$22, "LJavaLangException;", (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$23, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$24, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$25, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$26, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$27, (void *)&RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$28, "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;", "Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest = { "OperatorEagerConcatMapTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 30, 4, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_init(RxInternalOperatorsOperatorEagerConcatMapTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->toJust_, new_RxInternalOperatorsOperatorEagerConcatMapTest_$1_init());
  JreStrongAssignAndConsume(&self->toRange_, new_RxInternalOperatorsOperatorEagerConcatMapTest_$2_init());
}

RxInternalOperatorsOperatorEagerConcatMapTest *new_RxInternalOperatorsOperatorEagerConcatMapTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest *create_RxInternalOperatorsOperatorEagerConcatMapTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorEagerConcatMapTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorEagerConcatMapTest)

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$1

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_justWithId_(t);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$1;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$1_init(RxInternalOperatorsOperatorEagerConcatMapTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$1 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$1, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$1 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$1, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$2

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_rangeWithInt_withInt_([((JavaLangInteger *) nil_chk(t)) intValue], 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$2;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$2_init(RxInternalOperatorsOperatorEagerConcatMapTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$2 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$2, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$2 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$2, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$3

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness2", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$3;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$3 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$3 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$4

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness3", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$4;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$4 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$4 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$5

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness4", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$5;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$5 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$5 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$6

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness5", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$6;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$6 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$6 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$7

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness6", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$7;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$7 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$7 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$8

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness7", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$8;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$8 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$8 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$9

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness8", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$9;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$9 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$9 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$10

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) getAndIncrement];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testEagerness9", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$10;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$10 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$10 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$11

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testMapperThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$11;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$11_init(RxInternalOperatorsOperatorEagerConcatMapTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$11 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$11, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$11 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$11, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$12

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testAsynchronousRun", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$12;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$12_init(RxInternalOperatorsOperatorEagerConcatMapTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$12 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$12, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$12 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$12, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$13

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_justWithId_(t);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testReentrantWork", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$13 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$13;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$13_init(RxInternalOperatorsOperatorEagerConcatMapTest_$13 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$13 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$13_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$13, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$13 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$13, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$14

- (void)callWithId:(JavaLangInteger *)t {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubjectsPublishSubject *) nil_chk(val$subject_)) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$once_);
  RELEASE_(val$subject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subject_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicBoolean;LRxSubjectsPublishSubject;", "(Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testReentrantWork", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$14;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(RxInternalOperatorsOperatorEagerConcatMapTest_$14 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$subject_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$14 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$14, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$14 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$14, initWithJavaUtilConcurrentAtomicAtomicBoolean_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$15

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(self)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testPrefetchIsBounded", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$15;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$15 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$15 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$count_)) getAndIncrement];
}

- (instancetype)initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15:(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *)outer$ {
  RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorEagerConcatMapTest_$15;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorEagerConcatMapTest_$15;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *self, RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1, initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_, outer$)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1_initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_(RxInternalOperatorsOperatorEagerConcatMapTest_$15 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$15_$1, initWithRxInternalOperatorsOperatorEagerConcatMapTest_$15_, outer$)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$16

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_justWithId_(nil);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorEagerConcatMapTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testInnerNull", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$16 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$16;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$16_init(RxInternalOperatorsOperatorEagerConcatMapTest_$16 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$16 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$16_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$16, init)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$16 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$16, init)
}

@implementation RxInternalOperatorsOperatorEagerConcatMapTest_$17

- (void)callWithId:(JavaLangLong *)reqCount {
  [((id<JavaUtilList>) nil_chk(val$requests_)) addWithId:reqCount];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOperatorEagerConcatMapTest;", "testMaxConcurrent5", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorEagerConcatMapTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorEagerConcatMapTest_$17;
}

@end

void RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(RxInternalOperatorsOperatorEagerConcatMapTest_$17 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorEagerConcatMapTest_$17 *new_RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$17, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorEagerConcatMapTest_$17 *create_RxInternalOperatorsOperatorEagerConcatMapTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorEagerConcatMapTest_$17, initWithJavaUtilList_, capture$0)
}
