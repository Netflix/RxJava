//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subscriptions/CompositeSubscriptionTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxSubscription.h"
#include "RxSubscriptionsBooleanSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "RxSubscriptionsCompositeSubscriptionTest.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$11();

@interface RxSubscriptionsCompositeSubscriptionTest_$1 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$1)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$1, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$1 *new_RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$1 *create_RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$2 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$2)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$2, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$2 *new_RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$2 *create_RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$3 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$3)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$3, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$3 *new_RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$3 *create_RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$4 : JavaLangThread {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxSubscriptionsCompositeSubscription *val$s_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$4)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$4, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$4, val$s_, RxSubscriptionsCompositeSubscription *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(RxSubscriptionsCompositeSubscriptionTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$4 *new_RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$4 *create_RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1);

@interface RxSubscriptionsCompositeSubscriptionTest_$5 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$5)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$5_init(RxSubscriptionsCompositeSubscriptionTest_$5 *self);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$5 *new_RxSubscriptionsCompositeSubscriptionTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$5 *create_RxSubscriptionsCompositeSubscriptionTest_$5_init();

@interface RxSubscriptionsCompositeSubscriptionTest_$6 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$6)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$6, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$6 *new_RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$6 *create_RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$7 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$7)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$7_init(RxSubscriptionsCompositeSubscriptionTest_$7 *self);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$7 *new_RxSubscriptionsCompositeSubscriptionTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$7 *create_RxSubscriptionsCompositeSubscriptionTest_$7_init();

@interface RxSubscriptionsCompositeSubscriptionTest_$8 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$8)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$8_init(RxSubscriptionsCompositeSubscriptionTest_$8 *self);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$8 *new_RxSubscriptionsCompositeSubscriptionTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$8 *create_RxSubscriptionsCompositeSubscriptionTest_$8_init();

@interface RxSubscriptionsCompositeSubscriptionTest_$9 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$9)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$9, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$9 *new_RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$9 *create_RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$10 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$10)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$10, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$10 *new_RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$10 *create_RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$11 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$11)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$11, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$11 *new_RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$11 *create_RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$12 : JavaLangThread {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxSubscriptionsCompositeSubscription *val$s_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$12)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$12, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$12, val$s_, RxSubscriptionsCompositeSubscription *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(RxSubscriptionsCompositeSubscriptionTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$12 *new_RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$12 *create_RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1);

@interface RxSubscriptionsCompositeSubscriptionTest_$13 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$13)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$13, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$13 *new_RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$13 *create_RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$14 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$14)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$14, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$14 *new_RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$14 *create_RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$15 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$15)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$15, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$15 *new_RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$15 *create_RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$16 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$16)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$16, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$16 *new_RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$16 *create_RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxSubscriptionsCompositeSubscriptionTest_$17 : JavaLangThread {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxSubscriptionsCompositeSubscription *val$s_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
  id<JavaUtilQueue> val$errorQueue_;
  JavaUtilConcurrentCountDownLatch *val$end_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                       withJavaUtilQueue:(id<JavaUtilQueue>)capture$3
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$17)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17, val$s_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17, val$errorQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17, val$end_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsCompositeSubscriptionTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17 *new_RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17 *create_RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

@interface RxSubscriptionsCompositeSubscriptionTest_$17_$1 : NSObject < RxSubscription > {
 @public
  RxSubscriptionsCompositeSubscriptionTest_$17 *this$0_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$17_$1)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17_$1, this$0_, RxSubscriptionsCompositeSubscriptionTest_$17 *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$1 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$1 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$1 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

@interface RxSubscriptionsCompositeSubscriptionTest_$17_$2 : NSObject < RxSubscription > {
 @public
  RxSubscriptionsCompositeSubscriptionTest_$17 *this$0_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$17_$2)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17_$2, this$0_, RxSubscriptionsCompositeSubscriptionTest_$17 *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$2 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$2 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$2 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

@interface RxSubscriptionsCompositeSubscriptionTest_$17_$3 : NSObject < RxSubscription > {
 @public
  RxSubscriptionsCompositeSubscriptionTest_$17 *this$0_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscriptionTest_$17_$3)

J2OBJC_FIELD_SETTER(RxSubscriptionsCompositeSubscriptionTest_$17_$3, this$0_, RxSubscriptionsCompositeSubscriptionTest_$17 *)

__attribute__((unused)) static void RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$3 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$3 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubscriptionsCompositeSubscriptionTest_$17_$3 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$);

@implementation RxSubscriptionsCompositeSubscriptionTest

- (void)testSuccess {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [counter get]);
}

- (void)shouldUnsubscribeAll {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  for (jint i = 0; i < count; i++) {
    [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  }
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(start, s);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(count, [counter get]);
}

- (void)testException {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$5_init()];
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  @try {
    [s unsubscribe];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception");
  }
  @catch (JavaLangRuntimeException *e) {
    OrgJunitAssert_assertEqualsWithId_withId_([((JavaLangRuntimeException *) nil_chk(e)) getMessage], @"failed on first one");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testCompositeException {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$7_init()];
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$8_init()];
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  @try {
    [s unsubscribe];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size], 2);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testRemoveUnsubscribes {
  RxSubscriptionsBooleanSubscription *s1 = create_RxSubscriptionsBooleanSubscription_init();
  RxSubscriptionsBooleanSubscription *s2 = create_RxSubscriptionsBooleanSubscription_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:s1];
  [s addWithRxSubscription:s2];
  [s removeWithRxSubscription:s1];
  OrgJunitAssert_assertTrueWithBoolean_([s1 isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([s2 isUnsubscribed]);
}

- (void)testClear {
  RxSubscriptionsBooleanSubscription *s1 = create_RxSubscriptionsBooleanSubscription_init();
  RxSubscriptionsBooleanSubscription *s2 = create_RxSubscriptionsBooleanSubscription_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:s1];
  [s addWithRxSubscription:s2];
  OrgJunitAssert_assertFalseWithBoolean_([s1 isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([s2 isUnsubscribed]);
  [s clear];
  OrgJunitAssert_assertTrueWithBoolean_([s1 isUnsubscribed]);
  OrgJunitAssert_assertTrueWithBoolean_([s2 isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([s isUnsubscribed]);
  RxSubscriptionsBooleanSubscription *s3 = create_RxSubscriptionsBooleanSubscription_init();
  [s addWithRxSubscription:s3];
  [s unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([s3 isUnsubscribed]);
  OrgJunitAssert_assertTrueWithBoolean_([s isUnsubscribed]);
}

- (void)testUnsubscribeIdempotence {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s unsubscribe];
  [s unsubscribe];
  [s unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testUnsubscribeIdempotenceConcurrently {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [s addWithRxSubscription:create_RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(start, s);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testTryRemoveIfNotIn {
  RxSubscriptionsCompositeSubscription *csub = create_RxSubscriptionsCompositeSubscription_init();
  RxSubscriptionsCompositeSubscription *csub1 = create_RxSubscriptionsCompositeSubscription_init();
  RxSubscriptionsCompositeSubscription *csub2 = create_RxSubscriptionsCompositeSubscription_init();
  [csub addWithRxSubscription:csub1];
  [csub removeWithRxSubscription:csub1];
  [csub addWithRxSubscription:csub2];
  [csub removeWithRxSubscription:csub1];
}

- (void)testAddingNullSubscriptionIllegal {
  RxSubscriptionsCompositeSubscription *csub = create_RxSubscriptionsCompositeSubscription_init();
  [csub addWithRxSubscription:nil];
}

- (void)testAddAll {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  [s addAllWithRxSubscriptionArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter), create_RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter), create_RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter), create_RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter) } count:4 type:RxSubscription_class_()]];
  [s unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [counter get]);
}

- (void)testAddAllConcurrent {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubscriptionsCompositeSubscription *s = create_RxSubscriptionsCompositeSubscription_init();
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *end = create_JavaUtilConcurrentCountDownLatch_initWithInt_(10);
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  id<JavaUtilQueue> errorQueue = create_JavaUtilConcurrentConcurrentLinkedQueue_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(start, s, counter, errorQueue, end);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  [end await];
  [s unsubscribe];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(30, [counter get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_([errorQueue description], 0, [errorQueue size]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsCompositeSubscriptionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 12, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSuccess);
  methods[1].selector = @selector(shouldUnsubscribeAll);
  methods[2].selector = @selector(testException);
  methods[3].selector = @selector(testCompositeException);
  methods[4].selector = @selector(testRemoveUnsubscribes);
  methods[5].selector = @selector(testClear);
  methods[6].selector = @selector(testUnsubscribeIdempotence);
  methods[7].selector = @selector(testUnsubscribeIdempotenceConcurrently);
  methods[8].selector = @selector(testTryRemoveIfNotIn);
  methods[9].selector = @selector(testAddingNullSubscriptionIllegal);
  methods[10].selector = @selector(testAddAll);
  methods[11].selector = @selector(testAddAllConcurrent);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$1, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$2, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$3, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$4, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$5, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$6, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$7, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$8, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$9, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$10, (void *)&RxSubscriptionsCompositeSubscriptionTest__Annotations$11 };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest = { "CompositeSubscriptionTest", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x1, 13, 0, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_init(RxSubscriptionsCompositeSubscriptionTest *self) {
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest *new_RxSubscriptionsCompositeSubscriptionTest_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest, init)
}

RxSubscriptionsCompositeSubscriptionTest *create_RxSubscriptionsCompositeSubscriptionTest_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest, init)
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsCompositeSubscriptionTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsCompositeSubscriptionTest)

@implementation RxSubscriptionsCompositeSubscriptionTest_$1

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testSuccess" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$1 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$1;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$1 *new_RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$1 *create_RxSubscriptionsCompositeSubscriptionTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$2

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testSuccess" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$2 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$2;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$2 *new_RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$2 *create_RxSubscriptionsCompositeSubscriptionTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$3

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "shouldUnsubscribeAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$3 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$3;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$3 *new_RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$3 *create_RxSubscriptionsCompositeSubscriptionTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$4

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxSubscriptionsCompositeSubscription *) nil_chk(val$s_)) unsubscribe];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1 {
  RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubscriptionsCompositeSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubscriptionsCompositeSubscription;", "LRxSubscriptionsCompositeSubscriptionTest;", "shouldUnsubscribeAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$4 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$4;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(RxSubscriptionsCompositeSubscriptionTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JavaLangThread_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$4 *new_RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$4, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_, capture$0, capture$1)
}

RxSubscriptionsCompositeSubscriptionTest_$4 *create_RxSubscriptionsCompositeSubscriptionTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$4, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_, capture$0, capture$1)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$5

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on first one");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsCompositeSubscriptionTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest;", "testException" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$5 = { "", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$5;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$5_init(RxSubscriptionsCompositeSubscriptionTest_$5 *self) {
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$5 *new_RxSubscriptionsCompositeSubscriptionTest_$5_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$5, init)
}

RxSubscriptionsCompositeSubscriptionTest_$5 *create_RxSubscriptionsCompositeSubscriptionTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$5, init)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$6

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testException" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$6 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$6;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$6 *new_RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$6 *create_RxSubscriptionsCompositeSubscriptionTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$7

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on first one");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsCompositeSubscriptionTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$7 = { "", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$7;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$7_init(RxSubscriptionsCompositeSubscriptionTest_$7 *self) {
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$7 *new_RxSubscriptionsCompositeSubscriptionTest_$7_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$7, init)
}

RxSubscriptionsCompositeSubscriptionTest_$7 *create_RxSubscriptionsCompositeSubscriptionTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$7, init)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$8

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on second one too");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsCompositeSubscriptionTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$8 = { "", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$8;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$8_init(RxSubscriptionsCompositeSubscriptionTest_$8 *self) {
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$8 *new_RxSubscriptionsCompositeSubscriptionTest_$8_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$8, init)
}

RxSubscriptionsCompositeSubscriptionTest_$8 *create_RxSubscriptionsCompositeSubscriptionTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$8, init)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$9

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$9 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$9;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$9 *new_RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$9 *create_RxSubscriptionsCompositeSubscriptionTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$10

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testUnsubscribeIdempotence" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$10 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$10;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$10 *new_RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$10 *create_RxSubscriptionsCompositeSubscriptionTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$11

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testUnsubscribeIdempotenceConcurrently" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$11 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$11;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$11 *new_RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$11 *create_RxSubscriptionsCompositeSubscriptionTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$12

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxSubscriptionsCompositeSubscription *) nil_chk(val$s_)) unsubscribe];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1 {
  RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubscriptionsCompositeSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubscriptionsCompositeSubscription;", "LRxSubscriptionsCompositeSubscriptionTest;", "testUnsubscribeIdempotenceConcurrently" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$12 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$12;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(RxSubscriptionsCompositeSubscriptionTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JavaLangThread_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$12 *new_RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$12, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_, capture$0, capture$1)
}

RxSubscriptionsCompositeSubscriptionTest_$12 *create_RxSubscriptionsCompositeSubscriptionTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$12, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_, capture$0, capture$1)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$13

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testAddAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$13 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$13;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$13 *new_RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$13 *create_RxSubscriptionsCompositeSubscriptionTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$14

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testAddAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$14 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$14;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$14 *new_RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$14 *create_RxSubscriptionsCompositeSubscriptionTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$15

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testAddAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$15 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$15;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$15 *new_RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$15 *create_RxSubscriptionsCompositeSubscriptionTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$16

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxSubscriptionsCompositeSubscriptionTest;", "testAddAll" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$16 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$16;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxSubscriptionsCompositeSubscriptionTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$16 *new_RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxSubscriptionsCompositeSubscriptionTest_$16 *create_RxSubscriptionsCompositeSubscriptionTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$17

- (void)run {
  @try {
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
      [((RxSubscriptionsCompositeSubscription *) nil_chk(val$s_)) addAllWithRxSubscriptionArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self), create_RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self), create_RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self) } count:3 type:RxSubscription_class_()]];
    }
    @catch (JavaLangInterruptedException *e) {
      [((id<JavaUtilQueue>) nil_chk(val$errorQueue_)) offerWithId:e];
    }
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$end_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                       withJavaUtilQueue:(id<JavaUtilQueue>)capture$3
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4 {
  RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$s_);
  RELEASE_(val$counter_);
  RELEASE_(val$errorQueue_);
  RELEASE_(val$end_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubscriptionsCompositeSubscription:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilQueue:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$errorQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$end_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubscriptionsCompositeSubscription;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilQueue;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/CountDownLatch;Lrx/subscriptions/CompositeSubscription;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/Queue<Ljava/lang/Throwable;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/Queue<Ljava/lang/Throwable;>;", "LRxSubscriptionsCompositeSubscriptionTest;", "testAddAllConcurrent" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$17 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 2, 5, 3, -1, 4, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$17;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(RxSubscriptionsCompositeSubscriptionTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JreStrongAssign(&self->val$counter_, capture$2);
  JreStrongAssign(&self->val$errorQueue_, capture$3);
  JreStrongAssign(&self->val$end_, capture$4);
  JavaLangThread_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$17 *new_RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

RxSubscriptionsCompositeSubscriptionTest_$17 *create_RxSubscriptionsCompositeSubscriptionTest_$17_initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubscriptionsCompositeSubscription *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<JavaUtilQueue> capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17, initWithJavaUtilConcurrentCountDownLatch_withRxSubscriptionsCompositeSubscription_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilQueue_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$17_$1

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$ {
  RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxSubscriptionsCompositeSubscriptionTest_$17:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriptionsCompositeSubscriptionTest_$17;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest_$17;", "run" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$17_$1 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$17_$1;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$1 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$17_$1 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$1, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}

RxSubscriptionsCompositeSubscriptionTest_$17_$1 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$1_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$1, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$17_$2

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$ {
  RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxSubscriptionsCompositeSubscriptionTest_$17:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriptionsCompositeSubscriptionTest_$17;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest_$17;", "run" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$17_$2 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$17_$2;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$2 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$17_$2 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$2, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}

RxSubscriptionsCompositeSubscriptionTest_$17_$2 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$2_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$2, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}

@implementation RxSubscriptionsCompositeSubscriptionTest_$17_$3

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithRxSubscriptionsCompositeSubscriptionTest_$17:(RxSubscriptionsCompositeSubscriptionTest_$17 *)outer$ {
  RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithRxSubscriptionsCompositeSubscriptionTest_$17:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSubscriptionsCompositeSubscriptionTest_$17;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriptionsCompositeSubscriptionTest_$17;", "run" };
  static const J2ObjcClassInfo _RxSubscriptionsCompositeSubscriptionTest_$17_$3 = { "", "rx.subscriptions", ptrTable, methods, fields, 7, 0x8008, 3, 1, 0, -1, 1, -1, -1 };
  return &_RxSubscriptionsCompositeSubscriptionTest_$17_$3;
}

@end

void RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17_$3 *self, RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxSubscriptionsCompositeSubscriptionTest_$17_$3 *new_RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_NEW_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$3, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}

RxSubscriptionsCompositeSubscriptionTest_$17_$3 *create_RxSubscriptionsCompositeSubscriptionTest_$17_$3_initWithRxSubscriptionsCompositeSubscriptionTest_$17_(RxSubscriptionsCompositeSubscriptionTest_$17 *outer$) {
  J2OBJC_CREATE_IMPL(RxSubscriptionsCompositeSubscriptionTest_$17_$3, initWithRxSubscriptionsCompositeSubscriptionTest_$17_, outer$)
}
