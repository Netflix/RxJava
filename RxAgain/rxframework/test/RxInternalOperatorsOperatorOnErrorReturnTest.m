//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorOnErrorReturnTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorOnErrorReturnTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$4();

@interface RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  IOSObjectArray *values_;
  JavaLangThread *t_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable, t_, JavaLangThread *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *self, IOSObjectArray *values);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *new_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable)

@interface RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 : NSObject < JavaLangRunnable > {
 @public
  RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *this$0_;
  RxSubscriber *val$subscriber_;
}

- (void)run;

- (instancetype)initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable:(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *)outer$
                                                                   withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1, this$0_, RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$capturedException_;
}

- (NSString *)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_$1, val$capturedException_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorOnErrorReturnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$1 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$1 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$capturedException_;
}

- (NSString *)callWithId:(NSException *)e;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnErrorReturnTest_$2, val$capturedException_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorOnErrorReturnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$2 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$2 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$3 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$3_init(RxInternalOperatorsOperatorOnErrorReturnTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$3 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$3 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$3_init();

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$4 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$4_init(RxInternalOperatorsOperatorOnErrorReturnTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$4 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$4 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$4_init();

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$5 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$5_init(RxInternalOperatorsOperatorOnErrorReturnTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$5 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$5 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$5_init();

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$6 : NSObject < RxFunctionsFunc1 > {
 @public
  jint c_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$6_init(RxInternalOperatorsOperatorOnErrorReturnTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$6 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$6 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$6_init();

@interface RxInternalOperatorsOperatorOnErrorReturnTest_$7 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(NSException *)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnErrorReturnTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnErrorReturnTest_$7_init(RxInternalOperatorsOperatorOnErrorReturnTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$7 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnErrorReturnTest_$7 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$7_init();

@implementation RxInternalOperatorsOperatorOnErrorReturnTest

- (void)testResumeNext {
  RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *f = create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one" } count:1 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  JavaUtilConcurrentAtomicAtomicReference *capturedException = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onErrorReturnWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(capturedException)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"failure"];
  OrgJunitAssert_assertNotNullWithId_([capturedException get]);
}

- (void)testFunctionThrowsError {
  RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *f = create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one" } count:1 type:NSString_class_()]);
  RxObservable *w = RxObservable_createWithRxObservable_OnSubscribe_(f);
  JavaUtilConcurrentAtomicAtomicReference *capturedException = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onErrorReturnWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(capturedException)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  @try {
    [((JavaLangThread *) nil_chk(f->t_)) join];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  OrgJunitAssert_assertNotNullWithId_([capturedException get]);
}

- (void)testMapResumeAsyncNext {
  RxObservable *w = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"fail", @"two", @"three", @"fail");
  w = [((RxObservable *) nil_chk(w)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$3_init()];
  RxObservable *observable = [((RxObservable *) nil_chk(w)) onErrorReturnWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$4_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(observer);
  [((RxObservable *) nil_chk(observable)) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"resume"];
}

- (void)testBackpressure {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 100000))) onErrorReturnWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$5_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$6_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

- (void)normalBackpressure {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) onErrorReturnWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorOnErrorReturnTest_$7_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:2];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ps onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Forced failure")];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testResumeNext);
  methods[1].selector = @selector(testFunctionThrowsError);
  methods[2].selector = @selector(testMapResumeAsyncNext);
  methods[3].selector = @selector(testBackpressure);
  methods[4].selector = @selector(normalBackpressure);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$0, (void *)&RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$1, (void *)&RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$2, (void *)&RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$3, (void *)&RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$4, "LRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest = { "OperatorOnErrorReturnTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, 5, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_init(RxInternalOperatorsOperatorOnErrorReturnTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest *new_RxInternalOperatorsOperatorOnErrorReturnTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest *create_RxInternalOperatorsOperatorOnErrorReturnTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnErrorReturnTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnErrorReturnTest)

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable

- (instancetype)initWithNSStringArray:(IOSObjectArray *)values {
  RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(self, values);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"TestObservable subscribed to ..."];
  JreStrongAssignAndConsume(&t_, new_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(self, subscriber)));
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"starting TestObservable thread"];
  [((JavaLangThread *) nil_chk(t_)) start];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done starting TestObservable thread"];
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(t_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "t_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *self, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->t_, nil);
  JreStrongAssign(&self->values_, values);
}

RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *new_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable, initWithNSStringArray_, values)
}

RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_initWithNSStringArray_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable, initWithNSStringArray_, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable)

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1

- (void)run {
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"running TestObservable thread"];
    {
      IOSObjectArray *a__ = this$0_->values_;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"TestObservable onNext: ", s)];
        [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:s];
      }
    }
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:e];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable:(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *)outer$
                                                                   withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable;LRxSubscriber;", "(Lrx/internal/operators/OperatorOnErrorReturnTest$TestObservable;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *self, RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *new_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1 *create_RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1_initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_$1, initWithRxInternalOperatorsOperatorOnErrorReturnTest_TestObservable_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$1

- (NSString *)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$capturedException_)) setWithId:e];
  return @"failure";
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$capturedException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$capturedException_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testResumeNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$1;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorOnErrorReturnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$capturedException_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$1 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$1 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$2

- (NSString *)callWithId:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$capturedException_)) setWithId:e];
  @throw create_JavaLangRuntimeException_initWithNSString_(@"exception from function");
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$capturedException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$capturedException_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testFunctionThrowsError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$2;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorOnErrorReturnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$capturedException_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$2 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$2 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$3

- (NSString *)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"BadMapper:", s)];
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testMapResumeAsyncNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$3;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$3_init(RxInternalOperatorsOperatorOnErrorReturnTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$3 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$3, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$3 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$3, init)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$4

- (NSString *)callWithId:(NSException *)t1 {
  return @"resume";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testMapResumeAsyncNext", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$4;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$4_init(RxInternalOperatorsOperatorOnErrorReturnTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$4 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$4, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$4 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$4, init)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$5

- (JavaLangInteger *)callWithId:(NSException *)t1 {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$5;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$5_init(RxInternalOperatorsOperatorOnErrorReturnTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$5 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$5, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$5 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$5, init)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$6

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  if (c_++ <= 1) {
    @try {
      JavaLangThread_sleepWithLong_(500);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "testBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$6;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$6_init(RxInternalOperatorsOperatorOnErrorReturnTest_$6 *self) {
  NSObject_init(self);
  self->c_ = 0;
}

RxInternalOperatorsOperatorOnErrorReturnTest_$6 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$6, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$6 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$6, init)
}

@implementation RxInternalOperatorsOperatorOnErrorReturnTest_$7

- (JavaLangInteger *)callWithId:(NSException *)e {
  return JavaLangInteger_valueOfWithInt_(3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnErrorReturnTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOperatorOnErrorReturnTest;", "normalBackpressure", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnErrorReturnTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorOnErrorReturnTest_$7;
}

@end

void RxInternalOperatorsOperatorOnErrorReturnTest_$7_init(RxInternalOperatorsOperatorOnErrorReturnTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnErrorReturnTest_$7 *new_RxInternalOperatorsOperatorOnErrorReturnTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$7, init)
}

RxInternalOperatorsOperatorOnErrorReturnTest_$7 *create_RxInternalOperatorsOperatorOnErrorReturnTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnErrorReturnTest_$7, init)
}
