//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorOnBackpressureBufferTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxBackpressureOverflow.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOperatorOnBackpressureBufferTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest ()

- (id<JavaUtilList>)overflowBufferWithBehaviourWithInt:(jint)initialRequest
                                               withInt:(jint)bufSize
                   withRxBackpressureOverflow_Strategy:(id<RxBackpressureOverflow_Strategy>)backpressureStrategy;

@end

inline id<RxFunctionsAction0> RxInternalOperatorsOperatorOnBackpressureBufferTest_get_THROWS_NON_FATAL();
static id<RxFunctionsAction0> RxInternalOperatorsOperatorOnBackpressureBufferTest_THROWS_NON_FATAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorOnBackpressureBufferTest, THROWS_NON_FATAL, id<RxFunctionsAction0>)

__attribute__((unused)) static id<JavaUtilList> RxInternalOperatorsOperatorOnBackpressureBufferTest_overflowBufferWithBehaviourWithInt_withInt_withRxBackpressureOverflow_Strategy_(RxInternalOperatorsOperatorOnBackpressureBufferTest *self, jint initialRequest, jint bufSize, id<RxBackpressureOverflow_Strategy> backpressureStrategy);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$9();

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentCountDownLatch *val$l1_;
  JavaUtilConcurrentCountDownLatch *val$l2_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangLong *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3, val$l1_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3, val$l2_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init();

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$backpressureCallback_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5, val$backpressureCallback_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$backpressureCallback_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6, val$backpressureCallback_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init();

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init();

@interface RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$errorOccurred_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8, val$errorOccurred_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorOnBackpressureBufferTest)

RxObservable *RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite;

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest

- (void)testNoBackpressureSupport {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts requestMoreWithLong:100];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite)) takeWithInt:500])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertEqualsWithLong_withLong_(500, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  [ts assertNoErrors];
}

- (void)testFixBackpressureWithBuffer {
  JavaUtilConcurrentCountDownLatch *l1 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(100);
  JavaUtilConcurrentCountDownLatch *l2 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(150);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(l1, l2));
  [ts requestMoreWithLong:100];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) onBackpressureBuffer])) takeWithInt:500])) subscribeWithRxSubscriber:ts];
  [l1 await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(100, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  [ts requestMoreWithLong:50];
  [l2 await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(150, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  [ts requestMoreWithLong:350];
  [ts awaitTerminalEvent];
  OrgJunitAssert_assertEqualsWithLong_withLong_(500, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((JavaLangLong *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:0])) intValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(499, [((JavaLangLong *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:499])) intValue]);
}

- (void)testFixBackpressureBufferNegativeCapacity {
  [((RxObservable *) nil_chk(RxObservable_empty())) onBackpressureBufferWithLong:-1];
}

- (void)testFixBackpressureBufferZeroCapacity {
  [((RxObservable *) nil_chk(RxObservable_empty())) onBackpressureBufferWithLong:0];
}

- (void)testFixBackpressureBufferNullStrategy {
  [((RxObservable *) nil_chk(RxObservable_empty())) onBackpressureBufferWithLong:10 withRxFunctionsAction0:create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init() withRxBackpressureOverflow_Strategy:nil];
}

- (void)testFixBackpressureBoundedBuffer {
  JavaUtilConcurrentCountDownLatch *l1 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(100);
  JavaUtilConcurrentCountDownLatch *backpressureCallback = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObserversTestSubscriber *ts = RxInternalOperatorsOperatorOnBackpressureBufferTest_testSubscriberWithJavaUtilConcurrentCountDownLatch_(l1);
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:100];
  id<RxSubscription> s = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) onBackpressureBufferWithLong:500 withRxFunctionsAction0:create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(backpressureCallback)])) takeWithInt:1000])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([l1 awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  [ts requestMoreWithLong:50];
  OrgJunitAssert_assertTrueWithBoolean_([backpressureCallback awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsMissingBackpressureException class]]);
  jint size = [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size];
  OrgJunitAssert_assertTrueWithBoolean_(size <= 150);
  OrgJunitAssert_assertTrueWithBoolean_([((JavaLangLong *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:size - 1])) longLongValue] == size - 1);
  OrgJunitAssert_assertTrueWithBoolean_([((id<RxSubscription>) nil_chk(s)) isUnsubscribed]);
}

- (void)testFixBackpressureBoundedBufferDroppingOldest {
  id<JavaUtilList> events = RxInternalOperatorsOperatorOnBackpressureBufferTest_overflowBufferWithBehaviourWithInt_withInt_withRxBackpressureOverflow_Strategy_(self, 100, 10, JreLoadStatic(RxBackpressureOverflow, ON_OVERFLOW_DROP_OLDEST));
  jint i = 0;
  for (JavaLangLong * __strong n in nil_chk(events)) {
    if (i < 100) {
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(i), n);
    }
    else {
      OrgJunitAssert_assertTrueWithBoolean_(i < [((JavaLangLong *) nil_chk(n)) longLongValue]);
    }
    i++;
  }
}

- (void)testFixBackpressureBoundedBufferDroppingLatest {
  id<JavaUtilList> events = RxInternalOperatorsOperatorOnBackpressureBufferTest_overflowBufferWithBehaviourWithInt_withInt_withRxBackpressureOverflow_Strategy_(self, 100, 10, JreLoadStatic(RxBackpressureOverflow, ON_OVERFLOW_DROP_LATEST));
  jint i = 0;
  for (JavaLangLong * __strong n in nil_chk(events)) {
    if (i < 110) {
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(i), n);
    }
    else {
      OrgJunitAssert_assertTrueWithBoolean_(i < [((JavaLangLong *) nil_chk(n)) longLongValue]);
    }
    i++;
  }
}

- (id<JavaUtilList>)overflowBufferWithBehaviourWithInt:(jint)initialRequest
                                               withInt:(jint)bufSize
                   withRxBackpressureOverflow_Strategy:(id<RxBackpressureOverflow_Strategy>)backpressureStrategy {
  return RxInternalOperatorsOperatorOnBackpressureBufferTest_overflowBufferWithBehaviourWithInt_withInt_withRxBackpressureOverflow_Strategy_(self, initialRequest, bufSize, backpressureStrategy);
}

+ (RxObserversTestSubscriber *)testSubscriberWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch {
  return RxInternalOperatorsOperatorOnBackpressureBufferTest_testSubscriberWithJavaUtilConcurrentCountDownLatch_(latch);
}

- (void)testNonFatalExceptionThrownByOnOverflowIsNotReportedByUpstream {
  JavaUtilConcurrentAtomicAtomicBoolean *errorOccurred = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(errorOccurred)])) onBackpressureBufferWithLong:1 withRxFunctionsAction0:RxInternalOperatorsOperatorOnBackpressureBufferTest_THROWS_NON_FATAL])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEvent];
  OrgJunitAssert_assertFalseWithBoolean_([errorOccurred get]);
}

- (void)maxSize {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) onBackpressureBufferWithLong:1])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsMissingBackpressureException_class_()];
  [ts assertNotCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 8, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 10, 1, 11, -1, -1 },
    { NULL, "LRxObserversTestSubscriber;", 0x8, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testNoBackpressureSupport);
  methods[1].selector = @selector(testFixBackpressureWithBuffer);
  methods[2].selector = @selector(testFixBackpressureBufferNegativeCapacity);
  methods[3].selector = @selector(testFixBackpressureBufferZeroCapacity);
  methods[4].selector = @selector(testFixBackpressureBufferNullStrategy);
  methods[5].selector = @selector(testFixBackpressureBoundedBuffer);
  methods[6].selector = @selector(testFixBackpressureBoundedBufferDroppingOldest);
  methods[7].selector = @selector(testFixBackpressureBoundedBufferDroppingLatest);
  methods[8].selector = @selector(overflowBufferWithBehaviourWithInt:withInt:withRxBackpressureOverflow_Strategy:);
  methods[9].selector = @selector(testSubscriberWithJavaUtilConcurrentCountDownLatch:);
  methods[10].selector = @selector(testNonFatalExceptionThrownByOnOverflowIsNotReportedByUpstream);
  methods[11].selector = @selector(maxSize);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "infinite", "LRxObservable;", .constantValue.asLong = 0, 0x18, -1, 17, 18, -1 },
    { "THROWS_NON_FATAL", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$1, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$2, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$3, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$4, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$5, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$6, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$7, "overflowBufferWithBehaviour", "IILRxBackpressureOverflow_Strategy;", "(IILrx/BackpressureOverflow$Strategy;)Ljava/util/List<Ljava/lang/Long;>;", "testSubscriber", "LJavaUtilConcurrentCountDownLatch;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/CountDownLatch;)Lrx/observers/TestSubscriber<TT;>;", (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$8, (void *)&RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$9, &RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite, "Lrx/Observable<Ljava/lang/Long;>;", &RxInternalOperatorsOperatorOnBackpressureBufferTest_THROWS_NON_FATAL };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest = { "OperatorOnBackpressureBufferTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 13, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorOnBackpressureBufferTest class]) {
    JreStrongAssign(&RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite, RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init()));
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorOnBackpressureBufferTest_THROWS_NON_FATAL, new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init());
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorOnBackpressureBufferTest)
  }
}

@end

id<JavaUtilList> RxInternalOperatorsOperatorOnBackpressureBufferTest_overflowBufferWithBehaviourWithInt_withInt_withRxBackpressureOverflow_Strategy_(RxInternalOperatorsOperatorOnBackpressureBufferTest *self, jint initialRequest, jint bufSize, id<RxBackpressureOverflow_Strategy> backpressureStrategy) {
  JavaUtilConcurrentCountDownLatch *l1 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(initialRequest * 2);
  JavaUtilConcurrentCountDownLatch *backpressureCallback = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObserversTestSubscriber *ts = RxInternalOperatorsOperatorOnBackpressureBufferTest_testSubscriberWithJavaUtilConcurrentCountDownLatch_(l1);
  [((RxObserversTestSubscriber *) nil_chk(ts)) requestMoreWithLong:initialRequest];
  id<RxSubscription> s = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorOnBackpressureBufferTest_infinite)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) onBackpressureBufferWithLong:bufSize withRxFunctionsAction0:create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(backpressureCallback) withRxBackpressureOverflow_Strategy:backpressureStrategy])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([backpressureCallback awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  [ts requestMoreWithLong:initialRequest];
  OrgJunitAssert_assertTrueWithBoolean_([l1 awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) isEmpty]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(initialRequest * 2, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([ts isUnsubscribed]);
  return [ts getOnNextEvents];
}

RxObserversTestSubscriber *RxInternalOperatorsOperatorOnBackpressureBufferTest_testSubscriberWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch) {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_initialize();
  return create_RxObserversTestSubscriber_initWithRxObserver_(create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(latch));
}

void RxInternalOperatorsOperatorOnBackpressureBufferTest_init(RxInternalOperatorsOperatorOnBackpressureBufferTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest, init)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorOnBackpressureBufferTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnBackpressureBufferTest)

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$3

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangLong *)t {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$l1_)) countDown];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$l2_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$l1_);
  RELEASE_(val$l2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$l1_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$l2_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangLong;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "testFixBackpressureWithBuffer", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$l1_, capture$0);
  JreStrongAssign(&self->val$l2_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$3 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$3_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$3, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$4

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "testFixBackpressureBufferNullStrategy" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$4, init)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$4 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$4, init)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$5

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$backpressureCallback_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$backpressureCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$backpressureCallback_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "testFixBackpressureBoundedBuffer" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$backpressureCallback_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$5 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$6

- (void)call {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$backpressureCallback_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$backpressureCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$backpressureCallback_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "overflowBufferWithBehaviourWithInt:withInt:withRxBackpressureOverflow_Strategy:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$backpressureCallback_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$6 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$6_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$6, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$7

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "testSubscriberWithJavaUtilConcurrentCountDownLatch:", "Ljava/lang/Object;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$7 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$7_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$7, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$1

- (void)callWithId:(RxSubscriber *)s {
  jlong i = 0;
  while (![((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    [s onNextWithId:JavaLangLong_valueOfWithLong_(i++)];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$1, init)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$1 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$1, init)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$2

- (void)call {
  @throw create_JavaLangRuntimeException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorOnBackpressureBufferTest;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init(RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$2, init)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$2 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$2, init)
}

@implementation RxInternalOperatorsOperatorOnBackpressureBufferTest_$8

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$errorOccurred_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$errorOccurred_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$errorOccurred_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorOnBackpressureBufferTest;", "testNonFatalExceptionThrownByOnOverflowIsNotReportedByUpstream", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$errorOccurred_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *new_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorOnBackpressureBufferTest_$8 *create_RxInternalOperatorsOperatorOnBackpressureBufferTest_$8_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBufferTest_$8, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
