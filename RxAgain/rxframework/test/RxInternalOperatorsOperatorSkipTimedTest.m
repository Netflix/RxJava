//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSkipTimedTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorSkipTimedTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$4();

@interface RxInternalOperatorsOperatorSkipTimedTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsub_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipTimedTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTimedTest_$1, val$unsub_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipTimedTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimedTest_$1 *new_RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTimedTest_$1 *create_RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxInternalOperatorsOperatorSkipTimedTest

- (void)testSkipTimed {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [source onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testSkipTimedFinishBeforeTime {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onCompleted];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testSkipTimedErrorBeforeTime {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testSkipTimedErrorAfterTime {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *result = [((RxSubjectsPublishSubject *) nil_chk(source)) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testSkipTimedUnsubscribePropagatesToUpstream {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  JavaUtilConcurrentAtomicAtomicBoolean *unsub = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  RxObservable *result = [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsub)])) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withRxScheduler:scheduler];
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(result)) subscribeWithRxSubscriber:ts];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts)) unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([unsub get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipTimedTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSkipTimed);
  methods[1].selector = @selector(testSkipTimedFinishBeforeTime);
  methods[2].selector = @selector(testSkipTimedErrorBeforeTime);
  methods[3].selector = @selector(testSkipTimedErrorAfterTime);
  methods[4].selector = @selector(testSkipTimedUnsubscribePropagatesToUpstream);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSkipTimedTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSkipTimedTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSkipTimedTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSkipTimedTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSkipTimedTest__Annotations$4 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTimedTest = { "OperatorSkipTimedTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSkipTimedTest;
}

@end

void RxInternalOperatorsOperatorSkipTimedTest_init(RxInternalOperatorsOperatorSkipTimedTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTimedTest *new_RxInternalOperatorsOperatorSkipTimedTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipTimedTest, init)
}

RxInternalOperatorsOperatorSkipTimedTest *create_RxInternalOperatorsOperatorSkipTimedTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipTimedTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTimedTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipTimedTest)

@implementation RxInternalOperatorsOperatorSkipTimedTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsub_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsub_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSkipTimedTest;", "testSkipTimedUnsubscribePropagatesToUpstream" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTimedTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorSkipTimedTest_$1;
}

@end

void RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipTimedTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTimedTest_$1 *new_RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipTimedTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSkipTimedTest_$1 *create_RxInternalOperatorsOperatorSkipTimedTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipTimedTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
