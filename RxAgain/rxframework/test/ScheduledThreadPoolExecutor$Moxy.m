//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/build/generated/source/apt/test/java/util/concurrent/ScheduledThreadPoolExecutor$Moxy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ScheduledThreadPoolExecutor$Moxy.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RejectedExecutionHandler.h"
#include "java/util/concurrent/RunnableFuture.h"
#include "java/util/concurrent/RunnableScheduledFuture.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"

@implementation JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy

- (instancetype)initWithInt:(jint)a0 {
  JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(self, a0);
  return self;
}

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)a1 {
  JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(self, a0, a1);
  return self;
}

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)a1 {
  JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(self, a0, a1);
  return self;
}

- (instancetype)initWithInt:(jint)a0
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)a1
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)a2 {
  JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(self, a0, a1, a2);
  return self;
}

- (id<JavaLangReflectInvocationHandler>)getHandler {
  return $__handler_;
}

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler {
  JreStrongAssign(&$__handler_, handler);
}

- (id)clone {
  @try {
    if ($__handler_ == nil) {
      return [super clone];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"clone" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangCloneNotSupportedException class]]) {
      @throw (JavaLangCloneNotSupportedException *) cast_chk(__ttlive, [JavaLangCloneNotSupportedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$clone {
  return [super clone];
}

- (jboolean)isShutdown {
  @try {
    if ($__handler_ == nil) {
      return [super isShutdown];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isShutdown" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isShutdown {
  return [super isShutdown];
}

- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                         withNSException:(NSException *)arg1 {
  @try {
    if ($__handler_ == nil) {
      [super afterExecuteWithJavaLangRunnable:arg0 withNSException:arg1];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"afterExecute" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), NSException_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                               withNSException:(NSException *)arg1 {
  [super afterExecuteWithJavaLangRunnable:arg0 withNSException:arg1];
}

- (id<JavaUtilConcurrentRunnableFuture>)newTaskForWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super newTaskForWithJavaUtilConcurrentCallable:arg0];
    }
    else {
      return (id<JavaUtilConcurrentRunnableFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"newTaskFor" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], JavaUtilConcurrentRunnableFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentRunnableFuture>)super$newTaskForWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0 {
  return [super newTaskForWithJavaUtilConcurrentCallable:arg0];
}

- (NSUInteger)hash {
  @try {
    if ($__handler_ == nil) {
      return ((jint) [super hash]);
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"hashCode" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$hashCode {
  return ((jint) [super hash]);
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                             withLong:(jlong)arg1
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithJavaLangRunnable:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), arg2 } count:3 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                   withLong:(jlong)arg1
                                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  return [super scheduleWithJavaLangRunnable:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
}

- (jboolean)removeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super removeWithJavaLangRunnable:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"remove" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$removeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  return [super removeWithJavaLangRunnable:arg0];
}

- (void)setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setContinueExistingPeriodicTasksAfterShutdownPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0 {
  [super setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:arg0];
}

- (void)allowCoreThreadTimeOutWithBoolean:(jboolean)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super allowCoreThreadTimeOutWithBoolean:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"allowCoreThreadTimeOut" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$allowCoreThreadTimeOutWithBoolean:(jboolean)arg0 {
  [super allowCoreThreadTimeOutWithBoolean:arg0];
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super executeWithJavaLangRunnable:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"execute" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$executeWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  [super executeWithJavaLangRunnable:arg0];
}

- (id<JavaUtilConcurrentThreadFactory>)getThreadFactory {
  @try {
    if ($__handler_ == nil) {
      return [super getThreadFactory];
    }
    else {
      return (id<JavaUtilConcurrentThreadFactory>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getThreadFactory" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], JavaUtilConcurrentThreadFactory_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentThreadFactory>)super$getThreadFactory {
  return [super getThreadFactory];
}

- (void)setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setExecuteExistingDelayedTasksAfterShutdownPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:(jboolean)arg0 {
  [super setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:arg0];
}

- (jboolean)getRemoveOnCancelPolicy {
  @try {
    if ($__handler_ == nil) {
      return [super getRemoveOnCancelPolicy];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getRemoveOnCancelPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$getRemoveOnCancelPolicy {
  return [super getRemoveOnCancelPolicy];
}

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                              withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1 {
  @try {
    if ($__handler_ == nil) {
      return [super decorateTaskWithJavaUtilConcurrentCallable:arg0 withJavaUtilConcurrentRunnableScheduledFuture:arg1];
    }
    else {
      return (id<JavaUtilConcurrentRunnableScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"decorateTask" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_(), JavaUtilConcurrentRunnableScheduledFuture_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]], JavaUtilConcurrentRunnableScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentRunnableScheduledFuture>)super$decorateTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                    withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1 {
  return [super decorateTaskWithJavaUtilConcurrentCallable:arg0 withJavaUtilConcurrentRunnableScheduledFuture:arg1];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                           withLong:(jlong)arg1
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAllWithJavaUtilCollection:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAll" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), arg2 } count:3 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                                 withLong:(jlong)arg1
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  return [super invokeAllWithJavaUtilCollection:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
}

- (jboolean)isTerminated {
  @try {
    if ($__handler_ == nil) {
      return [super isTerminated];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isTerminated" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isTerminated {
  return [super isTerminated];
}

- (jlong)getCompletedTaskCount {
  @try {
    if ($__handler_ == nil) {
      return [super getCompletedTaskCount];
    }
    else {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getCompletedTaskCount" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangLong class]))) longLongValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jlong)super$getCompletedTaskCount {
  return [super getCompletedTaskCount];
}

- (jboolean)isEqual:(id)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super isEqual:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"equals" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$equalsWithId:(id)arg0 {
  return [super isEqual:arg0];
}

- (jboolean)awaitTerminationWithLong:(jlong)arg0
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1 {
  @try {
    if ($__handler_ == nil) {
      return [super awaitTerminationWithLong:arg0 withJavaUtilConcurrentTimeUnit:arg1];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"awaitTermination" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(arg0), arg1 } count:2 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$awaitTerminationWithLong:(jlong)arg0
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1 {
  return [super awaitTerminationWithLong:arg0 withJavaUtilConcurrentTimeUnit:arg1];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAnyWithJavaUtilCollection:arg0];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAny" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentExecutionException class]]) {
      @throw (JavaUtilConcurrentExecutionException *) cast_chk(__ttlive, [JavaUtilConcurrentExecutionException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 {
  return [super invokeAnyWithJavaUtilCollection:arg0];
}

- (id<JavaUtilConcurrentRunnableScheduledFuture>)decorateTaskWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                    withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1 {
  @try {
    if ($__handler_ == nil) {
      return [super decorateTaskWithJavaLangRunnable:arg0 withJavaUtilConcurrentRunnableScheduledFuture:arg1];
    }
    else {
      return (id<JavaUtilConcurrentRunnableScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"decorateTask" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), JavaUtilConcurrentRunnableScheduledFuture_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]], JavaUtilConcurrentRunnableScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentRunnableScheduledFuture>)super$decorateTaskWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                          withJavaUtilConcurrentRunnableScheduledFuture:(id<JavaUtilConcurrentRunnableScheduledFuture>)arg1 {
  return [super decorateTaskWithJavaLangRunnable:arg0 withJavaUtilConcurrentRunnableScheduledFuture:arg1];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaLangRunnable:arg0];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 {
  return [super submitWithJavaLangRunnable:arg0];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                           withLong:(jlong)arg1
                                                                           withLong:(jlong)arg2
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3 {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithFixedDelayWithJavaLangRunnable:arg0 withLong:arg1 withLong:arg2 withJavaUtilConcurrentTimeUnit:arg3];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"scheduleWithFixedDelay" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:4 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), JavaLangLong_valueOfWithLong_(arg2), arg3 } count:4 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                                 withLong:(jlong)arg1
                                                                                 withLong:(jlong)arg2
                                                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3 {
  return [super scheduleWithFixedDelayWithJavaLangRunnable:arg0 withLong:arg1 withLong:arg2 withJavaUtilConcurrentTimeUnit:arg3];
}

- (void)setMaximumPoolSizeWithInt:(jint)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setMaximumPoolSizeWithInt:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setMaximumPoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass intClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setMaximumPoolSizeWithInt:(jint)arg0 {
  [super setMaximumPoolSizeWithInt:arg0];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAllWithJavaUtilCollection:arg0];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAll" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 {
  return [super invokeAllWithJavaUtilCollection:arg0];
}

- (id<JavaUtilConcurrentRunnableFuture>)newTaskForWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                withId:(id)arg1 {
  @try {
    if ($__handler_ == nil) {
      return [super newTaskForWithJavaLangRunnable:arg0 withId:arg1];
    }
    else {
      return (id<JavaUtilConcurrentRunnableFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"newTaskFor" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), NSObject_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]], JavaUtilConcurrentRunnableFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentRunnableFuture>)super$newTaskForWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                      withId:(id)arg1 {
  return [super newTaskForWithJavaLangRunnable:arg0 withId:arg1];
}

- (jint)getPoolSize {
  @try {
    if ($__handler_ == nil) {
      return [super getPoolSize];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getPoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$getPoolSize {
  return [super getPoolSize];
}

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setRemoveOnCancelPolicyWithBoolean:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setRemoveOnCancelPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass booleanClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setRemoveOnCancelPolicyWithBoolean:(jboolean)arg0 {
  [super setRemoveOnCancelPolicyWithBoolean:arg0];
}

- (jlong)getTaskCount {
  @try {
    if ($__handler_ == nil) {
      return [super getTaskCount];
    }
    else {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getTaskCount" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangLong class]))) longLongValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jlong)super$getTaskCount {
  return [super getTaskCount];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                             withLong:(jlong)arg1
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  @try {
    if ($__handler_ == nil) {
      return [super invokeAnyWithJavaUtilCollection:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"invokeAny" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilCollection_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), arg2 } count:3 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangInterruptedException class]]) {
      @throw (JavaLangInterruptedException *) cast_chk(__ttlive, [JavaLangInterruptedException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentExecutionException class]]) {
      @throw (JavaUtilConcurrentExecutionException *) cast_chk(__ttlive, [JavaUtilConcurrentExecutionException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaUtilConcurrentTimeoutException class]]) {
      @throw (JavaUtilConcurrentTimeoutException *) cast_chk(__ttlive, [JavaUtilConcurrentTimeoutException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)arg0
                                   withLong:(jlong)arg1
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  return [super invokeAnyWithJavaUtilCollection:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
}

- (jint)getMaximumPoolSize {
  @try {
    if ($__handler_ == nil) {
      return [super getMaximumPoolSize];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getMaximumPoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$getMaximumPoolSize {
  return [super getMaximumPoolSize];
}

- (void)setCorePoolSizeWithInt:(jint)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setCorePoolSizeWithInt:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setCorePoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass intClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setCorePoolSizeWithInt:(jint)arg0 {
  [super setCorePoolSizeWithInt:arg0];
}

- (jboolean)allowsCoreThreadTimeOut {
  @try {
    if ($__handler_ == nil) {
      return [super allowsCoreThreadTimeOut];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"allowsCoreThreadTimeOut" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$allowsCoreThreadTimeOut {
  return [super allowsCoreThreadTimeOut];
}

- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setThreadFactoryWithJavaUtilConcurrentThreadFactory:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setThreadFactory" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentThreadFactory_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)arg0 {
  [super setThreadFactoryWithJavaUtilConcurrentThreadFactory:arg0];
}

- (void)purge {
  @try {
    if ($__handler_ == nil) {
      [super purge];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"purge" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$purge {
  [super purge];
}

- (id<JavaUtilConcurrentRejectedExecutionHandler>)getRejectedExecutionHandler {
  @try {
    if ($__handler_ == nil) {
      return [super getRejectedExecutionHandler];
    }
    else {
      return (id<JavaUtilConcurrentRejectedExecutionHandler>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getRejectedExecutionHandler" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], JavaUtilConcurrentRejectedExecutionHandler_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentRejectedExecutionHandler>)super$getRejectedExecutionHandler {
  return [super getRejectedExecutionHandler];
}

- (void)setKeepAliveTimeWithLong:(jlong)arg0
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1 {
  @try {
    if ($__handler_ == nil) {
      [super setKeepAliveTimeWithLong:arg0 withJavaUtilConcurrentTimeUnit:arg1];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setKeepAliveTime" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(arg0), arg1 } count:2 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setKeepAliveTimeWithLong:(jlong)arg0
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1 {
  [super setKeepAliveTimeWithLong:arg0 withJavaUtilConcurrentTimeUnit:arg1];
}

- (jlong)getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:arg0];
    }
    else {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getKeepAliveTime" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentTimeUnit_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangLong class]))) longLongValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jlong)super$getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg0 {
  return [super getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:arg0];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                        withLong:(jlong)arg1
                                                                        withLong:(jlong)arg2
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3 {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleAtFixedRateWithJavaLangRunnable:arg0 withLong:arg1 withLong:arg2 withJavaUtilConcurrentTimeUnit:arg3];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"scheduleAtFixedRate" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), [IOSClass longClass], [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:4 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), JavaLangLong_valueOfWithLong_(arg2), arg3 } count:4 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                              withLong:(jlong)arg1
                                                                              withLong:(jlong)arg2
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg3 {
  return [super scheduleAtFixedRateWithJavaLangRunnable:arg0 withLong:arg1 withLong:arg2 withJavaUtilConcurrentTimeUnit:arg3];
}

- (jint)getCorePoolSize {
  @try {
    if ($__handler_ == nil) {
      return [super getCorePoolSize];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getCorePoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$getCorePoolSize {
  return [super getCorePoolSize];
}

- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"setRejectedExecutionHandler" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentRejectedExecutionHandler_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)arg0 {
  [super setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:arg0];
}

- (jint)getLargestPoolSize {
  @try {
    if ($__handler_ == nil) {
      return [super getLargestPoolSize];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getLargestPoolSize" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$getLargestPoolSize {
  return [super getLargestPoolSize];
}

- (jboolean)getContinueExistingPeriodicTasksAfterShutdownPolicy {
  @try {
    if ($__handler_ == nil) {
      return [super getContinueExistingPeriodicTasksAfterShutdownPolicy];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getContinueExistingPeriodicTasksAfterShutdownPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$getContinueExistingPeriodicTasksAfterShutdownPolicy {
  return [super getContinueExistingPeriodicTasksAfterShutdownPolicy];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaUtilConcurrentCallable:arg0];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0 {
  return [super submitWithJavaUtilConcurrentCallable:arg0];
}

- (jboolean)prestartCoreThread {
  @try {
    if ($__handler_ == nil) {
      return [super prestartCoreThread];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"prestartCoreThread" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$prestartCoreThread {
  return [super prestartCoreThread];
}

- (jboolean)getExecuteExistingDelayedTasksAfterShutdownPolicy {
  @try {
    if ($__handler_ == nil) {
      return [super getExecuteExistingDelayedTasksAfterShutdownPolicy];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getExecuteExistingDelayedTasksAfterShutdownPolicy" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$getExecuteExistingDelayedTasksAfterShutdownPolicy {
  return [super getExecuteExistingDelayedTasksAfterShutdownPolicy];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                                       withLong:(jlong)arg1
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  @try {
    if ($__handler_ == nil) {
      return [super scheduleWithJavaUtilConcurrentCallable:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
    }
    else {
      return (id<JavaUtilConcurrentScheduledFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"schedule" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilConcurrentCallable_class_(), [IOSClass longClass], JavaUtilConcurrentTimeUnit_class_() } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangLong_valueOfWithLong_(arg1), arg2 } count:3 type:NSObject_class_()]], JavaUtilConcurrentScheduledFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentScheduledFuture>)super$scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0
                                                                             withLong:(jlong)arg1
                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg2 {
  return [super scheduleWithJavaUtilConcurrentCallable:arg0 withLong:arg1 withJavaUtilConcurrentTimeUnit:arg2];
}

- (void)beforeExecuteWithJavaLangThread:(JavaLangThread *)arg0
                   withJavaLangRunnable:(id<JavaLangRunnable>)arg1 {
  @try {
    if ($__handler_ == nil) {
      [super beforeExecuteWithJavaLangThread:arg0 withJavaLangRunnable:arg1];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"beforeExecute" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangThread_class_(), JavaLangRunnable_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$beforeExecuteWithJavaLangThread:(JavaLangThread *)arg0
                         withJavaLangRunnable:(id<JavaLangRunnable>)arg1 {
  [super beforeExecuteWithJavaLangThread:arg0 withJavaLangRunnable:arg1];
}

- (void)shutdown {
  @try {
    if ($__handler_ == nil) {
      [super shutdown];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"shutdown" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$shutdown {
  [super shutdown];
}

- (jboolean)isTerminating {
  @try {
    if ($__handler_ == nil) {
      return [super isTerminating];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"isTerminating" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$isTerminating {
  return [super isTerminating];
}

- (void)terminated {
  @try {
    if ($__handler_ == nil) {
      [super terminated];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"terminated" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$terminated {
  [super terminated];
}

- (id<JavaUtilList>)shutdownNow {
  @try {
    if ($__handler_ == nil) {
      return [super shutdownNow];
    }
    else {
      return (id<JavaUtilList>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"shutdownNow" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], JavaUtilList_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilList>)super$shutdownNow {
  return [super shutdownNow];
}

- (NSString *)description {
  @try {
    if ($__handler_ == nil) {
      return [super description];
    }
    else {
      return (NSString *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"toString" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (NSString *)super$toString {
  return [super description];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                    withId:(id)arg1 {
  @try {
    if ($__handler_ == nil) {
      return [super submitWithJavaLangRunnable:arg0 withId:arg1];
    }
    else {
      return (id<JavaUtilConcurrentFuture>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"submit" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangRunnable_class_(), NSObject_class_() } count:2 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:NSObject_class_()]], JavaUtilConcurrentFuture_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentFuture>)super$submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                          withId:(id)arg1 {
  return [super submitWithJavaLangRunnable:arg0 withId:arg1];
}

- (jint)prestartAllCoreThreads {
  @try {
    if ($__handler_ == nil) {
      return [super prestartAllCoreThreads];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"prestartAllCoreThreads" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$prestartAllCoreThreads {
  return [super prestartAllCoreThreads];
}

- (jint)getActiveCount {
  @try {
    if ($__handler_ == nil) {
      return [super getActiveCount];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getActiveCount" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$getActiveCount {
  return [super getActiveCount];
}

- (id<JavaUtilConcurrentBlockingQueue>)getQueue {
  @try {
    if ($__handler_ == nil) {
      return [super getQueue];
    }
    else {
      return (id<JavaUtilConcurrentBlockingQueue>) cast_check([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"getQueue" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], JavaUtilConcurrentBlockingQueue_class_());
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id<JavaUtilConcurrentBlockingQueue>)super$getQueue {
  return [super getQueue];
}

- (void)dealloc {
  JreCheckFinalize(self, [JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy class]);
  RELEASE_($__handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectInvocationHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableFuture;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableFuture;", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableScheduledFuture;", 0x4, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableScheduledFuture;", 0x4, 33, 31, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 34, 35, 36, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 37, 35, 36, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 41, 42, 36, -1, -1, -1 },
    { NULL, "Z", 0x1, 43, 42, 36, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 44, 45, 46, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 45, 46, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableScheduledFuture;", 0x4, 30, 48, -1, 49, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableScheduledFuture;", 0x4, 33, 48, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 50, 19, -1, 51, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 52, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 53, 54, -1, 55, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 56, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 34, 45, 36, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 37, 45, 36, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableFuture;", 0x4, 10, 59, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRunnableFuture;", 0x4, 12, 59, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 44, 35, 62, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 35, 62, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRejectedExecutionHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentRejectedExecutionHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 42, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 70, 71, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 72, 71, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 73, 54, -1, 55, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 74, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 76, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 76, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 50, 11, -1, 78, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 52, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 14, 79, -1, 80, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x1, 17, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 81, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 83, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 84, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 85, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 50, 59, -1, 86, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 52, 59, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentBlockingQueue;", 0x1, -1, -1, -1, 87, -1, -1 },
    { NULL, "LJavaUtilConcurrentBlockingQueue;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withJavaUtilConcurrentThreadFactory:);
  methods[2].selector = @selector(initWithInt:withJavaUtilConcurrentRejectedExecutionHandler:);
  methods[3].selector = @selector(initWithInt:withJavaUtilConcurrentThreadFactory:withJavaUtilConcurrentRejectedExecutionHandler:);
  methods[4].selector = @selector(getHandler);
  methods[5].selector = @selector(setHandlerWithJavaLangReflectInvocationHandler:);
  methods[6].selector = @selector(clone);
  methods[7].selector = @selector(super$clone);
  methods[8].selector = @selector(isShutdown);
  methods[9].selector = @selector(super$isShutdown);
  methods[10].selector = @selector(afterExecuteWithJavaLangRunnable:withNSException:);
  methods[11].selector = @selector(super$afterExecuteWithJavaLangRunnable:withNSException:);
  methods[12].selector = @selector(newTaskForWithJavaUtilConcurrentCallable:);
  methods[13].selector = @selector(super$newTaskForWithJavaUtilConcurrentCallable:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(super$hashCode);
  methods[16].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[17].selector = @selector(super$scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[18].selector = @selector(removeWithJavaLangRunnable:);
  methods[19].selector = @selector(super$removeWithJavaLangRunnable:);
  methods[20].selector = @selector(setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:);
  methods[21].selector = @selector(super$setContinueExistingPeriodicTasksAfterShutdownPolicyWithBoolean:);
  methods[22].selector = @selector(allowCoreThreadTimeOutWithBoolean:);
  methods[23].selector = @selector(super$allowCoreThreadTimeOutWithBoolean:);
  methods[24].selector = @selector(executeWithJavaLangRunnable:);
  methods[25].selector = @selector(super$executeWithJavaLangRunnable:);
  methods[26].selector = @selector(getThreadFactory);
  methods[27].selector = @selector(super$getThreadFactory);
  methods[28].selector = @selector(setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:);
  methods[29].selector = @selector(super$setExecuteExistingDelayedTasksAfterShutdownPolicyWithBoolean:);
  methods[30].selector = @selector(getRemoveOnCancelPolicy);
  methods[31].selector = @selector(super$getRemoveOnCancelPolicy);
  methods[32].selector = @selector(decorateTaskWithJavaUtilConcurrentCallable:withJavaUtilConcurrentRunnableScheduledFuture:);
  methods[33].selector = @selector(super$decorateTaskWithJavaUtilConcurrentCallable:withJavaUtilConcurrentRunnableScheduledFuture:);
  methods[34].selector = @selector(invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[35].selector = @selector(super$invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[36].selector = @selector(isTerminated);
  methods[37].selector = @selector(super$isTerminated);
  methods[38].selector = @selector(getCompletedTaskCount);
  methods[39].selector = @selector(super$getCompletedTaskCount);
  methods[40].selector = @selector(isEqual:);
  methods[41].selector = @selector(super$equalsWithId:);
  methods[42].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[43].selector = @selector(super$awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[44].selector = @selector(invokeAnyWithJavaUtilCollection:);
  methods[45].selector = @selector(super$invokeAnyWithJavaUtilCollection:);
  methods[46].selector = @selector(decorateTaskWithJavaLangRunnable:withJavaUtilConcurrentRunnableScheduledFuture:);
  methods[47].selector = @selector(super$decorateTaskWithJavaLangRunnable:withJavaUtilConcurrentRunnableScheduledFuture:);
  methods[48].selector = @selector(submitWithJavaLangRunnable:);
  methods[49].selector = @selector(super$submitWithJavaLangRunnable:);
  methods[50].selector = @selector(scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[51].selector = @selector(super$scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[52].selector = @selector(setMaximumPoolSizeWithInt:);
  methods[53].selector = @selector(super$setMaximumPoolSizeWithInt:);
  methods[54].selector = @selector(invokeAllWithJavaUtilCollection:);
  methods[55].selector = @selector(super$invokeAllWithJavaUtilCollection:);
  methods[56].selector = @selector(newTaskForWithJavaLangRunnable:withId:);
  methods[57].selector = @selector(super$newTaskForWithJavaLangRunnable:withId:);
  methods[58].selector = @selector(getPoolSize);
  methods[59].selector = @selector(super$getPoolSize);
  methods[60].selector = @selector(setRemoveOnCancelPolicyWithBoolean:);
  methods[61].selector = @selector(super$setRemoveOnCancelPolicyWithBoolean:);
  methods[62].selector = @selector(getTaskCount);
  methods[63].selector = @selector(super$getTaskCount);
  methods[64].selector = @selector(invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[65].selector = @selector(super$invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[66].selector = @selector(getMaximumPoolSize);
  methods[67].selector = @selector(super$getMaximumPoolSize);
  methods[68].selector = @selector(setCorePoolSizeWithInt:);
  methods[69].selector = @selector(super$setCorePoolSizeWithInt:);
  methods[70].selector = @selector(allowsCoreThreadTimeOut);
  methods[71].selector = @selector(super$allowsCoreThreadTimeOut);
  methods[72].selector = @selector(setThreadFactoryWithJavaUtilConcurrentThreadFactory:);
  methods[73].selector = @selector(super$setThreadFactoryWithJavaUtilConcurrentThreadFactory:);
  methods[74].selector = @selector(purge);
  methods[75].selector = @selector(super$purge);
  methods[76].selector = @selector(getRejectedExecutionHandler);
  methods[77].selector = @selector(super$getRejectedExecutionHandler);
  methods[78].selector = @selector(setKeepAliveTimeWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[79].selector = @selector(super$setKeepAliveTimeWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[80].selector = @selector(getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:);
  methods[81].selector = @selector(super$getKeepAliveTimeWithJavaUtilConcurrentTimeUnit:);
  methods[82].selector = @selector(scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[83].selector = @selector(super$scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[84].selector = @selector(getCorePoolSize);
  methods[85].selector = @selector(super$getCorePoolSize);
  methods[86].selector = @selector(setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:);
  methods[87].selector = @selector(super$setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:);
  methods[88].selector = @selector(getLargestPoolSize);
  methods[89].selector = @selector(super$getLargestPoolSize);
  methods[90].selector = @selector(getContinueExistingPeriodicTasksAfterShutdownPolicy);
  methods[91].selector = @selector(super$getContinueExistingPeriodicTasksAfterShutdownPolicy);
  methods[92].selector = @selector(submitWithJavaUtilConcurrentCallable:);
  methods[93].selector = @selector(super$submitWithJavaUtilConcurrentCallable:);
  methods[94].selector = @selector(prestartCoreThread);
  methods[95].selector = @selector(super$prestartCoreThread);
  methods[96].selector = @selector(getExecuteExistingDelayedTasksAfterShutdownPolicy);
  methods[97].selector = @selector(super$getExecuteExistingDelayedTasksAfterShutdownPolicy);
  methods[98].selector = @selector(scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[99].selector = @selector(super$scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[100].selector = @selector(beforeExecuteWithJavaLangThread:withJavaLangRunnable:);
  methods[101].selector = @selector(super$beforeExecuteWithJavaLangThread:withJavaLangRunnable:);
  methods[102].selector = @selector(shutdown);
  methods[103].selector = @selector(super$shutdown);
  methods[104].selector = @selector(isTerminating);
  methods[105].selector = @selector(super$isTerminating);
  methods[106].selector = @selector(terminated);
  methods[107].selector = @selector(super$terminated);
  methods[108].selector = @selector(shutdownNow);
  methods[109].selector = @selector(super$shutdownNow);
  methods[110].selector = @selector(description);
  methods[111].selector = @selector(super$toString);
  methods[112].selector = @selector(submitWithJavaLangRunnable:withId:);
  methods[113].selector = @selector(super$submitWithJavaLangRunnable:withId:);
  methods[114].selector = @selector(prestartAllCoreThreads);
  methods[115].selector = @selector(super$prestartAllCoreThreads);
  methods[116].selector = @selector(getActiveCount);
  methods[117].selector = @selector(super$getActiveCount);
  methods[118].selector = @selector(getQueue);
  methods[119].selector = @selector(super$getQueue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "$__handler_", "LJavaLangReflectInvocationHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "ILJavaUtilConcurrentThreadFactory;", "ILJavaUtilConcurrentRejectedExecutionHandler;", "ILJavaUtilConcurrentThreadFactory;LJavaUtilConcurrentRejectedExecutionHandler;", "setHandler", "LJavaLangReflectInvocationHandler;", "LJavaLangCloneNotSupportedException;", "afterExecute", "LJavaLangRunnable;LNSException;", "super$afterExecute", "newTaskFor", "LJavaUtilConcurrentCallable;", "super$newTaskFor", "hashCode", "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "super$schedule", "remove", "LJavaLangRunnable;", "super$remove", "setContinueExistingPeriodicTasksAfterShutdownPolicy", "Z", "super$setContinueExistingPeriodicTasksAfterShutdownPolicy", "allowCoreThreadTimeOut", "super$allowCoreThreadTimeOut", "execute", "super$execute", "setExecuteExistingDelayedTasksAfterShutdownPolicy", "super$setExecuteExistingDelayedTasksAfterShutdownPolicy", "decorateTask", "LJavaUtilConcurrentCallable;LJavaUtilConcurrentRunnableScheduledFuture;", "(Ljava/util/concurrent/Callable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "super$decorateTask", "invokeAll", "LJavaUtilCollection;JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "super$invokeAll", "equals", "LNSObject;", "super$equals", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "super$awaitTermination", "invokeAny", "LJavaUtilCollection;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "super$invokeAny", "LJavaLangRunnable;LJavaUtilConcurrentRunnableScheduledFuture;", "(Ljava/lang/Runnable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", "submit", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", "super$submit", "scheduleWithFixedDelay", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "super$scheduleWithFixedDelay", "setMaximumPoolSize", "super$setMaximumPoolSize", "LJavaLangRunnable;LNSObject;", "setRemoveOnCancelPolicy", "super$setRemoveOnCancelPolicy", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "setCorePoolSize", "super$setCorePoolSize", "setThreadFactory", "LJavaUtilConcurrentThreadFactory;", "super$setThreadFactory", "setKeepAliveTime", "super$setKeepAliveTime", "getKeepAliveTime", "LJavaUtilConcurrentTimeUnit;", "super$getKeepAliveTime", "scheduleAtFixedRate", "super$scheduleAtFixedRate", "setRejectedExecutionHandler", "LJavaUtilConcurrentRejectedExecutionHandler;", "super$setRejectedExecutionHandler", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", "beforeExecute", "LJavaLangThread;LJavaLangRunnable;", "super$beforeExecute", "()Ljava/util/List;", "toString", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", "()Ljava/util/concurrent/BlockingQueue;" };
  static const J2ObjcClassInfo _JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy = { "ScheduledThreadPoolExecutor$Moxy", "java.util.concurrent", ptrTable, methods, fields, 7, 0x1, 120, 1, -1, -1, -1, -1, -1 };
  return &_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy;
}

@end

void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0) {
  JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_(self, a0);
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(jint a0) {
  J2OBJC_NEW_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_, a0)
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_(jint a0) {
  J2OBJC_CREATE_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_, a0)
}

void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentThreadFactory> a1) {
  JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(self, a0, a1);
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(jint a0, id<JavaUtilConcurrentThreadFactory> a1) {
  J2OBJC_NEW_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentThreadFactory_, a0, a1)
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_(jint a0, id<JavaUtilConcurrentThreadFactory> a1) {
  J2OBJC_CREATE_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentThreadFactory_, a0, a1)
}

void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1) {
  JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(self, a0, a1);
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1) {
  J2OBJC_NEW_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_, a0, a1)
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentRejectedExecutionHandler> a1) {
  J2OBJC_CREATE_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentRejectedExecutionHandler_, a0, a1)
}

void JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *self, jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2) {
  JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(self, a0, a1, a2);
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *new_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2) {
  J2OBJC_NEW_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_, a0, a1, a2)
}

JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy *create_JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy_initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_(jint a0, id<JavaUtilConcurrentThreadFactory> a1, id<JavaUtilConcurrentRejectedExecutionHandler> a2) {
  J2OBJC_CREATE_IMPL(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy, initWithInt_withJavaUtilConcurrentThreadFactory_withJavaUtilConcurrentRejectedExecutionHandler_, a0, a1, a2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaUtilConcurrentScheduledThreadPoolExecutor_Moxy)
