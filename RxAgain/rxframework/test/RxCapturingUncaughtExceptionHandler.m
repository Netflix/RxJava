//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/CapturingUncaughtExceptionHandler.java
//

#include "J2ObjC_source.h"
#include "RxCapturingUncaughtExceptionHandler.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/CountDownLatch.h"

@implementation RxCapturingUncaughtExceptionHandler

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e {
  count_++;
  JreStrongAssign(&caught_, e);
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(completed_)) countDown];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxCapturingUncaughtExceptionHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(caught_);
  RELEASE_(completed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "caught_", "LNSException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "completed_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "uncaughtException", "LJavaLangThread;LNSException;" };
  static const J2ObjcClassInfo _RxCapturingUncaughtExceptionHandler = { "CapturingUncaughtExceptionHandler", "rx", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, -1, -1 };
  return &_RxCapturingUncaughtExceptionHandler;
}

@end

void RxCapturingUncaughtExceptionHandler_init(RxCapturingUncaughtExceptionHandler *self) {
  NSObject_init(self);
  self->count_ = 0;
  JreStrongAssignAndConsume(&self->completed_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

RxCapturingUncaughtExceptionHandler *new_RxCapturingUncaughtExceptionHandler_init() {
  J2OBJC_NEW_IMPL(RxCapturingUncaughtExceptionHandler, init)
}

RxCapturingUncaughtExceptionHandler *create_RxCapturingUncaughtExceptionHandler_init() {
  J2OBJC_CREATE_IMPL(RxCapturingUncaughtExceptionHandler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxCapturingUncaughtExceptionHandler)
