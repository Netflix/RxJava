//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/ExceptionUtilsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxInternalUtilExceptionUtilsTest.h"
#include "RxInternalUtilExceptionsUtils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$3();

@implementation RxInternalUtilExceptionUtilsTest

- (void)addToTerminatedFalse {
  RxInternalUtilExceptionsUtils_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_);
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilExceptionsUtils_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withNSException_(error_, create_RxExceptionsTestException_init()));
}

- (void)doubleTerminate {
  OrgJunitAssert_assertNullWithId_(RxInternalUtilExceptionsUtils_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_));
  OrgJunitAssert_assertNotNullWithId_(RxInternalUtilExceptionsUtils_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_));
}

- (void)isTerminated {
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithJavaUtilConcurrentAtomicAtomicReference_(error_));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithNSException_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get]));
  RxInternalUtilExceptionsUtils_addThrowableWithJavaUtilConcurrentAtomicAtomicReference_withNSException_(error_, create_RxExceptionsTestException_init());
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithJavaUtilConcurrentAtomicAtomicReference_(error_));
  OrgJunitAssert_assertFalseWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithNSException_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get]));
  RxInternalUtilExceptionsUtils_terminateWithJavaUtilConcurrentAtomicAtomicReference_(error_);
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithJavaUtilConcurrentAtomicAtomicReference_(error_));
  OrgJunitAssert_assertTrueWithBoolean_(RxInternalUtilExceptionsUtils_isTerminatedWithNSException_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(error_)) get]));
}

- (void)utilityEnum {
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, ((IOSObjectArray *) nil_chk(RxInternalUtilExceptionsUtils_values()))->size_);
  @try {
    RxInternalUtilExceptionsUtils_valueOfWithNSString_(@"INSTANCE");
    OrgJunitAssert_failWithNSString_(@"Failed to throw IllegalArgumentException");
  }
  @catch (JavaLangIllegalArgumentException *ex) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilExceptionUtilsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addToTerminatedFalse);
  methods[1].selector = @selector(doubleTerminate);
  methods[2].selector = @selector(isTerminated);
  methods[3].selector = @selector(utilityEnum);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalUtilExceptionUtilsTest__Annotations$0, (void *)&RxInternalUtilExceptionUtilsTest__Annotations$1, (void *)&RxInternalUtilExceptionUtilsTest__Annotations$2, (void *)&RxInternalUtilExceptionUtilsTest__Annotations$3, "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalUtilExceptionUtilsTest = { "ExceptionUtilsTest", "rx.internal.util", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilExceptionUtilsTest;
}

@end

void RxInternalUtilExceptionUtilsTest_init(RxInternalUtilExceptionUtilsTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->error_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

RxInternalUtilExceptionUtilsTest *new_RxInternalUtilExceptionUtilsTest_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilExceptionUtilsTest, init)
}

RxInternalUtilExceptionUtilsTest *create_RxInternalUtilExceptionUtilsTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilExceptionUtilsTest, init)
}

IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilExceptionUtilsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilExceptionUtilsTest)
