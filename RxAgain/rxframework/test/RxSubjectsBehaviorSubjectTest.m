//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/BehaviorSubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsBehaviorSubject.h"
#include "RxSubjectsBehaviorSubjectTest.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxSubjectsBehaviorSubjectTest () {
 @public
  NSException *testException_;
}

@end

J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest, testException_, NSException *)

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$25();

@interface RxSubjectsBehaviorSubjectTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBehaviorSubjectTest_$1)

__attribute__((unused)) static void RxSubjectsBehaviorSubjectTest_$1_init(RxSubjectsBehaviorSubjectTest_$1 *self);

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$1 *new_RxSubjectsBehaviorSubjectTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$1 *create_RxSubjectsBehaviorSubjectTest_$1_init();

@interface RxSubjectsBehaviorSubjectTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxSubjectsBehaviorSubject *val$rs_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                           withRxSubjectsBehaviorSubject:(RxSubjectsBehaviorSubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBehaviorSubjectTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest_$2, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest_$2, val$rs_, RxSubjectsBehaviorSubject *)

__attribute__((unused)) static void RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubjectTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1);

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$2 *new_RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$2 *create_RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1);

@interface RxSubjectsBehaviorSubjectTest_$3 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$o_;
  JavaUtilConcurrentCountDownLatch *val$finish_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBehaviorSubjectTest_$3)

J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest_$3, val$o_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest_$3, val$finish_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubjectsBehaviorSubjectTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$3 *new_RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$3 *create_RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSubjectsBehaviorSubjectTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubjectsBehaviorSubject *val$rs_;
}

- (void)call;

- (instancetype)initWithRxSubjectsBehaviorSubject:(RxSubjectsBehaviorSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsBehaviorSubjectTest_$4)

J2OBJC_FIELD_SETTER(RxSubjectsBehaviorSubjectTest_$4, val$rs_, RxSubjectsBehaviorSubject *)

__attribute__((unused)) static void RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubjectTest_$4 *self, RxSubjectsBehaviorSubject *capture$0);

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$4 *new_RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsBehaviorSubjectTest_$4 *create_RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubject *capture$0);

@implementation RxSubjectsBehaviorSubjectTest

- (void)testThatObserverReceivesDefaultValueAndSubsequentEvents {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"default"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testThatObserverReceivesLatestAndThenSubsequentEvents {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) onNextWithId:@"one"];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:observer];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testSubscribeThenOnComplete {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"default"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testSubscribeToCompletedOnlyEmitsOnComplete {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) onNextWithId:@"one"];
  [subject onCompleted];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testSubscribeToErrorOnlyEmitsOnError {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) onNextWithId:@"one"];
  JavaLangRuntimeException *re = create_JavaLangRuntimeException_initWithNSString_(@"test error");
  [subject onErrorWithNSException:re];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:re];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testCompletedStopsEmittingData {
  RxSubjectsBehaviorSubject *channel = RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(2013));
  id<RxObserver> observerA = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerB = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerC = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> a = [((RxSubjectsBehaviorSubject *) nil_chk(channel)) subscribeWithRxObserver:observerA];
  [channel subscribeWithRxObserver:observerB];
  id<OrgMockitoInOrder> inOrderA = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerA } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderB = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerB } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderC = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerC } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderA)) verifyWithId:observerA])) onNextWithId:JavaLangInteger_valueOfWithInt_(2013)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderB)) verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(2013)];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([inOrderA verifyWithId:observerA])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxSubscription>) nil_chk(a)) unsubscribe];
  [inOrderA verifyNoMoreInteractions];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [channel onCompleted];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onCompleted];
  [channel subscribeWithRxObserver:observerC];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderC)) verifyWithId:observerC])) onCompleted];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(13)];
  [inOrderB verifyNoMoreInteractions];
  [inOrderC verifyNoMoreInteractions];
}

- (void)testCompletedAfterErrorIsNotSent {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onErrorWithNSException:testException_];
  [subject onNextWithId:@"two"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"default"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException_];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)testCompletedAfterErrorIsNotSent2 {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onErrorWithNSException:testException_];
  [subject onNextWithId:@"two"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"default"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException_];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:o2];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException_];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o2 } count:1 type:NSObject_class_()]);
}

- (void)testCompletedAfterErrorIsNotSent3 {
  RxSubjectsBehaviorSubject *subject = RxSubjectsBehaviorSubject_createWithId_(@"default");
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onCompleted];
  [subject onNextWithId:@"two"];
  [subject onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"default"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:o2];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o2 } count:1 type:NSObject_class_()]);
}

- (void)testUnsubscriptionCase {
  RxSubjectsBehaviorSubject *src = RxSubjectsBehaviorSubject_createWithId_(nil);
  for (jint i = 0; i < 10; i++) {
    id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
    NSString *v = JreStrcat("I", i);
    [((RxSubjectsBehaviorSubject *) nil_chk(src)) onNextWithId:v];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"Turn: %d%n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([src first])) flatMapWithRxFunctionsFunc1:create_RxSubjectsBehaviorSubjectTest_$1_init()])) subscribeWithRxObserver:o];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JreStrcat("$$$", v, @", ", v)];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testStartEmpty {
  RxSubjectsBehaviorSubject *source = RxSubjectsBehaviorSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxSubjectsBehaviorSubject *) nil_chk(source)) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onCompleted];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testStartEmptyThenAddOne {
  RxSubjectsBehaviorSubject *source = RxSubjectsBehaviorSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxSubjectsBehaviorSubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onCompleted];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testStartEmptyCompleteWithOne {
  RxSubjectsBehaviorSubject *source = RxSubjectsBehaviorSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsBehaviorSubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onCompleted];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
}

- (void)testTakeOneSubscriber {
  RxSubjectsBehaviorSubject *source = RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(1));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxSubjectsBehaviorSubject *) nil_chk(source)) takeWithInt:1])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [source subscriberCount]);
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
}

- (void)testOnErrorThrowsDoesntPreventDelivery {
  RxSubjectsBehaviorSubject *ps = RxSubjectsBehaviorSubject_create();
  [((RxSubjectsBehaviorSubject *) nil_chk(ps)) subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *e) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testOnErrorThrowsDoesntPreventDelivery2 {
  RxSubjectsBehaviorSubject *ps = RxSubjectsBehaviorSubject_create();
  [((RxSubjectsBehaviorSubject *) nil_chk(ps)) subscribe];
  [ps subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  [ps subscribe];
  [ps subscribe];
  [ps subscribe];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size]);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testEmissionSubscriptionRace {
  RxScheduler *s = RxSchedulersSchedulers_io();
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  @try {
    for (jint i = 0; i < 50000; i++) {
      if (i % 1000 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:i];
      }
      RxSubjectsBehaviorSubject *rs = RxSubjectsBehaviorSubject_create();
      JavaUtilConcurrentCountDownLatch *finish = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
      JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
      [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:create_RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(start, rs)];
      JavaUtilConcurrentAtomicAtomicReference *o = create_JavaUtilConcurrentAtomicAtomicReference_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsBehaviorSubject *) nil_chk(rs)) subscribeOnWithRxScheduler:s])) observeOnWithRxScheduler:RxSchedulersSchedulers_io()])) subscribeWithRxObserver:create_RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(o, finish)];
      [start countDown];
      if (![finish awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[o get]];
        [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[rs hasObservers]];
        [rs onCompleted];
        OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"Timeout @ ", i));
        break;
      }
      else {
        OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [o get]);
        [worker scheduleWithRxFunctionsAction0:create_RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(rs)];
      }
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(worker)) unsubscribe];
  }
}

- (void)testCurrentStateMethodsNormalEmptyStart {
  RxSubjectsBehaviorSubject *as = RxSubjectsBehaviorSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsBehaviorSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsNormalSomeStart {
  RxSubjectsBehaviorSubject *as = RxSubjectsBehaviorSubject_createWithId_(JavaLangInteger_valueOfWithInt_(1));
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsBehaviorSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertTrueWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(2), [as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsEmpty {
  RxSubjectsBehaviorSubject *as = RxSubjectsBehaviorSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsBehaviorSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsError {
  RxSubjectsBehaviorSubject *as = RxSubjectsBehaviorSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsBehaviorSubject *) nil_chk(as)) hasValue]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertFalseWithBoolean_([as hasValue]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([[as getThrowable] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testBehaviorSubjectValueRelay {
  RxSubjectsBehaviorSubject *async = RxSubjectsBehaviorSubject_create();
  [((RxSubjectsBehaviorSubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [async onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testBehaviorSubjectValueRelayIncomplete {
  RxSubjectsBehaviorSubject *async = RxSubjectsBehaviorSubject_create();
  [((RxSubjectsBehaviorSubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testBehaviorSubjectIncompleteEmpty {
  RxSubjectsBehaviorSubject *async = RxSubjectsBehaviorSubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsBehaviorSubject *) nil_chk(async)) hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testBehaviorSubjectEmpty {
  RxSubjectsBehaviorSubject *async = RxSubjectsBehaviorSubject_create();
  [((RxSubjectsBehaviorSubject *) nil_chk(async)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testBehaviorSubjectError {
  RxSubjectsBehaviorSubject *async = RxSubjectsBehaviorSubject_create();
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  [((RxSubjectsBehaviorSubject *) nil_chk(async)) onErrorWithNSException:te];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertSameWithId_withId_(te, [async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsBehaviorSubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(testException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, 16, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testThatObserverReceivesDefaultValueAndSubsequentEvents);
  methods[1].selector = @selector(testThatObserverReceivesLatestAndThenSubsequentEvents);
  methods[2].selector = @selector(testSubscribeThenOnComplete);
  methods[3].selector = @selector(testSubscribeToCompletedOnlyEmitsOnComplete);
  methods[4].selector = @selector(testSubscribeToErrorOnlyEmitsOnError);
  methods[5].selector = @selector(testCompletedStopsEmittingData);
  methods[6].selector = @selector(testCompletedAfterErrorIsNotSent);
  methods[7].selector = @selector(testCompletedAfterErrorIsNotSent2);
  methods[8].selector = @selector(testCompletedAfterErrorIsNotSent3);
  methods[9].selector = @selector(testUnsubscriptionCase);
  methods[10].selector = @selector(testStartEmpty);
  methods[11].selector = @selector(testStartEmptyThenAddOne);
  methods[12].selector = @selector(testStartEmptyCompleteWithOne);
  methods[13].selector = @selector(testTakeOneSubscriber);
  methods[14].selector = @selector(testOnErrorThrowsDoesntPreventDelivery);
  methods[15].selector = @selector(testOnErrorThrowsDoesntPreventDelivery2);
  methods[16].selector = @selector(testEmissionSubscriptionRace);
  methods[17].selector = @selector(testCurrentStateMethodsNormalEmptyStart);
  methods[18].selector = @selector(testCurrentStateMethodsNormalSomeStart);
  methods[19].selector = @selector(testCurrentStateMethodsEmpty);
  methods[20].selector = @selector(testCurrentStateMethodsError);
  methods[21].selector = @selector(testBehaviorSubjectValueRelay);
  methods[22].selector = @selector(testBehaviorSubjectValueRelayIncomplete);
  methods[23].selector = @selector(testBehaviorSubjectIncompleteEmpty);
  methods[24].selector = @selector(testBehaviorSubjectEmpty);
  methods[25].selector = @selector(testBehaviorSubjectError);
  methods[26].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testException_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubjectsBehaviorSubjectTest__Annotations$0, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$1, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$2, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$3, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$4, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$5, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$6, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$7, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$8, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$9, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$10, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$11, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$12, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$13, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$14, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$15, "LJavaLangException;", (void *)&RxSubjectsBehaviorSubjectTest__Annotations$16, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$17, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$18, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$19, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$20, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$21, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$22, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$23, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$24, (void *)&RxSubjectsBehaviorSubjectTest__Annotations$25 };
  static const J2ObjcClassInfo _RxSubjectsBehaviorSubjectTest = { "BehaviorSubjectTest", "rx.subjects", ptrTable, methods, fields, 7, 0x1, 27, 1, -1, -1, -1, -1, -1 };
  return &_RxSubjectsBehaviorSubjectTest;
}

@end

void RxSubjectsBehaviorSubjectTest_init(RxSubjectsBehaviorSubjectTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testException_, new_NSException_init());
}

RxSubjectsBehaviorSubjectTest *new_RxSubjectsBehaviorSubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsBehaviorSubjectTest, init)
}

RxSubjectsBehaviorSubjectTest *create_RxSubjectsBehaviorSubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsBehaviorSubjectTest, init)
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsBehaviorSubjectTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsBehaviorSubjectTest)

@implementation RxSubjectsBehaviorSubjectTest_$1

- (RxObservable *)callWithId:(NSString *)t1 {
  return RxObservable_justWithId_(JreStrcat("$$$", t1, @", ", t1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsBehaviorSubjectTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxSubjectsBehaviorSubjectTest;", "testUnsubscriptionCase", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsBehaviorSubjectTest_$1 = { "", "rx.subjects", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSubjectsBehaviorSubjectTest_$1;
}

@end

void RxSubjectsBehaviorSubjectTest_$1_init(RxSubjectsBehaviorSubjectTest_$1 *self) {
  NSObject_init(self);
}

RxSubjectsBehaviorSubjectTest_$1 *new_RxSubjectsBehaviorSubjectTest_$1_init() {
  J2OBJC_NEW_IMPL(RxSubjectsBehaviorSubjectTest_$1, init)
}

RxSubjectsBehaviorSubjectTest_$1 *create_RxSubjectsBehaviorSubjectTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsBehaviorSubjectTest_$1, init)
}

@implementation RxSubjectsBehaviorSubjectTest_$2

- (void)call {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
  }
  [((RxSubjectsBehaviorSubject *) nil_chk(val$rs_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                           withRxSubjectsBehaviorSubject:(RxSubjectsBehaviorSubject *)capture$1 {
  RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$rs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubjectsBehaviorSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$rs_", "LRxSubjectsBehaviorSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubjectsBehaviorSubject;", "(Ljava/util/concurrent/CountDownLatch;Lrx/subjects/BehaviorSubject<Ljava/lang/Object;>;)V", "Lrx/subjects/BehaviorSubject<Ljava/lang/Object;>;", "LRxSubjectsBehaviorSubjectTest;", "testEmissionSubscriptionRace" };
  static const J2ObjcClassInfo _RxSubjectsBehaviorSubjectTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSubjectsBehaviorSubjectTest_$2;
}

@end

void RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubjectTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$rs_, capture$1);
  NSObject_init(self);
}

RxSubjectsBehaviorSubjectTest_$2 *new_RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsBehaviorSubjectTest_$2, initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_, capture$0, capture$1)
}

RxSubjectsBehaviorSubjectTest_$2 *create_RxSubjectsBehaviorSubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsBehaviorSubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsBehaviorSubjectTest_$2, initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsBehaviorSubject_, capture$0, capture$1)
}

@implementation RxSubjectsBehaviorSubjectTest_$3

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:JavaLangInteger_valueOfWithInt_(-1)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (void)onNextWithId:(id)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:t];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  RELEASE_(val$finish_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$finish_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "LRxSubjectsBehaviorSubjectTest;", "testEmissionSubscriptionRace", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSubjectsBehaviorSubjectTest_$3 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxSubjectsBehaviorSubjectTest_$3;
}

@end

void RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubjectsBehaviorSubjectTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$o_, capture$0);
  JreStrongAssign(&self->val$finish_, capture$1);
  NSObject_init(self);
}

RxSubjectsBehaviorSubjectTest_$3 *new_RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsBehaviorSubjectTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSubjectsBehaviorSubjectTest_$3 *create_RxSubjectsBehaviorSubjectTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsBehaviorSubjectTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSubjectsBehaviorSubjectTest_$4

- (void)call {
  [((RxSubjectsBehaviorSubject *) nil_chk(val$rs_)) onCompleted];
}

- (instancetype)initWithRxSubjectsBehaviorSubject:(RxSubjectsBehaviorSubject *)capture$0 {
  RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$rs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsBehaviorSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$rs_", "LRxSubjectsBehaviorSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsBehaviorSubject;", "(Lrx/subjects/BehaviorSubject<Ljava/lang/Object;>;)V", "Lrx/subjects/BehaviorSubject<Ljava/lang/Object;>;", "LRxSubjectsBehaviorSubjectTest;", "testEmissionSubscriptionRace" };
  static const J2ObjcClassInfo _RxSubjectsBehaviorSubjectTest_$4 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubjectsBehaviorSubjectTest_$4;
}

@end

void RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubjectTest_$4 *self, RxSubjectsBehaviorSubject *capture$0) {
  JreStrongAssign(&self->val$rs_, capture$0);
  NSObject_init(self);
}

RxSubjectsBehaviorSubjectTest_$4 *new_RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsBehaviorSubjectTest_$4, initWithRxSubjectsBehaviorSubject_, capture$0)
}

RxSubjectsBehaviorSubjectTest_$4 *create_RxSubjectsBehaviorSubjectTest_$4_initWithRxSubjectsBehaviorSubject_(RxSubjectsBehaviorSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsBehaviorSubjectTest_$4, initWithRxSubjectsBehaviorSubject_, capture$0)
}
