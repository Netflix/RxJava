//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observables/ConnectableObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc0.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObservablesConnectableObservableTest.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$3();

@interface RxObservablesConnectableObservableTest_$1 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$run_;
}

- (RxObservable *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$1)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$1, val$run_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$1 *new_RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$1 *create_RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesConnectableObservableTest_$2 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$run_;
}

- (RxObservable *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$2)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$2, val$run_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$2 *new_RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$2 *create_RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesConnectableObservableTest_$3 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$run_;
}

- (RxObservable *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$3)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$3, val$run_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$3 *new_RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$3 *create_RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesConnectableObservableTest_$4 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$run_;
}

- (RxObservable *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$4)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$4, val$run_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$4 *new_RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$4 *create_RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesConnectableObservableTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$conn_;
}

- (void)callWithId:(id<RxSubscription>)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$5)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$5, val$conn_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesConnectableObservableTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$5 *new_RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$5 *create_RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObservablesConnectableObservableTest_$6 : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$conn_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservableTest_$6)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservableTest_$6, val$conn_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesConnectableObservableTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservableTest_$6 *new_RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservableTest_$6 *create_RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@implementation RxObservablesConnectableObservableTest

- (void)testAutoConnect {
  JavaUtilConcurrentAtomicAtomicInteger *run = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_deferWithRxFunctionsFunc0_(create_RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(run)))) publish];
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk(co)) autoConnect];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [run get]);
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertCompleted];
  [ts1 assertNoErrors];
  [ts1 assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  [source subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertNotCompleted];
  [ts2 assertNoErrors];
  [ts2 assertNoValues];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
}

- (void)testAutoConnect0 {
  JavaUtilConcurrentAtomicAtomicInteger *run = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_deferWithRxFunctionsFunc0_(create_RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(run)))) publish];
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk(co)) autoConnectWithInt:0];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertNotCompleted];
  [ts1 assertNoErrors];
  [ts1 assertNoValues];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  [source subscribeWithRxSubscriber:ts2];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertNotCompleted];
  [ts2 assertNoErrors];
  [ts2 assertNoValues];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
}

- (void)testAutoConnect2 {
  JavaUtilConcurrentAtomicAtomicInteger *run = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_deferWithRxFunctionsFunc0_(create_RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(run)))) publish];
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk(co)) autoConnectWithInt:2];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [run get]);
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts1];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertNotCompleted];
  [ts1 assertNoErrors];
  [ts1 assertNoValues];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [run get]);
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  [source subscribeWithRxSubscriber:ts2];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [run get]);
  [ts1 assertCompleted];
  [ts1 assertNoErrors];
  [ts1 assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertCompleted];
  [ts2 assertNoErrors];
  [ts2 assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)testAutoConnectUnsubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *run = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservablesConnectableObservable *co = [((RxObservable *) nil_chk(RxObservable_deferWithRxFunctionsFunc0_(create_RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(run)))) publish];
  JavaUtilConcurrentAtomicAtomicReference *conn = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *source = [((RxObservablesConnectableObservable *) nil_chk(co)) autoConnectWithInt:1 withRxFunctionsAction1:create_RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(conn)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [run get]);
  RxObserversTestSubscriber *ts = create_RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(conn);
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts assertNotCompleted];
  [ts assertNoErrors];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Connection not unsubscribed?", [((id<RxSubscription>) nil_chk([conn get])) isUnsubscribed]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesConnectableObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testAutoConnect);
  methods[1].selector = @selector(testAutoConnect0);
  methods[2].selector = @selector(testAutoConnect2);
  methods[3].selector = @selector(testAutoConnectUnsubscribe);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObservablesConnectableObservableTest__Annotations$0, (void *)&RxObservablesConnectableObservableTest__Annotations$1, (void *)&RxObservablesConnectableObservableTest__Annotations$2, (void *)&RxObservablesConnectableObservableTest__Annotations$3 };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest = { "ConnectableObservableTest", "rx.observables", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxObservablesConnectableObservableTest;
}

@end

void RxObservablesConnectableObservableTest_init(RxObservablesConnectableObservableTest *self) {
  NSObject_init(self);
}

RxObservablesConnectableObservableTest *new_RxObservablesConnectableObservableTest_init() {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest, init)
}

RxObservablesConnectableObservableTest *create_RxObservablesConnectableObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest, init)
}

IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesConnectableObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesConnectableObservableTest)

@implementation RxObservablesConnectableObservableTest_$1

- (RxObservable *)call {
  return RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$run_)) incrementAndGet]));
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesConnectableObservableTest;", "testAutoConnect", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxObservablesConnectableObservableTest_$1;
}

@end

void RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxObservablesConnectableObservableTest_$1 *new_RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesConnectableObservableTest_$1 *create_RxObservablesConnectableObservableTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesConnectableObservableTest_$2

- (RxObservable *)call {
  return RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$run_)) incrementAndGet]));
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesConnectableObservableTest;", "testAutoConnect0", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$2 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxObservablesConnectableObservableTest_$2;
}

@end

void RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxObservablesConnectableObservableTest_$2 *new_RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesConnectableObservableTest_$2 *create_RxObservablesConnectableObservableTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesConnectableObservableTest_$3

- (RxObservable *)call {
  return RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$run_)) incrementAndGet]));
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesConnectableObservableTest;", "testAutoConnect2", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$3 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxObservablesConnectableObservableTest_$3;
}

@end

void RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxObservablesConnectableObservableTest_$3 *new_RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesConnectableObservableTest_$3 *create_RxObservablesConnectableObservableTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesConnectableObservableTest_$4

- (RxObservable *)call {
  return RxObservable_rangeWithInt_withInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$run_)) incrementAndGet], 10);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesConnectableObservableTest;", "testAutoConnectUnsubscribe", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$4 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxObservablesConnectableObservableTest_$4;
}

@end

void RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesConnectableObservableTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$run_, capture$0);
  NSObject_init(self);
}

RxObservablesConnectableObservableTest_$4 *new_RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesConnectableObservableTest_$4 *create_RxObservablesConnectableObservableTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesConnectableObservableTest_$5

- (void)callWithId:(id<RxSubscription>)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$conn_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$conn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$conn_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxObservablesConnectableObservableTest;", "testAutoConnectUnsubscribe", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$5 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservablesConnectableObservableTest_$5;
}

@end

void RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesConnectableObservableTest_$5 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$conn_, capture$0);
  NSObject_init(self);
}

RxObservablesConnectableObservableTest_$5 *new_RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservablesConnectableObservableTest_$5 *create_RxObservablesConnectableObservableTest_$5_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$5, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObservablesConnectableObservableTest_$6

- (void)onNextWithId:(JavaLangInteger *)t {
  [super onNextWithId:t];
  id<RxSubscription> s = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$conn_)) get];
  if (s != nil) {
    [s unsubscribe];
  }
  else {
    [self onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"No connection reference")];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$conn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$conn_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxObservablesConnectableObservableTest;", "testAutoConnectUnsubscribe", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservableTest_$6 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxObservablesConnectableObservableTest_$6;
}

@end

void RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesConnectableObservableTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$conn_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxObservablesConnectableObservableTest_$6 *new_RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservableTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservablesConnectableObservableTest_$6 *create_RxObservablesConnectableObservableTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservableTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}
