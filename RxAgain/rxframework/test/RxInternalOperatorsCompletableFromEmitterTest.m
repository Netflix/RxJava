//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/CompletableFromEmitterTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxAsyncEmitter.h"
#include "RxCompletable.h"
#include "RxCompletableEmitter.h"
#include "RxCompletableSubscriber.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsCompletableFromEmitterTest.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsBooleanSubscription.h"
#include "RxTestUtil.h"
#include "java/io/IOException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$12();

@interface RxInternalOperatorsCompletableFromEmitterTest_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$1)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$1_init(RxInternalOperatorsCompletableFromEmitterTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$1 *new_RxInternalOperatorsCompletableFromEmitterTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$1 *create_RxInternalOperatorsCompletableFromEmitterTest_$1_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$2)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$2_init(RxInternalOperatorsCompletableFromEmitterTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$2 *new_RxInternalOperatorsCompletableFromEmitterTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$2 *create_RxInternalOperatorsCompletableFromEmitterTest_$2_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$3 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$3)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$3_init(RxInternalOperatorsCompletableFromEmitterTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$3 *new_RxInternalOperatorsCompletableFromEmitterTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$3 *create_RxInternalOperatorsCompletableFromEmitterTest_$3_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$4 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$4)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$4_init(RxInternalOperatorsCompletableFromEmitterTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$4 *new_RxInternalOperatorsCompletableFromEmitterTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$4 *create_RxInternalOperatorsCompletableFromEmitterTest_$4_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  RxSubscriptionsBooleanSubscription *val$bs_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$5, val$bs_, RxSubscriptionsBooleanSubscription *)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxInternalOperatorsCompletableFromEmitterTest_$5 *self, RxSubscriptionsBooleanSubscription *capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$5 *new_RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$5 *create_RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  RxSubscriptionsBooleanSubscription *val$bs_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$6, val$bs_, RxSubscriptionsBooleanSubscription *)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxInternalOperatorsCompletableFromEmitterTest_$6 *self, RxSubscriptionsBooleanSubscription *capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$6 *new_RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$6 *create_RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  id<RxAsyncEmitter_Cancellable> val$c_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$7, val$c_, id<RxAsyncEmitter_Cancellable>)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$7 *self, id<RxAsyncEmitter_Cancellable> capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$7 *new_RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$7 *create_RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$8 : NSObject < RxFunctionsAction1 > {
 @public
  id<RxAsyncEmitter_Cancellable> val$c_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$8, val$c_, id<RxAsyncEmitter_Cancellable>)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$8 *self, id<RxAsyncEmitter_Cancellable> capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$8 *new_RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$8 *create_RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$9 : NSObject < RxFunctionsAction1 > {
 @public
  id<RxAsyncEmitter_Cancellable> val$c_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$9, val$c_, id<RxAsyncEmitter_Cancellable>)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$9 *self, id<RxAsyncEmitter_Cancellable> capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$9 *new_RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$9 *create_RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$10 : NSObject < RxCompletableSubscriber >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$10)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$10_init(RxInternalOperatorsCompletableFromEmitterTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$10 *new_RxInternalOperatorsCompletableFromEmitterTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$10 *create_RxInternalOperatorsCompletableFromEmitterTest_$10_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$11 : NSObject < RxFunctionsAction1 > {
 @public
  id<RxAsyncEmitter_Cancellable> val$c_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$11, val$c_, id<RxAsyncEmitter_Cancellable>)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$11 *self, id<RxAsyncEmitter_Cancellable> capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$11 *new_RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$11 *create_RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$12 : NSObject < RxCompletableSubscriber >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$12)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$12_init(RxInternalOperatorsCompletableFromEmitterTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$12 *new_RxInternalOperatorsCompletableFromEmitterTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$12 *create_RxInternalOperatorsCompletableFromEmitterTest_$12_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$13 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$13)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$13_init(RxInternalOperatorsCompletableFromEmitterTest_$13 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$13 *new_RxInternalOperatorsCompletableFromEmitterTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$13 *create_RxInternalOperatorsCompletableFromEmitterTest_$13_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$14 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$14)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$14_init(RxInternalOperatorsCompletableFromEmitterTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$14 *new_RxInternalOperatorsCompletableFromEmitterTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$14 *create_RxInternalOperatorsCompletableFromEmitterTest_$14_init();

@interface RxInternalOperatorsCompletableFromEmitterTest_$15 : NSObject < RxFunctionsAction1 > {
 @public
  IOSObjectArray *val$emitter_;
}

- (void)callWithId:(id<RxCompletableEmitter>)e;

- (instancetype)initWithRxCompletableEmitterArray:(IOSObjectArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$15, val$emitter_, IOSObjectArray *)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(RxInternalOperatorsCompletableFromEmitterTest_$15 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$15 *new_RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$15 *create_RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(IOSObjectArray *capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$16 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxCompletableEmitter> val$e_;
}

- (void)call;

- (instancetype)initWithRxCompletableEmitter:(id<RxCompletableEmitter>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$16, val$e_, id<RxCompletableEmitter>)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(RxInternalOperatorsCompletableFromEmitterTest_$16 *self, id<RxCompletableEmitter> capture$0);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$16 *new_RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(id<RxCompletableEmitter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$16 *create_RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(id<RxCompletableEmitter> capture$0);

@interface RxInternalOperatorsCompletableFromEmitterTest_$17 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxCompletableEmitter> val$e_;
  RxExceptionsTestException *val$ex_;
}

- (void)call;

- (instancetype)initWithRxCompletableEmitter:(id<RxCompletableEmitter>)capture$0
               withRxExceptionsTestException:(RxExceptionsTestException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableFromEmitterTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$17, val$e_, id<RxCompletableEmitter>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableFromEmitterTest_$17, val$ex_, RxExceptionsTestException *)

__attribute__((unused)) static void RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(RxInternalOperatorsCompletableFromEmitterTest_$17 *self, id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1);

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$17 *new_RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableFromEmitterTest_$17 *create_RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1);

@implementation RxInternalOperatorsCompletableFromEmitterTest

- (void)normal {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$1_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)error {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$2_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)ensureProtocol1 {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$3_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)ensureProtocol2 {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$4_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)resourceCleanupNormal {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubscriptionsBooleanSubscription *bs = create_RxSubscriptionsBooleanSubscription_init();
  OrgJunitAssert_assertFalseWithBoolean_([bs isUnsubscribed]);
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(bs)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
  OrgJunitAssert_assertTrueWithBoolean_([bs isUnsubscribed]);
}

- (void)resourceCleanupError {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  RxSubscriptionsBooleanSubscription *bs = create_RxSubscriptionsBooleanSubscription_init();
  OrgJunitAssert_assertFalseWithBoolean_([bs isUnsubscribed]);
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(bs)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
  OrgJunitAssert_assertTrueWithBoolean_([bs isUnsubscribed]);
}

- (void)resourceCleanupCancellable {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  id<RxAsyncEmitter_Cancellable> c = OrgMockitoMockito_mockWithIOSClass_(RxAsyncEmitter_Cancellable_class_());
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(c)))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
  [((id<RxAsyncEmitter_Cancellable>) nil_chk(OrgMockitoMockito_verifyWithId_(c))) cancel];
}

- (void)resourceCleanupUnsubscirbe {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) unsubscribe];
  id<RxAsyncEmitter_Cancellable> c = OrgMockitoMockito_mockWithIOSClass_(RxAsyncEmitter_Cancellable_class_());
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(c)))) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [((id<RxAsyncEmitter_Cancellable>) nil_chk(OrgMockitoMockito_verifyWithId_(c))) cancel];
}

- (void)resourceCleanupOnCompleteCrashes {
  id<RxAsyncEmitter_Cancellable> c = OrgMockitoMockito_mockWithIOSClass_(RxAsyncEmitter_Cancellable_class_());
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(c)))) unsafeSubscribeWithRxCompletableSubscriber:create_RxInternalOperatorsCompletableFromEmitterTest_$10_init()];
  [((id<RxAsyncEmitter_Cancellable>) nil_chk(OrgMockitoMockito_verifyWithId_(c))) cancel];
}

- (void)resourceCleanupOnErrorCrashes {
  id<RxAsyncEmitter_Cancellable> c = OrgMockitoMockito_mockWithIOSClass_(RxAsyncEmitter_Cancellable_class_());
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(c)))) unsafeSubscribeWithRxCompletableSubscriber:create_RxInternalOperatorsCompletableFromEmitterTest_$12_init()];
  [((id<RxAsyncEmitter_Cancellable>) nil_chk(OrgMockitoMockito_verifyWithId_(c))) cancel];
}

- (void)producerCrashes {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$13_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

- (void)producerCrashesAfterSignal {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$14_init()))) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)concurrentUse {
  for (jint i = 0; i < 500; i++) {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    IOSObjectArray *emitter = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:RxCompletableEmitter_class_()];
    [((RxCompletable *) nil_chk(RxCompletable_fromEmitterWithRxFunctionsAction1_(create_RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(emitter)))) subscribeWithRxSubscriber:ts];
    RxExceptionsTestException *ex = create_RxExceptionsTestException_init();
    id<RxCompletableEmitter> e = IOSObjectArray_Get(emitter, 0);
    RxTestUtil_raceWithRxFunctionsAction0_withRxFunctionsAction0_(create_RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(e), create_RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(e, ex));
    if ([((RxObserversTestSubscriber *) nil_chk(ts)) getCompletions] != 0) {
      [ts assertNoValues];
      [ts assertNoErrors];
      [ts assertCompleted];
    }
    if (![((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) isEmpty]) {
      [ts assertNoValues];
      [ts assertErrorWithNSException:ex];
      [ts assertNotCompleted];
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normal);
  methods[1].selector = @selector(error);
  methods[2].selector = @selector(ensureProtocol1);
  methods[3].selector = @selector(ensureProtocol2);
  methods[4].selector = @selector(resourceCleanupNormal);
  methods[5].selector = @selector(resourceCleanupError);
  methods[6].selector = @selector(resourceCleanupCancellable);
  methods[7].selector = @selector(resourceCleanupUnsubscirbe);
  methods[8].selector = @selector(resourceCleanupOnCompleteCrashes);
  methods[9].selector = @selector(resourceCleanupOnErrorCrashes);
  methods[10].selector = @selector(producerCrashes);
  methods[11].selector = @selector(producerCrashesAfterSignal);
  methods[12].selector = @selector(concurrentUse);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$0, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$1, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$2, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$3, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$4, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$5, "LJavaLangException;", (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$6, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$7, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$8, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$9, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$10, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$11, (void *)&RxInternalOperatorsCompletableFromEmitterTest__Annotations$12 };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest = { "CompletableFromEmitterTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 14, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_init(RxInternalOperatorsCompletableFromEmitterTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest *new_RxInternalOperatorsCompletableFromEmitterTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest, init)
}

RxInternalOperatorsCompletableFromEmitterTest *create_RxInternalOperatorsCompletableFromEmitterTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest, init)
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsCompletableFromEmitterTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableFromEmitterTest)

@implementation RxInternalOperatorsCompletableFromEmitterTest_$1

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "normal", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$1;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$1_init(RxInternalOperatorsCompletableFromEmitterTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$1 *new_RxInternalOperatorsCompletableFromEmitterTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$1, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$1 *create_RxInternalOperatorsCompletableFromEmitterTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$1, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$2

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) onErrorWithNSException:create_RxExceptionsTestException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "error", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$2;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$2_init(RxInternalOperatorsCompletableFromEmitterTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$2 *new_RxInternalOperatorsCompletableFromEmitterTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$2, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$2 *create_RxInternalOperatorsCompletableFromEmitterTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$2, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$3

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  [e onCompleted];
  [e onErrorWithNSException:create_JavaIoIOException_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "ensureProtocol1", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$3;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$3_init(RxInternalOperatorsCompletableFromEmitterTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$3 *new_RxInternalOperatorsCompletableFromEmitterTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$3, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$3 *create_RxInternalOperatorsCompletableFromEmitterTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$3, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$4

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) onCompleted];
  [e onErrorWithNSException:create_RxExceptionsTestException_init()];
  [e onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "ensureProtocol2", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$4;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$4_init(RxInternalOperatorsCompletableFromEmitterTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$4 *new_RxInternalOperatorsCompletableFromEmitterTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$4, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$4 *create_RxInternalOperatorsCompletableFromEmitterTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$4, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$5

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setSubscriptionWithRxSubscription:val$bs_];
  [e onCompleted];
}

- (instancetype)initWithRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$bs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscriptionsBooleanSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$bs_", "LRxSubscriptionsBooleanSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxSubscriptionsBooleanSubscription;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupNormal", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$5;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxInternalOperatorsCompletableFromEmitterTest_$5 *self, RxSubscriptionsBooleanSubscription *capture$0) {
  JreStrongAssign(&self->val$bs_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$5 *new_RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$5, initWithRxSubscriptionsBooleanSubscription_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$5 *create_RxInternalOperatorsCompletableFromEmitterTest_$5_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$5, initWithRxSubscriptionsBooleanSubscription_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$6

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setSubscriptionWithRxSubscription:val$bs_];
  [e onErrorWithNSException:create_RxExceptionsTestException_init()];
}

- (instancetype)initWithRxSubscriptionsBooleanSubscription:(RxSubscriptionsBooleanSubscription *)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$bs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubscriptionsBooleanSubscription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$bs_", "LRxSubscriptionsBooleanSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxSubscriptionsBooleanSubscription;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupError", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$6;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxInternalOperatorsCompletableFromEmitterTest_$6 *self, RxSubscriptionsBooleanSubscription *capture$0) {
  JreStrongAssign(&self->val$bs_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$6 *new_RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$6, initWithRxSubscriptionsBooleanSubscription_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$6 *create_RxInternalOperatorsCompletableFromEmitterTest_$6_initWithRxSubscriptionsBooleanSubscription_(RxSubscriptionsBooleanSubscription *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$6, initWithRxSubscriptionsBooleanSubscription_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$7

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setCancellationWithRxAsyncEmitter_Cancellable:val$c_];
  [e onCompleted];
}

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxAsyncEmitter_Cancellable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LRxAsyncEmitter_Cancellable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxAsyncEmitter_Cancellable;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupCancellable", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$7;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$7 *self, id<RxAsyncEmitter_Cancellable> capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$7 *new_RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$7, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$7 *create_RxInternalOperatorsCompletableFromEmitterTest_$7_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$7, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$8

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setCancellationWithRxAsyncEmitter_Cancellable:val$c_];
  [e onCompleted];
}

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxAsyncEmitter_Cancellable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LRxAsyncEmitter_Cancellable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxAsyncEmitter_Cancellable;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupUnsubscirbe", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$8;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$8 *self, id<RxAsyncEmitter_Cancellable> capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$8 *new_RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$8, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$8 *create_RxInternalOperatorsCompletableFromEmitterTest_$8_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$8, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$9

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setCancellationWithRxAsyncEmitter_Cancellable:val$c_];
  [e onCompleted];
}

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxAsyncEmitter_Cancellable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LRxAsyncEmitter_Cancellable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxAsyncEmitter_Cancellable;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupOnCompleteCrashes", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$9;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$9 *self, id<RxAsyncEmitter_Cancellable> capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$9 *new_RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$9, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$9 *create_RxInternalOperatorsCompletableFromEmitterTest_$9_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$9, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$10

- (void)onCompleted {
  @throw create_RxExceptionsTestException_init();
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithRxSubscription:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LRxSubscription;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupOnCompleteCrashes" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$10;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$10_init(RxInternalOperatorsCompletableFromEmitterTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$10 *new_RxInternalOperatorsCompletableFromEmitterTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$10, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$10 *create_RxInternalOperatorsCompletableFromEmitterTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$10, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$11

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) setCancellationWithRxAsyncEmitter_Cancellable:val$c_];
  [e onErrorWithNSException:create_JavaIoIOException_init()];
}

- (instancetype)initWithRxAsyncEmitter_Cancellable:(id<RxAsyncEmitter_Cancellable>)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxAsyncEmitter_Cancellable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LRxAsyncEmitter_Cancellable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxAsyncEmitter_Cancellable;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupOnErrorCrashes", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$11;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(RxInternalOperatorsCompletableFromEmitterTest_$11 *self, id<RxAsyncEmitter_Cancellable> capture$0) {
  JreStrongAssign(&self->val$c_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$11 *new_RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$11, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$11 *create_RxInternalOperatorsCompletableFromEmitterTest_$11_initWithRxAsyncEmitter_Cancellable_(id<RxAsyncEmitter_Cancellable> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$11, initWithRxAsyncEmitter_Cancellable_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$12

- (void)onCompleted {
  @throw create_RxExceptionsTestException_init();
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithRxSubscription:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LRxSubscription;", "LRxInternalOperatorsCompletableFromEmitterTest;", "resourceCleanupOnErrorCrashes" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$12;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$12_init(RxInternalOperatorsCompletableFromEmitterTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$12 *new_RxInternalOperatorsCompletableFromEmitterTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$12, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$12 *create_RxInternalOperatorsCompletableFromEmitterTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$12, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$13

- (void)callWithId:(id<RxCompletableEmitter>)e {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "producerCrashes", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$13 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$13;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$13_init(RxInternalOperatorsCompletableFromEmitterTest_$13 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$13 *new_RxInternalOperatorsCompletableFromEmitterTest_$13_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$13, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$13 *create_RxInternalOperatorsCompletableFromEmitterTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$13, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$14

- (void)callWithId:(id<RxCompletableEmitter>)e {
  [((id<RxCompletableEmitter>) nil_chk(e)) onCompleted];
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsCompletableFromEmitterTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "producerCrashesAfterSignal", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$14;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$14_init(RxInternalOperatorsCompletableFromEmitterTest_$14 *self) {
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$14 *new_RxInternalOperatorsCompletableFromEmitterTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$14, init)
}

RxInternalOperatorsCompletableFromEmitterTest_$14 *create_RxInternalOperatorsCompletableFromEmitterTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$14, init)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$15

- (void)callWithId:(id<RxCompletableEmitter>)e {
  IOSObjectArray_Set(nil_chk(val$emitter_), 0, e);
}

- (instancetype)initWithRxCompletableEmitterArray:(IOSObjectArray *)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$emitter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxCompletableEmitterArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$emitter_", "[LRxCompletableEmitter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxCompletableEmitter;", "[LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "concurrentUse", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/CompletableEmitter;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$15;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(RxInternalOperatorsCompletableFromEmitterTest_$15 *self, IOSObjectArray *capture$0) {
  JreStrongAssign(&self->val$emitter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$15 *new_RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$15, initWithRxCompletableEmitterArray_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$15 *create_RxInternalOperatorsCompletableFromEmitterTest_$15_initWithRxCompletableEmitterArray_(IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$15, initWithRxCompletableEmitterArray_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$16

- (void)call {
  [((id<RxCompletableEmitter>) nil_chk(val$e_)) onCompleted];
}

- (instancetype)initWithRxCompletableEmitter:(id<RxCompletableEmitter>)capture$0 {
  RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableEmitter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LRxCompletableEmitter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableEmitter;", "LRxInternalOperatorsCompletableFromEmitterTest;", "concurrentUse" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$16;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(RxInternalOperatorsCompletableFromEmitterTest_$16 *self, id<RxCompletableEmitter> capture$0) {
  JreStrongAssign(&self->val$e_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$16 *new_RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(id<RxCompletableEmitter> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$16, initWithRxCompletableEmitter_, capture$0)
}

RxInternalOperatorsCompletableFromEmitterTest_$16 *create_RxInternalOperatorsCompletableFromEmitterTest_$16_initWithRxCompletableEmitter_(id<RxCompletableEmitter> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$16, initWithRxCompletableEmitter_, capture$0)
}

@implementation RxInternalOperatorsCompletableFromEmitterTest_$17

- (void)call {
  [((id<RxCompletableEmitter>) nil_chk(val$e_)) onErrorWithNSException:val$ex_];
}

- (instancetype)initWithRxCompletableEmitter:(id<RxCompletableEmitter>)capture$0
               withRxExceptionsTestException:(RxExceptionsTestException *)capture$1 {
  RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e_);
  RELEASE_(val$ex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxCompletableEmitter:withRxExceptionsTestException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LRxCompletableEmitter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ex_", "LRxExceptionsTestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxCompletableEmitter;LRxExceptionsTestException;", "LRxInternalOperatorsCompletableFromEmitterTest;", "concurrentUse" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableFromEmitterTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsCompletableFromEmitterTest_$17;
}

@end

void RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(RxInternalOperatorsCompletableFromEmitterTest_$17 *self, id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1) {
  JreStrongAssign(&self->val$e_, capture$0);
  JreStrongAssign(&self->val$ex_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsCompletableFromEmitterTest_$17 *new_RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$17, initWithRxCompletableEmitter_withRxExceptionsTestException_, capture$0, capture$1)
}

RxInternalOperatorsCompletableFromEmitterTest_$17 *create_RxInternalOperatorsCompletableFromEmitterTest_$17_initWithRxCompletableEmitter_withRxExceptionsTestException_(id<RxCompletableEmitter> capture$0, RxExceptionsTestException *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableFromEmitterTest_$17, initWithRxCompletableEmitter_withRxExceptionsTestException_, capture$0, capture$1)
}
