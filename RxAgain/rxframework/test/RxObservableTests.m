//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ObservableTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservableTests.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserver.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/MockitoAnnotations.h"

inline id<RxFunctionsFunc1> RxObservableTests_get_IS_EVEN();
static id<RxFunctionsFunc1> RxObservableTests_IS_EVEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObservableTests, IS_EVEN, id<RxFunctionsFunc1>)

__attribute__((unused)) static IOSObjectArray *RxObservableTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservableTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservableTests__Annotations$2();

@interface RxObservableTests_FailingObservable_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_FailingObservable_$1)

__attribute__((unused)) static void RxObservableTests_FailingObservable_$1_init(RxObservableTests_FailingObservable_$1 *self);

__attribute__((unused)) static RxObservableTests_FailingObservable_$1 *new_RxObservableTests_FailingObservable_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableTests_FailingObservable_$1 *create_RxObservableTests_FailingObservable_$1_init();

@interface RxObservableTests_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)value;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_$1)

__attribute__((unused)) static void RxObservableTests_$1_init(RxObservableTests_$1 *self);

__attribute__((unused)) static RxObservableTests_$1 *new_RxObservableTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableTests_$1 *create_RxObservableTests_$1_init();

@interface RxObservableTests_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_$2)

J2OBJC_FIELD_SETTER(RxObservableTests_$2, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservableTests_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservableTests_$2 *new_RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableTests_$2 *create_RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservableTests_$2_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObservableTests_$2 *this$0_;
  RxSubscriber *val$observer_;
}

- (void)run;

- (instancetype)initWithRxObservableTests_$2:(RxObservableTests_$2 *)outer$
                            withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_$2_$1)

J2OBJC_FIELD_SETTER(RxObservableTests_$2_$1, this$0_, RxObservableTests_$2 *)
J2OBJC_FIELD_SETTER(RxObservableTests_$2_$1, val$observer_, RxSubscriber *)

__attribute__((unused)) static void RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2_$1 *self, RxObservableTests_$2 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxObservableTests_$2_$1 *new_RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableTests_$2_$1 *create_RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2 *outer$, RxSubscriber *capture$0);

@interface RxObservableTests_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableTests_$3)

J2OBJC_FIELD_SETTER(RxObservableTests_$3, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(RxObservableTests_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxObservableTests_$3 *new_RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableTests_$3 *create_RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

J2OBJC_INITIALIZED_DEFN(RxObservableTests)

@implementation RxObservableTests

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testReplay {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"a1"];
  RxObservablesConnectableObservable *o = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)))) replay];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a2"];
  id<RxSubscription> s = [((RxObservablesConnectableObservable *) nil_chk(o)) connect];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a3"];
  @try {
    JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a4"];
    [o subscribeWithRxFunctionsAction1:create_RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(latch)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a5"];
    if (![latch awaitWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
      OrgJunitAssert_failWithNSString_(@"subscriptions did not receive values");
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a7"];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"a8"];
  }
  @finally {
    [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testReplay);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 3, 4 },
    { "IS_EVEN", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1a, -1, 5, 6, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxObservableTests__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxObservableTests__Annotations$1, "Lrx/Observer<Ljava/lang/Integer;>;", (void *)&RxObservableTests__Annotations$2, &RxObservableTests_IS_EVEN, "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;", "LRxObservableTests_FailingObservable;" };
  static const J2ObjcClassInfo _RxObservableTests = { "ObservableTests", "rx", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, 7, -1, -1, -1 };
  return &_RxObservableTests;
}

+ (void)initialize {
  if (self == [RxObservableTests class]) {
    JreStrongAssignAndConsume(&RxObservableTests_IS_EVEN, new_RxObservableTests_$1_init());
    J2OBJC_SET_INITIALIZED(RxObservableTests)
  }
}

@end

void RxObservableTests_init(RxObservableTests *self) {
  NSObject_init(self);
}

RxObservableTests *new_RxObservableTests_init() {
  J2OBJC_NEW_IMPL(RxObservableTests, init)
}

RxObservableTests *create_RxObservableTests_init() {
  J2OBJC_CREATE_IMPL(RxObservableTests, init)
}

IOSObjectArray *RxObservableTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservableTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservableTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservableTests)

@implementation RxObservableTests_FailingObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableTests_FailingObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservableTests;", "Lrx/Observable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservableTests_FailingObservable = { "FailingObservable", "rx", ptrTable, methods, NULL, 7, 0x18, 1, 0, 0, -1, -1, 1, -1 };
  return &_RxObservableTests_FailingObservable;
}

@end

void RxObservableTests_FailingObservable_init(RxObservableTests_FailingObservable *self) {
  RxObservable_initWithRxObservable_OnSubscribe_(self, create_RxObservableTests_FailingObservable_$1_init());
}

RxObservableTests_FailingObservable *new_RxObservableTests_FailingObservable_init() {
  J2OBJC_NEW_IMPL(RxObservableTests_FailingObservable, init)
}

RxObservableTests_FailingObservable *create_RxObservableTests_FailingObservable_init() {
  J2OBJC_CREATE_IMPL(RxObservableTests_FailingObservable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservableTests_FailingObservable)

@implementation RxObservableTests_FailingObservable_$1

- (void)callWithId:(RxSubscriber *)t {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableTests_FailingObservable_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Object;>;)V", "LRxObservableTests_FailingObservable;", "init", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservableTests_FailingObservable_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservableTests_FailingObservable_$1;
}

@end

void RxObservableTests_FailingObservable_$1_init(RxObservableTests_FailingObservable_$1 *self) {
  NSObject_init(self);
}

RxObservableTests_FailingObservable_$1 *new_RxObservableTests_FailingObservable_$1_init() {
  J2OBJC_NEW_IMPL(RxObservableTests_FailingObservable_$1, init)
}

RxObservableTests_FailingObservable_$1 *create_RxObservableTests_FailingObservable_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservableTests_FailingObservable_$1, init)
}

@implementation RxObservableTests_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)value {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(value)) intValue] % 2 == 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxObservableTests;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxObservableTests_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxObservableTests_$1;
}

@end

void RxObservableTests_$1_init(RxObservableTests_$1 *self) {
  NSObject_init(self);
}

RxObservableTests_$1 *new_RxObservableTests_$1_init() {
  J2OBJC_NEW_IMPL(RxObservableTests_$1, init)
}

RxObservableTests_$1 *create_RxObservableTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservableTests_$1, init)
}

@implementation RxObservableTests_$2

- (void)callWithId:(RxSubscriber *)observer {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(self, observer)) start];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservableTests;", "testReplay", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservableTests_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservableTests_$2;
}

@end

void RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservableTests_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxObservableTests_$2 *new_RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableTests_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservableTests_$2 *create_RxObservableTests_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableTests_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservableTests_$2_$1

- (void)run {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"b1"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$counter_)) incrementAndGet];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"b2"];
  [((RxSubscriber *) nil_chk(val$observer_)) onNextWithId:@"one"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"b3"];
  [val$observer_ onCompleted];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"b4"];
}

- (instancetype)initWithRxObservableTests_$2:(RxObservableTests_$2 *)outer$
                            withRxSubscriber:(RxSubscriber *)capture$0 {
  RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObservableTests_$2:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservableTests_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observer_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObservableTests_$2;LRxSubscriber;", "(Lrx/ObservableTests$2;Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Subscriber<-Ljava/lang/String;>;", "LRxObservableTests_$2;", "callWithId:" };
  static const J2ObjcClassInfo _RxObservableTests_$2_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxObservableTests_$2_$1;
}

@end

void RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2_$1 *self, RxObservableTests_$2 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxObservableTests_$2_$1 *new_RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableTests_$2_$1, initWithRxObservableTests_$2_withRxSubscriber_, outer$, capture$0)
}

RxObservableTests_$2_$1 *create_RxObservableTests_$2_$1_initWithRxObservableTests_$2_withRxSubscriber_(RxObservableTests_$2 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableTests_$2_$1, initWithRxObservableTests_$2_withRxSubscriber_, outer$, capture$0)
}

@implementation RxObservableTests_$3

- (void)callWithId:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"c1"];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", v);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"c2"];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"c3"];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentCountDownLatch;", "LRxObservableTests;", "testReplay", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservableTests_$3 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservableTests_$3;
}

@end

void RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(RxObservableTests_$3 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxObservableTests_$3 *new_RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableTests_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxObservableTests_$3 *create_RxObservableTests_$3_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableTests_$3, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}
