//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/TestObserverTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxNotification.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestObserver.h"
#include "RxObserversTestObserverTest.h"
#include "RxObserversTestSubscriberTest.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversTestObserverTest__Annotations$13();

@implementation RxObserversTestObserverTest

- (void)testAssert {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestObserver *o = create_RxObserversTestObserver_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxObserver:o];
  [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

- (void)testAssertNotMatchCount {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestObserver *o = create_RxObserversTestObserver_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxObserver:o];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"Number of items does not match. Provided: 1  Actual: 2.");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

- (void)testAssertNotMatchValue {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestObserver *o = create_RxObserversTestObserver_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxObserver:o];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(3) } count:2 type:JavaLangInteger_class_()])];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"Value at index: 1 expected to be [3] (Integer) but was: [2] (Integer)");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

- (void)testAssertTerminalEventNotReceived {
  RxSubjectsPublishSubject *p = RxSubjectsPublishSubject_create();
  RxObserversTestObserver *o = create_RxObserversTestObserver_init();
  [((RxSubjectsPublishSubject *) nil_chk(p)) subscribeWithRxObserver:o];
  [p onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [p onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
    [o assertTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"No terminal events received.");
  }
}

- (void)testWrappingMock {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  id<RxObserver> mockObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(oi)) subscribeWithRxObserver:create_RxObserversTestObserver_initWithRxObserver_(mockObserver)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserver } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testWrappingMockWhenUnsubscribeInvolved {
  RxObservable *oi = [((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:9 type:JavaLangInteger_class_()])))) takeWithInt:2];
  id<RxObserver> mockObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(oi)) subscribeWithRxObserver:create_RxObserversTestObserver_initWithRxObserver_(mockObserver)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserver } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testErrorSwallowed {
  [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_init()))) subscribeWithRxObserver:create_RxObserversTestObserver_init()];
}

- (void)testGetEvents {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [to onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilCollections_emptyList(), JavaUtilCollections_emptyList() } count:3 type:NSObject_class_()]), [to getEvents]);
  [to onCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilCollections_emptyList(), JavaUtilCollections_singletonListWithId_(RxNotification_createOnCompleted()) } count:3 type:NSObject_class_()]), [to getEvents]);
  RxExceptionsTestException *ex = create_RxExceptionsTestException_init();
  RxObserversTestObserver *to2 = create_RxObserversTestObserver_init();
  [to2 onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [to2 onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilCollections_emptyList(), JavaUtilCollections_emptyList() } count:3 type:NSObject_class_()]), [to2 getEvents]);
  [to2 onErrorWithNSException:ex];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), JavaUtilCollections_singletonListWithId_(ex), JavaUtilCollections_emptyList() } count:3 type:NSObject_class_()]), [to2 getEvents]);
}

- (void)testNullExpected {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  @try {
    [to assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()])];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Null element check assertion didn't happen!");
}

- (void)testNullActual {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onNextWithId:nil];
  @try {
    [to assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Null element check assertion didn't happen!");
}

- (void)testTerminalErrorOnce {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onErrorWithNSException:create_RxExceptionsTestException_init()];
  [to onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [to assertTerminalEvent];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Failed to report multiple onError terminal events!");
}

- (void)testTerminalCompletedOnce {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onCompleted];
  [to onCompleted];
  @try {
    [to assertTerminalEvent];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Failed to report multiple onError terminal events!");
}

- (void)testTerminalOneKind {
  RxObserversTestObserver *to = create_RxObserversTestObserver_init();
  [to onErrorWithNSException:create_RxExceptionsTestException_init()];
  [to onCompleted];
  @try {
    [to assertTerminalEvent];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Failed to report multiple kinds of events!");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestObserverTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testAssert);
  methods[1].selector = @selector(testAssertNotMatchCount);
  methods[2].selector = @selector(testAssertNotMatchValue);
  methods[3].selector = @selector(testAssertTerminalEventNotReceived);
  methods[4].selector = @selector(testWrappingMock);
  methods[5].selector = @selector(testWrappingMockWhenUnsubscribeInvolved);
  methods[6].selector = @selector(testErrorSwallowed);
  methods[7].selector = @selector(testGetEvents);
  methods[8].selector = @selector(testNullExpected);
  methods[9].selector = @selector(testNullActual);
  methods[10].selector = @selector(testTerminalErrorOnce);
  methods[11].selector = @selector(testTerminalCompletedOnce);
  methods[12].selector = @selector(testTerminalOneKind);
  methods[13].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversTestObserverTest__Annotations$0, (void *)&RxObserversTestObserverTest__Annotations$1, (void *)&RxObserversTestObserverTest__Annotations$2, (void *)&RxObserversTestObserverTest__Annotations$3, (void *)&RxObserversTestObserverTest__Annotations$4, (void *)&RxObserversTestObserverTest__Annotations$5, (void *)&RxObserversTestObserverTest__Annotations$6, (void *)&RxObserversTestObserverTest__Annotations$7, (void *)&RxObserversTestObserverTest__Annotations$8, (void *)&RxObserversTestObserverTest__Annotations$9, (void *)&RxObserversTestObserverTest__Annotations$10, (void *)&RxObserversTestObserverTest__Annotations$11, (void *)&RxObserversTestObserverTest__Annotations$12, (void *)&RxObserversTestObserverTest__Annotations$13 };
  static const J2ObjcClassInfo _RxObserversTestObserverTest = { "TestObserverTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 14, 0, -1, -1, -1, -1, 13 };
  return &_RxObserversTestObserverTest;
}

@end

void RxObserversTestObserverTest_init(RxObserversTestObserverTest *self) {
  NSObject_init(self);
}

RxObserversTestObserverTest *new_RxObserversTestObserverTest_init() {
  J2OBJC_NEW_IMPL(RxObserversTestObserverTest, init)
}

RxObserversTestObserverTest *create_RxObserversTestObserverTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestObserverTest, init)
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestObserverTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestObserverTest)
