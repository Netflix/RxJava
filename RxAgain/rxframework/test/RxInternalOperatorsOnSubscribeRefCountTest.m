//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeRefCountTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOnSubscribeRefCountTest.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserver.h"
#include "RxObserversSubscribers.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsReplaySubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOnSubscribeRefCountTest ()

- (RxObservable *)synchronousInterval;

@end

__attribute__((unused)) static RxObservable *RxInternalOperatorsOnSubscribeRefCountTest_synchronousInterval(RxInternalOperatorsOnSubscribeRefCountTest *self);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$13();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribeCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$1, val$subscribeCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$nextCount_;
}

- (void)callWithId:(JavaLangLong *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$2, val$nextCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$2 *new_RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$2 *create_RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$receivedCount_;
}

- (void)callWithId:(JavaLangLong *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$3, val$receivedCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$3 *new_RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$3 *create_RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribeCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$4, val$subscribeCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$4 *new_RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$4 *create_RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$nextCount_;
}

- (void)callWithId:(JavaLangInteger *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$5, val$nextCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$5 *new_RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$5 *create_RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$receivedCount_;
}

- (void)callWithId:(JavaLangInteger *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$6, val$receivedCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$6 *new_RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$6 *create_RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$7 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$nextCount_;
}

- (void)callWithId:(JavaLangInteger *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$7)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$7, val$nextCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$7 *new_RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$7 *create_RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$8 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$receivedCount_;
}

- (void)callWithId:(JavaLangInteger *)l;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$8, val$receivedCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$8 *new_RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$8 *create_RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$9 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscribeCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$9, val$subscribeCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$9 *new_RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$9 *create_RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$10 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscribeCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$10, val$unsubscribeCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$10 *new_RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$10 *create_RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$11 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$subscribeLatch_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$11, val$subscribeLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeRefCountTest_$11 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$11 *new_RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$11 *create_RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$12 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$unsubscribeLatch_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$12, val$unsubscribeLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeRefCountTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$12 *new_RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$12 *create_RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$13 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subUnsubCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$13, val$subUnsubCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$13 *new_RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$13 *create_RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$14 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subUnsubCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$14, val$subUnsubCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$14 *new_RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$14 *create_RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$15 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$15)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$15_init(RxInternalOperatorsOnSubscribeRefCountTest_$15 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$15 *new_RxInternalOperatorsOnSubscribeRefCountTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$15 *create_RxInternalOperatorsOnSubscribeRefCountTest_$15_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$16 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscriptionCount_;
  JavaUtilConcurrentAtomicAtomicInteger *val$unsubscriptionCount_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$16, val$subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$16, val$unsubscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$16 *new_RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$16 *create_RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalOperatorsOnSubscribeRefCountTest_$16 *this$0_;
}

- (void)call;

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCountTest_$16:(RxInternalOperatorsOnSubscribeRefCountTest_$16 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1, this$0_, RxInternalOperatorsOnSubscribeRefCountTest_$16 *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *self, RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$17 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list1_;
}

- (void)callWithId:(JavaLangLong *)t1;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$17, val$list1_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$17 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$17 *new_RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$17 *create_RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$18 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list2_;
}

- (void)callWithId:(JavaLangLong *)t1;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$18, val$list2_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$18 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$18 *new_RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$18 *create_RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$19 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list3_;
}

- (void)callWithId:(JavaLangLong *)t1;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$19)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$19, val$list3_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$19 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$19 *new_RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$19 *create_RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$20 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$20)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$20_init(RxInternalOperatorsOnSubscribeRefCountTest_$20 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$20 *new_RxInternalOperatorsOnSubscribeRefCountTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$20 *create_RxInternalOperatorsOnSubscribeRefCountTest_$20_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$21 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$intervalSubscribed_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$21)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$21, val$intervalSubscribed_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$21 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$21 *new_RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$21 *create_RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$22 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangLong *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$22)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$22_init(RxInternalOperatorsOnSubscribeRefCountTest_$22 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$22 *new_RxInternalOperatorsOnSubscribeRefCountTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$22 *create_RxInternalOperatorsOnSubscribeRefCountTest_$22_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$22_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init(RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$23 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$23)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$23_init(RxInternalOperatorsOnSubscribeRefCountTest_$23 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$23 *new_RxInternalOperatorsOnSubscribeRefCountTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$23 *create_RxInternalOperatorsOnSubscribeRefCountTest_$23_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$24 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$24)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$24_init(RxInternalOperatorsOnSubscribeRefCountTest_$24 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$24 *new_RxInternalOperatorsOnSubscribeRefCountTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$24 *create_RxInternalOperatorsOnSubscribeRefCountTest_$24_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$25 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$25)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$25_init(RxInternalOperatorsOnSubscribeRefCountTest_$25 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$25 *new_RxInternalOperatorsOnSubscribeRefCountTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$25 *create_RxInternalOperatorsOnSubscribeRefCountTest_$25_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$26 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err1_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$26)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$26, val$err1_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeRefCountTest_$26 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$26 *new_RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$26 *create_RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxInternalOperatorsOnSubscribeRefCountTest_$27 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$27)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$27_init(RxInternalOperatorsOnSubscribeRefCountTest_$27 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$27 *new_RxInternalOperatorsOnSubscribeRefCountTest_$27_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$27 *create_RxInternalOperatorsOnSubscribeRefCountTest_$27_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$28 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$28)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$28_init(RxInternalOperatorsOnSubscribeRefCountTest_$28 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$28 *new_RxInternalOperatorsOnSubscribeRefCountTest_$28_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$28 *create_RxInternalOperatorsOnSubscribeRefCountTest_$28_init();

@interface RxInternalOperatorsOnSubscribeRefCountTest_$29 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$err2_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCountTest_$29)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCountTest_$29, val$err2_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeRefCountTest_$29 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$29 *new_RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeRefCountTest_$29 *create_RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@implementation RxInternalOperatorsOnSubscribeRefCountTest

- (void)setUp {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testRefCountAsync {
  JavaUtilConcurrentAtomicAtomicInteger *subscribeCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *nextCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *r = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(0, 5, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribeCount)])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(nextCount)])) publish])) refCount];
  JavaUtilConcurrentAtomicAtomicInteger *receivedCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxSubscription> s1 = [((RxObservable *) nil_chk(r)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(receivedCount)];
  id<RxSubscription> s2 = [r subscribe];
  @try {
    JavaLangThread_sleepWithLong_(52);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"onNext: ", [nextCount get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_([nextCount get], [receivedCount get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subscribeCount get]);
}

- (void)testRefCountSynchronous {
  JavaUtilConcurrentAtomicAtomicInteger *subscribeCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *nextCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *r = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribeCount)])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(nextCount)])) publish])) refCount];
  JavaUtilConcurrentAtomicAtomicInteger *receivedCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxSubscription> s1 = [((RxObservable *) nil_chk(r)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(receivedCount)];
  id<RxSubscription> s2 = [r subscribe];
  @try {
    JavaLangThread_sleepWithLong_(50);
  }
  @catch (JavaLangInterruptedException *e) {
  }
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"onNext Count: ", [nextCount get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_([nextCount get], [receivedCount get] * 2);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [subscribeCount get]);
}

- (void)testRefCountSynchronousTake {
  JavaUtilConcurrentAtomicAtomicInteger *nextCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *r = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9)))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(nextCount)])) takeWithInt:4])) publish])) refCount];
  JavaUtilConcurrentAtomicAtomicInteger *receivedCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(r)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(receivedCount)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"onNext: ", [nextCount get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [receivedCount get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [receivedCount get]);
}

- (void)testRepeat {
  JavaUtilConcurrentAtomicAtomicInteger *subscribeCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *unsubscribeCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *r = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(0, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscribeCount)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(unsubscribeCount)])) publish])) refCount];
  for (jint i = 0; i < 10; i++) {
    RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
    RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
    [((RxObservable *) nil_chk(r)) subscribeWithRxSubscriber:ts1];
    [r subscribeWithRxSubscriber:ts2];
    @try {
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
    }
    [ts1 unsubscribe];
    [ts2 unsubscribe];
    [ts1 assertNoErrors];
    [ts2 assertNoErrors];
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts1 getOnNextEvents])) size] > 0);
    OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts2 getOnNextEvents])) size] > 0);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [subscribeCount get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [unsubscribeCount get]);
}

- (void)testConnectUnsubscribe {
  JavaUtilConcurrentCountDownLatch *unsubscribeLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *subscribeLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOnSubscribeRefCountTest_synchronousInterval(self))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(subscribeLatch)])) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(unsubscribeLatch)];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(o)) publish])) refCount])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:s];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"send unsubscribe"];
  [subscribeLatch await];
  [s unsubscribe];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"DONE sending unsubscribe ... now waiting"];
  if (![unsubscribeLatch awaitWithLong:3000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"Errors: ", [s getOnErrorEvents])];
    if ([((id<JavaUtilList>) nil_chk([s getOnErrorEvents])) size] > 0) {
      [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([s getOnErrorEvents])) getWithInt:0])) printStackTrace];
    }
    OrgJunitAssert_failWithNSString_(@"timed out waiting for unsubscribe");
  }
  [s assertNoErrors];
}

- (void)testConnectUnsubscribeRaceConditionLoop {
  for (jint i = 0; i < 1000; i++) {
    [self testConnectUnsubscribeRaceCondition];
  }
}

- (void)testConnectUnsubscribeRaceCondition {
  JavaUtilConcurrentAtomicAtomicInteger *subUnsubCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOnSubscribeRefCountTest_synchronousInterval(self))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(subUnsubCount)])) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(subUnsubCount)];
  RxObserversTestSubscriber *s = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(o)) publish])) refCount])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:s];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"send unsubscribe"];
  [s unsubscribe];
  JavaLangThread_sleepWithLong_(1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [subUnsubCount get]);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"DONE sending unsubscribe ... now waiting"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"Errors: ", [s getOnErrorEvents])];
  if ([((id<JavaUtilList>) nil_chk([s getOnErrorEvents])) size] > 0) {
    [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([s getOnErrorEvents])) getWithInt:0])) printStackTrace];
  }
  [s assertNoErrors];
}

- (RxObservable *)synchronousInterval {
  return RxInternalOperatorsOnSubscribeRefCountTest_synchronousInterval(self);
}

- (void)onlyFirstShouldSubscribeAndLastUnsubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *unsubscriptionCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *observable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(subscriptionCount, unsubscriptionCount));
  RxObservable *refCounted = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(observable)) publish])) refCount];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> first = [((RxObservable *) nil_chk(refCounted)) subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subscriptionCount get]);
  id<RxSubscription> second = [refCounted subscribeWithRxObserver:observer];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [subscriptionCount get]);
  [((id<RxSubscription>) nil_chk(first)) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [unsubscriptionCount get]);
  [((id<RxSubscription>) nil_chk(second)) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [unsubscriptionCount get]);
}

- (void)testRefCount {
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxObservable *interval = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS), s))) publish])) refCount];
  id<JavaUtilList> list1 = create_JavaUtilArrayList_init();
  id<RxSubscription> s1 = [((RxObservable *) nil_chk(interval)) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(list1)];
  [s advanceTimeByWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [list1 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0LL, [((JavaLangLong *) nil_chk([list1 getWithInt:0])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1LL, [((JavaLangLong *) nil_chk([list1 getWithInt:1])) longLongValue]);
  id<JavaUtilList> list2 = create_JavaUtilArrayList_init();
  id<RxSubscription> s2 = [interval subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(list2)];
  [s advanceTimeByWithLong:300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [list1 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2LL, [((JavaLangLong *) nil_chk([list1 getWithInt:2])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3LL, [((JavaLangLong *) nil_chk([list1 getWithInt:3])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4LL, [((JavaLangLong *) nil_chk([list1 getWithInt:4])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [list2 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2LL, [((JavaLangLong *) nil_chk([list2 getWithInt:0])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3LL, [((JavaLangLong *) nil_chk([list2 getWithInt:1])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(4LL, [((JavaLangLong *) nil_chk([list2 getWithInt:2])) longLongValue]);
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [s advanceTimeByWithLong:300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [list1 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [list2 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(5LL, [((JavaLangLong *) nil_chk([list2 getWithInt:3])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(6LL, [((JavaLangLong *) nil_chk([list2 getWithInt:4])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(7LL, [((JavaLangLong *) nil_chk([list2 getWithInt:5])) longLongValue]);
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  [s advanceTimeByWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  id<JavaUtilList> list3 = create_JavaUtilArrayList_init();
  [interval subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(list3)];
  [s advanceTimeByWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [list3 size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0LL, [((JavaLangLong *) nil_chk([list3 getWithInt:0])) longLongValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1LL, [((JavaLangLong *) nil_chk([list3 getWithInt:1])) longLongValue]);
}

- (void)testAlreadyUnsubscribedClient {
  RxSubscriber *done = RxObserversSubscribers_empty();
  [((RxSubscriber *) nil_chk(done)) unsubscribe];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *result = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) publish])) refCount];
  [((RxObservable *) nil_chk(result)) subscribeWithRxSubscriber:done];
  [result subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testAlreadyUnsubscribedInterleavesWithClient {
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_create();
  RxSubscriber *done = RxObserversSubscribers_empty();
  [((RxSubscriber *) nil_chk(done)) unsubscribe];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  RxObservable *result = [((RxObservablesConnectableObservable *) nil_chk([((RxSubjectsReplaySubject *) nil_chk(source)) publish])) refCount];
  [((RxObservable *) nil_chk(result)) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [result subscribeWithRxSubscriber:done];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testConnectDisconnectConnectAndSubjectState {
  RxObservable *o1 = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o2 = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(20));
  RxObservable *combined = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_combineLatestWithRxObservable_withRxObservable_withRxFunctionsFunc2_(o1, o2, create_RxInternalOperatorsOnSubscribeRefCountTest_$20_init()))) publish])) refCount];
  RxObserversTestSubscriber *ts1 = create_RxObserversTestSubscriber_init();
  RxObserversTestSubscriber *ts2 = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(combined)) subscribeWithRxSubscriber:ts1];
  [combined subscribeWithRxSubscriber:ts2];
  [ts1 assertTerminalEvent];
  [ts1 assertNoErrors];
  [ts1 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(30) } count:1 type:JavaLangInteger_class_()])];
  [ts2 assertTerminalEvent];
  [ts2 assertNoErrors];
  [ts2 assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(30) } count:1 type:JavaLangInteger_class_()])];
}

- (void)testUpstreamErrorAllowsRetry {
  JavaUtilConcurrentAtomicAtomicReference *err1 = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *err2 = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicInteger *intervalSubscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *interval = [((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(200, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(intervalSubscribed)])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeRefCountTest_$22_init()])) onErrorResumeNextWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeRefCountTest_$23_init()])) publish])) refCount];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(interval)) doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$24_init()])) retryWithLong:5])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$25_init() withRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(err1)];
  JavaLangThread_sleepWithLong_(100);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([interval doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$27_init()])) retryWithLong:5])) subscribeWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$28_init() withRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(err2)];
  JavaLangThread_sleepWithLong_(1300);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:[intervalSubscribed get]];
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [intervalSubscribed get]);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"First subscriber didn't get the error", err1);
  OrgJunitAssert_assertNotNullWithNSString_withId_(@"Second subscriber didn't get the error", err2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 8, -1 },
    { NULL, "LRxObservable;", 0x2, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 15, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(testRefCountAsync);
  methods[2].selector = @selector(testRefCountSynchronous);
  methods[3].selector = @selector(testRefCountSynchronousTake);
  methods[4].selector = @selector(testRepeat);
  methods[5].selector = @selector(testConnectUnsubscribe);
  methods[6].selector = @selector(testConnectUnsubscribeRaceConditionLoop);
  methods[7].selector = @selector(testConnectUnsubscribeRaceCondition);
  methods[8].selector = @selector(synchronousInterval);
  methods[9].selector = @selector(onlyFirstShouldSubscribeAndLastUnsubscribe);
  methods[10].selector = @selector(testRefCount);
  methods[11].selector = @selector(testAlreadyUnsubscribedClient);
  methods[12].selector = @selector(testAlreadyUnsubscribedInterleavesWithClient);
  methods[13].selector = @selector(testConnectDisconnectConnectAndSubjectState);
  methods[14].selector = @selector(testUpstreamErrorAllowsRetry);
  methods[15].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$4, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$5, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$7, "()Lrx/Observable<Ljava/lang/Long;>;", (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$9, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$10, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$11, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$12, (void *)&RxInternalOperatorsOnSubscribeRefCountTest__Annotations$13 };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest = { "OnSubscribeRefCountTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest;
}

@end

RxObservable *RxInternalOperatorsOnSubscribeRefCountTest_synchronousInterval(RxInternalOperatorsOnSubscribeRefCountTest *self) {
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOnSubscribeRefCountTest_$15_init());
}

void RxInternalOperatorsOnSubscribeRefCountTest_init(RxInternalOperatorsOnSubscribeRefCountTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest *new_RxInternalOperatorsOnSubscribeRefCountTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest, init)
}

RxInternalOperatorsOnSubscribeRefCountTest *create_RxInternalOperatorsOnSubscribeRefCountTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeRefCountTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeRefCountTest)

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribeCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountAsync" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribeCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$2

- (void)callWithId:(JavaLangLong *)l {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$nextCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$nextCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$nextCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountAsync", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$nextCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$2 *new_RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$2 *create_RxInternalOperatorsOnSubscribeRefCountTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$3

- (void)callWithId:(JavaLangLong *)l {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$receivedCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$receivedCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$receivedCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountAsync", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$receivedCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$3 *new_RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$3 *create_RxInternalOperatorsOnSubscribeRefCountTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribeCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountSynchronous" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribeCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$4 *new_RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$4 *create_RxInternalOperatorsOnSubscribeRefCountTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$5

- (void)callWithId:(JavaLangInteger *)l {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$nextCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$nextCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$nextCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountSynchronous", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$nextCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$5 *new_RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$5 *create_RxInternalOperatorsOnSubscribeRefCountTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$6

- (void)callWithId:(JavaLangInteger *)l {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$receivedCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$receivedCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$receivedCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountSynchronous", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$receivedCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$6 *new_RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$6 *create_RxInternalOperatorsOnSubscribeRefCountTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$7

- (void)callWithId:(JavaLangInteger *)l {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"onNext --------> ", l)];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$nextCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$nextCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$nextCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountSynchronousTake", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$7 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$7;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$7 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$nextCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$7 *new_RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$7 *create_RxInternalOperatorsOnSubscribeRefCountTest_$7_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$7, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$8

- (void)callWithId:(JavaLangInteger *)l {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$receivedCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$receivedCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$receivedCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCountSynchronousTake", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$8;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$receivedCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$8 *new_RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$8 *create_RxInternalOperatorsOnSubscribeRefCountTest_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$9

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* Subscribe received"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscribeCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRepeat" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$9;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscribeCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$9 *new_RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$9 *create_RxInternalOperatorsOnSubscribeRefCountTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$10

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* Unsubscribe received"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$unsubscribeCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribeCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribeCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRepeat" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$10;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$unsubscribeCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$10 *new_RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$10 *create_RxInternalOperatorsOnSubscribeRefCountTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$11

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* Subscribe received"];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$subscribeLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribeLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribeLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testConnectUnsubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$11;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeRefCountTest_$11 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$subscribeLatch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$11 *new_RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$11, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$11 *create_RxInternalOperatorsOnSubscribeRefCountTest_$11_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$11, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$12

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* Unsubscribe received"];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$unsubscribeLatch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsubscribeLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsubscribeLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testConnectUnsubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$12;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOnSubscribeRefCountTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$unsubscribeLatch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$12 *new_RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$12, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$12 *create_RxInternalOperatorsOnSubscribeRefCountTest_$12_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$12, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$13

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* Unsubscribe received"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subUnsubCount_)) decrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subUnsubCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subUnsubCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testConnectUnsubscribeRaceCondition" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$13;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subUnsubCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$13 *new_RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$13 *create_RxInternalOperatorsOnSubscribeRefCountTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$14

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"******************************* SUBSCRIBE received"];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subUnsubCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subUnsubCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subUnsubCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testConnectUnsubscribeRaceCondition" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$14;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subUnsubCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$14 *new_RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$14 *create_RxInternalOperatorsOnSubscribeRefCountTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$15

- (void)callWithId:(RxSubscriber *)subscriber {
  while (![((RxSubscriber *) nil_chk(subscriber)) isUnsubscribed]) {
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *e) {
    }
    [subscriber onNextWithId:JavaLangLong_valueOfWithLong_(1LL)];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "LRxInternalOperatorsOnSubscribeRefCountTest;", "synchronousInterval", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$15 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$15;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$15_init(RxInternalOperatorsOnSubscribeRefCountTest_$15 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$15 *new_RxInternalOperatorsOnSubscribeRefCountTest_$15_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$15, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$15 *create_RxInternalOperatorsOnSubscribeRefCountTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$15, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$16

- (void)callWithId:(RxSubscriber *)observer {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscriptionCount_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(self))];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionCount_);
  RELEASE_(val$unsubscriptionCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unsubscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "onlyFirstShouldSubscribeAndLastUnsubscribe", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$16;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$subscriptionCount_, capture$0);
  JreStrongAssign(&self->val$unsubscriptionCount_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$16 *new_RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxInternalOperatorsOnSubscribeRefCountTest_$16 *create_RxInternalOperatorsOnSubscribeRefCountTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$16_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$unsubscriptionCount_)) incrementAndGet];
}

- (instancetype)initWithRxInternalOperatorsOnSubscribeRefCountTest_$16:(RxInternalOperatorsOnSubscribeRefCountTest_$16 *)outer$ {
  RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxInternalOperatorsOnSubscribeRefCountTest_$16:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOnSubscribeRefCountTest_$16;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOnSubscribeRefCountTest_$16;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *self, RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1, initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_, outer$)
}

RxInternalOperatorsOnSubscribeRefCountTest_$16_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$16_$1_initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_(RxInternalOperatorsOnSubscribeRefCountTest_$16 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$16_$1, initWithRxInternalOperatorsOnSubscribeRefCountTest_$16_, outer$)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$17

- (void)callWithId:(JavaLangLong *)t1 {
  [((id<JavaUtilList>) nil_chk(val$list1_)) addWithId:t1];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list1_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCount", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$17;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$17 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$17 *new_RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$17, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$17 *create_RxInternalOperatorsOnSubscribeRefCountTest_$17_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$17, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$18

- (void)callWithId:(JavaLangLong *)t1 {
  [((id<JavaUtilList>) nil_chk(val$list2_)) addWithId:t1];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list2_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCount", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$18;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$18 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list2_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$18 *new_RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$18, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$18 *create_RxInternalOperatorsOnSubscribeRefCountTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$18, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$19

- (void)callWithId:(JavaLangLong *)t1 {
  [((id<JavaUtilList>) nil_chk(val$list3_)) addWithId:t1];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list3_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list3_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testRefCount", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$19 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$19;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(RxInternalOperatorsOnSubscribeRefCountTest_$19 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list3_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$19 *new_RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$19, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$19 *create_RxInternalOperatorsOnSubscribeRefCountTest_$19_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$19, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$20

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] + [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testConnectDisconnectConnectAndSubjectState", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$20 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$20;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$20_init(RxInternalOperatorsOnSubscribeRefCountTest_$20 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$20 *new_RxInternalOperatorsOnSubscribeRefCountTest_$20_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$20, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$20 *create_RxInternalOperatorsOnSubscribeRefCountTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$20, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$21

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Subscribing to interval ", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$intervalSubscribed_)) incrementAndGet])];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$intervalSubscribed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$intervalSubscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$21 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$21;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOnSubscribeRefCountTest_$21 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$intervalSubscribed_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$21 *new_RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$21, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$21 *create_RxInternalOperatorsOnSubscribeRefCountTest_$21_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$21, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$22

- (RxObservable *)callWithId:(JavaLangLong *)t1 {
  return RxObservable_deferWithRxFunctionsFunc0_(create_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "(Ljava/lang/Long;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Long;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$22 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$22;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$22_init(RxInternalOperatorsOnSubscribeRefCountTest_$22 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$22 *new_RxInternalOperatorsOnSubscribeRefCountTest_$22_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$22, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$22 *create_RxInternalOperatorsOnSubscribeRefCountTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$22, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$22_$1

- (RxObservable *)call {
  return RxObservable_errorWithNSException_(create_JavaLangException_initWithNSString_(@"Some exception"));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeRefCountTest_$22;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init(RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *new_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$22_$1, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$22_$1 *create_RxInternalOperatorsOnSubscribeRefCountTest_$22_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$22_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$23

- (RxObservable *)callWithId:(NSException *)t1 {
  return RxObservable_errorWithNSException_(t1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "(Ljava/lang/Throwable;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Throwable;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$23 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$23;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$23_init(RxInternalOperatorsOnSubscribeRefCountTest_$23 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$23 *new_RxInternalOperatorsOnSubscribeRefCountTest_$23_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$23, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$23 *create_RxInternalOperatorsOnSubscribeRefCountTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$23, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$24

- (void)callWithId:(NSException *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Subscriber 1 onError: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$24 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$24;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$24_init(RxInternalOperatorsOnSubscribeRefCountTest_$24 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$24 *new_RxInternalOperatorsOnSubscribeRefCountTest_$24_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$24, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$24 *create_RxInternalOperatorsOnSubscribeRefCountTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$24, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$25

- (void)callWithId:(NSString *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Subscriber 1: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$25 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$25;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$25_init(RxInternalOperatorsOnSubscribeRefCountTest_$25 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$25 *new_RxInternalOperatorsOnSubscribeRefCountTest_$25_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$25, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$25 *create_RxInternalOperatorsOnSubscribeRefCountTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$25, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$26

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err1_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err1_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$26 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$26;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeRefCountTest_$26 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$26 *new_RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$26, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$26 *create_RxInternalOperatorsOnSubscribeRefCountTest_$26_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$26, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$27

- (void)callWithId:(NSException *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Subscriber 2 onError: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$27_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$27 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$27;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$27_init(RxInternalOperatorsOnSubscribeRefCountTest_$27 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$27 *new_RxInternalOperatorsOnSubscribeRefCountTest_$27_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$27, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$27 *create_RxInternalOperatorsOnSubscribeRefCountTest_$27_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$27, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$28

- (void)callWithId:(NSString *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Subscriber 2: ", t1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeRefCountTest_$28_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$28 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$28;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$28_init(RxInternalOperatorsOnSubscribeRefCountTest_$28 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$28 *new_RxInternalOperatorsOnSubscribeRefCountTest_$28_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$28, init)
}

RxInternalOperatorsOnSubscribeRefCountTest_$28 *create_RxInternalOperatorsOnSubscribeRefCountTest_$28_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$28, init)
}

@implementation RxInternalOperatorsOnSubscribeRefCountTest_$29

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$err2_)) setWithId:t];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$err2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$err2_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOnSubscribeRefCountTest;", "testUpstreamErrorAllowsRetry", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeRefCountTest_$29 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeRefCountTest_$29;
}

@end

void RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOnSubscribeRefCountTest_$29 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$err2_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeRefCountTest_$29 *new_RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$29, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxInternalOperatorsOnSubscribeRefCountTest_$29 *create_RxInternalOperatorsOnSubscribeRefCountTest_$29_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeRefCountTest_$29, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}
