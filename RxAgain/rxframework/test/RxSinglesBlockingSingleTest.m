//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/singles/BlockingSingleTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxSingle.h"
#include "RxSinglesBlockingSingle.h"
#include "RxSinglesBlockingSingleTest.h"
#include "java/lang/Exception.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Future.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$3();

@interface RxSinglesBlockingSingleTest_TestCheckedException : JavaLangException

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSinglesBlockingSingleTest_TestCheckedException)

inline jlong RxSinglesBlockingSingleTest_TestCheckedException_get_serialVersionUID();
#define RxSinglesBlockingSingleTest_TestCheckedException_serialVersionUID -5601856891331290034LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSinglesBlockingSingleTest_TestCheckedException, serialVersionUID, jlong)

__attribute__((unused)) static void RxSinglesBlockingSingleTest_TestCheckedException_init(RxSinglesBlockingSingleTest_TestCheckedException *self);

__attribute__((unused)) static RxSinglesBlockingSingleTest_TestCheckedException *new_RxSinglesBlockingSingleTest_TestCheckedException_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSinglesBlockingSingleTest_TestCheckedException *create_RxSinglesBlockingSingleTest_TestCheckedException_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSinglesBlockingSingleTest_TestCheckedException)

@implementation RxSinglesBlockingSingleTest

- (void)testSingleGet {
  RxSingle *single = RxSingle_justWithId_(@"one");
  RxSinglesBlockingSingle *blockingSingle = RxSinglesBlockingSingle_fromWithRxSingle_(single);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [((RxSinglesBlockingSingle *) nil_chk(blockingSingle)) value]);
}

- (void)testSingleError {
  RxExceptionsTestException *expected = create_RxExceptionsTestException_init();
  RxSingle *single = RxSingle_errorWithNSException_(expected);
  RxSinglesBlockingSingle *blockingSingle = RxSinglesBlockingSingle_fromWithRxSingle_(single);
  @try {
    [((RxSinglesBlockingSingle *) nil_chk(blockingSingle)) value];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception to be thrown");
  }
  @catch (JavaLangException *caughtException) {
    OrgJunitAssert_assertSameWithId_withId_(expected, caughtException);
  }
}

- (void)testSingleErrorChecked {
  RxSinglesBlockingSingleTest_TestCheckedException *expected = create_RxSinglesBlockingSingleTest_TestCheckedException_init();
  RxSingle *single = RxSingle_errorWithNSException_(expected);
  RxSinglesBlockingSingle *blockingSingle = RxSinglesBlockingSingle_fromWithRxSingle_(single);
  @try {
    [((RxSinglesBlockingSingle *) nil_chk(blockingSingle)) value];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception to be thrown");
  }
  @catch (JavaLangException *caughtException) {
    OrgJunitAssert_assertNotNullWithId_([((JavaLangException *) nil_chk(caughtException)) getCause]);
    OrgJunitAssert_assertSameWithId_withId_(expected, [caughtException getCause]);
  }
}

- (void)testSingleToFuture {
  RxSingle *single = RxSingle_justWithId_(@"one");
  RxSinglesBlockingSingle *blockingSingle = RxSinglesBlockingSingle_fromWithRxSingle_(single);
  id<JavaUtilConcurrentFuture> future = [((RxSinglesBlockingSingle *) nil_chk(blockingSingle)) toFuture];
  NSString *result = [((id<JavaUtilConcurrentFuture>) nil_chk(future)) get];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", result);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSinglesBlockingSingleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSingleGet);
  methods[1].selector = @selector(testSingleError);
  methods[2].selector = @selector(testSingleErrorChecked);
  methods[3].selector = @selector(testSingleToFuture);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSinglesBlockingSingleTest__Annotations$0, (void *)&RxSinglesBlockingSingleTest__Annotations$1, (void *)&RxSinglesBlockingSingleTest__Annotations$2, "LJavaLangException;", (void *)&RxSinglesBlockingSingleTest__Annotations$3, "LRxSinglesBlockingSingleTest_TestCheckedException;" };
  static const J2ObjcClassInfo _RxSinglesBlockingSingleTest = { "BlockingSingleTest", "rx.singles", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, 5, -1, -1, -1 };
  return &_RxSinglesBlockingSingleTest;
}

@end

void RxSinglesBlockingSingleTest_init(RxSinglesBlockingSingleTest *self) {
  NSObject_init(self);
}

RxSinglesBlockingSingleTest *new_RxSinglesBlockingSingleTest_init() {
  J2OBJC_NEW_IMPL(RxSinglesBlockingSingleTest, init)
}

RxSinglesBlockingSingleTest *create_RxSinglesBlockingSingleTest_init() {
  J2OBJC_CREATE_IMPL(RxSinglesBlockingSingleTest, init)
}

IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSinglesBlockingSingleTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSinglesBlockingSingleTest)

@implementation RxSinglesBlockingSingleTest_TestCheckedException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSinglesBlockingSingleTest_TestCheckedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSinglesBlockingSingleTest_TestCheckedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSinglesBlockingSingleTest;" };
  static const J2ObjcClassInfo _RxSinglesBlockingSingleTest_TestCheckedException = { "TestCheckedException", "rx.singles", ptrTable, methods, fields, 7, 0x1a, 1, 1, 0, -1, -1, -1, -1 };
  return &_RxSinglesBlockingSingleTest_TestCheckedException;
}

@end

void RxSinglesBlockingSingleTest_TestCheckedException_init(RxSinglesBlockingSingleTest_TestCheckedException *self) {
  JavaLangException_init(self);
}

RxSinglesBlockingSingleTest_TestCheckedException *new_RxSinglesBlockingSingleTest_TestCheckedException_init() {
  J2OBJC_NEW_IMPL(RxSinglesBlockingSingleTest_TestCheckedException, init)
}

RxSinglesBlockingSingleTest_TestCheckedException *create_RxSinglesBlockingSingleTest_TestCheckedException_init() {
  J2OBJC_CREATE_IMPL(RxSinglesBlockingSingleTest_TestCheckedException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSinglesBlockingSingleTest_TestCheckedException)
