//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTimeoutWithSelectorTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTimeoutWithSelectorTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/invocation/InvocationOnMock.h"
#include "org/mockito/stubbing/Answer.h"
#include "org/mockito/stubbing/Stubber.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$9();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init();

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSubjectsPublishSubject *val$timeout_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16, val$timeout_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$enteredTimeoutOne_;
  JavaUtilConcurrentCountDownLatch *val$observerReceivedTwo_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$latchTimeout_;
  JavaUtilConcurrentCountDownLatch *val$timeoutEmittedOne_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, val$enteredTimeoutOne_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, val$observerReceivedTwo_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, val$latchTimeout_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, val$timeoutEmittedOne_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *this$0_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17:(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1, this$0_, RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *self, RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  JavaUtilConcurrentCountDownLatch *val$observerReceivedTwo_;
}

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18, val$observerReceivedTwo_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 : NSObject < OrgMockitoStubbingAnswer > {
 @public
  JavaUtilConcurrentCountDownLatch *val$observerCompleted_;
}

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19, val$observerCompleted_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 : NSObject < JavaLangRunnable > {
 @public
  id<RxFunctionsFunc1> val$timeoutFunc_;
  RxObserversTestSubscriber *val$ts_;
  JavaUtilConcurrentCountDownLatch *val$enteredTimeoutOne_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$latchTimeout_;
  JavaUtilConcurrentCountDownLatch *val$timeoutEmittedOne_;
}

- (void)run;

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0
           withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$3
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, val$timeoutFunc_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, val$ts_, RxObserversTestSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, val$enteredTimeoutOne_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, val$latchTimeout_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, val$timeoutEmittedOne_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *self, id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4);

@interface RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init();

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest

- (void)testTimeoutSelectorNormal1 {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(timeout);
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(timeout);
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((RxSubjectsPublishSubject *) nil_chk(timeout)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(100)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testTimeoutSelectorTimeoutFirst {
  RxObservable *source = RxObservable_never();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(timeout);
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(timeout);
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [((RxSubjectsPublishSubject *) nil_chk(timeout)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(100)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testTimeoutSelectorFirstThrows {
  RxObservable *source = RxObservable_never();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(timeout);
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init();
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testTimeoutSelectorSubsequentThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init();
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(timeout);
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testTimeoutSelectorFirstObservableThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(timeout);
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init();
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testTimeoutSelectorSubsequentObservableThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init();
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(timeout);
  RxObservable *other = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(100) } count:1 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc withRxObservable:other])) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(timeout);
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc])) subscribeWithRxObserver:o];
  [((RxSubjectsPublishSubject *) nil_chk(timeout)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *timeout = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> firstTimeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init();
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(timeout);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc0:firstTimeoutFunc withRxFunctionsFunc1:timeoutFunc])) subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxSubjectsPublishSubject *) nil_chk(timeout)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(JavaUtilConcurrentTimeoutException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)testTimeoutSelectorWithTimeoutAndOnNextRaceCondition {
  JavaUtilConcurrentCountDownLatch *observerReceivedTwo = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *timeoutEmittedOne = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *observerCompleted = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *enteredTimeoutOne = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentAtomicAtomicBoolean *latchTimeout = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  id<RxFunctionsFunc1> timeoutFunc = create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(enteredTimeoutOne, observerReceivedTwo, latchTimeout, timeoutEmittedOne);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<RxObserver>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doAnswerWithOrgMockitoStubbingAnswer_(create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(observerReceivedTwo)))) whenWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doAnswerWithOrgMockitoStubbingAnswer_(create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(observerCompleted)))) whenWithId:o])) onCompleted];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(timeoutFunc, ts, enteredTimeoutOne, latchTimeout, timeoutEmittedOne)) start];
  if (![observerCompleted awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    [latchTimeout setWithBoolean:true];
  }
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"CountDownLatch timeout", [latchTimeout get]);
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)selectorNull {
  @try {
    [((RxObservable *) nil_chk(RxObservable_never())) timeoutWithRxFunctionsFunc0:create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init() withRxFunctionsFunc1:nil withRxObservable:RxObservable_empty()];
  }
  @catch (JavaLangNullPointerException *ex) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"timeoutSelector is null", [((JavaLangNullPointerException *) nil_chk(ex)) getMessage]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTimeoutSelectorNormal1);
  methods[1].selector = @selector(testTimeoutSelectorTimeoutFirst);
  methods[2].selector = @selector(testTimeoutSelectorFirstThrows);
  methods[3].selector = @selector(testTimeoutSelectorSubsequentThrows);
  methods[4].selector = @selector(testTimeoutSelectorFirstObservableThrows);
  methods[5].selector = @selector(testTimeoutSelectorSubsequentObservableThrows);
  methods[6].selector = @selector(testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable);
  methods[7].selector = @selector(testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable);
  methods[8].selector = @selector(testTimeoutSelectorWithTimeoutAndOnNextRaceCondition);
  methods[9].selector = @selector(selectorNull);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$3, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$4, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$5, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$6, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$7, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$8, (void *)&RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$9 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest = { "OperatorTimeoutWithSelectorTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimeoutWithSelectorTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTimeoutWithSelectorTest)

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorNormal1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$1, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2

- (RxObservable *)call {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorNormal1", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$2, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorTimeoutFirst", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$3, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4

- (RxObservable *)call {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorTimeoutFirst", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$4, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorFirstThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$5, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6

- (RxObservable *)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorFirstThrows", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$6, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorSubsequentThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$7, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8

- (RxObservable *)call {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorSubsequentThrows", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$8, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorFirstObservableThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$9, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10

- (RxObservable *)call {
  return RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorFirstObservableThrows", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$10, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorSubsequentObservableThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$11, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12

- (RxObservable *)call {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorSubsequentObservableThrows", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$12, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13

- (RxObservable *)call {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$13, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return RxSubjectsPublishSubject_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$14, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15

- (RxObservable *)call {
  return RxSubjectsPublishSubject_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$15, init)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return val$timeout_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$16, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  if ([((JavaLangInteger *) nil_chk(t1)) intValue] == 1) {
    return [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(self)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  }
  else {
    return RxSubjectsPublishSubject_create();
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
               withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$2
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$3 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$enteredTimeoutOne_);
  RELEASE_(val$observerReceivedTwo_);
  RELEASE_(val$latchTimeout_);
  RELEASE_(val$timeoutEmittedOne_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$enteredTimeoutOne_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$observerReceivedTwo_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latchTimeout_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeoutEmittedOne_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutAndOnNextRaceCondition", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 4, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  JreStrongAssign(&self->val$enteredTimeoutOne_, capture$0);
  JreStrongAssign(&self->val$observerReceivedTwo_, capture$1);
  JreStrongAssign(&self->val$latchTimeout_, capture$2);
  JreStrongAssign(&self->val$timeoutEmittedOne_, capture$3);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicBoolean *capture$2, JavaUtilConcurrentCountDownLatch *capture$3) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$enteredTimeoutOne_)) countDown];
  while (true) {
    @try {
      if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$observerReceivedTwo_)) awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
        [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$latchTimeout_)) setWithBoolean:true];
      }
      break;
    }
    @catch (JavaLangInterruptedException *e) {
    }
  }
  [((RxSubscriber *) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->val$timeoutEmittedOne_)) countDown];
}

- (instancetype)initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17:(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *)outer$ {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17;", "callWithId:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *self, RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1, initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_, outer$)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1_initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_$1, initWithRxInternalOperatorsOperatorTimeoutWithSelectorTest_$17_, outer$)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$observerReceivedTwo_)) countDown];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observerReceivedTwo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observerReceivedTwo_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutAndOnNextRaceCondition", "Ljava/lang/Object;Lorg/mockito/stubbing/Answer<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$observerReceivedTwo_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$18, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$observerCompleted_)) countDown];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observerCompleted_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(answerWithOrgMockitoInvocationInvocationOnMock:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observerCompleted_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "answer", "LOrgMockitoInvocationInvocationOnMock;", "LNSException;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutAndOnNextRaceCondition", "Ljava/lang/Object;Lorg/mockito/stubbing/Answer<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$observerCompleted_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$19, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20

- (void)run {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) timeoutWithRxFunctionsFunc1:val$timeoutFunc_ withRxObservable:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(3))])) subscribeWithRxSubscriber:val$ts_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(val$enteredTimeoutOne_)) awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$latchTimeout_)) setWithBoolean:true];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(val$timeoutEmittedOne_)) awaitWithLong:30 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$latchTimeout_)) setWithBoolean:true];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [source onCompleted];
}

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)capture$0
           withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$3
    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$4 {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)dealloc {
  RELEASE_(val$timeoutFunc_);
  RELEASE_(val$ts_);
  RELEASE_(val$enteredTimeoutOne_);
  RELEASE_(val$latchTimeout_);
  RELEASE_(val$timeoutEmittedOne_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxFunctionsFunc1:withRxObserversTestSubscriber:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeoutFunc_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$enteredTimeoutOne_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latchTimeout_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeoutEmittedOne_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsFunc1;LRxObserversTestSubscriber;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;", "(Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/util/concurrent/CountDownLatch;)V", "Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "testTimeoutSelectorWithTimeoutAndOnNextRaceCondition" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 5, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *self, id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  JreStrongAssign(&self->val$timeoutFunc_, capture$0);
  JreStrongAssign(&self->val$ts_, capture$1);
  JreStrongAssign(&self->val$enteredTimeoutOne_, capture$2);
  JreStrongAssign(&self->val$latchTimeout_, capture$3);
  JreStrongAssign(&self->val$timeoutEmittedOne_, capture$4);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20_initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(id<RxFunctionsFunc1> capture$0, RxObserversTestSubscriber *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, JavaUtilConcurrentCountDownLatch *capture$4) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$20, initWithRxFunctionsFunc1_withRxObserversTestSubscriber_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21

- (RxObservable *)call {
  return RxObservable_never();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorTimeoutWithSelectorTest;", "selectorNull", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21;
}

@end

void RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *new_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21, init)
}

RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21 *create_RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimeoutWithSelectorTest_$21, init)
}
