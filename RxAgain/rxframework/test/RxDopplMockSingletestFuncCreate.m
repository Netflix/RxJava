//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/doppl/mock/singletest/FuncCreate.java
//

#include "J2ObjC_source.h"
#include "RxDopplMockSingletestFuncCreate.h"
#include "RxSingle.h"

@implementation RxDopplMockSingletestFuncCreate

- (id<RxSingle_OnSubscribe>)callWithId:(id<RxSingle_OnSubscribe>)t {
  return t;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMockSingletestFuncCreate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSingle_OnSubscribe;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSingle_OnSubscribe;", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Single$OnSubscribe;Lrx/Single$OnSubscribe;>;" };
  static const J2ObjcClassInfo _RxDopplMockSingletestFuncCreate = { "FuncCreate", "rx.doppl.mock.singletest", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, 2, -1 };
  return &_RxDopplMockSingletestFuncCreate;
}

@end

void RxDopplMockSingletestFuncCreate_init(RxDopplMockSingletestFuncCreate *self) {
  NSObject_init(self);
}

RxDopplMockSingletestFuncCreate *new_RxDopplMockSingletestFuncCreate_init() {
  J2OBJC_NEW_IMPL(RxDopplMockSingletestFuncCreate, init)
}

RxDopplMockSingletestFuncCreate *create_RxDopplMockSingletestFuncCreate_init() {
  J2OBJC_CREATE_IMPL(RxDopplMockSingletestFuncCreate, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMockSingletestFuncCreate)
