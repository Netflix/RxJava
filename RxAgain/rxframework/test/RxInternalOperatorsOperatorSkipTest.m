//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSkipTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorSkip.h"
#include "RxInternalOperatorsOperatorSkipTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$9();

@interface RxInternalOperatorsOperatorSkipTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requests_;
}

- (void)callWithId:(JavaLangLong *)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTest_$1, val$requests_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorSkipTest_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTest_$1 *new_RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTest_$1 *create_RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0);

@interface RxInternalOperatorsOperatorSkipTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
}

- (RxScheduler *)callWithId:(RxScheduler *)t;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipTest_$2, val$scheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorSkipTest_$2 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTest_$2 *new_RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipTest_$2 *create_RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@implementation RxInternalOperatorsOperatorSkipTest

- (void)testSkipNegativeElements {
  @try {
    [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"))) skipWithInt:-99];
    OrgJunitAssert_failWithNSString_(@"Expected IllegalArgumentException");
  }
  @catch (JavaLangIllegalArgumentException *e) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"n >= 0 required but it was -99", [((JavaLangIllegalArgumentException *) nil_chk(e)) getMessage]);
  }
}

- (void)testSkipZeroElements {
  RxObservable *skip = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(0)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipOneElement {
  RxObservable *skip = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(1)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipTwoElements {
  RxObservable *skip = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(2)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipEmptyStream {
  RxObservable *w = RxObservable_empty();
  RxObservable *skip = [((RxObservable *) nil_chk(w)) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(1)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipMultipleObservers {
  RxObservable *skip = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(2)];
  id<RxObserver> observer1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer1];
  id<RxObserver> observer2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [skip subscribeWithRxObserver:observer2];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer1, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer2, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipError {
  JavaLangException *e = create_JavaLangException_init();
  RxObservable *ok = RxObservable_justWithId_(@"one");
  RxObservable *error = RxObservable_errorWithNSException_(e);
  RxObservable *skip = [((RxObservable *) nil_chk(RxObservable_concatWithRxObservable_withRxObservable_(ok, error))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSkip_initWithInt_(100)];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(skip)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:e];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testBackpressureMultipleSmallAsyncRequests {
  JavaUtilConcurrentAtomicAtomicLong *requests = create_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) doOnRequestWithRxFunctionsAction1:create_RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(requests)])) skipWithInt:4])) subscribeWithRxSubscriber:ts];
  JavaLangThread_sleepWithLong_(100);
  [ts requestMoreWithLong:1];
  [ts requestMoreWithLong:1];
  JavaLangThread_sleepWithLong_(100);
  [ts unsubscribe];
  [ts assertUnsubscribed];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [requests get]);
}

- (void)testRequestOverflowDoesNotOccur {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(JavaLangLong_MAX_VALUE - 1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) skipWithInt:5])) subscribeWithRxSubscriber:ts];
  [ts assertTerminalEvent];
  [ts assertCompleted];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:5 type:JavaLangInteger_class_()]), [ts getOnNextEvents]);
}

- (void)skipDefaultScheduler {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxPluginsRxJavaHooks_setOnComputationSchedulerWithRxFunctionsFunc1_(create_RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(scheduler));
  @try {
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
    [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) skipWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ps onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [ps onCompleted];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangInteger_valueOfWithInt_(2)];
    [ts assertNoErrors];
    [ts assertCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSkipNegativeElements);
  methods[1].selector = @selector(testSkipZeroElements);
  methods[2].selector = @selector(testSkipOneElement);
  methods[3].selector = @selector(testSkipTwoElements);
  methods[4].selector = @selector(testSkipEmptyStream);
  methods[5].selector = @selector(testSkipMultipleObservers);
  methods[6].selector = @selector(testSkipError);
  methods[7].selector = @selector(testBackpressureMultipleSmallAsyncRequests);
  methods[8].selector = @selector(testRequestOverflowDoesNotOccur);
  methods[9].selector = @selector(skipDefaultScheduler);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$4, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$5, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$6, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$7, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$8, (void *)&RxInternalOperatorsOperatorSkipTest__Annotations$9 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTest = { "OperatorSkipTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSkipTest;
}

@end

void RxInternalOperatorsOperatorSkipTest_init(RxInternalOperatorsOperatorSkipTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTest *new_RxInternalOperatorsOperatorSkipTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipTest, init)
}

RxInternalOperatorsOperatorSkipTest *create_RxInternalOperatorsOperatorSkipTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipTest)

@implementation RxInternalOperatorsOperatorSkipTest_$1

- (void)callWithId:(JavaLangLong *)n {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requests_)) addAndGetWithLong:[((JavaLangLong *) nil_chk(n)) longLongValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0 {
  RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requests_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilConcurrentAtomicAtomicLong;", "LRxInternalOperatorsOperatorSkipTest;", "testBackpressureMultipleSmallAsyncRequests", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSkipTest_$1;
}

@end

void RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorSkipTest_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  JreStrongAssign(&self->val$requests_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTest_$1 *new_RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipTest_$1, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

RxInternalOperatorsOperatorSkipTest_$1 *create_RxInternalOperatorsOperatorSkipTest_$1_initWithJavaUtilConcurrentAtomicAtomicLong_(JavaUtilConcurrentAtomicAtomicLong *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipTest_$1, initWithJavaUtilConcurrentAtomicAtomicLong_, capture$0)
}

@implementation RxInternalOperatorsOperatorSkipTest_$2

- (RxScheduler *)callWithId:(RxScheduler *)t {
  return val$scheduler_;
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxScheduler;", "LRxSchedulersTestScheduler;", "LRxInternalOperatorsOperatorSkipTest;", "skipDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSkipTest_$2;
}

@end

void RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorSkipTest_$2 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipTest_$2 *new_RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}

RxInternalOperatorsOperatorSkipTest_$2 *create_RxInternalOperatorsOperatorSkipTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}
