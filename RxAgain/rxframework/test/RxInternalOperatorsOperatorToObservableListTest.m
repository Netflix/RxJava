//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorToObservableListTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorToObservableListTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/BrokenBarrierException.h"
#include "java/util/concurrent/CyclicBarrier.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$6();

@interface RxInternalOperatorsOperatorToObservableListTest_$1 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToObservableListTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorToObservableListTest_$1_init(RxInternalOperatorsOperatorToObservableListTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$1 *new_RxInternalOperatorsOperatorToObservableListTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$1 *create_RxInternalOperatorsOperatorToObservableListTest_$1_init();

@interface RxInternalOperatorsOperatorToObservableListTest_$2 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToObservableListTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorToObservableListTest_$2_init(RxInternalOperatorsOperatorToObservableListTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$2 *new_RxInternalOperatorsOperatorToObservableListTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$2 *create_RxInternalOperatorsOperatorToObservableListTest_$2_init();

@interface RxInternalOperatorsOperatorToObservableListTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxObserversTestSubscriber *val$ts_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                          withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToObservableListTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorToObservableListTest_$3, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorToObservableListTest_$3, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorToObservableListTest_$3 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$3 *new_RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorToObservableListTest_$3 *create_RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1);

@implementation RxInternalOperatorsOperatorToObservableListTest

- (void)testList {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) toList];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()])];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testListViaObservable {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) toList];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()])];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testListMultipleObservers {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) toList];
  id<RxObserver> o1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:o1];
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [observable subscribeWithRxObserver:o2];
  id<JavaUtilList> expected = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]);
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o1, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:expected];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o1, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o1, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:expected];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o2, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testListWithNullValue {
  RxObservable *w = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", nil, @"three" } count:3 type:NSString_class_()]));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) toList];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", nil, @"three" } count:3 type:NSString_class_()])];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testListWithBlockingFirst {
  RxObservable *o = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  id<JavaUtilList> actual = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) toList])) toBlocking])) first];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]), actual);
}

- (void)testBackpressureHonored {
  RxObservable *w = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5)))) toList];
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorToObservableListTest_$1_init();
  [((RxObservable *) nil_chk(w)) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) isEmpty]);
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) isEmpty]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [ts getCompletions]);
  [ts requestMoreWithLong:1];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_singletonListWithId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]))];
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) isEmpty]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [ts getCompletions]);
  [ts requestMoreWithLong:1];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_singletonListWithId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]))];
  OrgJunitAssert_assertTrueWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) isEmpty]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [ts getCompletions]);
}

- (void)testAsyncRequested {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) createWorker];
  @try {
    for (jint i = 0; i < 1000; i++) {
      if (i % 50 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"testAsyncRequested -> ", i)];
      }
      RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
      RxObservable *sorted = [((RxSubjectsPublishSubject *) nil_chk(source)) toList];
      JavaUtilConcurrentCyclicBarrier *cb = create_JavaUtilConcurrentCyclicBarrier_initWithInt_(2);
      RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorToObservableListTest_$2_init();
      [((RxObservable *) nil_chk(sorted)) subscribeWithRxSubscriber:ts];
      [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(cb, ts)];
      [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
      RxInternalOperatorsOperatorToObservableListTest_awaitWithJavaUtilConcurrentCyclicBarrier_(cb);
      [source onCompleted];
      [ts awaitTerminalEventWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      [ts assertTerminalEvent];
      [ts assertNoErrors];
      [ts assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_singletonListWithId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]))];
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

+ (void)awaitWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)cb {
  RxInternalOperatorsOperatorToObservableListTest_awaitWithJavaUtilConcurrentCyclicBarrier_(cb);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorToObservableListTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testList);
  methods[1].selector = @selector(testListViaObservable);
  methods[2].selector = @selector(testListMultipleObservers);
  methods[3].selector = @selector(testListWithNullValue);
  methods[4].selector = @selector(testListWithBlockingFirst);
  methods[5].selector = @selector(testBackpressureHonored);
  methods[6].selector = @selector(testAsyncRequested);
  methods[7].selector = @selector(awaitWithJavaUtilConcurrentCyclicBarrier:);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$0, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$1, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$2, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$3, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$4, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$5, (void *)&RxInternalOperatorsOperatorToObservableListTest__Annotations$6, "await", "LJavaUtilConcurrentCyclicBarrier;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorToObservableListTest = { "OperatorToObservableListTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorToObservableListTest;
}

@end

void RxInternalOperatorsOperatorToObservableListTest_awaitWithJavaUtilConcurrentCyclicBarrier_(JavaUtilConcurrentCyclicBarrier *cb) {
  RxInternalOperatorsOperatorToObservableListTest_initialize();
  @try {
    [((JavaUtilConcurrentCyclicBarrier *) nil_chk(cb)) await];
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaLangInterruptedException *) nil_chk(ex)) printStackTrace];
  }
  @catch (JavaUtilConcurrentBrokenBarrierException *ex) {
    [((JavaUtilConcurrentBrokenBarrierException *) nil_chk(ex)) printStackTrace];
  }
}

void RxInternalOperatorsOperatorToObservableListTest_init(RxInternalOperatorsOperatorToObservableListTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorToObservableListTest *new_RxInternalOperatorsOperatorToObservableListTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorToObservableListTest, init)
}

RxInternalOperatorsOperatorToObservableListTest *create_RxInternalOperatorsOperatorToObservableListTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorToObservableListTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorToObservableListTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorToObservableListTest)

@implementation RxInternalOperatorsOperatorToObservableListTest_$1

- (void)onStart {
  [self requestMoreWithLong:0];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorToObservableListTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorToObservableListTest_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorToObservableListTest;", "testBackpressureHonored", "Lrx/observers/TestSubscriber<Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorToObservableListTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorToObservableListTest_$1;
}

@end

void RxInternalOperatorsOperatorToObservableListTest_$1_init(RxInternalOperatorsOperatorToObservableListTest_$1 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorToObservableListTest_$1 *new_RxInternalOperatorsOperatorToObservableListTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorToObservableListTest_$1, init)
}

RxInternalOperatorsOperatorToObservableListTest_$1 *create_RxInternalOperatorsOperatorToObservableListTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorToObservableListTest_$1, init)
}

@implementation RxInternalOperatorsOperatorToObservableListTest_$2

- (void)onStart {
  [self requestMoreWithLong:0];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorToObservableListTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorToObservableListTest_$2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorToObservableListTest;", "testAsyncRequested", "Lrx/observers/TestSubscriber<Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorToObservableListTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorToObservableListTest_$2;
}

@end

void RxInternalOperatorsOperatorToObservableListTest_$2_init(RxInternalOperatorsOperatorToObservableListTest_$2 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorToObservableListTest_$2 *new_RxInternalOperatorsOperatorToObservableListTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorToObservableListTest_$2, init)
}

RxInternalOperatorsOperatorToObservableListTest_$2 *create_RxInternalOperatorsOperatorToObservableListTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorToObservableListTest_$2, init)
}

@implementation RxInternalOperatorsOperatorToObservableListTest_$3

- (void)call {
  RxInternalOperatorsOperatorToObservableListTest_awaitWithJavaUtilConcurrentCyclicBarrier_(val$cb_);
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) requestMoreWithLong:1];
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                          withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1 {
  RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCyclicBarrier;LRxObserversTestSubscriber;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/observers/TestSubscriber<Ljava/util/List<Ljava/lang/Integer;>;>;)V", "Lrx/observers/TestSubscriber<Ljava/util/List<Ljava/lang/Integer;>;>;", "LRxInternalOperatorsOperatorToObservableListTest;", "testAsyncRequested" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorToObservableListTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorToObservableListTest_$3;
}

@end

void RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(RxInternalOperatorsOperatorToObservableListTest_$3 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$ts_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorToObservableListTest_$3 *new_RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorToObservableListTest_$3, initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_, capture$0, capture$1)
}

RxInternalOperatorsOperatorToObservableListTest_$3 *create_RxInternalOperatorsOperatorToObservableListTest_$3_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorToObservableListTest_$3, initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_, capture$0, capture$1)
}
