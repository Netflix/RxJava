//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/SafeObserverTest.java
//

#include "CoTouchlabDoppelTestingPlatformUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnCompletedFailedException.h"
#include "RxExceptionsOnErrorFailedException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxExceptionsUnsubscribeFailedException.h"
#include "RxFunctionsAction0.h"
#include "RxObserversSafeObserverTest.h"
#include "RxObserversSafeSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxObserversSafeObserverTest ()

+ (RxSubscriber *)OBSERVER_SUCCESS;

+ (RxSubscriber *)OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError;

+ (RxSubscriber *)OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError;

+ (RxSubscriber *)OBSERVER_ONNEXT_ONERROR_FAIL;

+ (RxSubscriber *)OBSERVER_ONERROR_FAIL;

+ (RxSubscriber *)OBSERVER_ONERROR_NOTIMPLEMENTED;

+ (RxSubscriber *)OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError;

@end

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_SUCCESS();

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError);

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError);

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONNEXT_ONERROR_FAIL();

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL();

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONERROR_NOTIMPLEMENTED();

__attribute__((unused)) static RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError);

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversSafeObserverTest__Annotations$13();

@interface RxObserversSafeObserverTest_SafeObserverTestException : JavaLangRuntimeException

- (instancetype)initWithNSString:(NSString *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_SafeObserverTestException)

__attribute__((unused)) static void RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(RxObserversSafeObserverTest_SafeObserverTestException *self, NSString *message);

__attribute__((unused)) static RxObserversSafeObserverTest_SafeObserverTestException *new_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_SafeObserverTestException *create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSafeObserverTest_SafeObserverTestException)

@interface RxObserversSafeObserverTest_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$1)

__attribute__((unused)) static void RxObserversSafeObserverTest_$1_init(RxObserversSafeObserverTest_$1 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$1 *new_RxObserversSafeObserverTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$1 *create_RxObserversSafeObserverTest_$1_init();

@interface RxObserversSafeObserverTest_$2 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$2)

__attribute__((unused)) static void RxObserversSafeObserverTest_$2_init(RxObserversSafeObserverTest_$2 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$2 *new_RxObserversSafeObserverTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$2 *create_RxObserversSafeObserverTest_$2_init();

@interface RxObserversSafeObserverTest_$3 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$3)

__attribute__((unused)) static void RxObserversSafeObserverTest_$3_init(RxObserversSafeObserverTest_$3 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$3 *new_RxObserversSafeObserverTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$3 *create_RxObserversSafeObserverTest_$3_init();

@interface RxObserversSafeObserverTest_$4 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$4)

__attribute__((unused)) static void RxObserversSafeObserverTest_$4_init(RxObserversSafeObserverTest_$4 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$4 *new_RxObserversSafeObserverTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$4 *create_RxObserversSafeObserverTest_$4_init();

@interface RxObserversSafeObserverTest_$5 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$5)

__attribute__((unused)) static void RxObserversSafeObserverTest_$5_init(RxObserversSafeObserverTest_$5 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$5 *new_RxObserversSafeObserverTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$5 *create_RxObserversSafeObserverTest_$5_init();

@interface RxObserversSafeObserverTest_$6 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$onError_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$6)

J2OBJC_FIELD_SETTER(RxObserversSafeObserverTest_$6, val$onError_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSafeObserverTest_$6 *new_RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$6 *create_RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSafeObserverTest_$7 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$onError_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$7)

J2OBJC_FIELD_SETTER(RxObserversSafeObserverTest_$7, val$onError_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$7 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSafeObserverTest_$7 *new_RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$7 *create_RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSafeObserverTest_$8 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$8)

__attribute__((unused)) static void RxObserversSafeObserverTest_$8_init(RxObserversSafeObserverTest_$8 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$8 *new_RxObserversSafeObserverTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$8 *create_RxObserversSafeObserverTest_$8_init();

@interface RxObserversSafeObserverTest_$9 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$9)

__attribute__((unused)) static void RxObserversSafeObserverTest_$9_init(RxObserversSafeObserverTest_$9 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$9 *new_RxObserversSafeObserverTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$9 *create_RxObserversSafeObserverTest_$9_init();

@interface RxObserversSafeObserverTest_$10 : RxSubscriber

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$10)

__attribute__((unused)) static void RxObserversSafeObserverTest_$10_init(RxObserversSafeObserverTest_$10 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$10 *new_RxObserversSafeObserverTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$10 *create_RxObserversSafeObserverTest_$10_init();

@interface RxObserversSafeObserverTest_$11 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$onError_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)args;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$11)

J2OBJC_FIELD_SETTER(RxObserversSafeObserverTest_$11, val$onError_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$11 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSafeObserverTest_$11 *new_RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$11 *create_RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSafeObserverTest_$12 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$12)

J2OBJC_FIELD_SETTER(RxObserversSafeObserverTest_$12, val$error_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$12 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversSafeObserverTest_$12 *new_RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$12 *create_RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversSafeObserverTest_$13 : RxSubscriber

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSafeObserverTest_$13)

__attribute__((unused)) static void RxObserversSafeObserverTest_$13_init(RxObserversSafeObserverTest_$13 *self);

__attribute__((unused)) static RxObserversSafeObserverTest_$13 *new_RxObserversSafeObserverTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversSafeObserverTest_$13 *create_RxObserversSafeObserverTest_$13_init();

@implementation RxObserversSafeObserverTest

- (void)onNextFailure {
  JavaUtilConcurrentAtomicAtomicReference *onError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSafeObserverTest_OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference_(onError))) onNextWithId:@"one"];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertNullWithId_([onError get]);
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onNextFail", [((JavaLangException *) nil_chk(e)) getMessage]);
  }
}

- (void)onNextFailureSafe {
  JavaUtilConcurrentAtomicAtomicReference *onError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  @try {
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(RxObserversSafeObserverTest_OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference_(onError)) onNextWithId:@"one"];
    OrgJunitAssert_assertNotNullWithId_([onError get]);
    OrgJunitAssert_assertTrueWithBoolean_([[onError get] isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onNextFail", [((NSException *) nil_chk([onError get])) getMessage]);
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_failWithNSString_(@"expects exception to be passed to onError");
  }
}

- (void)onCompletedFailure {
  JavaUtilConcurrentAtomicAtomicReference *onError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSafeObserverTest_OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference_(onError))) onCompleted];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertNullWithId_([onError get]);
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onCompletedFail", [((JavaLangException *) nil_chk(e)) getMessage]);
  }
}

- (void)onErrorFailure {
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL())) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"error!")];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onErrorFail", [((JavaLangException *) nil_chk(e)) getMessage]);
  }
}

- (void)onErrorFailureSafe {
  @try {
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL()) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"error!")];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[JavaLangRuntimeException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Error occurred when trying to propagate error to Observer.onError", [e getMessage]);
    NSException *e2 = [e getCause];
    OrgJunitAssert_assertTrueWithBoolean_([e2 isKindOfClass:[RxExceptionsCompositeException class]]);
    id<JavaUtilList> innerExceptions = [((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(e2, [RxExceptionsCompositeException class])))) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(innerExceptions)) size]);
    NSException *e3 = [innerExceptions getWithInt:0];
    OrgJunitAssert_assertTrueWithBoolean_([e3 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"error!", [((NSException *) nil_chk(e3)) getMessage]);
    NSException *e4 = [innerExceptions getWithInt:1];
    OrgJunitAssert_assertTrueWithBoolean_([e4 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onErrorFail", [((NSException *) nil_chk(e4)) getMessage]);
  }
}

- (void)onErrorNotImplementedFailureSafe {
  @try {
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(RxObserversSafeObserverTest_OBSERVER_ONERROR_NOTIMPLEMENTED()) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"error!")];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxExceptionsOnErrorNotImplementedException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[((JavaLangException *) nil_chk(e)) getCause] isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"error!", [((NSException *) nil_chk([e getCause])) getMessage]);
  }
}

- (void)onNextOnErrorFailure {
  @try {
    [((RxSubscriber *) nil_chk(RxObserversSafeObserverTest_OBSERVER_ONNEXT_ONERROR_FAIL())) onNextWithId:@"one"];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onNextFail", [e getMessage]);
  }
}

- (void)onNextOnErrorFailureSafe {
  @try {
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(RxObserversSafeObserverTest_OBSERVER_ONNEXT_ONERROR_FAIL()) onNextWithId:@"one"];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[JavaLangRuntimeException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Error occurred when trying to propagate error to Observer.onError", [e getMessage]);
    NSException *e2 = [e getCause];
    OrgJunitAssert_assertTrueWithBoolean_([e2 isKindOfClass:[RxExceptionsCompositeException class]]);
    id<JavaUtilList> innerExceptions = [((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(e2, [RxExceptionsCompositeException class])))) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(innerExceptions)) size]);
    NSException *e3 = [innerExceptions getWithInt:0];
    OrgJunitAssert_assertTrueWithBoolean_([e3 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onNextFail", [((NSException *) nil_chk(e3)) getMessage]);
    NSException *e4 = [innerExceptions getWithInt:1];
    OrgJunitAssert_assertTrueWithBoolean_([e4 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onErrorFail", [((NSException *) nil_chk(e4)) getMessage]);
  }
}

- (void)onCompleteSuccessWithUnsubscribeFailure {
  RxSubscriber *o = RxObserversSafeObserverTest_OBSERVER_SUCCESS();
  @try {
    [((RxSubscriber *) nil_chk(o)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObserversSafeObserverTest_$1_init())];
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(o) onCompleted];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([o isUnsubscribed]);
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[RxExceptionsUnsubscribeFailedException class]]);
    OrgJunitAssert_assertTrueWithBoolean_([[e getCause] isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"failure from unsubscribe", [e getMessage]);
  }
}

- (void)onErrorSuccessWithUnsubscribeFailure {
  JavaUtilConcurrentAtomicAtomicReference *onError = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxSubscriber *o = RxObserversSafeObserverTest_OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference_(onError);
  @try {
    [((RxSubscriber *) nil_chk(o)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObserversSafeObserverTest_$2_init())];
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(o) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"failed")];
    OrgJunitAssert_failWithNSString_(@"we expect the unsubscribe failure to cause an exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([o isUnsubscribed]);
    OrgJunitAssert_assertNotNullWithId_([onError get]);
    OrgJunitAssert_assertTrueWithBoolean_([[onError get] isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"failed", [((NSException *) nil_chk([onError get])) getMessage]);
    RxExceptionsOnErrorFailedException *onErrorFailedException = (RxExceptionsOnErrorFailedException *) cast_chk(e, [RxExceptionsOnErrorFailedException class]);
    OrgJunitAssert_assertTrueWithBoolean_([[onErrorFailedException getCause] isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"failure from unsubscribe", [e getMessage]);
  }
}

- (void)onErrorFailureWithUnsubscribeFailure {
  RxSubscriber *o = RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL();
  @try {
    [((RxSubscriber *) nil_chk(o)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObserversSafeObserverTest_$3_init())];
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(o) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onError failure")];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([o isUnsubscribed]);
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[JavaLangRuntimeException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Error occurred when trying to propagate error to Observer.onError and during unsubscription.", [e getMessage]);
    NSException *e2 = [e getCause];
    OrgJunitAssert_assertTrueWithBoolean_([e2 isKindOfClass:[RxExceptionsCompositeException class]]);
    id<JavaUtilList> innerExceptions = [((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(e2, [RxExceptionsCompositeException class])))) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((id<JavaUtilList>) nil_chk(innerExceptions)) size]);
    NSException *e3 = [innerExceptions getWithInt:0];
    OrgJunitAssert_assertTrueWithBoolean_([e3 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onError failure", [((NSException *) nil_chk(e3)) getMessage]);
    NSException *e4 = [innerExceptions getWithInt:1];
    OrgJunitAssert_assertTrueWithBoolean_([e4 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"onErrorFail", [((NSException *) nil_chk(e4)) getMessage]);
    NSException *e5 = [innerExceptions getWithInt:2];
    OrgJunitAssert_assertTrueWithBoolean_([e5 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"failure from unsubscribe", [((NSException *) nil_chk(e5)) getMessage]);
  }
}

- (void)onErrorNotImplementedFailureWithUnsubscribeFailure {
  RxSubscriber *o = RxObserversSafeObserverTest_OBSERVER_ONERROR_NOTIMPLEMENTED();
  @try {
    [((RxSubscriber *) nil_chk(o)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxObserversSafeObserverTest_$4_init())];
    [create_RxObserversSafeSubscriber_initWithRxSubscriber_(o) onErrorWithNSException:create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"error!")];
    OrgJunitAssert_failWithNSString_(@"expects exception to be thrown");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    OrgJunitAssert_assertTrueWithBoolean_([o isUnsubscribed]);
    OrgJunitAssert_assertTrueWithBoolean_([e isKindOfClass:[JavaLangRuntimeException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"Observer.onError not implemented and error while unsubscribing.", [e getMessage]);
    NSException *e2 = [e getCause];
    OrgJunitAssert_assertTrueWithBoolean_([e2 isKindOfClass:[RxExceptionsCompositeException class]]);
    id<JavaUtilList> innerExceptions = [((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(e2, [RxExceptionsCompositeException class])))) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(innerExceptions)) size]);
    NSException *e3 = [innerExceptions getWithInt:0];
    OrgJunitAssert_assertTrueWithBoolean_([e3 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"error!", [((NSException *) nil_chk(e3)) getMessage]);
    NSException *e4 = [innerExceptions getWithInt:1];
    OrgJunitAssert_assertTrueWithBoolean_([e4 isKindOfClass:[RxObserversSafeObserverTest_SafeObserverTestException class]]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"failure from unsubscribe", [((NSException *) nil_chk(e4)) getMessage]);
  }
}

+ (RxSubscriber *)OBSERVER_SUCCESS {
  return RxObserversSafeObserverTest_OBSERVER_SUCCESS();
}

+ (RxSubscriber *)OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError {
  return RxObserversSafeObserverTest_OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

+ (RxSubscriber *)OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError {
  return RxObserversSafeObserverTest_OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

+ (RxSubscriber *)OBSERVER_ONNEXT_ONERROR_FAIL {
  return RxObserversSafeObserverTest_OBSERVER_ONNEXT_ONERROR_FAIL();
}

+ (RxSubscriber *)OBSERVER_ONERROR_FAIL {
  return RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL();
}

+ (RxSubscriber *)OBSERVER_ONERROR_NOTIMPLEMENTED {
  return RxObserversSafeObserverTest_OBSERVER_ONERROR_NOTIMPLEMENTED();
}

+ (RxSubscriber *)OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)onError {
  return RxObserversSafeObserverTest_OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

- (void)testOnCompletedThrows {
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversSafeSubscriber *s = create_RxObserversSafeSubscriber_initWithRxSubscriber_(create_RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(error));
  @try {
    [s onCompleted];
    OrgJunitAssert_fail();
  }
  @catch (RxExceptionsOnCompletedFailedException *e) {
    OrgJunitAssert_assertNullWithId_([error get]);
  }
}

- (void)testActual {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  RxSubscriber *actual = create_RxObserversSafeObserverTest_$13_init();
  RxObserversSafeSubscriber *s = create_RxObserversSafeSubscriber_initWithRxSubscriber_(actual);
  OrgJunitAssert_assertSameWithId_withId_(actual, [s getActual]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "LRxSubscriber;", 0xa, -1, -1, -1, 12, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, 16, 14, -1, 15, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, -1, -1, -1, 12, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, -1, -1, -1, 12, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, -1, -1, -1, 12, -1, -1 },
    { NULL, "LRxSubscriber;", 0xa, 17, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextFailure);
  methods[1].selector = @selector(onNextFailureSafe);
  methods[2].selector = @selector(onCompletedFailure);
  methods[3].selector = @selector(onErrorFailure);
  methods[4].selector = @selector(onErrorFailureSafe);
  methods[5].selector = @selector(onErrorNotImplementedFailureSafe);
  methods[6].selector = @selector(onNextOnErrorFailure);
  methods[7].selector = @selector(onNextOnErrorFailureSafe);
  methods[8].selector = @selector(onCompleteSuccessWithUnsubscribeFailure);
  methods[9].selector = @selector(onErrorSuccessWithUnsubscribeFailure);
  methods[10].selector = @selector(onErrorFailureWithUnsubscribeFailure);
  methods[11].selector = @selector(onErrorNotImplementedFailureWithUnsubscribeFailure);
  methods[12].selector = @selector(OBSERVER_SUCCESS);
  methods[13].selector = @selector(OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[14].selector = @selector(OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[15].selector = @selector(OBSERVER_ONNEXT_ONERROR_FAIL);
  methods[16].selector = @selector(OBSERVER_ONERROR_FAIL);
  methods[17].selector = @selector(OBSERVER_ONERROR_NOTIMPLEMENTED);
  methods[18].selector = @selector(OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference:);
  methods[19].selector = @selector(testOnCompletedThrows);
  methods[20].selector = @selector(testActual);
  methods[21].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversSafeObserverTest__Annotations$0, (void *)&RxObserversSafeObserverTest__Annotations$1, (void *)&RxObserversSafeObserverTest__Annotations$2, (void *)&RxObserversSafeObserverTest__Annotations$3, (void *)&RxObserversSafeObserverTest__Annotations$4, (void *)&RxObserversSafeObserverTest__Annotations$5, (void *)&RxObserversSafeObserverTest__Annotations$6, (void *)&RxObserversSafeObserverTest__Annotations$7, (void *)&RxObserversSafeObserverTest__Annotations$8, (void *)&RxObserversSafeObserverTest__Annotations$9, (void *)&RxObserversSafeObserverTest__Annotations$10, (void *)&RxObserversSafeObserverTest__Annotations$11, "()Lrx/Subscriber<Ljava/lang/String;>;", "OBSERVER_SUCCESS", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)Lrx/Subscriber<Ljava/lang/String;>;", "OBSERVER_ONNEXT_FAIL", "OBSERVER_ONCOMPLETED_FAIL", (void *)&RxObserversSafeObserverTest__Annotations$12, (void *)&RxObserversSafeObserverTest__Annotations$13, "LRxObserversSafeObserverTest_SafeObserverTestException;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest = { "SafeObserverTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 22, 0, -1, 20, -1, -1, -1 };
  return &_RxObserversSafeObserverTest;
}

@end

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_SUCCESS() {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$5_init();
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError) {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError) {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONNEXT_ONERROR_FAIL() {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$8_init();
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONERROR_FAIL() {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$9_init();
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONERROR_NOTIMPLEMENTED() {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$10_init();
}

RxSubscriber *RxObserversSafeObserverTest_OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *onError) {
  RxObserversSafeObserverTest_initialize();
  return create_RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(onError);
}

void RxObserversSafeObserverTest_init(RxObserversSafeObserverTest *self) {
  NSObject_init(self);
}

RxObserversSafeObserverTest *new_RxObserversSafeObserverTest_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest, init)
}

RxObserversSafeObserverTest *create_RxObserversSafeObserverTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest, init)
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversSafeObserverTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSafeObserverTest)

@implementation RxObserversSafeObserverTest_SafeObserverTestException

- (instancetype)initWithNSString:(NSString *)message {
  RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LRxObserversSafeObserverTest;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_SafeObserverTestException = { "SafeObserverTestException", "rx.observers", ptrTable, methods, NULL, 7, 0xa, 1, 0, 1, -1, -1, -1, -1 };
  return &_RxObserversSafeObserverTest_SafeObserverTestException;
}

@end

void RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(RxObserversSafeObserverTest_SafeObserverTestException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

RxObserversSafeObserverTest_SafeObserverTestException *new_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_SafeObserverTestException, initWithNSString_, message)
}

RxObserversSafeObserverTest_SafeObserverTestException *create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_SafeObserverTestException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversSafeObserverTest_SafeObserverTestException)

@implementation RxObserversSafeObserverTest_$1

- (void)call {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"failure from unsubscribe");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserversSafeObserverTest;", "onCompleteSuccessWithUnsubscribeFailure" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$1 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxObserversSafeObserverTest_$1;
}

@end

void RxObserversSafeObserverTest_$1_init(RxObserversSafeObserverTest_$1 *self) {
  NSObject_init(self);
}

RxObserversSafeObserverTest_$1 *new_RxObserversSafeObserverTest_$1_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$1, init)
}

RxObserversSafeObserverTest_$1 *create_RxObserversSafeObserverTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$1, init)
}

@implementation RxObserversSafeObserverTest_$2

- (void)call {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"failure from unsubscribe");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserversSafeObserverTest;", "onErrorSuccessWithUnsubscribeFailure" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$2 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxObserversSafeObserverTest_$2;
}

@end

void RxObserversSafeObserverTest_$2_init(RxObserversSafeObserverTest_$2 *self) {
  NSObject_init(self);
}

RxObserversSafeObserverTest_$2 *new_RxObserversSafeObserverTest_$2_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$2, init)
}

RxObserversSafeObserverTest_$2 *create_RxObserversSafeObserverTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$2, init)
}

@implementation RxObserversSafeObserverTest_$3

- (void)call {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"failure from unsubscribe");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserversSafeObserverTest;", "onErrorFailureWithUnsubscribeFailure" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$3 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxObserversSafeObserverTest_$3;
}

@end

void RxObserversSafeObserverTest_$3_init(RxObserversSafeObserverTest_$3 *self) {
  NSObject_init(self);
}

RxObserversSafeObserverTest_$3 *new_RxObserversSafeObserverTest_$3_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$3, init)
}

RxObserversSafeObserverTest_$3 *create_RxObserversSafeObserverTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$3, init)
}

@implementation RxObserversSafeObserverTest_$4

- (void)call {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"failure from unsubscribe");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserversSafeObserverTest;", "onErrorNotImplementedFailureWithUnsubscribeFailure" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$4 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxObserversSafeObserverTest_$4;
}

@end

void RxObserversSafeObserverTest_$4_init(RxObserversSafeObserverTest_$4 *self) {
  NSObject_init(self);
}

RxObserversSafeObserverTest_$4 *new_RxObserversSafeObserverTest_$4_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$4, init)
}

RxObserversSafeObserverTest_$4 *create_RxObserversSafeObserverTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$4, init)
}

@implementation RxObserversSafeObserverTest_$5

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)args {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$5 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSafeObserverTest;", "OBSERVER_SUCCESS", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$5 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSafeObserverTest_$5;
}

@end

void RxObserversSafeObserverTest_$5_init(RxObserversSafeObserverTest_$5 *self) {
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$5 *new_RxObserversSafeObserverTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$5, init)
}

RxObserversSafeObserverTest_$5 *create_RxObserversSafeObserverTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$5, init)
}

@implementation RxObserversSafeObserverTest_$6

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$onError_)) setWithId:e];
}

- (void)onNextWithId:(NSString *)args {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$6 class]);
  RELEASE_(val$onError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSafeObserverTest;", "OBSERVER_SUCCESSWithJavaUtilConcurrentAtomicAtomicReference:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$6 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObserversSafeObserverTest_$6;
}

@end

void RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$6 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$onError_, capture$0);
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$6 *new_RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSafeObserverTest_$6 *create_RxObserversSafeObserverTest_$6_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$6, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSafeObserverTest_$7

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$onError_)) setWithId:e];
}

- (void)onNextWithId:(NSString *)args {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onNextFail");
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$7 class]);
  RELEASE_(val$onError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSafeObserverTest;", "OBSERVER_ONNEXT_FAILWithJavaUtilConcurrentAtomicAtomicReference:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$7 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObserversSafeObserverTest_$7;
}

@end

void RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$7 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$onError_, capture$0);
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$7 *new_RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$7, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSafeObserverTest_$7 *create_RxObserversSafeObserverTest_$7_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$7, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSafeObserverTest_$8

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onErrorFail");
}

- (void)onNextWithId:(NSString *)args {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onNextFail");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$8 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSafeObserverTest;", "OBSERVER_ONNEXT_ONERROR_FAIL", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$8 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSafeObserverTest_$8;
}

@end

void RxObserversSafeObserverTest_$8_init(RxObserversSafeObserverTest_$8 *self) {
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$8 *new_RxObserversSafeObserverTest_$8_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$8, init)
}

RxObserversSafeObserverTest_$8 *create_RxObserversSafeObserverTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$8, init)
}

@implementation RxObserversSafeObserverTest_$9

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onErrorFail");
}

- (void)onNextWithId:(NSString *)args {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$9 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSafeObserverTest;", "OBSERVER_ONERROR_FAIL", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$9 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSafeObserverTest_$9;
}

@end

void RxObserversSafeObserverTest_$9_init(RxObserversSafeObserverTest_$9 *self) {
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$9 *new_RxObserversSafeObserverTest_$9_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$9, init)
}

RxObserversSafeObserverTest_$9 *create_RxObserversSafeObserverTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$9, init)
}

@implementation RxObserversSafeObserverTest_$10

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsOnErrorNotImplementedException_initWithNSException_(e);
}

- (void)onNextWithId:(NSString *)args {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$10 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LRxObserversSafeObserverTest;", "OBSERVER_ONERROR_NOTIMPLEMENTED", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$10 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSafeObserverTest_$10;
}

@end

void RxObserversSafeObserverTest_$10_init(RxObserversSafeObserverTest_$10 *self) {
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$10 *new_RxObserversSafeObserverTest_$10_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$10, init)
}

RxObserversSafeObserverTest_$10 *create_RxObserversSafeObserverTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$10, init)
}

@implementation RxObserversSafeObserverTest_$11

- (void)onCompleted {
  @throw create_RxObserversSafeObserverTest_SafeObserverTestException_initWithNSString_(@"onCompletedFail");
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$onError_)) setWithId:e];
}

- (void)onNextWithId:(NSString *)args {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$11 class]);
  RELEASE_(val$onError_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onError_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSafeObserverTest;", "OBSERVER_ONCOMPLETED_FAILWithJavaUtilConcurrentAtomicAtomicReference:", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$11 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObserversSafeObserverTest_$11;
}

@end

void RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$11 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$onError_, capture$0);
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$11 *new_RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$11, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSafeObserverTest_$11 *create_RxObserversSafeObserverTest_$11_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$11, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSafeObserverTest_$12

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (void)onCompleted {
  @throw create_RxExceptionsTestException_init();
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$12 class]);
  RELEASE_(val$error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversSafeObserverTest;", "testOnCompletedThrows", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$12 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObserversSafeObserverTest_$12;
}

@end

void RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversSafeObserverTest_$12 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$error_, capture$0);
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$12 *new_RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$12, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversSafeObserverTest_$12 *create_RxObserversSafeObserverTest_$12_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$12, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversSafeObserverTest_$13

- (void)onNextWithId:(JavaLangInteger *)t {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversSafeObserverTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxObserversSafeObserverTest_$13 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LRxObserversSafeObserverTest;", "testActual", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversSafeObserverTest_$13 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversSafeObserverTest_$13;
}

@end

void RxObserversSafeObserverTest_$13_init(RxObserversSafeObserverTest_$13 *self) {
  RxSubscriber_init(self);
}

RxObserversSafeObserverTest_$13 *new_RxObserversSafeObserverTest_$13_init() {
  J2OBJC_NEW_IMPL(RxObserversSafeObserverTest_$13, init)
}

RxObserversSafeObserverTest_$13 *create_RxObserversSafeObserverTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxObserversSafeObserverTest_$13, init)
}
