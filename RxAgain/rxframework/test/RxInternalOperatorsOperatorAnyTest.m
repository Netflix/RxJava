//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorAnyTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorAnyTest.h"
#include "RxInternalUtilUtilityFunctions.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$17();

@interface RxInternalOperatorsOperatorAnyTest_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$1_init(RxInternalOperatorsOperatorAnyTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$1 *new_RxInternalOperatorsOperatorAnyTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$1 *create_RxInternalOperatorsOperatorAnyTest_$1_init();

@interface RxInternalOperatorsOperatorAnyTest_$2 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$2_init(RxInternalOperatorsOperatorAnyTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$2 *new_RxInternalOperatorsOperatorAnyTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$2 *create_RxInternalOperatorsOperatorAnyTest_$2_init();

@interface RxInternalOperatorsOperatorAnyTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$3_init(RxInternalOperatorsOperatorAnyTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$3 *new_RxInternalOperatorsOperatorAnyTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$3 *create_RxInternalOperatorsOperatorAnyTest_$3_init();

@interface RxInternalOperatorsOperatorAnyTest_$4 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$4_init(RxInternalOperatorsOperatorAnyTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$4 *new_RxInternalOperatorsOperatorAnyTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$4 *create_RxInternalOperatorsOperatorAnyTest_$4_init();

@interface RxInternalOperatorsOperatorAnyTest_$5 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$5_init(RxInternalOperatorsOperatorAnyTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$5 *new_RxInternalOperatorsOperatorAnyTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$5 *create_RxInternalOperatorsOperatorAnyTest_$5_init();

@interface RxInternalOperatorsOperatorAnyTest_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangBoolean *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$6_init(RxInternalOperatorsOperatorAnyTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$6 *new_RxInternalOperatorsOperatorAnyTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$6 *create_RxInternalOperatorsOperatorAnyTest_$6_init();

@interface RxInternalOperatorsOperatorAnyTest_$7 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(id)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$7_init(RxInternalOperatorsOperatorAnyTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$7 *new_RxInternalOperatorsOperatorAnyTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$7 *create_RxInternalOperatorsOperatorAnyTest_$7_init();

@interface RxInternalOperatorsOperatorAnyTest_$8 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(id)object;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$8_init(RxInternalOperatorsOperatorAnyTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$8 *new_RxInternalOperatorsOperatorAnyTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$8 *create_RxInternalOperatorsOperatorAnyTest_$8_init();

@interface RxInternalOperatorsOperatorAnyTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaLangIllegalArgumentException *val$ex_;
}

- (JavaLangBoolean *)callWithId:(id)object;

- (instancetype)initWithJavaLangIllegalArgumentException:(JavaLangIllegalArgumentException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$9, val$ex_, JavaLangIllegalArgumentException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(RxInternalOperatorsOperatorAnyTest_$9 *self, JavaLangIllegalArgumentException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$9 *new_RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(JavaLangIllegalArgumentException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$9 *create_RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(JavaLangIllegalArgumentException *capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$10 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)sub;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$10_init(RxInternalOperatorsOperatorAnyTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$10 *new_RxInternalOperatorsOperatorAnyTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$10 *create_RxInternalOperatorsOperatorAnyTest_$10_init();

@interface RxInternalOperatorsOperatorAnyTest_$10_$1 : NSObject < RxProducer > {
 @public
  RxSubscriber *val$sub_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$10_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$10_$1, val$sub_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$10_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$10_$1 *new_RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$10_$1 *create_RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$11 : NSObject < RxFunctionsFunc1 > {
 @public
  jboolean once_;
}

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$11_init(RxInternalOperatorsOperatorAnyTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$11 *new_RxInternalOperatorsOperatorAnyTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$11 *create_RxInternalOperatorsOperatorAnyTest_$11_init();

@interface RxInternalOperatorsOperatorAnyTest_$12 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)sub;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$12_init(RxInternalOperatorsOperatorAnyTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$12 *new_RxInternalOperatorsOperatorAnyTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$12 *create_RxInternalOperatorsOperatorAnyTest_$12_init();

@interface RxInternalOperatorsOperatorAnyTest_$12_$1 : NSObject < RxProducer > {
 @public
  RxSubscriber *val$sub_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$12_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$12_$1, val$sub_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$12_$1 *self, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$12_$1 *new_RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$12_$1 *create_RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$13 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$13)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$13_init(RxInternalOperatorsOperatorAnyTest_$13 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$13 *new_RxInternalOperatorsOperatorAnyTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$13 *create_RxInternalOperatorsOperatorAnyTest_$13_init();

@interface RxInternalOperatorsOperatorAnyTest_$14 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$14, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(RxInternalOperatorsOperatorAnyTest_$14 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$14 *new_RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$14 *create_RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$15 : NSObject < RxObservable_OnSubscribe > {
 @public
  NSException *val$e2_;
}

- (void)callWithId:(RxSubscriber *)sub;

- (instancetype)initWithNSException:(NSException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$15, val$e2_, NSException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(RxInternalOperatorsOperatorAnyTest_$15 *self, NSException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$15 *new_RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(NSException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$15 *create_RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(NSException *capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$15_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOperatorAnyTest_$15 *this$0_;
  RxSubscriber *val$sub_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOperatorAnyTest_$15:(RxInternalOperatorsOperatorAnyTest_$15 *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$15_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$15_$1, this$0_, RxInternalOperatorsOperatorAnyTest_$15 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$15_$1, val$sub_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15_$1 *self, RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$15_$1 *new_RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$15_$1 *create_RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0);

@interface RxInternalOperatorsOperatorAnyTest_$16 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaLangRuntimeException *val$e1_;
}

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorAnyTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorAnyTest_$16, val$e1_, JavaLangRuntimeException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(RxInternalOperatorsOperatorAnyTest_$16 *self, JavaLangRuntimeException *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$16 *new_RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorAnyTest_$16 *create_RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0);

@implementation RxInternalOperatorsOperatorAnyTest

- (void)testAnyWithTwoItems {
  RxObservable *w = RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_alwaysTrue()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testIsEmptyWithTwoItems {
  RxObservable *w = RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) isEmpty];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testAnyWithOneItem {
  RxObservable *w = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_alwaysTrue()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testIsEmptyWithOneItem {
  RxObservable *w = RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) isEmpty];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testAnyWithEmpty {
  RxObservable *w = RxObservable_empty();
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:RxInternalUtilUtilityFunctions_alwaysTrue()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testIsEmptyWithEmpty {
  RxObservable *w = RxObservable_empty();
  RxObservable *observable = [((RxObservable *) nil_chk(w)) isEmpty];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testAnyWithPredicate1 {
  RxObservable *w = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$1_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testExists1 {
  RxObservable *w = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$2_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testAnyWithPredicate2 {
  RxObservable *w = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3));
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$3_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testAnyWithEmptyAndPredicate {
  RxObservable *w = RxObservable_empty();
  RxObservable *observable = [((RxObservable *) nil_chk(w)) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$4_init()];
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testWithFollowingFirst {
  RxObservable *o = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:4 type:JavaLangInteger_class_()]));
  RxObservable *anyEven = [((RxObservable *) nil_chk(o)) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$5_init()];
  OrgJunitAssert_assertTrueWithBoolean_([((JavaLangBoolean *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(anyEven)) toBlocking])) first])) booleanValue]);
}

- (void)testIssue1935NoUnsubscribeDownstream {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) isEmpty])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$6_init()];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(2), [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(source)) toBlocking])) first]);
}

- (void)testBackpressureIfNoneRequestedNoneShouldBeDelivered {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$7_init()])) subscribeWithRxSubscriber:ts];
  [ts assertNoValues];
  [ts assertNoErrors];
  [ts assertNotCompleted];
}

- (void)testBackpressureIfOneRequestedOneShouldBeDelivered {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$8_init()])) subscribeWithRxSubscriber:ts];
  [ts assertTerminalEvent];
  [ts assertNoErrors];
  [ts assertCompleted];
  [ts assertValueWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
}

- (void)testPredicateThrowsExceptionAndValueInCauseMessage {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  JavaLangIllegalArgumentException *ex = create_JavaLangIllegalArgumentException_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"Boo!"))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(ex)])) subscribeWithRxSubscriber:ts];
  [ts assertTerminalEvent];
  [ts assertNoValues];
  [ts assertNotCompleted];
  id<JavaUtilList> errors = [ts getOnErrorEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(errors)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(ex, [errors getWithInt:0]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((NSException *) nil_chk([ex getCause])) getMessage])) contains:@"Boo!"]);
}

- (void)testUpstreamEmitsOnNextAfterFailureWithoutCheckingSubscription {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorAnyTest_$10_init()))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$11_init()])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts assertErrorWithIOSClass:JavaLangRuntimeException_class_()];
  [ts assertNotCompleted];
}

- (void)testUpstreamEmitsOnNextWithoutCheckingSubscription {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorAnyTest_$12_init()))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$13_init()])) unsafeSubscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [ts getCompletions]);
  [ts assertNoErrors];
}

- (void)testDoesNotEmitMultipleErrorEventsAndReportsSecondErrorToHooks {
  @try {
    id<JavaUtilList> list = create_JavaUtilConcurrentCopyOnWriteArrayList_init();
    RxPluginsRxJavaHooks_setOnErrorWithRxFunctionsAction1_(create_RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(list));
    RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
    JavaLangRuntimeException *e1 = create_JavaLangRuntimeException_init();
    NSException *e2 = create_JavaLangRuntimeException_init();
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(e2)))) existsWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(e1)])) unsafeSubscribeWithRxSubscriber:ts];
    [((RxObserversTestSubscriber *) nil_chk(ts)) assertNotCompleted];
    OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ e1 } count:1 type:JavaLangRuntimeException_class_()]), [ts getOnErrorEvents]);
    OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ e2 } count:1 type:NSException_class_()]), list);
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testAnyWithTwoItems);
  methods[1].selector = @selector(testIsEmptyWithTwoItems);
  methods[2].selector = @selector(testAnyWithOneItem);
  methods[3].selector = @selector(testIsEmptyWithOneItem);
  methods[4].selector = @selector(testAnyWithEmpty);
  methods[5].selector = @selector(testIsEmptyWithEmpty);
  methods[6].selector = @selector(testAnyWithPredicate1);
  methods[7].selector = @selector(testExists1);
  methods[8].selector = @selector(testAnyWithPredicate2);
  methods[9].selector = @selector(testAnyWithEmptyAndPredicate);
  methods[10].selector = @selector(testWithFollowingFirst);
  methods[11].selector = @selector(testIssue1935NoUnsubscribeDownstream);
  methods[12].selector = @selector(testBackpressureIfNoneRequestedNoneShouldBeDelivered);
  methods[13].selector = @selector(testBackpressureIfOneRequestedOneShouldBeDelivered);
  methods[14].selector = @selector(testPredicateThrowsExceptionAndValueInCauseMessage);
  methods[15].selector = @selector(testUpstreamEmitsOnNextAfterFailureWithoutCheckingSubscription);
  methods[16].selector = @selector(testUpstreamEmitsOnNextWithoutCheckingSubscription);
  methods[17].selector = @selector(testDoesNotEmitMultipleErrorEventsAndReportsSecondErrorToHooks);
  methods[18].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$0, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$1, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$2, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$3, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$4, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$5, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$6, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$7, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$8, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$9, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$10, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$11, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$12, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$13, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$14, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$15, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$16, (void *)&RxInternalOperatorsOperatorAnyTest__Annotations$17 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest = { "OperatorAnyTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 19, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorAnyTest;
}

@end

void RxInternalOperatorsOperatorAnyTest_init(RxInternalOperatorsOperatorAnyTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest *new_RxInternalOperatorsOperatorAnyTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest, init)
}

RxInternalOperatorsOperatorAnyTest *create_RxInternalOperatorsOperatorAnyTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAnyTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorAnyTest)

@implementation RxInternalOperatorsOperatorAnyTest_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testAnyWithPredicate1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$1;
}

@end

void RxInternalOperatorsOperatorAnyTest_$1_init(RxInternalOperatorsOperatorAnyTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$1 *new_RxInternalOperatorsOperatorAnyTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$1, init)
}

RxInternalOperatorsOperatorAnyTest_$1 *create_RxInternalOperatorsOperatorAnyTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$1, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$2

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testExists1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$2;
}

@end

void RxInternalOperatorsOperatorAnyTest_$2_init(RxInternalOperatorsOperatorAnyTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$2 *new_RxInternalOperatorsOperatorAnyTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$2, init)
}

RxInternalOperatorsOperatorAnyTest_$2 *create_RxInternalOperatorsOperatorAnyTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$2, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$3

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testAnyWithPredicate2", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$3;
}

@end

void RxInternalOperatorsOperatorAnyTest_$3_init(RxInternalOperatorsOperatorAnyTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$3 *new_RxInternalOperatorsOperatorAnyTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$3, init)
}

RxInternalOperatorsOperatorAnyTest_$3 *create_RxInternalOperatorsOperatorAnyTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$3, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$4

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testAnyWithEmptyAndPredicate", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$4;
}

@end

void RxInternalOperatorsOperatorAnyTest_$4_init(RxInternalOperatorsOperatorAnyTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$4 *new_RxInternalOperatorsOperatorAnyTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$4, init)
}

RxInternalOperatorsOperatorAnyTest_$4 *create_RxInternalOperatorsOperatorAnyTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$4, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$5

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(i)) intValue] % 2 == 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testWithFollowingFirst", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$5;
}

@end

void RxInternalOperatorsOperatorAnyTest_$5_init(RxInternalOperatorsOperatorAnyTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$5 *new_RxInternalOperatorsOperatorAnyTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$5, init)
}

RxInternalOperatorsOperatorAnyTest_$5 *create_RxInternalOperatorsOperatorAnyTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$5, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$6

- (RxObservable *)callWithId:(JavaLangBoolean *)t1 {
  return [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2)))) delayWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangBoolean;", "(Ljava/lang/Boolean;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorAnyTest;", "testIssue1935NoUnsubscribeDownstream", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Boolean;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$6;
}

@end

void RxInternalOperatorsOperatorAnyTest_$6_init(RxInternalOperatorsOperatorAnyTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$6 *new_RxInternalOperatorsOperatorAnyTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$6, init)
}

RxInternalOperatorsOperatorAnyTest_$6 *create_RxInternalOperatorsOperatorAnyTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$6, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$7

- (JavaLangBoolean *)callWithId:(id)t1 {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOperatorAnyTest;", "testBackpressureIfNoneRequestedNoneShouldBeDelivered", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$7;
}

@end

void RxInternalOperatorsOperatorAnyTest_$7_init(RxInternalOperatorsOperatorAnyTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$7 *new_RxInternalOperatorsOperatorAnyTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$7, init)
}

RxInternalOperatorsOperatorAnyTest_$7 *create_RxInternalOperatorsOperatorAnyTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$7, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$8

- (JavaLangBoolean *)callWithId:(id)object {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOperatorAnyTest;", "testBackpressureIfOneRequestedOneShouldBeDelivered", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$8;
}

@end

void RxInternalOperatorsOperatorAnyTest_$8_init(RxInternalOperatorsOperatorAnyTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$8 *new_RxInternalOperatorsOperatorAnyTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$8, init)
}

RxInternalOperatorsOperatorAnyTest_$8 *create_RxInternalOperatorsOperatorAnyTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$8, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$9

- (JavaLangBoolean *)callWithId:(id)object {
  @throw val$ex_;
}

- (instancetype)initWithJavaLangIllegalArgumentException:(JavaLangIllegalArgumentException *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangIllegalArgumentException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ex_", "LJavaLangIllegalArgumentException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LJavaLangIllegalArgumentException;", "LRxInternalOperatorsOperatorAnyTest;", "testPredicateThrowsExceptionAndValueInCauseMessage", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$9;
}

@end

void RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(RxInternalOperatorsOperatorAnyTest_$9 *self, JavaLangIllegalArgumentException *capture$0) {
  JreStrongAssign(&self->val$ex_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$9 *new_RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(JavaLangIllegalArgumentException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$9, initWithJavaLangIllegalArgumentException_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$9 *create_RxInternalOperatorsOperatorAnyTest_$9_initWithJavaLangIllegalArgumentException_(JavaLangIllegalArgumentException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$9, initWithJavaLangIllegalArgumentException_, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$10

- (void)callWithId:(RxSubscriber *)sub {
  [((RxSubscriber *) nil_chk(sub)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(sub)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorAnyTest;", "testUpstreamEmitsOnNextAfterFailureWithoutCheckingSubscription", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$10;
}

@end

void RxInternalOperatorsOperatorAnyTest_$10_init(RxInternalOperatorsOperatorAnyTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$10 *new_RxInternalOperatorsOperatorAnyTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$10, init)
}

RxInternalOperatorsOperatorAnyTest_$10 *create_RxInternalOperatorsOperatorAnyTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$10, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$10_$1

- (void)requestWithLong:(jlong)n {
  if (n > 1) {
    [((RxSubscriber *) nil_chk(val$sub_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$sub_ onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sub_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorAnyTest_$10;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$10_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$10_$1;
}

@end

void RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$10_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$sub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$10_$1 *new_RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$10_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$10_$1 *create_RxInternalOperatorsOperatorAnyTest_$10_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$10_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$11

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t {
  if (once_) @throw create_JavaLangRuntimeException_initWithNSString_(@"boo");
  else {
    once_ = false;
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "once_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testUpstreamEmitsOnNextAfterFailureWithoutCheckingSubscription", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$11;
}

@end

void RxInternalOperatorsOperatorAnyTest_$11_init(RxInternalOperatorsOperatorAnyTest_$11 *self) {
  NSObject_init(self);
  self->once_ = true;
}

RxInternalOperatorsOperatorAnyTest_$11 *new_RxInternalOperatorsOperatorAnyTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$11, init)
}

RxInternalOperatorsOperatorAnyTest_$11 *create_RxInternalOperatorsOperatorAnyTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$11, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$12

- (void)callWithId:(RxSubscriber *)sub {
  [((RxSubscriber *) nil_chk(sub)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(sub)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxInternalOperatorsOperatorAnyTest;", "testUpstreamEmitsOnNextWithoutCheckingSubscription", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$12;
}

@end

void RxInternalOperatorsOperatorAnyTest_$12_init(RxInternalOperatorsOperatorAnyTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$12 *new_RxInternalOperatorsOperatorAnyTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$12, init)
}

RxInternalOperatorsOperatorAnyTest_$12 *create_RxInternalOperatorsOperatorAnyTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$12, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$12_$1

- (void)requestWithLong:(jlong)n {
  if (n > 1) {
    [((RxSubscriber *) nil_chk(val$sub_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$sub_ onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [val$sub_ onCompleted];
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$sub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sub_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorAnyTest_$12;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$12_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$12_$1;
}

@end

void RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$12_$1 *self, RxSubscriber *capture$0) {
  JreStrongAssign(&self->val$sub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$12_$1 *new_RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$12_$1, initWithRxSubscriber_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$12_$1 *create_RxInternalOperatorsOperatorAnyTest_$12_$1_initWithRxSubscriber_(RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$12_$1, initWithRxSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$13

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t {
  return JavaLangBoolean_valueOfWithBoolean_(true);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAnyTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorAnyTest;", "testUpstreamEmitsOnNextWithoutCheckingSubscription", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$13 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$13;
}

@end

void RxInternalOperatorsOperatorAnyTest_$13_init(RxInternalOperatorsOperatorAnyTest_$13 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$13 *new_RxInternalOperatorsOperatorAnyTest_$13_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$13, init)
}

RxInternalOperatorsOperatorAnyTest_$13 *create_RxInternalOperatorsOperatorAnyTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$13, init)
}

@implementation RxInternalOperatorsOperatorAnyTest_$14

- (void)callWithId:(NSException *)t {
  [((id<JavaUtilList>) nil_chk(val$list_)) addWithId:t];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "Ljava/util/List<Ljava/lang/Throwable;>;", "LRxInternalOperatorsOperatorAnyTest;", "testDoesNotEmitMultipleErrorEventsAndReportsSecondErrorToHooks", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$14;
}

@end

void RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(RxInternalOperatorsOperatorAnyTest_$14 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$14 *new_RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$14, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$14 *create_RxInternalOperatorsOperatorAnyTest_$14_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$14, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$15

- (void)callWithId:(RxSubscriber *)sub {
  [((RxSubscriber *) nil_chk(sub)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(self, sub)];
}

- (instancetype)initWithNSException:(NSException *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e2_", "LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LNSException;", "LRxInternalOperatorsOperatorAnyTest;", "testDoesNotEmitMultipleErrorEventsAndReportsSecondErrorToHooks", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$15;
}

@end

void RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(RxInternalOperatorsOperatorAnyTest_$15 *self, NSException *capture$0) {
  JreStrongAssign(&self->val$e2_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$15 *new_RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(NSException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$15, initWithNSException_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$15 *create_RxInternalOperatorsOperatorAnyTest_$15_initWithNSException_(NSException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$15, initWithNSException_, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$15_$1

- (void)requestWithLong:(jlong)n {
  if (n > 0) {
    [((RxSubscriber *) nil_chk(val$sub_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [val$sub_ onErrorWithNSException:this$0_->val$e2_];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorAnyTest_$15:(RxInternalOperatorsOperatorAnyTest_$15 *)outer$
                                              withRxSubscriber:(RxSubscriber *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$sub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorAnyTest_$15:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorAnyTest_$15;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sub_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorAnyTest_$15;LRxSubscriber;", "(Lrx/internal/operators/OperatorAnyTest$15;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorAnyTest_$15;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$15_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$15_$1;
}

@end

void RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15_$1 *self, RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$sub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$15_$1 *new_RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$15_$1, initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_, outer$, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$15_$1 *create_RxInternalOperatorsOperatorAnyTest_$15_$1_initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_(RxInternalOperatorsOperatorAnyTest_$15 *outer$, RxSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$15_$1, initWithRxInternalOperatorsOperatorAnyTest_$15_withRxSubscriber_, outer$, capture$0)
}

@implementation RxInternalOperatorsOperatorAnyTest_$16

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t {
  @throw val$e1_;
}

- (instancetype)initWithJavaLangRuntimeException:(JavaLangRuntimeException *)capture$0 {
  RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$e1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaLangRuntimeException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e1_", "LJavaLangRuntimeException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaLangRuntimeException;", "LRxInternalOperatorsOperatorAnyTest;", "testDoesNotEmitMultipleErrorEventsAndReportsSecondErrorToHooks", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAnyTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorAnyTest_$16;
}

@end

void RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(RxInternalOperatorsOperatorAnyTest_$16 *self, JavaLangRuntimeException *capture$0) {
  JreStrongAssign(&self->val$e1_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorAnyTest_$16 *new_RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAnyTest_$16, initWithJavaLangRuntimeException_, capture$0)
}

RxInternalOperatorsOperatorAnyTest_$16 *create_RxInternalOperatorsOperatorAnyTest_$16_initWithJavaLangRuntimeException_(JavaLangRuntimeException *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAnyTest_$16, initWithJavaLangRuntimeException_, capture$0)
}
