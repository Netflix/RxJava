//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/schedulers/ExecutorSchedulerTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest")
#ifdef RESTRICT_RxInternalSchedulersExecutorSchedulerTest
#define INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest 0
#else
#define INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest 1
#endif
#undef RESTRICT_RxInternalSchedulersExecutorSchedulerTest

#if !defined (RxInternalSchedulersExecutorSchedulerTest_) && (INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest || defined(INCLUDE_RxInternalSchedulersExecutorSchedulerTest))
#define RxInternalSchedulersExecutorSchedulerTest_

#define RESTRICT_RxSchedulersAbstractSchedulerConcurrencyTests 1
#define INCLUDE_RxSchedulersAbstractSchedulerConcurrencyTests 1
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"

@class RxScheduler;
@protocol JavaUtilConcurrentExecutor;

@interface RxInternalSchedulersExecutorSchedulerTest : RxSchedulersAbstractSchedulerConcurrencyTests

#pragma mark Public

- (instancetype)init;

- (void)actionHookCalled;

- (void)testCancelledTaskRetention;

- (void)testCancelledTasksDontRun;

- (void)testCancelledWorkerDoesntRunTasks;

- (void)testHandledErrorIsNotDeliveredToThreadHandler;

- (void)testNoPeriodicTimedTaskPartRetention;

- (void)testNoTimedTaskAfterScheduleRetention;

- (void)testNoTimedTaskPartRetention;

- (void)testUnhandledErrorIsDeliveredToThreadHandler;

#pragma mark Protected

- (RxScheduler *)getScheduler;

@end

J2OBJC_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest)

inline id<JavaUtilConcurrentExecutor> RxInternalSchedulersExecutorSchedulerTest_get_executor();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutor> RxInternalSchedulersExecutorSchedulerTest_executor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalSchedulersExecutorSchedulerTest, executor, id<JavaUtilConcurrentExecutor>)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorSchedulerTest_init(RxInternalSchedulersExecutorSchedulerTest *self);

FOUNDATION_EXPORT RxInternalSchedulersExecutorSchedulerTest *new_RxInternalSchedulersExecutorSchedulerTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorSchedulerTest *create_RxInternalSchedulersExecutorSchedulerTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorSchedulerTest)

#endif

#if !defined (RxInternalSchedulersExecutorSchedulerTest_TestExecutor_) && (INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest || defined(INCLUDE_RxInternalSchedulersExecutorSchedulerTest_TestExecutor))
#define RxInternalSchedulersExecutorSchedulerTest_TestExecutor_

#define RESTRICT_JavaUtilConcurrentExecutor 1
#define INCLUDE_JavaUtilConcurrentExecutor 1
#include "java/util/concurrent/Executor.h"

@class JavaUtilConcurrentConcurrentLinkedQueue;
@protocol JavaLangRunnable;

@interface RxInternalSchedulersExecutorSchedulerTest_TestExecutor : NSObject < JavaUtilConcurrentExecutor > {
 @public
  JavaUtilConcurrentConcurrentLinkedQueue *queue_;
}

#pragma mark Public

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (void)executeAll;

- (void)executeOne;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorSchedulerTest_TestExecutor)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorSchedulerTest_TestExecutor, queue_, JavaUtilConcurrentConcurrentLinkedQueue *)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init(RxInternalSchedulersExecutorSchedulerTest_TestExecutor *self);

FOUNDATION_EXPORT RxInternalSchedulersExecutorSchedulerTest_TestExecutor *new_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorSchedulerTest_TestExecutor *create_RxInternalSchedulersExecutorSchedulerTest_TestExecutor_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorSchedulerTest_TestExecutor)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersExecutorSchedulerTest")
