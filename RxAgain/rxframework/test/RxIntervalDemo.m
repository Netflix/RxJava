//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/IntervalDemo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxIntervalDemo.h"
#include "RxObservable.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxIntervalDemo__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxIntervalDemo__Annotations$1();

@interface RxIntervalDemo_$1 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$l_;
  NSString *val$testname_;
}

- (void)callWithId:(JavaLangLong *)i;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                        withNSString:(NSString *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxIntervalDemo_$1)

J2OBJC_FIELD_SETTER(RxIntervalDemo_$1, val$l_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxIntervalDemo_$1, val$testname_, NSString *)

__attribute__((unused)) static void RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(RxIntervalDemo_$1 *self, id<JavaUtilList> capture$0, NSString *capture$1);

__attribute__((unused)) static RxIntervalDemo_$1 *new_RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(id<JavaUtilList> capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxIntervalDemo_$1 *create_RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(id<JavaUtilList> capture$0, NSString *capture$1);

@interface RxIntervalDemo_$2 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxIntervalDemo_$2)

__attribute__((unused)) static void RxIntervalDemo_$2_init(RxIntervalDemo_$2 *self);

__attribute__((unused)) static RxIntervalDemo_$2 *new_RxIntervalDemo_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxIntervalDemo_$2 *create_RxIntervalDemo_$2_init();

@interface RxIntervalDemo_$3 : NSObject < RxFunctionsAction0 > {
 @public
  NSString *val$testname_;
}

- (void)call;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxIntervalDemo_$3)

J2OBJC_FIELD_SETTER(RxIntervalDemo_$3, val$testname_, NSString *)

__attribute__((unused)) static void RxIntervalDemo_$3_initWithNSString_(RxIntervalDemo_$3 *self, NSString *capture$0);

__attribute__((unused)) static RxIntervalDemo_$3 *new_RxIntervalDemo_$3_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxIntervalDemo_$3 *create_RxIntervalDemo_$3_initWithNSString_(NSString *capture$0);

@implementation RxIntervalDemo

- (void)demoInterval {
  [self testLongObservableWithRxObservable:[((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_(500, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) takeWithInt:4] withNSString:@"demoInterval"];
}

- (void)testLongObservableWithRxObservable:(RxObservable *)o
                              withNSString:(NSString *)testname {
  id<JavaUtilList> l = create_JavaUtilArrayList_init();
  id<RxFunctionsAction1> onNext = create_RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(l, testname);
  id<RxFunctionsAction1> onError = create_RxIntervalDemo_$2_init();
  id<RxFunctionsAction0> onComplete = create_RxIntervalDemo_$3_initWithNSString_(testname);
  [((RxObservable *) nil_chk(o)) subscribeWithRxFunctionsAction1:onNext withRxFunctionsAction1:onError withRxFunctionsAction0:onComplete];
  JavaLangThread_sleepWithLong_(2500);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxIntervalDemo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, 0, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(demoInterval);
  methods[1].selector = @selector(testLongObservableWithRxObservable:withNSString:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxIntervalDemo__Annotations$0, "testLongObservable", "LRxObservable;LNSString;", "(Lrx/Observable<Ljava/lang/Long;>;Ljava/lang/String;)V", (void *)&RxIntervalDemo__Annotations$1 };
  static const J2ObjcClassInfo _RxIntervalDemo = { "IntervalDemo", "rx", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, 5 };
  return &_RxIntervalDemo;
}

@end

void RxIntervalDemo_init(RxIntervalDemo *self) {
  NSObject_init(self);
}

RxIntervalDemo *new_RxIntervalDemo_init() {
  J2OBJC_NEW_IMPL(RxIntervalDemo, init)
}

RxIntervalDemo *create_RxIntervalDemo_init() {
  J2OBJC_CREATE_IMPL(RxIntervalDemo, init)
}

IOSObjectArray *RxIntervalDemo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxIntervalDemo__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitIgnore(@"Since this doesn't do any automatic testing") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxIntervalDemo)

@implementation RxIntervalDemo_$1

- (void)callWithId:(JavaLangLong *)i {
  [((id<JavaUtilList>) nil_chk(val$l_)) addWithId:i];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$@", val$testname_, @" got ", i)];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                        withNSString:(NSString *)capture$1 {
  RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$l_);
  RELEASE_(val$testname_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$l_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$testname_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangLong;", "LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/lang/Long;>;Ljava/lang/String;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxIntervalDemo;", "testLongObservableWithRxObservable:withNSString:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxIntervalDemo_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_RxIntervalDemo_$1;
}

@end

void RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(RxIntervalDemo_$1 *self, id<JavaUtilList> capture$0, NSString *capture$1) {
  JreStrongAssign(&self->val$l_, capture$0);
  JreStrongAssign(&self->val$testname_, capture$1);
  NSObject_init(self);
}

RxIntervalDemo_$1 *new_RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(id<JavaUtilList> capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(RxIntervalDemo_$1, initWithJavaUtilList_withNSString_, capture$0, capture$1)
}

RxIntervalDemo_$1 *create_RxIntervalDemo_$1_initWithJavaUtilList_withNSString_(id<JavaUtilList> capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(RxIntervalDemo_$1, initWithJavaUtilList_withNSString_, capture$0, capture$1)
}

@implementation RxIntervalDemo_$2

- (void)callWithId:(NSException *)t {
  [((NSException *) nil_chk(t)) printStackTrace];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxIntervalDemo_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxIntervalDemo;", "testLongObservableWithRxObservable:withNSString:", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxIntervalDemo_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxIntervalDemo_$2;
}

@end

void RxIntervalDemo_$2_init(RxIntervalDemo_$2 *self) {
  NSObject_init(self);
}

RxIntervalDemo_$2 *new_RxIntervalDemo_$2_init() {
  J2OBJC_NEW_IMPL(RxIntervalDemo_$2, init)
}

RxIntervalDemo_$2 *create_RxIntervalDemo_$2_init() {
  J2OBJC_CREATE_IMPL(RxIntervalDemo_$2, init)
}

@implementation RxIntervalDemo_$3

- (void)call {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", val$testname_, @" complete")];
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxIntervalDemo_$3_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$testname_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$testname_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LRxIntervalDemo;", "testLongObservableWithRxObservable:withNSString:" };
  static const J2ObjcClassInfo _RxIntervalDemo_$3 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxIntervalDemo_$3;
}

@end

void RxIntervalDemo_$3_initWithNSString_(RxIntervalDemo_$3 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$testname_, capture$0);
  NSObject_init(self);
}

RxIntervalDemo_$3 *new_RxIntervalDemo_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxIntervalDemo_$3, initWithNSString_, capture$0)
}

RxIntervalDemo_$3 *create_RxIntervalDemo_$3_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxIntervalDemo_$3, initWithNSString_, capture$0)
}
