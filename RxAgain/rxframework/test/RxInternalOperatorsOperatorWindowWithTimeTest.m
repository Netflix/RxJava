//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorWindowWithTimeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorWindowWithSizeTest.h"
#include "RxInternalOperatorsOperatorWindowWithTimeTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"

@interface RxInternalOperatorsOperatorWindowWithTimeTest () {
 @public
  RxSchedulersTestScheduler *scheduler_;
  RxScheduler_Worker *innerScheduler_;
}

- (id<JavaUtilList>)listWithNSStringArray:(IOSObjectArray *)args;

- (void)pushWithRxObserver:(id<RxObserver>)observer
                    withId:(id)value
                   withInt:(jint)delay;

- (void)completeWithRxObserver:(id<RxObserver>)observer
                       withInt:(jint)delay;

- (id<RxFunctionsAction1>)observeWindowWithJavaUtilList:(id<JavaUtilList>)list
                                       withJavaUtilList:(id<JavaUtilList>)lists;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest, scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest, innerScheduler_, RxScheduler_Worker *)

__attribute__((unused)) static id<JavaUtilList> RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(RxInternalOperatorsOperatorWindowWithTimeTest *self, IOSObjectArray *args);

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<RxObserver> observer, id value, jint delay);

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_completeWithRxObserver_withInt_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<RxObserver> observer, jint delay);

__attribute__((unused)) static id<RxFunctionsAction1> RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<JavaUtilList> list, id<JavaUtilList> lists);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$6();

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorWindowWithTimeTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest:(RxInternalOperatorsOperatorWindowWithTimeTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$1, this$0_, RxInternalOperatorsOperatorWindowWithTimeTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest_$1 *self, RxInternalOperatorsOperatorWindowWithTimeTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$1 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$1 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorWindowWithTimeTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest:(RxInternalOperatorsOperatorWindowWithTimeTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$2, this$0_, RxInternalOperatorsOperatorWindowWithTimeTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest_$2 *self, RxInternalOperatorsOperatorWindowWithTimeTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$2 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$2 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxObserver> val$observer_;
  id val$value_;
}

- (void)call;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
                            withId:(id)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$3, val$observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$3, val$value_, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(RxInternalOperatorsOperatorWindowWithTimeTest_$3 *self, id<RxObserver> capture$0, id capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$3 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$3 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxObserver> val$observer_;
}

- (void)call;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$4, val$observer_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(RxInternalOperatorsOperatorWindowWithTimeTest_$4 *self, id<RxObserver> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$4 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(id<RxObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$4 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(id<RxObserver> capture$0);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  id<JavaUtilList> val$lists_;
  id<JavaUtilList> val$list_;
}

- (void)callWithId:(RxObservable *)stringObservable;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                    withJavaUtilList:(id<JavaUtilList>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$5, val$lists_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$5, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *self, id<JavaUtilList> capture$0, id<JavaUtilList> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$5 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> capture$0, id<JavaUtilList> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$5 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> capture$0, id<JavaUtilList> capture$1);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 : NSObject < RxObserver > {
 @public
  RxInternalOperatorsOperatorWindowWithTimeTest_$5 *this$0_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5:(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1, this$0_, RxInternalOperatorsOperatorWindowWithTimeTest_$5 *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *self, RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$);

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)w;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$6_init(RxInternalOperatorsOperatorWindowWithTimeTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$6 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$6 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$6_init();

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)w;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$7_init(RxInternalOperatorsOperatorWindowWithTimeTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$7 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$7 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$7_init();

@interface RxInternalOperatorsOperatorWindowWithTimeTest_$8 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)w;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithTimeTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithTimeTest_$8_init(RxInternalOperatorsOperatorWindowWithTimeTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$8 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithTimeTest_$8 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$8_init();

@implementation RxInternalOperatorsOperatorWindowWithTimeTest

- (void)before {
  JreStrongAssignAndConsume(&scheduler_, new_RxSchedulersTestScheduler_init());
  JreStrongAssign(&innerScheduler_, [scheduler_ createWorker]);
}

- (void)testTimedAndCount {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  id<JavaUtilList> lists = create_JavaUtilArrayList_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(self));
  RxObservable *windowed = [((RxObservable *) nil_chk(source)) windowWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withInt:2 withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(windowed)) subscribeWithRxFunctionsAction1:RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(self, list, lists)];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [lists size]);
  OrgJunitAssert_assertEqualsWithId_withId_([lists getWithInt:0], RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two" } count:2 type:NSString_class_()]));
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [lists size]);
  OrgJunitAssert_assertEqualsWithId_withId_([lists getWithInt:1], RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"three", @"four" } count:2 type:NSString_class_()]));
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [lists size]);
  OrgJunitAssert_assertEqualsWithId_withId_([lists getWithInt:2], RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"five" } count:1 type:NSString_class_()]));
}

- (void)testTimed {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  id<JavaUtilList> lists = create_JavaUtilArrayList_init();
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(self));
  RxObservable *windowed = [((RxObservable *) nil_chk(source)) windowWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(windowed)) subscribeWithRxFunctionsAction1:RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(self, list, lists)];
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:101 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [lists size]);
  OrgJunitAssert_assertEqualsWithId_withId_([lists getWithInt:0], RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"one", @"two", @"three" } count:3 type:NSString_class_()]));
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:201 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [lists size]);
  OrgJunitAssert_assertEqualsWithId_withId_([lists getWithInt:1], RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ @"four", @"five" } count:2 type:NSString_class_()]));
}

- (id<JavaUtilList>)listWithNSStringArray:(IOSObjectArray *)args {
  return RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(self, args);
}

- (void)pushWithRxObserver:(id<RxObserver>)observer
                    withId:(id)value
                   withInt:(jint)delay {
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(self, observer, value, delay);
}

- (void)completeWithRxObserver:(id<RxObserver>)observer
                       withInt:(jint)delay {
  RxInternalOperatorsOperatorWindowWithTimeTest_completeWithRxObserver_withInt_(self, observer, delay);
}

- (id<RxFunctionsAction1>)observeWindowWithJavaUtilList:(id<JavaUtilList>)list
                                       withJavaUtilList:(id<JavaUtilList>)lists {
  return RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(self, list, lists);
}

- (void)testExactWindowSize {
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES) withInt:3 withRxScheduler:scheduler_];
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  id<JavaUtilList> lists = create_JavaUtilArrayList_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxFunctionsAction1:RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(self, list, lists)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [lists size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((id<JavaUtilList>) nil_chk([lists getWithInt:0])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]), [lists getWithInt:0]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((id<JavaUtilList>) nil_chk([lists getWithInt:1])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:3 type:JavaLangInteger_class_()]), [lists getWithInt:1]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [((id<JavaUtilList>) nil_chk([lists getWithInt:2])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:3 type:JavaLangInteger_class_()]), [lists getWithInt:2]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([lists getWithInt:3])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10) } count:1 type:JavaLangInteger_class_()]), [lists getWithInt:3]);
}

- (void)testTakeFlatMapCompletes {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  jint indicator = 999999999;
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxInternalOperatorsOperatorWindowWithSizeTest_hotStream())) windowWithLong:300 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) takeWithInt:10])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithTimeTest_$6_init()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) isEmpty]);
}

- (void)timeCountDefaultScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) withInt:5])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithTimeTest_$7_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueCountWithInt:10];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)spanSkipDefaultScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) windowWithLong:5 withLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorWindowWithTimeTest_$8_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueCountWithInt:10];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithTimeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(innerScheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "LJavaUtilList;", 0x82, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "LRxFunctionsAction1;", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testTimedAndCount);
  methods[2].selector = @selector(testTimed);
  methods[3].selector = @selector(listWithNSStringArray:);
  methods[4].selector = @selector(pushWithRxObserver:withId:withInt:);
  methods[5].selector = @selector(completeWithRxObserver:withInt:);
  methods[6].selector = @selector(observeWindowWithJavaUtilList:withJavaUtilList:);
  methods[7].selector = @selector(testExactWindowSize);
  methods[8].selector = @selector(testTakeFlatMapCompletes);
  methods[9].selector = @selector(timeCountDefaultScheduler);
  methods[10].selector = @selector(spanSkipDefaultScheduler);
  methods[11].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$2, "list", "[LNSString;", "([Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "push", "LRxObserver;LNSObject;I", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;TT;I)V", "complete", "LRxObserver;I", "(Lrx/Observer<*>;I)V", "observeWindow", "LJavaUtilList;LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Ljava/util/List<Ljava/util/List<TT;>;>;)Lrx/functions/Action1<Lrx/Observable<TT;>;>;", (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$3, (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$4, (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$5, (void *)&RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$6 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest = { "OperatorWindowWithTimeTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest;
}

@end

id<JavaUtilList> RxInternalOperatorsOperatorWindowWithTimeTest_listWithNSStringArray_(RxInternalOperatorsOperatorWindowWithTimeTest *self, IOSObjectArray *args) {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      [list addWithId:arg];
    }
  }
  return list;
}

void RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<RxObserver> observer, id value, jint delay) {
  [((RxScheduler_Worker *) nil_chk(self->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(observer, value) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

void RxInternalOperatorsOperatorWindowWithTimeTest_completeWithRxObserver_withInt_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<RxObserver> observer, jint delay) {
  [((RxScheduler_Worker *) nil_chk(self->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(observer) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

id<RxFunctionsAction1> RxInternalOperatorsOperatorWindowWithTimeTest_observeWindowWithJavaUtilList_withJavaUtilList_(RxInternalOperatorsOperatorWindowWithTimeTest *self, id<JavaUtilList> list, id<JavaUtilList> lists) {
  return create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(lists, list);
}

void RxInternalOperatorsOperatorWindowWithTimeTest_init(RxInternalOperatorsOperatorWindowWithTimeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest *new_RxInternalOperatorsOperatorWindowWithTimeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest, init)
}

RxInternalOperatorsOperatorWindowWithTimeTest *create_RxInternalOperatorsOperatorWindowWithTimeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithTimeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorWindowWithTimeTest)

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$1

- (void)callWithId:(RxSubscriber *)observer {
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"one", 10);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"two", 90);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"three", 110);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"four", 190);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"five", 210);
  RxInternalOperatorsOperatorWindowWithTimeTest_completeWithRxObserver_withInt_(this$0_, observer, 250);
}

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest:(RxInternalOperatorsOperatorWindowWithTimeTest *)outer$ {
  RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorWindowWithTimeTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorWindowWithTimeTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "testTimedAndCount", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$1;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest_$1 *self, RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$1 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$1, initWithRxInternalOperatorsOperatorWindowWithTimeTest_, outer$)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$1 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$1, initWithRxInternalOperatorsOperatorWindowWithTimeTest_, outer$)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$2

- (void)callWithId:(RxSubscriber *)observer {
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"one", 98);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"two", 99);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"three", 100);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"four", 101);
  RxInternalOperatorsOperatorWindowWithTimeTest_pushWithRxObserver_withId_withInt_(this$0_, observer, @"five", 102);
  RxInternalOperatorsOperatorWindowWithTimeTest_completeWithRxObserver_withInt_(this$0_, observer, 150);
}

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest:(RxInternalOperatorsOperatorWindowWithTimeTest *)outer$ {
  RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorWindowWithTimeTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorWindowWithTimeTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "testTimed", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$2;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest_$2 *self, RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$2 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$2, initWithRxInternalOperatorsOperatorWindowWithTimeTest_, outer$)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$2 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$2_initWithRxInternalOperatorsOperatorWindowWithTimeTest_(RxInternalOperatorsOperatorWindowWithTimeTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$2, initWithRxInternalOperatorsOperatorWindowWithTimeTest_, outer$)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$3

- (void)call {
  [((id<RxObserver>) nil_chk(val$observer_)) onNextWithId:val$value_];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
                            withId:(id)capture$1 {
  RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserver:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;LNSObject;", "(Lrx/Observer<TT;>;TT;)V", "Lrx/Observer<TT;>;", "TT;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "pushWithRxObserver:withId:withInt:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$3;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(RxInternalOperatorsOperatorWindowWithTimeTest_$3 *self, id<RxObserver> capture$0, id capture$1) {
  JreStrongAssign(&self->val$observer_, capture$0);
  JreStrongAssign(&self->val$value_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$3 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$3, initWithRxObserver_withId_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$3 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$3_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$3, initWithRxObserver_withId_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$4

- (void)call {
  [((id<RxObserver>) nil_chk(val$observer_)) onCompleted];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0 {
  RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;", "(Lrx/Observer<*>;)V", "Lrx/Observer<*>;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "completeWithRxObserver:withInt:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$4;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(RxInternalOperatorsOperatorWindowWithTimeTest_$4 *self, id<RxObserver> capture$0) {
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$4 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$4, initWithRxObserver_, capture$0)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$4 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$4, initWithRxObserver_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$5

- (void)callWithId:(RxObservable *)stringObservable {
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(self)];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                    withJavaUtilList:(id<JavaUtilList>)capture$1 {
  RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lists_);
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lists_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<TT;>;)V", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/util/List<TT;>;>;Ljava/util/List<TT;>;)V", "Ljava/util/List<Ljava/util/List<TT;>;>;", "Ljava/util/List<TT;>;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "observeWindowWithJavaUtilList:withJavaUtilList:", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observable<TT;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 7, -1, 8, 9, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$5;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *self, id<JavaUtilList> capture$0, id<JavaUtilList> capture$1) {
  JreStrongAssign(&self->val$lists_, capture$0);
  JreStrongAssign(&self->val$list_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$5 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> capture$0, id<JavaUtilList> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$5, initWithJavaUtilList_withJavaUtilList_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$5 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> capture$0, id<JavaUtilList> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$5, initWithJavaUtilList_withJavaUtilList_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1

- (void)onCompleted {
  [((id<JavaUtilList>) nil_chk(this$0_->val$lists_)) addWithId:create_JavaUtilArrayList_initWithJavaUtilCollection_(this$0_->val$list_)];
  [((id<JavaUtilList>) nil_chk(this$0_->val$list_)) clear];
}

- (void)onErrorWithNSException:(NSException *)e {
  OrgJunitAssert_failWithNSString_([((NSException *) nil_chk(e)) getMessage]);
}

- (void)onNextWithId:(id)args {
  [((id<JavaUtilList>) nil_chk(this$0_->val$list_)) addWithId:args];
}

- (instancetype)initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5:(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *)outer$ {
  RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorWindowWithTimeTest_$5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "LRxInternalOperatorsOperatorWindowWithTimeTest_$5;", "callWithId:", "Ljava/lang/Object;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *self, RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1, initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_, outer$)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1_initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_(RxInternalOperatorsOperatorWindowWithTimeTest_$5 *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$5_$1, initWithRxInternalOperatorsOperatorWindowWithTimeTest_$5_, outer$)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$6

- (RxObservable *)callWithId:(RxObservable *)w {
  return [((RxObservable *) nil_chk(w)) startWithWithId:JavaLangInteger_valueOfWithInt_(999999999)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithTimeTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "testTakeFlatMapCompletes", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$6;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$6_init(RxInternalOperatorsOperatorWindowWithTimeTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$6 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$6, init)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$6 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$6, init)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$7

- (RxObservable *)callWithId:(RxObservable *)w {
  return w;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithTimeTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "timeCountDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$7;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$7_init(RxInternalOperatorsOperatorWindowWithTimeTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$7 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$7, init)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$7 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$7, init)
}

@implementation RxInternalOperatorsOperatorWindowWithTimeTest_$8

- (RxObservable *)callWithId:(RxObservable *)w {
  return w;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithTimeTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithTimeTest;", "spanSkipDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/lang/Integer;>;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithTimeTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorWindowWithTimeTest_$8;
}

@end

void RxInternalOperatorsOperatorWindowWithTimeTest_$8_init(RxInternalOperatorsOperatorWindowWithTimeTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithTimeTest_$8 *new_RxInternalOperatorsOperatorWindowWithTimeTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$8, init)
}

RxInternalOperatorsOperatorWindowWithTimeTest_$8 *create_RxInternalOperatorsOperatorWindowWithTimeTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithTimeTest_$8, init)
}
