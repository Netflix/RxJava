//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorThrottleFirstTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorThrottleFirstTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorThrottleFirstTest () {
 @public
  RxSchedulersTestScheduler *scheduler_;
  RxScheduler_Worker *innerScheduler_;
  id<RxObserver> observer_;
}

- (void)publishCompletedWithRxObserver:(id<RxObserver>)observer
                              withLong:(jlong)delay;

- (void)publishErrorWithRxObserver:(id<RxObserver>)observer
                          withLong:(jlong)delay
             withJavaLangException:(JavaLangException *)error;

- (void)publishNextWithRxObserver:(id<RxObserver>)observer
                         withLong:(jlong)delay
                           withId:(id)value;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest, scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest, innerScheduler_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest, observer_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_publishCompletedWithRxObserver_withLong_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay);

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_publishErrorWithRxObserver_withLong_withJavaLangException_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay, JavaLangException *error);

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay, id value);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$6();

@interface RxInternalOperatorsOperatorThrottleFirstTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorThrottleFirstTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxInternalOperatorsOperatorThrottleFirstTest:(RxInternalOperatorsOperatorThrottleFirstTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirstTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$1, this$0_, RxInternalOperatorsOperatorThrottleFirstTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest_$1 *self, RxInternalOperatorsOperatorThrottleFirstTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$1 *new_RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$1 *create_RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$);

@interface RxInternalOperatorsOperatorThrottleFirstTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsOperatorThrottleFirstTest *this$0_;
}

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)initWithRxInternalOperatorsOperatorThrottleFirstTest:(RxInternalOperatorsOperatorThrottleFirstTest *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirstTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$2, this$0_, RxInternalOperatorsOperatorThrottleFirstTest *)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest_$2 *self, RxInternalOperatorsOperatorThrottleFirstTest *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$2 *new_RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$2 *create_RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$);

@interface RxInternalOperatorsOperatorThrottleFirstTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxObserver> val$observer_;
}

- (void)call;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirstTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$3, val$observer_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(RxInternalOperatorsOperatorThrottleFirstTest_$3 *self, id<RxObserver> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$3 *new_RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(id<RxObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$3 *create_RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(id<RxObserver> capture$0);

@interface RxInternalOperatorsOperatorThrottleFirstTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxObserver> val$observer_;
  JavaLangException *val$error_;
}

- (void)call;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
             withJavaLangException:(JavaLangException *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirstTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$4, val$observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$4, val$error_, JavaLangException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(RxInternalOperatorsOperatorThrottleFirstTest_$4 *self, id<RxObserver> capture$0, JavaLangException *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$4 *new_RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(id<RxObserver> capture$0, JavaLangException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$4 *create_RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(id<RxObserver> capture$0, JavaLangException *capture$1);

@interface RxInternalOperatorsOperatorThrottleFirstTest_$5 : NSObject < RxFunctionsAction0 > {
 @public
  id<RxObserver> val$observer_;
  id val$value_;
}

- (void)call;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
                            withId:(id)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorThrottleFirstTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$5, val$observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorThrottleFirstTest_$5, val$value_, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(RxInternalOperatorsOperatorThrottleFirstTest_$5 *self, id<RxObserver> capture$0, id capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$5 *new_RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorThrottleFirstTest_$5 *create_RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1);

@implementation RxInternalOperatorsOperatorThrottleFirstTest

- (void)before {
  JreStrongAssignAndConsume(&scheduler_, new_RxSchedulersTestScheduler_init());
  JreStrongAssign(&innerScheduler_, [scheduler_ createWorker]);
  JreStrongAssign(&observer_, OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_()));
}

- (void)testThrottlingWithCompleted {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(self));
  RxObservable *sampled = [((RxObservable *) nil_chk(source)) throttleFirstWithLong:400 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(sampled)) subscribeWithRxObserver:observer_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(0)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(0)])) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testThrottlingWithError {
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(self));
  RxObservable *sampled = [((RxObservable *) nil_chk(source)) throttleFirstWithLong:400 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler_];
  [((RxObservable *) nil_chk(sampled)) subscribeWithRxObserver:observer_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((RxSchedulersTestScheduler *) nil_chk(scheduler_)) advanceTimeToWithLong:400 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [inOrder verifyNoMoreInteractions];
}

- (void)publishCompletedWithRxObserver:(id<RxObserver>)observer
                              withLong:(jlong)delay {
  RxInternalOperatorsOperatorThrottleFirstTest_publishCompletedWithRxObserver_withLong_(self, observer, delay);
}

- (void)publishErrorWithRxObserver:(id<RxObserver>)observer
                          withLong:(jlong)delay
             withJavaLangException:(JavaLangException *)error {
  RxInternalOperatorsOperatorThrottleFirstTest_publishErrorWithRxObserver_withLong_withJavaLangException_(self, observer, delay, error);
}

- (void)publishNextWithRxObserver:(id<RxObserver>)observer
                         withLong:(jlong)delay
                           withId:(id)value {
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(self, observer, delay, value);
}

- (void)testThrottle {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *o = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(o)) throttleFirstWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:s])) subscribeWithRxObserver:observer];
  [s advanceTimeToWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [s advanceTimeToWithLong:501 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [s advanceTimeToWithLong:600 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [s advanceTimeToWithLong:700 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [s advanceTimeToWithLong:1001 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [s advanceTimeToWithLong:1501 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onCompleted];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)timed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) throttleFirstWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)throttleWithoutAdvancingTimeOfTestScheduler {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *o = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(o)) throttleFirstWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:s])) subscribeWithRxObserver:observer];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [o onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)throttleWithTestSchedulerTimeOfZero {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxSchedulersTestScheduler *s = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *o = RxSubjectsPublishSubject_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(o)) throttleFirstWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:s])) subscribeWithRxObserver:observer];
  [s advanceTimeByWithLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [o onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [o onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(observer))) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorThrottleFirstTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(scheduler_);
  RELEASE_(innerScheduler_);
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testThrottlingWithCompleted);
  methods[2].selector = @selector(testThrottlingWithError);
  methods[3].selector = @selector(publishCompletedWithRxObserver:withLong:);
  methods[4].selector = @selector(publishErrorWithRxObserver:withLong:withJavaLangException:);
  methods[5].selector = @selector(publishNextWithRxObserver:withLong:withId:);
  methods[6].selector = @selector(testThrottle);
  methods[7].selector = @selector(timed);
  methods[8].selector = @selector(throttleWithoutAdvancingTimeOfTestScheduler);
  methods[9].selector = @selector(throttleWithTestSchedulerTimeOfZero);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$0, (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$1, (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$2, "publishCompleted", "LRxObserver;J", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;J)V", "publishError", "LRxObserver;JLJavaLangException;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;JLjava/lang/Exception;)V", "publishNext", "LRxObserver;JLNSObject;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;JTT;)V", (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$3, (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$4, (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$5, (void *)&RxInternalOperatorsOperatorThrottleFirstTest__Annotations$6, "Lrx/Observer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest = { "OperatorThrottleFirstTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_publishCompletedWithRxObserver_withLong_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay) {
  [((RxScheduler_Worker *) nil_chk(self->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(observer) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

void RxInternalOperatorsOperatorThrottleFirstTest_publishErrorWithRxObserver_withLong_withJavaLangException_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay, JavaLangException *error) {
  [((RxScheduler_Worker *) nil_chk(self->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(observer, error) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

void RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(RxInternalOperatorsOperatorThrottleFirstTest *self, id<RxObserver> observer, jlong delay, id value) {
  [((RxScheduler_Worker *) nil_chk(self->innerScheduler_)) scheduleWithRxFunctionsAction0:create_RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(observer, value) withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

void RxInternalOperatorsOperatorThrottleFirstTest_init(RxInternalOperatorsOperatorThrottleFirstTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest *new_RxInternalOperatorsOperatorThrottleFirstTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest, init)
}

RxInternalOperatorsOperatorThrottleFirstTest *create_RxInternalOperatorsOperatorThrottleFirstTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorThrottleFirstTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorThrottleFirstTest)

@implementation RxInternalOperatorsOperatorThrottleFirstTest_$1

- (void)callWithId:(RxSubscriber *)observer {
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 100, @"one");
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 300, @"two");
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 900, @"three");
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 905, @"four");
  RxInternalOperatorsOperatorThrottleFirstTest_publishCompletedWithRxObserver_withLong_(this$0_, observer, 1000);
}

- (instancetype)initWithRxInternalOperatorsOperatorThrottleFirstTest:(RxInternalOperatorsOperatorThrottleFirstTest *)outer$ {
  RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorThrottleFirstTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorThrottleFirstTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorThrottleFirstTest;", "testThrottlingWithCompleted", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest_$1;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest_$1 *self, RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest_$1 *new_RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$1, initWithRxInternalOperatorsOperatorThrottleFirstTest_, outer$)
}

RxInternalOperatorsOperatorThrottleFirstTest_$1 *create_RxInternalOperatorsOperatorThrottleFirstTest_$1_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$1, initWithRxInternalOperatorsOperatorThrottleFirstTest_, outer$)
}

@implementation RxInternalOperatorsOperatorThrottleFirstTest_$2

- (void)callWithId:(RxSubscriber *)observer {
  JavaLangException *error = create_RxExceptionsTestException_init();
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 100, @"one");
  RxInternalOperatorsOperatorThrottleFirstTest_publishNextWithRxObserver_withLong_withId_(this$0_, observer, 200, @"two");
  RxInternalOperatorsOperatorThrottleFirstTest_publishErrorWithRxObserver_withLong_withJavaLangException_(this$0_, observer, 300, error);
}

- (instancetype)initWithRxInternalOperatorsOperatorThrottleFirstTest:(RxInternalOperatorsOperatorThrottleFirstTest *)outer$ {
  RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxInternalOperatorsOperatorThrottleFirstTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorThrottleFirstTest;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorThrottleFirstTest;", "testThrottlingWithError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest_$2;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest_$2 *self, RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest_$2 *new_RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$2, initWithRxInternalOperatorsOperatorThrottleFirstTest_, outer$)
}

RxInternalOperatorsOperatorThrottleFirstTest_$2 *create_RxInternalOperatorsOperatorThrottleFirstTest_$2_initWithRxInternalOperatorsOperatorThrottleFirstTest_(RxInternalOperatorsOperatorThrottleFirstTest *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$2, initWithRxInternalOperatorsOperatorThrottleFirstTest_, outer$)
}

@implementation RxInternalOperatorsOperatorThrottleFirstTest_$3

- (void)call {
  [((id<RxObserver>) nil_chk(val$observer_)) onCompleted];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0 {
  RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;", "(Lrx/Observer<TT;>;)V", "Lrx/Observer<TT;>;", "LRxInternalOperatorsOperatorThrottleFirstTest;", "publishCompletedWithRxObserver:withLong:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest_$3;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(RxInternalOperatorsOperatorThrottleFirstTest_$3 *self, id<RxObserver> capture$0) {
  JreStrongAssign(&self->val$observer_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest_$3 *new_RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$3, initWithRxObserver_, capture$0)
}

RxInternalOperatorsOperatorThrottleFirstTest_$3 *create_RxInternalOperatorsOperatorThrottleFirstTest_$3_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$3, initWithRxObserver_, capture$0)
}

@implementation RxInternalOperatorsOperatorThrottleFirstTest_$4

- (void)call {
  [((id<RxObserver>) nil_chk(val$observer_)) onErrorWithNSException:val$error_];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
             withJavaLangException:(JavaLangException *)capture$1 {
  RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  RELEASE_(val$error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserver:withJavaLangException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$error_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;LJavaLangException;", "(Lrx/Observer<TT;>;Ljava/lang/Exception;)V", "Lrx/Observer<TT;>;", "LRxInternalOperatorsOperatorThrottleFirstTest;", "publishErrorWithRxObserver:withLong:withJavaLangException:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest_$4;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(RxInternalOperatorsOperatorThrottleFirstTest_$4 *self, id<RxObserver> capture$0, JavaLangException *capture$1) {
  JreStrongAssign(&self->val$observer_, capture$0);
  JreStrongAssign(&self->val$error_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest_$4 *new_RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(id<RxObserver> capture$0, JavaLangException *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$4, initWithRxObserver_withJavaLangException_, capture$0, capture$1)
}

RxInternalOperatorsOperatorThrottleFirstTest_$4 *create_RxInternalOperatorsOperatorThrottleFirstTest_$4_initWithRxObserver_withJavaLangException_(id<RxObserver> capture$0, JavaLangException *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$4, initWithRxObserver_withJavaLangException_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorThrottleFirstTest_$5

- (void)call {
  [((id<RxObserver>) nil_chk(val$observer_)) onNextWithId:val$value_];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0
                            withId:(id)capture$1 {
  RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$observer_);
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObserver:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$observer_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxObserver;LNSObject;", "(Lrx/Observer<TT;>;TT;)V", "Lrx/Observer<TT;>;", "TT;", "LRxInternalOperatorsOperatorThrottleFirstTest;", "publishNextWithRxObserver:withLong:withId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorThrottleFirstTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, -1, -1 };
  return &_RxInternalOperatorsOperatorThrottleFirstTest_$5;
}

@end

void RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(RxInternalOperatorsOperatorThrottleFirstTest_$5 *self, id<RxObserver> capture$0, id capture$1) {
  JreStrongAssign(&self->val$observer_, capture$0);
  JreStrongAssign(&self->val$value_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorThrottleFirstTest_$5 *new_RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$5, initWithRxObserver_withId_, capture$0, capture$1)
}

RxInternalOperatorsOperatorThrottleFirstTest_$5 *create_RxInternalOperatorsOperatorThrottleFirstTest_$5_initWithRxObserver_withId_(id<RxObserver> capture$0, id capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorThrottleFirstTest_$5, initWithRxObserver_withId_, capture$0, capture$1)
}
