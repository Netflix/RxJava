//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observables/AsyncOnSubscribeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsAction2.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc3.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObservablesAsyncOnSubscribe.h"
#include "RxObservablesAsyncOnSubscribeTest.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/MockitoAnnotations.h"

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$17();

@interface RxObservablesAsyncOnSubscribeTest_Foo : NSObject

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_Foo)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_Foo_init(RxObservablesAsyncOnSubscribeTest_Foo *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_Foo *new_RxObservablesAsyncOnSubscribeTest_Foo_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_Foo *create_RxObservablesAsyncOnSubscribeTest_Foo_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribeTest_Foo)

@interface RxObservablesAsyncOnSubscribeTest_Bar : RxObservablesAsyncOnSubscribeTest_Foo

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_Bar)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_Bar_init(RxObservablesAsyncOnSubscribeTest_Bar *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_Bar *new_RxObservablesAsyncOnSubscribeTest_Bar_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_Bar *create_RxObservablesAsyncOnSubscribeTest_Bar_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribeTest_Bar)

@interface RxObservablesAsyncOnSubscribeTest_$1 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$1)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$1_init(RxObservablesAsyncOnSubscribeTest_$1 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$1 *new_RxObservablesAsyncOnSubscribeTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$1 *create_RxObservablesAsyncOnSubscribeTest_$1_init();

@interface RxObservablesAsyncOnSubscribeTest_$2 : NSObject < RxFunctionsFunc3 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$2)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$2, val$scheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxObservablesAsyncOnSubscribeTest_$2 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$2 *new_RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$2 *create_RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@interface RxObservablesAsyncOnSubscribeTest_$3 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$3)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$3_init(RxObservablesAsyncOnSubscribeTest_$3 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$3 *new_RxObservablesAsyncOnSubscribeTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$3 *create_RxObservablesAsyncOnSubscribeTest_$3_init();

@interface RxObservablesAsyncOnSubscribeTest_$4 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$4)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$4_init(RxObservablesAsyncOnSubscribeTest_$4 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$4 *new_RxObservablesAsyncOnSubscribeTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$4 *create_RxObservablesAsyncOnSubscribeTest_$4_init();

@interface RxObservablesAsyncOnSubscribeTest_$5 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$5)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$5_init(RxObservablesAsyncOnSubscribeTest_$5 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$5 *new_RxObservablesAsyncOnSubscribeTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$5 *create_RxObservablesAsyncOnSubscribeTest_$5_init();

@interface RxObservablesAsyncOnSubscribeTest_$6 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$lastState_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$6)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$6, val$lastState_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesAsyncOnSubscribeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$6 *new_RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$6 *create_RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesAsyncOnSubscribeTest_$7 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$7)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$7_init(RxObservablesAsyncOnSubscribeTest_$7 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$7 *new_RxObservablesAsyncOnSubscribeTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$7 *create_RxObservablesAsyncOnSubscribeTest_$7_init();

@interface RxObservablesAsyncOnSubscribeTest_$8 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$8)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$8_init(RxObservablesAsyncOnSubscribeTest_$8 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$8 *new_RxObservablesAsyncOnSubscribeTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$8 *create_RxObservablesAsyncOnSubscribeTest_$8_init();

@interface RxObservablesAsyncOnSubscribeTest_$9 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$9)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$9_init(RxObservablesAsyncOnSubscribeTest_$9 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$9 *new_RxObservablesAsyncOnSubscribeTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$9 *create_RxObservablesAsyncOnSubscribeTest_$9_init();

@interface RxObservablesAsyncOnSubscribeTest_$10 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$10)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$10_init(RxObservablesAsyncOnSubscribeTest_$10 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$10 *new_RxObservablesAsyncOnSubscribeTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$10 *create_RxObservablesAsyncOnSubscribeTest_$10_init();

@interface RxObservablesAsyncOnSubscribeTest_$11 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$11)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$11_init(RxObservablesAsyncOnSubscribeTest_$11 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$11 *new_RxObservablesAsyncOnSubscribeTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$11 *create_RxObservablesAsyncOnSubscribeTest_$11_init();

@interface RxObservablesAsyncOnSubscribeTest_$12 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$12)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$12_init(RxObservablesAsyncOnSubscribeTest_$12 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$12 *new_RxObservablesAsyncOnSubscribeTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$12 *create_RxObservablesAsyncOnSubscribeTest_$12_init();

@interface RxObservablesAsyncOnSubscribeTest_$13 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$13)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$13_init(RxObservablesAsyncOnSubscribeTest_$13 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$13 *new_RxObservablesAsyncOnSubscribeTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$13 *create_RxObservablesAsyncOnSubscribeTest_$13_init();

@interface RxObservablesAsyncOnSubscribeTest_$14 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$14)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$14_init(RxObservablesAsyncOnSubscribeTest_$14 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$14 *new_RxObservablesAsyncOnSubscribeTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$14 *create_RxObservablesAsyncOnSubscribeTest_$14_init();

@interface RxObservablesAsyncOnSubscribeTest_$15 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$15)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$15_init(RxObservablesAsyncOnSubscribeTest_$15 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$15 *new_RxObservablesAsyncOnSubscribeTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$15 *create_RxObservablesAsyncOnSubscribeTest_$15_init();

@interface RxObservablesAsyncOnSubscribeTest_$16 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$16)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$16_init(RxObservablesAsyncOnSubscribeTest_$16 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$16 *new_RxObservablesAsyncOnSubscribeTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$16 *create_RxObservablesAsyncOnSubscribeTest_$16_init();

@interface RxObservablesAsyncOnSubscribeTest_$17 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$17)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$17_init(RxObservablesAsyncOnSubscribeTest_$17 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$17 *new_RxObservablesAsyncOnSubscribeTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$17 *create_RxObservablesAsyncOnSubscribeTest_$17_init();

@interface RxObservablesAsyncOnSubscribeTest_$18 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$18)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$18_init(RxObservablesAsyncOnSubscribeTest_$18 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$18 *new_RxObservablesAsyncOnSubscribeTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$18 *create_RxObservablesAsyncOnSubscribeTest_$18_init();

@interface RxObservablesAsyncOnSubscribeTest_$19 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$19)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$19_init(RxObservablesAsyncOnSubscribeTest_$19 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$19 *new_RxObservablesAsyncOnSubscribeTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$19 *create_RxObservablesAsyncOnSubscribeTest_$19_init();

@interface RxObservablesAsyncOnSubscribeTest_$20 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$20)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$20_init(RxObservablesAsyncOnSubscribeTest_$20 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$20 *new_RxObservablesAsyncOnSubscribeTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$20 *create_RxObservablesAsyncOnSubscribeTest_$20_init();

@interface RxObservablesAsyncOnSubscribeTest_$21 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$21)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$21_init(RxObservablesAsyncOnSubscribeTest_$21 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$21 *new_RxObservablesAsyncOnSubscribeTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$21 *create_RxObservablesAsyncOnSubscribeTest_$21_init();

@interface RxObservablesAsyncOnSubscribeTest_$22 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$22)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$22_init(RxObservablesAsyncOnSubscribeTest_$22 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$22 *new_RxObservablesAsyncOnSubscribeTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$22 *create_RxObservablesAsyncOnSubscribeTest_$22_init();

@interface RxObservablesAsyncOnSubscribeTest_$23 : NSObject < RxFunctionsFunc3 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$l1_;
  JavaUtilConcurrentAtomicAtomicInteger *val$l2_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$23)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$23, val$l1_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$23, val$l2_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesAsyncOnSubscribeTest_$23 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23 *new_RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23 *create_RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxObservablesAsyncOnSubscribeTest_$23_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesAsyncOnSubscribeTest_$23 *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$23:(RxObservablesAsyncOnSubscribeTest_$23 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$23_$1)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$23_$1, this$0_, RxObservablesAsyncOnSubscribeTest_$23 *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23_$1 *self, RxObservablesAsyncOnSubscribeTest_$23 *outer$);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23_$1 *new_RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23_$1 *create_RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$);

@interface RxObservablesAsyncOnSubscribeTest_$23_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesAsyncOnSubscribeTest_$23 *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$23:(RxObservablesAsyncOnSubscribeTest_$23 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$23_$2)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$23_$2, this$0_, RxObservablesAsyncOnSubscribeTest_$23 *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23_$2 *self, RxObservablesAsyncOnSubscribeTest_$23 *outer$);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23_$2 *new_RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$23_$2 *create_RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$);

@interface RxObservablesAsyncOnSubscribeTest_$24 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$24)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$24_init(RxObservablesAsyncOnSubscribeTest_$24 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$24 *new_RxObservablesAsyncOnSubscribeTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$24 *create_RxObservablesAsyncOnSubscribeTest_$24_init();

@interface RxObservablesAsyncOnSubscribeTest_$25 : NSObject < RxFunctionsFunc3 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
  JavaUtilConcurrentAtomicAtomicInteger *val$l1_;
  JavaUtilConcurrentAtomicAtomicInteger *val$l2_;
  JavaUtilConcurrentAtomicAtomicReference *val$sub_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
      withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$25)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25, val$scheduler_, RxSchedulersTestScheduler *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25, val$l1_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25, val$l2_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25, val$sub_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxObservablesAsyncOnSubscribeTest_$25 *self, RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25 *new_RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25 *create_RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3);

@interface RxObservablesAsyncOnSubscribeTest_$25_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesAsyncOnSubscribeTest_$25 *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$25:(RxObservablesAsyncOnSubscribeTest_$25 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$25_$1)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25_$1, this$0_, RxObservablesAsyncOnSubscribeTest_$25 *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25_$1 *self, RxObservablesAsyncOnSubscribeTest_$25 *outer$);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25_$1 *new_RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25_$1 *create_RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$);

@interface RxObservablesAsyncOnSubscribeTest_$25_$2 : NSObject < RxFunctionsAction0 > {
 @public
  RxObservablesAsyncOnSubscribeTest_$25 *this$0_;
}

- (void)call;

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$25:(RxObservablesAsyncOnSubscribeTest_$25 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$25_$2)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribeTest_$25_$2, this$0_, RxObservablesAsyncOnSubscribeTest_$25 *)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25_$2 *self, RxObservablesAsyncOnSubscribeTest_$25 *outer$);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25_$2 *new_RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$25_$2 *create_RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$);

@interface RxObservablesAsyncOnSubscribeTest_$26 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(JavaLangLong *)state
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$26)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$26_init(RxObservablesAsyncOnSubscribeTest_$26 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$26 *new_RxObservablesAsyncOnSubscribeTest_$26_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$26 *create_RxObservablesAsyncOnSubscribeTest_$26_init();

@interface RxObservablesAsyncOnSubscribeTest_$27 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$27)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$27_init(RxObservablesAsyncOnSubscribeTest_$27 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$27 *new_RxObservablesAsyncOnSubscribeTest_$27_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$27 *create_RxObservablesAsyncOnSubscribeTest_$27_init();

@interface RxObservablesAsyncOnSubscribeTest_$28 : NSObject < RxFunctionsFunc3 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribeTest_$28)

__attribute__((unused)) static void RxObservablesAsyncOnSubscribeTest_$28_init(RxObservablesAsyncOnSubscribeTest_$28 *self);

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$28 *new_RxObservablesAsyncOnSubscribeTest_$28_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesAsyncOnSubscribeTest_$28 *create_RxObservablesAsyncOnSubscribeTest_$28_init();

@implementation RxObservablesAsyncOnSubscribeTest

- (void)setup {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
  JreStrongAssignAndConsume(&subscriber_, new_RxObserversTestSubscriber_initWithRxObserver_withLong_(o_, 0LL));
}

- (void)testSerializesConcurrentObservables {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesAsyncOnSubscribe *os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$1_init(), create_RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(scheduler));
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservablesAsyncOnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:2];
  [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:3];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:3];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8) } count:8 type:JavaLangInteger_class_()]];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
}

- (void)testSubscribedByBufferingOperator {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(create_RxObservablesAsyncOnSubscribeTest_$3_init());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) observeOnWithRxScheduler:scheduler])) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [scheduler advanceTimeByWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValueCountWithInt:JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
}

- (void)testOnUnsubscribeHasCorrectState {
  JavaUtilConcurrentAtomicAtomicInteger *lastState = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(-1);
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_withRxFunctionsAction1_(create_RxObservablesAsyncOnSubscribeTest_$4_init(), create_RxObservablesAsyncOnSubscribeTest_$5_init(), create_RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(lastState));
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:3];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Final state when unsubscribing is not correct", 4, [lastState get]);
}

- (void)testOnCompleteOuter {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(create_RxObservablesAsyncOnSubscribeTest_$7_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testTryOnNextTwice {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(create_RxObservablesAsyncOnSubscribeTest_$8_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertErrorWithIOSClass:JavaLangIllegalStateException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
}

- (void)testThrowException {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(create_RxObservablesAsyncOnSubscribeTest_$9_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testThrowExceptionAfterTerminal {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$10_init(), create_RxObservablesAsyncOnSubscribeTest_$11_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testOnNextAfterCompleted {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$12_init(), create_RxObservablesAsyncOnSubscribeTest_$13_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testOnNextAfterError {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$14_init(), create_RxObservablesAsyncOnSubscribeTest_$15_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testEmittingEmptyObservable {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$16_init(), create_RxObservablesAsyncOnSubscribeTest_$17_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testOnErrorOuter {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$18_init(), create_RxObservablesAsyncOnSubscribeTest_$19_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testOnCompleteFollowedByOnErrorOuter {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$20_init(), create_RxObservablesAsyncOnSubscribeTest_$21_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
}

- (void)testUnsubscribesFromAllSelfTerminatedObservables {
  JavaUtilConcurrentAtomicAtomicInteger *l1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *l2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$22_init(), create_RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(l1, l2));
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"did not unsub from first observable after terminal", 1, [l1 get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"did not unsub from second observable after terminal", 1, [l2 get]);
  id<JavaUtilList> onNextEvents = [((RxObserversTestSubscriber *) nil_chk(subscriber_)) getOnNextEvents];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(create_JavaLangInteger_initWithInt_(1), [onNextEvents getWithInt:0]);
  OrgJunitAssert_assertEqualsWithId_withId_(create_JavaLangInteger_initWithInt_(2), [onNextEvents getWithInt:1]);
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertCompleted];
}

- (void)testUnsubscribesFromAllNonTerminatedObservables {
  JavaUtilConcurrentAtomicAtomicInteger *l1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *l2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  JavaUtilConcurrentAtomicAtomicReference *sub = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$24_init(), create_RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(scheduler, l1, l2, sub));
  id<RxSubscription> subscription = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) observeOnWithRxScheduler:scheduler withInt:1])) subscribeWithRxSubscriber:subscriber_];
  [sub setWithId:subscription];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [scheduler triggerActions];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:1];
  [scheduler triggerActions];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValueCountWithInt:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"did not unsub from 1st observable after terminal", 1, [l1 get]);
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"did not unsub from Observable.never() inner obs", 1, [l2 get]);
}

- (void)testGenerics {
  RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(create_RxObservablesAsyncOnSubscribeTest_$26_init());
}

- (void)testUnderdeliveryCorrection {
  id<RxObservable_OnSubscribe> os = RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(create_RxObservablesAsyncOnSubscribeTest_$27_init(), create_RxObservablesAsyncOnSubscribeTest_$28_init());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:subscriber_];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoValues];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValueCountWithInt:2];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) requestMoreWithLong:5];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNoErrors];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertValueCountWithInt:7];
  [((RxObserversTestSubscriber *) nil_chk(subscriber_)) assertNotCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(o_);
  RELEASE_(subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setup);
  methods[1].selector = @selector(testSerializesConcurrentObservables);
  methods[2].selector = @selector(testSubscribedByBufferingOperator);
  methods[3].selector = @selector(testOnUnsubscribeHasCorrectState);
  methods[4].selector = @selector(testOnCompleteOuter);
  methods[5].selector = @selector(testTryOnNextTwice);
  methods[6].selector = @selector(testThrowException);
  methods[7].selector = @selector(testThrowExceptionAfterTerminal);
  methods[8].selector = @selector(testOnNextAfterCompleted);
  methods[9].selector = @selector(testOnNextAfterError);
  methods[10].selector = @selector(testEmittingEmptyObservable);
  methods[11].selector = @selector(testOnErrorOuter);
  methods[12].selector = @selector(testOnCompleteFollowedByOnErrorOuter);
  methods[13].selector = @selector(testUnsubscribesFromAllSelfTerminatedObservables);
  methods[14].selector = @selector(testUnsubscribesFromAllNonTerminatedObservables);
  methods[15].selector = @selector(testGenerics);
  methods[16].selector = @selector(testUnderdeliveryCorrection);
  methods[17].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "o_", "LRxObserver;", .constantValue.asLong = 0, 0x1, -1, -1, 18, 19 },
    { "subscriber_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x0, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$1, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$2, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$3, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$4, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$5, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$6, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$7, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$8, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$9, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$10, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$11, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$12, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$13, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$14, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$15, (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$16, "Lrx/Observer<Ljava/lang/Integer;>;", (void *)&RxObservablesAsyncOnSubscribeTest__Annotations$17, "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxObservablesAsyncOnSubscribeTest_Foo;LRxObservablesAsyncOnSubscribeTest_Bar;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest = { "AsyncOnSubscribeTest", "rx.observables", ptrTable, methods, fields, 7, 0x1, 18, 2, -1, 21, -1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest;
}

@end

void RxObservablesAsyncOnSubscribeTest_init(RxObservablesAsyncOnSubscribeTest *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest *new_RxObservablesAsyncOnSubscribeTest_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest, init)
}

RxObservablesAsyncOnSubscribeTest *create_RxObservablesAsyncOnSubscribeTest_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest, init)
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesAsyncOnSubscribeTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesAsyncOnSubscribeTest)

@implementation RxObservablesAsyncOnSubscribeTest_Foo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_Foo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_Foo = { "Foo", "rx.observables", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_Foo;
}

@end

void RxObservablesAsyncOnSubscribeTest_Foo_init(RxObservablesAsyncOnSubscribeTest_Foo *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_Foo *new_RxObservablesAsyncOnSubscribeTest_Foo_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_Foo, init)
}

RxObservablesAsyncOnSubscribeTest_Foo *create_RxObservablesAsyncOnSubscribeTest_Foo_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_Foo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesAsyncOnSubscribeTest_Foo)

@implementation RxObservablesAsyncOnSubscribeTest_Bar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_Bar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_Bar = { "Bar", "rx.observables", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_Bar;
}

@end

void RxObservablesAsyncOnSubscribeTest_Bar_init(RxObservablesAsyncOnSubscribeTest_Bar *self) {
  RxObservablesAsyncOnSubscribeTest_Foo_init(self);
}

RxObservablesAsyncOnSubscribeTest_Bar *new_RxObservablesAsyncOnSubscribeTest_Bar_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_Bar, init)
}

RxObservablesAsyncOnSubscribeTest_Bar *create_RxObservablesAsyncOnSubscribeTest_Bar_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_Bar, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesAsyncOnSubscribeTest_Bar)

@implementation RxObservablesAsyncOnSubscribeTest_$1

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testSerializesConcurrentObservables", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$1 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$1;
}

@end

void RxObservablesAsyncOnSubscribeTest_$1_init(RxObservablesAsyncOnSubscribeTest_$1 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$1 *new_RxObservablesAsyncOnSubscribeTest_$1_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$1, init)
}

RxObservablesAsyncOnSubscribeTest_$1 *create_RxObservablesAsyncOnSubscribeTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$1, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  if ([((JavaLangInteger *) nil_chk(state)) intValue] == 1) {
    RxObservable *o1 = [((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4)))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:val$scheduler_];
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:o1];
  }
  else if ([state intValue] == 2) {
    RxObservable *o = RxObservable_justWithId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8));
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:o];
  }
  else [((id<RxObserver>) nil_chk(observer)) onCompleted];
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxSchedulersTestScheduler;", "LRxObservablesAsyncOnSubscribeTest;", "testSerializesConcurrentObservables", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$2 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$2;
}

@end

void RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxObservablesAsyncOnSubscribeTest_$2 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$2 *new_RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}

RxObservablesAsyncOnSubscribeTest_$2 *create_RxObservablesAsyncOnSubscribeTest_$2_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$2, initWithRxSchedulersTestScheduler_, capture$0)
}

@implementation RxObservablesAsyncOnSubscribeTest_$3

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_rangeWithInt_withInt_(1, [((JavaLangLong *) nil_chk(requested)) intValue])];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LRxObserver;", "(Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)V", "LRxObservablesAsyncOnSubscribeTest;", "testSubscribedByBufferingOperator", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$3 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$3;
}

@end

void RxObservablesAsyncOnSubscribeTest_$3_init(RxObservablesAsyncOnSubscribeTest_$3 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$3 *new_RxObservablesAsyncOnSubscribeTest_$3_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$3, init)
}

RxObservablesAsyncOnSubscribeTest_$3 *create_RxObservablesAsyncOnSubscribeTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$3, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$4

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testOnUnsubscribeHasCorrectState", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$4 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$4;
}

@end

void RxObservablesAsyncOnSubscribeTest_$4_init(RxObservablesAsyncOnSubscribeTest_$4 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$4 *new_RxObservablesAsyncOnSubscribeTest_$4_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$4, init)
}

RxObservablesAsyncOnSubscribeTest_$4 *create_RxObservablesAsyncOnSubscribeTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$4, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$5

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  if ([((JavaLangInteger *) nil_chk(state)) intValue] < 3) {
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_justWithId_(state)];
  }
  else [((id<RxObserver>) nil_chk(observer)) onCompleted];
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testOnUnsubscribeHasCorrectState", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$5 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$5;
}

@end

void RxObservablesAsyncOnSubscribeTest_$5_init(RxObservablesAsyncOnSubscribeTest_$5 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$5 *new_RxObservablesAsyncOnSubscribeTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$5, init)
}

RxObservablesAsyncOnSubscribeTest_$5 *create_RxObservablesAsyncOnSubscribeTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$5, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$6

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$lastState_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lastState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lastState_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesAsyncOnSubscribeTest;", "testOnUnsubscribeHasCorrectState", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$6 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$6;
}

@end

void RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesAsyncOnSubscribeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$lastState_, capture$0);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$6 *new_RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesAsyncOnSubscribeTest_$6 *create_RxObservablesAsyncOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesAsyncOnSubscribeTest_$7

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LRxObserver;", "(Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)V", "LRxObservablesAsyncOnSubscribeTest;", "testOnCompleteOuter", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$7 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$7;
}

@end

void RxObservablesAsyncOnSubscribeTest_$7_init(RxObservablesAsyncOnSubscribeTest_$7 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$7 *new_RxObservablesAsyncOnSubscribeTest_$7_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$7, init)
}

RxObservablesAsyncOnSubscribeTest_$7 *create_RxObservablesAsyncOnSubscribeTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$7, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$8

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))];
  [observer onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2))];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LRxObserver;", "(Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)V", "LRxObservablesAsyncOnSubscribeTest;", "testTryOnNextTwice", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$8 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$8;
}

@end

void RxObservablesAsyncOnSubscribeTest_$8_init(RxObservablesAsyncOnSubscribeTest_$8 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$8 *new_RxObservablesAsyncOnSubscribeTest_$8_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$8, init)
}

RxObservablesAsyncOnSubscribeTest_$8 *create_RxObservablesAsyncOnSubscribeTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$8, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$9

- (void)callWithId:(JavaLangLong *)requested
            withId:(id<RxObserver>)observer {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LRxObserver;", "(Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)V", "LRxObservablesAsyncOnSubscribeTest;", "testThrowException", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$9 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$9;
}

@end

void RxObservablesAsyncOnSubscribeTest_$9_init(RxObservablesAsyncOnSubscribeTest_$9 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$9 *new_RxObservablesAsyncOnSubscribeTest_$9_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$9, init)
}

RxObservablesAsyncOnSubscribeTest_$9 *create_RxObservablesAsyncOnSubscribeTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$9, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$10

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testThrowExceptionAfterTerminal", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$10 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$10;
}

@end

void RxObservablesAsyncOnSubscribeTest_$10_init(RxObservablesAsyncOnSubscribeTest_$10 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$10 *new_RxObservablesAsyncOnSubscribeTest_$10_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$10, init)
}

RxObservablesAsyncOnSubscribeTest_$10 *create_RxObservablesAsyncOnSubscribeTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$10, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$11

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onCompleted];
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testThrowExceptionAfterTerminal", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$11 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$11;
}

@end

void RxObservablesAsyncOnSubscribeTest_$11_init(RxObservablesAsyncOnSubscribeTest_$11 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$11 *new_RxObservablesAsyncOnSubscribeTest_$11_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$11, init)
}

RxObservablesAsyncOnSubscribeTest_$11 *create_RxObservablesAsyncOnSubscribeTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$11, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$12

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testOnNextAfterCompleted", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$12 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$12;
}

@end

void RxObservablesAsyncOnSubscribeTest_$12_init(RxObservablesAsyncOnSubscribeTest_$12 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$12 *new_RxObservablesAsyncOnSubscribeTest_$12_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$12, init)
}

RxObservablesAsyncOnSubscribeTest_$12 *create_RxObservablesAsyncOnSubscribeTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$12, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$13

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onCompleted];
  [observer onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))];
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testOnNextAfterCompleted", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$13 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$13;
}

@end

void RxObservablesAsyncOnSubscribeTest_$13_init(RxObservablesAsyncOnSubscribeTest_$13 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$13 *new_RxObservablesAsyncOnSubscribeTest_$13_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$13, init)
}

RxObservablesAsyncOnSubscribeTest_$13 *create_RxObservablesAsyncOnSubscribeTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$13, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$14

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testOnNextAfterError", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$14 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$14;
}

@end

void RxObservablesAsyncOnSubscribeTest_$14_init(RxObservablesAsyncOnSubscribeTest_$14 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$14 *new_RxObservablesAsyncOnSubscribeTest_$14_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$14, init)
}

RxObservablesAsyncOnSubscribeTest_$14 *create_RxObservablesAsyncOnSubscribeTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$14, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$15

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  [observer onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))];
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testOnNextAfterError", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$15 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$15;
}

@end

void RxObservablesAsyncOnSubscribeTest_$15_init(RxObservablesAsyncOnSubscribeTest_$15 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$15 *new_RxObservablesAsyncOnSubscribeTest_$15_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$15, init)
}

RxObservablesAsyncOnSubscribeTest_$15 *create_RxObservablesAsyncOnSubscribeTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$15, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$16

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testEmittingEmptyObservable", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$16 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$16;
}

@end

void RxObservablesAsyncOnSubscribeTest_$16_init(RxObservablesAsyncOnSubscribeTest_$16 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$16 *new_RxObservablesAsyncOnSubscribeTest_$16_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$16, init)
}

RxObservablesAsyncOnSubscribeTest_$16 *create_RxObservablesAsyncOnSubscribeTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$16, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$17

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_empty()];
  [observer onCompleted];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testEmittingEmptyObservable", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$17 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$17;
}

@end

void RxObservablesAsyncOnSubscribeTest_$17_init(RxObservablesAsyncOnSubscribeTest_$17 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$17 *new_RxObservablesAsyncOnSubscribeTest_$17_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$17, init)
}

RxObservablesAsyncOnSubscribeTest_$17 *create_RxObservablesAsyncOnSubscribeTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$17, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$18

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testOnErrorOuter", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$18 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$18;
}

@end

void RxObservablesAsyncOnSubscribeTest_$18_init(RxObservablesAsyncOnSubscribeTest_$18 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$18 *new_RxObservablesAsyncOnSubscribeTest_$18_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$18, init)
}

RxObservablesAsyncOnSubscribeTest_$18 *create_RxObservablesAsyncOnSubscribeTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$18, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$19

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testOnErrorOuter", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$19 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$19;
}

@end

void RxObservablesAsyncOnSubscribeTest_$19_init(RxObservablesAsyncOnSubscribeTest_$19 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$19 *new_RxObservablesAsyncOnSubscribeTest_$19_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$19, init)
}

RxObservablesAsyncOnSubscribeTest_$19 *create_RxObservablesAsyncOnSubscribeTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$19, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$20

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testOnCompleteFollowedByOnErrorOuter", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$20 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$20;
}

@end

void RxObservablesAsyncOnSubscribeTest_$20_init(RxObservablesAsyncOnSubscribeTest_$20 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$20 *new_RxObservablesAsyncOnSubscribeTest_$20_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$20, init)
}

RxObservablesAsyncOnSubscribeTest_$20 *create_RxObservablesAsyncOnSubscribeTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$20, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$21

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onCompleted];
  [observer onErrorWithNSException:create_RxExceptionsTestException_init()];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testOnCompleteFollowedByOnErrorOuter", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$21 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$21;
}

@end

void RxObservablesAsyncOnSubscribeTest_$21_init(RxObservablesAsyncOnSubscribeTest_$21 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$21 *new_RxObservablesAsyncOnSubscribeTest_$21_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$21, init)
}

RxObservablesAsyncOnSubscribeTest_$21 *create_RxObservablesAsyncOnSubscribeTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$21, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$22

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testUnsubscribesFromAllSelfTerminatedObservables", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$22 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$22;
}

@end

void RxObservablesAsyncOnSubscribeTest_$22_init(RxObservablesAsyncOnSubscribeTest_$22 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$22 *new_RxObservablesAsyncOnSubscribeTest_$22_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$22, init)
}

RxObservablesAsyncOnSubscribeTest_$22 *create_RxObservablesAsyncOnSubscribeTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$22, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$23

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  RxObservable *o1;
  switch ([((JavaLangInteger *) nil_chk(state)) intValue]) {
    case 1:
    o1 = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(self)];
    break;
    case 2:
    o1 = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(2)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(self)];
    break;
    default:
    [((id<RxObserver>) nil_chk(observer)) onCompleted];
    return nil;
  }
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:o1];
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$l1_);
  RELEASE_(val$l2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$l1_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$l2_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesAsyncOnSubscribeTest;", "testUnsubscribesFromAllSelfTerminatedObservables", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$23 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$23;
}

@end

void RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesAsyncOnSubscribeTest_$23 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$l1_, capture$0);
  JreStrongAssign(&self->val$l2_, capture$1);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$23 *new_RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$23, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxObservablesAsyncOnSubscribeTest_$23 *create_RxObservablesAsyncOnSubscribeTest_$23_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$23, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxObservablesAsyncOnSubscribeTest_$23_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$l1_)) incrementAndGet];
}

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$23:(RxObservablesAsyncOnSubscribeTest_$23 *)outer$ {
  RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesAsyncOnSubscribeTest_$23:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesAsyncOnSubscribeTest_$23;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest_$23;", "callWithId:withId:withId:" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$23_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$23_$1;
}

@end

void RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23_$1 *self, RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$23_$1 *new_RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$23_$1, initWithRxObservablesAsyncOnSubscribeTest_$23_, outer$)
}

RxObservablesAsyncOnSubscribeTest_$23_$1 *create_RxObservablesAsyncOnSubscribeTest_$23_$1_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$23_$1, initWithRxObservablesAsyncOnSubscribeTest_$23_, outer$)
}

@implementation RxObservablesAsyncOnSubscribeTest_$23_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$l2_)) incrementAndGet];
}

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$23:(RxObservablesAsyncOnSubscribeTest_$23 *)outer$ {
  RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesAsyncOnSubscribeTest_$23:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesAsyncOnSubscribeTest_$23;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest_$23;", "callWithId:withId:withId:" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$23_$2 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$23_$2;
}

@end

void RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23_$2 *self, RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$23_$2 *new_RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$23_$2, initWithRxObservablesAsyncOnSubscribeTest_$23_, outer$)
}

RxObservablesAsyncOnSubscribeTest_$23_$2 *create_RxObservablesAsyncOnSubscribeTest_$23_$2_initWithRxObservablesAsyncOnSubscribeTest_$23_(RxObservablesAsyncOnSubscribeTest_$23 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$23_$2, initWithRxObservablesAsyncOnSubscribeTest_$23_, outer$)
}

@implementation RxObservablesAsyncOnSubscribeTest_$24

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testUnsubscribesFromAllNonTerminatedObservables", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$24 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$24;
}

@end

void RxObservablesAsyncOnSubscribeTest_$24_init(RxObservablesAsyncOnSubscribeTest_$24 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$24 *new_RxObservablesAsyncOnSubscribeTest_$24_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$24, init)
}

RxObservablesAsyncOnSubscribeTest_$24 *create_RxObservablesAsyncOnSubscribeTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$24, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$25

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  switch ([((JavaLangInteger *) nil_chk(state)) intValue]) {
    case 1:
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:[((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, [((JavaLangLong *) nil_chk(requested)) intValue]))) subscribeOnWithRxScheduler:val$scheduler_])) doOnUnsubscribeWithRxFunctionsAction0:create_RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(self)]];
    break;
    case 2:
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:[((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) concatWithWithRxObservable:RxObservable_never()])) subscribeOnWithRxScheduler:val$scheduler_])) doOnUnsubscribeWithRxFunctionsAction0:create_RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(self)]];
    break;
    case 3:
    [((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$sub_)) get])) unsubscribe];
  }
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0
        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
      withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$3 {
  RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  RELEASE_(val$l1_);
  RELEASE_(val$l2_);
  RELEASE_(val$sub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$l1_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$l2_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sub_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxSchedulersTestScheduler;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicReference;", "(Lrx/schedulers/TestScheduler;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxObservablesAsyncOnSubscribeTest;", "testUnsubscribesFromAllNonTerminatedObservables", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$25 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 4, 6, -1, 7, 8, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$25;
}

@end

void RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxObservablesAsyncOnSubscribeTest_$25 *self, RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  JreStrongAssign(&self->val$l1_, capture$1);
  JreStrongAssign(&self->val$l2_, capture$2);
  JreStrongAssign(&self->val$sub_, capture$3);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$25 *new_RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$25, initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2, capture$3)
}

RxObservablesAsyncOnSubscribeTest_$25 *create_RxObservablesAsyncOnSubscribeTest_$25_initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersTestScheduler *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$25, initWithRxSchedulersTestScheduler_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxObservablesAsyncOnSubscribeTest_$25_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$l1_)) incrementAndGet];
}

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$25:(RxObservablesAsyncOnSubscribeTest_$25 *)outer$ {
  RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesAsyncOnSubscribeTest_$25:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesAsyncOnSubscribeTest_$25;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest_$25;", "callWithId:withId:withId:" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$25_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$25_$1;
}

@end

void RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25_$1 *self, RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$25_$1 *new_RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$25_$1, initWithRxObservablesAsyncOnSubscribeTest_$25_, outer$)
}

RxObservablesAsyncOnSubscribeTest_$25_$1 *create_RxObservablesAsyncOnSubscribeTest_$25_$1_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$25_$1, initWithRxObservablesAsyncOnSubscribeTest_$25_, outer$)
}

@implementation RxObservablesAsyncOnSubscribeTest_$25_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$l2_)) incrementAndGet];
}

- (instancetype)initWithRxObservablesAsyncOnSubscribeTest_$25:(RxObservablesAsyncOnSubscribeTest_$25 *)outer$ {
  RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxObservablesAsyncOnSubscribeTest_$25:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesAsyncOnSubscribeTest_$25;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest_$25;", "callWithId:withId:withId:" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$25_$2 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$25_$2;
}

@end

void RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25_$2 *self, RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$25_$2 *new_RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$25_$2, initWithRxObservablesAsyncOnSubscribeTest_$25_, outer$)
}

RxObservablesAsyncOnSubscribeTest_$25_$2 *create_RxObservablesAsyncOnSubscribeTest_$25_$2_initWithRxObservablesAsyncOnSubscribeTest_$25_(RxObservablesAsyncOnSubscribeTest_$25 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$25_$2, initWithRxObservablesAsyncOnSubscribeTest_$25_, outer$)
}

@implementation RxObservablesAsyncOnSubscribeTest_$26

- (void)callWithId:(JavaLangLong *)state
            withId:(id<RxObserver>)observer {
  if (state == nil) [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_justWithId_(create_RxObservablesAsyncOnSubscribeTest_Foo_init())];
  else [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_justWithId_(create_RxObservablesAsyncOnSubscribeTest_Bar_init())];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$26_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangLong;LRxObserver;", "(Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Lrx/observables/AsyncOnSubscribeTest$Foo;>;>;)V", "LRxObservablesAsyncOnSubscribeTest;", "testGenerics", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Lrx/observables/AsyncOnSubscribeTest$Foo;>;>;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$26 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$26;
}

@end

void RxObservablesAsyncOnSubscribeTest_$26_init(RxObservablesAsyncOnSubscribeTest_$26 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$26 *new_RxObservablesAsyncOnSubscribeTest_$26_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$26, init)
}

RxObservablesAsyncOnSubscribeTest_$26 *create_RxObservablesAsyncOnSubscribeTest_$26_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$26, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$27

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$27_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesAsyncOnSubscribeTest;", "testUnderdeliveryCorrection", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$27 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$27;
}

@end

void RxObservablesAsyncOnSubscribeTest_$27_init(RxObservablesAsyncOnSubscribeTest_$27 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$27 *new_RxObservablesAsyncOnSubscribeTest_$27_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$27, init)
}

RxObservablesAsyncOnSubscribeTest_$27 *create_RxObservablesAsyncOnSubscribeTest_$27_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$27, init)
}

@implementation RxObservablesAsyncOnSubscribeTest_$28

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(JavaLangLong *)requested
                         withId:(id<RxObserver>)observer {
  switch ([((JavaLangInteger *) nil_chk(state)) intValue]) {
    case 1:
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1))];
    break;
    default:
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:RxObservable_rangeWithInt_withInt_(1, [((JavaLangLong *) nil_chk(requested)) intValue])];
    break;
  }
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesAsyncOnSubscribeTest_$28_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangLong;LRxObserver;", "(Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;)Ljava/lang/Integer;", "LRxObservablesAsyncOnSubscribeTest;", "testUnderdeliveryCorrection", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Integer;Ljava/lang/Long;Lrx/Observer<Lrx/Observable<+Ljava/lang/Integer;>;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesAsyncOnSubscribeTest_$28 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesAsyncOnSubscribeTest_$28;
}

@end

void RxObservablesAsyncOnSubscribeTest_$28_init(RxObservablesAsyncOnSubscribeTest_$28 *self) {
  NSObject_init(self);
}

RxObservablesAsyncOnSubscribeTest_$28 *new_RxObservablesAsyncOnSubscribeTest_$28_init() {
  J2OBJC_NEW_IMPL(RxObservablesAsyncOnSubscribeTest_$28, init)
}

RxObservablesAsyncOnSubscribeTest_$28 *create_RxObservablesAsyncOnSubscribeTest_$28_init() {
  J2OBJC_CREATE_IMPL(RxObservablesAsyncOnSubscribeTest_$28, init)
}
