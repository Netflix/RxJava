//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/TestSubscriberTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxObserversTestSubscriberTest.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$42();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$43();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$44();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$45();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$46();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$47();

__attribute__((unused)) static IOSObjectArray *RxObserversTestSubscriberTest__Annotations$48();

@interface RxObserversTestSubscriberTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsub_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$1)

J2OBJC_FIELD_SETTER(RxObserversTestSubscriberTest_$1, val$unsub_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObserversTestSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxObserversTestSubscriberTest_$1 *new_RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$1 *create_RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxObserversTestSubscriberTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaLangThread *val$t0_;
}

- (void)call;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$2)

J2OBJC_FIELD_SETTER(RxObserversTestSubscriberTest_$2, val$t0_, JavaLangThread *)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(RxObserversTestSubscriberTest_$2 *self, JavaLangThread *capture$0);

__attribute__((unused)) static RxObserversTestSubscriberTest_$2 *new_RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$2 *create_RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(JavaLangThread *capture$0);

@interface RxObserversTestSubscriberTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaLangThread *val$t0_;
}

- (void)call;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$3)

J2OBJC_FIELD_SETTER(RxObserversTestSubscriberTest_$3, val$t0_, JavaLangThread *)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(RxObserversTestSubscriberTest_$3 *self, JavaLangThread *capture$0);

__attribute__((unused)) static RxObserversTestSubscriberTest_$3 *new_RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$3 *create_RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(JavaLangThread *capture$0);

@interface RxObserversTestSubscriberTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaLangThread *val$t0_;
}

- (void)call;

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$4)

J2OBJC_FIELD_SETTER(RxObserversTestSubscriberTest_$4, val$t0_, JavaLangThread *)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(RxObserversTestSubscriberTest_$4 *self, JavaLangThread *capture$0);

__attribute__((unused)) static RxObserversTestSubscriberTest_$4 *new_RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(JavaLangThread *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$4 *create_RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(JavaLangThread *capture$0);

@interface RxObserversTestSubscriberTest_$5 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$5)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$5_init(RxObserversTestSubscriberTest_$5 *self);

__attribute__((unused)) static RxObserversTestSubscriberTest_$5 *new_RxObserversTestSubscriberTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$5 *create_RxObserversTestSubscriberTest_$5_init();

@interface RxObserversTestSubscriberTest_$6 : NSObject < RxObserver >

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriberTest_$6)

__attribute__((unused)) static void RxObserversTestSubscriberTest_$6_init(RxObserversTestSubscriberTest_$6 *self);

__attribute__((unused)) static RxObserversTestSubscriberTest_$6 *new_RxObserversTestSubscriberTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriberTest_$6 *create_RxObserversTestSubscriberTest_$6_init();

@implementation RxObserversTestSubscriberTest

- (void)testAssert {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestSubscriber *o = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxSubscriber:o];
  [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

- (void)testAssertNotMatchCount {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestSubscriber *o = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxSubscriber:o];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"Number of items does not match. Provided: 1  Actual: 2");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

- (void)testAssertNotMatchValue {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  RxObserversTestSubscriber *o = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(oi)) subscribeWithRxSubscriber:o];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(3) } count:2 type:JavaLangInteger_class_()])];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"Value at index: 1 expected to be [3] (Integer) but was: [2] (Integer)");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
  [o assertTerminalEvent];
}

+ (void)assertExceptionWithJavaLangAssertionError:(JavaLangAssertionError *)e
                                     withNSString:(NSString *)message {
  RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, message);
}

- (void)testAssertTerminalEventNotReceived {
  RxSubjectsPublishSubject *p = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *o = create_RxObserversTestSubscriber_init();
  [((RxSubjectsPublishSubject *) nil_chk(p)) subscribeWithRxSubscriber:o];
  [p onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [p onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  @try {
    [o assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()])];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk([o getOnNextEvents])) size]);
    [o assertTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Expected an AssertionError to be thrown");
  }
  @catch (JavaLangAssertionError *e) {
    RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(e, @"No terminal events received.");
  }
}

- (void)testWrappingMock {
  RxObservable *oi = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]));
  id<RxObserver> mockObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(oi)) subscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(mockObserver)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserver } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testWrappingMockWhenUnsubscribeInvolved {
  RxObservable *oi = [((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:9 type:JavaLangInteger_class_()])))) takeWithInt:2];
  id<RxObserver> mockObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(oi)) subscribeWithRxSubscriber:create_RxObserversTestSubscriber_initWithRxObserver_(mockObserver)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ mockObserver } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:mockObserver withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testAssertError {
  JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(@"Oops");
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(e))) subscribeWithRxSubscriber:subscriber];
  [subscriber assertErrorWithNSException:e];
}

- (void)testAwaitTerminalEventWithDuration {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertTerminalEvent];
}

- (void)testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicBoolean *unsub = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnUnsubscribeWithRxFunctionsAction0:create_RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsub)])) delayWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  OrgJunitAssert_assertTrueWithBoolean_([unsub get]);
}

- (void)testNullDelegate1 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(nil);
  [ts onCompleted];
}

- (void)testNullDelegate2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxSubscriber_(nil);
  [ts onCompleted];
}

- (void)testNullDelegate3 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_withLong_(nil, 0);
  [ts onCompleted];
}

- (void)testDelegate1 {
  id<RxObserver> to = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithRxObserver_(to);
  [((RxObserversTestSubscriber *) nil_chk(ts)) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(to))) onCompleted];
}

- (void)testDelegate2 {
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithRxSubscriber_(ts1);
  [((RxObserversTestSubscriber *) nil_chk(ts2)) onCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertCompleted];
}

- (void)testDelegate3 {
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_createWithRxObserver_withLong_(ts1, 0);
  [((RxObserversTestSubscriber *) nil_chk(ts2)) onCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertCompleted];
}

- (void)testUnsubscribed {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  @try {
    [ts assertUnsubscribed];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Not unsubscribed but not reported!");
}

- (void)testNoErrors {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertNoErrors];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Error present but no assertion error!");
}

- (void)testNotCompleted {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  @try {
    [ts assertCompleted];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Not completed and no assertion error!");
}

- (void)testMultipleCompletions {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onCompleted];
  [ts onCompleted];
  @try {
    [ts assertCompleted];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Multiple completions and no assertion error!");
}

- (void)testCompleted {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onCompleted];
  @try {
    [ts assertNotCompleted];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Completed and no assertion error!");
}

- (void)testMultipleCompletions2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onCompleted];
  [ts onCompleted];
  @try {
    [ts assertNotCompleted];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Multiple completions and no assertion error!");
}

- (void)testMultipleErrors {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertNoErrors];
  }
  @catch (JavaLangAssertionError *ex) {
    if (!([[((JavaLangAssertionError *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsCompositeException class]])) {
      OrgJunitAssert_failWithNSString_(@"Multiple Error present but the reported error doesn't have a composite cause!");
    }
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Multiple Error present but no assertion error!");
}

- (void)testMultipleErrors2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  }
  @catch (JavaLangAssertionError *ex) {
    if (!([[((JavaLangAssertionError *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsCompositeException class]])) {
      OrgJunitAssert_failWithNSString_(@"Multiple Error present but the reported error doesn't have a composite cause!");
    }
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Multiple Error present but no assertion error!");
}

- (void)testMultipleErrors3 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertErrorWithNSException:create_RxExceptionsTestException_init()];
  }
  @catch (JavaLangAssertionError *ex) {
    if (!([[((JavaLangAssertionError *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsCompositeException class]])) {
      OrgJunitAssert_failWithNSString_(@"Multiple Error present but the reported error doesn't have a composite cause!");
    }
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Multiple Error present but no assertion error!");
}

- (void)testDifferentError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"First error")];
  @try {
    [ts assertErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Other error")];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Different Error present but no assertion error!");
}

- (void)testDifferentError2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_JavaLangRuntimeException_init()];
  @try {
    [ts assertErrorWithNSException:create_RxExceptionsTestException_init()];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Different Error present but no assertion error!");
}

- (void)testDifferentError3 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onErrorWithNSException:create_JavaLangRuntimeException_init()];
  @try {
    [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"Different Error present but no assertion error!");
}

- (void)testNoError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  @try {
    [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"No present but no assertion error!");
}

- (void)testNoError2 {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  @try {
    [ts assertErrorWithNSException:create_RxExceptionsTestException_init()];
  }
  @catch (JavaLangAssertionError *ex) {
    return;
  }
  OrgJunitAssert_failWithNSString_(@"No present but no assertion error!");
}

- (void)testInterruptTerminalEventAwait {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangThread *t0 = JavaLangThread_currentThread();
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(t0) withLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    @try {
      [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEvent];
      OrgJunitAssert_failWithNSString_(@"Did not interrupt wait!");
    }
    @catch (JavaLangRuntimeException *ex) {
      if (!([[((JavaLangRuntimeException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangInterruptedException class]])) {
        OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"The cause is not InterruptedException! ", [ex getCause]));
      }
    }
  }
  @finally {
    [w unsubscribe];
  }
}

- (void)testInterruptTerminalEventAwaitTimed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangThread *t0 = JavaLangThread_currentThread();
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(t0) withLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    @try {
      [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      OrgJunitAssert_failWithNSString_(@"Did not interrupt wait!");
    }
    @catch (JavaLangRuntimeException *ex) {
      if (!([[((JavaLangRuntimeException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangInterruptedException class]])) {
        OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"The cause is not InterruptedException! ", [ex getCause]));
      }
    }
  }
  @finally {
    [w unsubscribe];
  }
}

- (void)testInterruptTerminalEventAwaitAndUnsubscribe {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  JavaLangThread *t0 = JavaLangThread_currentThread();
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(t0) withLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    if (![ts isUnsubscribed]) {
      OrgJunitAssert_failWithNSString_(@"Did not unsubscribe!");
    }
  }
  @finally {
    [w unsubscribe];
  }
}

- (void)testNoTerminalEventBut1Completed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onCompleted];
  @try {
    [ts assertNoTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were terminal event(s)!");
  }
  @catch (JavaLangAssertionError *ex) {
  }
}

- (void)testNoTerminalEventBut1Error {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertNoTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were terminal event(s)!");
  }
  @catch (JavaLangAssertionError *ex) {
  }
}

- (void)testNoTerminalEventBut1Error1Completed {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onCompleted];
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertNoTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were terminal event(s)!");
  }
  @catch (JavaLangAssertionError *ex) {
  }
}

- (void)testNoTerminalEventBut2Errors {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  [ts onErrorWithNSException:create_RxExceptionsTestException_init()];
  @try {
    [ts assertNoTerminalEvent];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were terminal event(s)!");
  }
  @catch (JavaLangAssertionError *ex) {
    if (!([[((JavaLangAssertionError *) nil_chk(ex)) getCause] isKindOfClass:[RxExceptionsCompositeException class]])) {
      OrgJunitAssert_failWithNSString_(JreStrcat("$@", @"Did not report a composite exception cause: ", [ex getCause]));
    }
  }
}

- (void)testNoValues {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  @try {
    [ts assertNoValues];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were values!");
  }
  @catch (JavaLangAssertionError *ex) {
  }
}

- (void)testValueCount {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  @try {
    [ts assertValueCountWithInt:3];
    OrgJunitAssert_failWithNSString_(@"Failed to report there were values!");
  }
  @catch (JavaLangAssertionError *ex) {
  }
}

- (void)testOnCompletedCrashCountsDownLatch {
  id<RxObserver> to = create_RxObserversTestSubscriberTest_$5_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithRxObserver_(to);
  @try {
    [((RxObserversTestSubscriber *) nil_chk(ts)) onCompleted];
  }
  @catch (RxExceptionsTestException *ex) {
  }
  [ts awaitTerminalEvent];
}

- (void)testOnErrorCrashCountsDownLatch {
  id<RxObserver> to = create_RxObserversTestSubscriberTest_$6_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithRxObserver_(to);
  @try {
    [((RxObserversTestSubscriber *) nil_chk(ts)) onErrorWithNSException:create_JavaLangRuntimeException_init()];
  }
  @catch (RxExceptionsTestException *ex) {
  }
  [ts awaitTerminalEvent];
}

- (void)assertValuesShouldThrowIfNumberOfItemsDoesNotMatch {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onNextWithId:@"a"];
  [ts onNextWithId:@"b"];
  [ts onNextWithId:@"c"];
  @try {
    [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangAssertionError *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Number of items does not match. Provided: 2  Actual: 3.\nProvided values: [1, 2]\nActual values: [a, b, c]\n (0 completions)", [((JavaLangAssertionError *) nil_chk(expected)) getMessage]);
  }
}

- (void)assertionFailureGivesActiveDetails {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onNextWithId:@"a"];
  [ts onNextWithId:@"b"];
  [ts onNextWithId:@"c"];
  [ts onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"forced failure")];
  @try {
    [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangAssertionError *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Number of items does not match. Provided: 2  Actual: 3.\nProvided values: [1, 2]\nActual values: [a, b, c]\n (0 completions) (+1 error)", [((JavaLangAssertionError *) nil_chk(expected)) getMessage]);
    NSException *ex = [expected getCause];
    OrgJunitAssert_assertEqualsWithId_withId_(RxExceptionsTestException_class_(), [((NSException *) nil_chk(ex)) java_getClass]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"forced failure", [ex getMessage]);
  }
}

- (void)assertionFailureShowsMultipleErrors {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onNextWithId:@"a"];
  [ts onNextWithId:@"b"];
  [ts onNextWithId:@"c"];
  [ts onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"forced failure")];
  [ts onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"forced failure 2")];
  @try {
    [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangAssertionError *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Number of items does not match. Provided: 2  Actual: 3.\nProvided values: [1, 2]\nActual values: [a, b, c]\n (0 completions) (+2 errors)", [((JavaLangAssertionError *) nil_chk(expected)) getMessage]);
    NSException *ex = [expected getCause];
    OrgJunitAssert_assertEqualsWithId_withId_(RxExceptionsCompositeException_class_(), [((NSException *) nil_chk(ex)) java_getClass]);
    id<JavaUtilList> list = [((RxExceptionsCompositeException *) cast_chk(ex, [RxExceptionsCompositeException class])) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(list)) size]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"forced failure", [((NSException *) nil_chk([list getWithInt:0])) getMessage]);
    OrgJunitAssert_assertEqualsWithId_withId_(@"forced failure 2", [((NSException *) nil_chk([list getWithInt:1])) getMessage]);
  }
}

- (void)assertionFailureShowsCompletion {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onNextWithId:@"a"];
  [ts onNextWithId:@"b"];
  [ts onNextWithId:@"c"];
  [ts onCompleted];
  @try {
    [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangAssertionError *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Number of items does not match. Provided: 2  Actual: 3.\nProvided values: [1, 2]\nActual values: [a, b, c]\n (1 completion)", [((JavaLangAssertionError *) nil_chk(expected)) getMessage]);
  }
}

- (void)assertionFailureShowsMultipleCompletions {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ts onNextWithId:@"a"];
  [ts onNextWithId:@"b"];
  [ts onNextWithId:@"c"];
  [ts onCompleted];
  [ts onCompleted];
  @try {
    [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangAssertionError *expected) {
    OrgJunitAssert_assertEqualsWithId_withId_(@"Number of items does not match. Provided: 2  Actual: 3.\nProvided values: [1, 2]\nActual values: [a, b, c]\n (2 completions)", [((JavaLangAssertionError *) nil_chk(expected)) getMessage]);
  }
}

- (void)completionCount {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxObserversTestSubscriber *) nil_chk(ts)) getCompletions]);
  [ts onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [ts getCompletions]);
  [ts onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [ts getCompletions]);
}

- (void)awaitValueCount {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 5))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([((RxObserversTestSubscriber *) nil_chk(ts)) awaitValueCountWithInt:2 withLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:0])) intValue]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:1])) intValue]);
}

- (void)awaitValueCountFails {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 2))) delayWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithBoolean_([((RxObserversTestSubscriber *) nil_chk(ts)) awaitValueCountWithInt:5 withLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]);
}

- (void)assertAndConsume {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertValuesAndClearWithId:JavaLangInteger_valueOfWithInt_(1) withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]];
  [ts assertNoValues];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [ts assertValueCountWithInt:2];
  [ts assertValuesAndClearWithId:JavaLangInteger_valueOfWithInt_(2) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(3) } count:1 type:JavaLangInteger_class_()]];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [ts onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  @try {
    [ts assertValuesAndClearWithId:JavaLangInteger_valueOfWithInt_(4) withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]];
    OrgJunitAssert_failWithNSString_(@"Should have thrown AssertionError");
  }
  @catch (JavaLangAssertionError *ex) {
  }
  [ts assertValueCountWithInt:2];
  @try {
    [ts assertValuesAndClearWithId:JavaLangInteger_valueOfWithInt_(4) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6) } count:2 type:JavaLangInteger_class_()]];
    OrgJunitAssert_failWithNSString_(@"Should have thrown AssertionError");
  }
  @catch (JavaLangAssertionError *ex) {
  }
  [ts assertValuesAndClearWithId:JavaLangInteger_valueOfWithInt_(4) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]];
  [ts assertNoValues];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriberTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 47, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 48, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 49, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 50, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testAssert);
  methods[1].selector = @selector(testAssertNotMatchCount);
  methods[2].selector = @selector(testAssertNotMatchValue);
  methods[3].selector = @selector(assertExceptionWithJavaLangAssertionError:withNSString:);
  methods[4].selector = @selector(testAssertTerminalEventNotReceived);
  methods[5].selector = @selector(testWrappingMock);
  methods[6].selector = @selector(testWrappingMockWhenUnsubscribeInvolved);
  methods[7].selector = @selector(testAssertError);
  methods[8].selector = @selector(testAwaitTerminalEventWithDuration);
  methods[9].selector = @selector(testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout);
  methods[10].selector = @selector(testNullDelegate1);
  methods[11].selector = @selector(testNullDelegate2);
  methods[12].selector = @selector(testNullDelegate3);
  methods[13].selector = @selector(testDelegate1);
  methods[14].selector = @selector(testDelegate2);
  methods[15].selector = @selector(testDelegate3);
  methods[16].selector = @selector(testUnsubscribed);
  methods[17].selector = @selector(testNoErrors);
  methods[18].selector = @selector(testNotCompleted);
  methods[19].selector = @selector(testMultipleCompletions);
  methods[20].selector = @selector(testCompleted);
  methods[21].selector = @selector(testMultipleCompletions2);
  methods[22].selector = @selector(testMultipleErrors);
  methods[23].selector = @selector(testMultipleErrors2);
  methods[24].selector = @selector(testMultipleErrors3);
  methods[25].selector = @selector(testDifferentError);
  methods[26].selector = @selector(testDifferentError2);
  methods[27].selector = @selector(testDifferentError3);
  methods[28].selector = @selector(testNoError);
  methods[29].selector = @selector(testNoError2);
  methods[30].selector = @selector(testInterruptTerminalEventAwait);
  methods[31].selector = @selector(testInterruptTerminalEventAwaitTimed);
  methods[32].selector = @selector(testInterruptTerminalEventAwaitAndUnsubscribe);
  methods[33].selector = @selector(testNoTerminalEventBut1Completed);
  methods[34].selector = @selector(testNoTerminalEventBut1Error);
  methods[35].selector = @selector(testNoTerminalEventBut1Error1Completed);
  methods[36].selector = @selector(testNoTerminalEventBut2Errors);
  methods[37].selector = @selector(testNoValues);
  methods[38].selector = @selector(testValueCount);
  methods[39].selector = @selector(testOnCompletedCrashCountsDownLatch);
  methods[40].selector = @selector(testOnErrorCrashCountsDownLatch);
  methods[41].selector = @selector(assertValuesShouldThrowIfNumberOfItemsDoesNotMatch);
  methods[42].selector = @selector(assertionFailureGivesActiveDetails);
  methods[43].selector = @selector(assertionFailureShowsMultipleErrors);
  methods[44].selector = @selector(assertionFailureShowsCompletion);
  methods[45].selector = @selector(assertionFailureShowsMultipleCompletions);
  methods[46].selector = @selector(completionCount);
  methods[47].selector = @selector(awaitValueCount);
  methods[48].selector = @selector(awaitValueCountFails);
  methods[49].selector = @selector(assertAndConsume);
  methods[50].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversTestSubscriberTest__Annotations$0, (void *)&RxObserversTestSubscriberTest__Annotations$1, (void *)&RxObserversTestSubscriberTest__Annotations$2, "assertException", "LJavaLangAssertionError;LNSString;", (void *)&RxObserversTestSubscriberTest__Annotations$3, (void *)&RxObserversTestSubscriberTest__Annotations$4, (void *)&RxObserversTestSubscriberTest__Annotations$5, (void *)&RxObserversTestSubscriberTest__Annotations$6, (void *)&RxObserversTestSubscriberTest__Annotations$7, (void *)&RxObserversTestSubscriberTest__Annotations$8, (void *)&RxObserversTestSubscriberTest__Annotations$9, (void *)&RxObserversTestSubscriberTest__Annotations$10, (void *)&RxObserversTestSubscriberTest__Annotations$11, (void *)&RxObserversTestSubscriberTest__Annotations$12, (void *)&RxObserversTestSubscriberTest__Annotations$13, (void *)&RxObserversTestSubscriberTest__Annotations$14, (void *)&RxObserversTestSubscriberTest__Annotations$15, (void *)&RxObserversTestSubscriberTest__Annotations$16, (void *)&RxObserversTestSubscriberTest__Annotations$17, (void *)&RxObserversTestSubscriberTest__Annotations$18, (void *)&RxObserversTestSubscriberTest__Annotations$19, (void *)&RxObserversTestSubscriberTest__Annotations$20, (void *)&RxObserversTestSubscriberTest__Annotations$21, (void *)&RxObserversTestSubscriberTest__Annotations$22, (void *)&RxObserversTestSubscriberTest__Annotations$23, (void *)&RxObserversTestSubscriberTest__Annotations$24, (void *)&RxObserversTestSubscriberTest__Annotations$25, (void *)&RxObserversTestSubscriberTest__Annotations$26, (void *)&RxObserversTestSubscriberTest__Annotations$27, (void *)&RxObserversTestSubscriberTest__Annotations$28, (void *)&RxObserversTestSubscriberTest__Annotations$29, (void *)&RxObserversTestSubscriberTest__Annotations$30, (void *)&RxObserversTestSubscriberTest__Annotations$31, (void *)&RxObserversTestSubscriberTest__Annotations$32, (void *)&RxObserversTestSubscriberTest__Annotations$33, (void *)&RxObserversTestSubscriberTest__Annotations$34, (void *)&RxObserversTestSubscriberTest__Annotations$35, (void *)&RxObserversTestSubscriberTest__Annotations$36, (void *)&RxObserversTestSubscriberTest__Annotations$37, (void *)&RxObserversTestSubscriberTest__Annotations$38, (void *)&RxObserversTestSubscriberTest__Annotations$39, (void *)&RxObserversTestSubscriberTest__Annotations$40, (void *)&RxObserversTestSubscriberTest__Annotations$41, (void *)&RxObserversTestSubscriberTest__Annotations$42, (void *)&RxObserversTestSubscriberTest__Annotations$43, (void *)&RxObserversTestSubscriberTest__Annotations$44, (void *)&RxObserversTestSubscriberTest__Annotations$45, (void *)&RxObserversTestSubscriberTest__Annotations$46, (void *)&RxObserversTestSubscriberTest__Annotations$47, (void *)&RxObserversTestSubscriberTest__Annotations$48 };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest = { "TestSubscriberTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 51, 0, -1, -1, -1, -1, -1 };
  return &_RxObserversTestSubscriberTest;
}

@end

void RxObserversTestSubscriberTest_assertExceptionWithJavaLangAssertionError_withNSString_(JavaLangAssertionError *e, NSString *message) {
  RxObserversTestSubscriberTest_initialize();
  NSString *exMessage = [((JavaLangAssertionError *) nil_chk(e)) getMessage];
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk(exMessage)) contains:message]);
}

void RxObserversTestSubscriberTest_init(RxObserversTestSubscriberTest *self) {
  NSObject_init(self);
}

RxObserversTestSubscriberTest *new_RxObserversTestSubscriberTest_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest, init)
}

RxObserversTestSubscriberTest *create_RxObserversTestSubscriberTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest, init)
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangNullPointerException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversTestSubscriberTest__Annotations$48() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriberTest)

@implementation RxObserversTestSubscriberTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsub_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsub_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxObserversTestSubscriberTest;", "testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObserversTestSubscriberTest_$1;
}

@end

void RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObserversTestSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsub_, capture$0);
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$1 *new_RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxObserversTestSubscriberTest_$1 *create_RxObserversTestSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxObserversTestSubscriberTest_$2

- (void)call {
  [((JavaLangThread *) nil_chk(val$t0_)) interrupt];
}

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0 {
  RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$t0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$t0_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThread;", "LRxObserversTestSubscriberTest;", "testInterruptTerminalEventAwait" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$2 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObserversTestSubscriberTest_$2;
}

@end

void RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(RxObserversTestSubscriberTest_$2 *self, JavaLangThread *capture$0) {
  JreStrongAssign(&self->val$t0_, capture$0);
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$2 *new_RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$2, initWithJavaLangThread_, capture$0)
}

RxObserversTestSubscriberTest_$2 *create_RxObserversTestSubscriberTest_$2_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$2, initWithJavaLangThread_, capture$0)
}

@implementation RxObserversTestSubscriberTest_$3

- (void)call {
  [((JavaLangThread *) nil_chk(val$t0_)) interrupt];
}

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0 {
  RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$t0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$t0_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThread;", "LRxObserversTestSubscriberTest;", "testInterruptTerminalEventAwaitTimed" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$3 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObserversTestSubscriberTest_$3;
}

@end

void RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(RxObserversTestSubscriberTest_$3 *self, JavaLangThread *capture$0) {
  JreStrongAssign(&self->val$t0_, capture$0);
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$3 *new_RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$3, initWithJavaLangThread_, capture$0)
}

RxObserversTestSubscriberTest_$3 *create_RxObserversTestSubscriberTest_$3_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$3, initWithJavaLangThread_, capture$0)
}

@implementation RxObserversTestSubscriberTest_$4

- (void)call {
  [((JavaLangThread *) nil_chk(val$t0_)) interrupt];
}

- (instancetype)initWithJavaLangThread:(JavaLangThread *)capture$0 {
  RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$t0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$t0_", "LJavaLangThread;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThread;", "LRxObserversTestSubscriberTest;", "testInterruptTerminalEventAwaitAndUnsubscribe" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$4 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObserversTestSubscriberTest_$4;
}

@end

void RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(RxObserversTestSubscriberTest_$4 *self, JavaLangThread *capture$0) {
  JreStrongAssign(&self->val$t0_, capture$0);
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$4 *new_RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$4, initWithJavaLangThread_, capture$0)
}

RxObserversTestSubscriberTest_$4 *create_RxObserversTestSubscriberTest_$4_initWithJavaLangThread_(JavaLangThread *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$4, initWithJavaLangThread_, capture$0)
}

@implementation RxObserversTestSubscriberTest_$5

- (void)onCompleted {
  @throw create_RxExceptionsTestException_init();
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriberTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxObserversTestSubscriberTest;", "testOnCompletedCrashCountsDownLatch", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$5 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversTestSubscriberTest_$5;
}

@end

void RxObserversTestSubscriberTest_$5_init(RxObserversTestSubscriberTest_$5 *self) {
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$5 *new_RxObserversTestSubscriberTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$5, init)
}

RxObserversTestSubscriberTest_$5 *create_RxObserversTestSubscriberTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$5, init)
}

@implementation RxObserversTestSubscriberTest_$6

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

- (void)onCompleted {
}

- (void)onNextWithId:(JavaLangInteger *)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriberTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onErrorWithNSException:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxObserversTestSubscriberTest;", "testOnErrorCrashCountsDownLatch", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriberTest_$6 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, 6, -1 };
  return &_RxObserversTestSubscriberTest_$6;
}

@end

void RxObserversTestSubscriberTest_$6_init(RxObserversTestSubscriberTest_$6 *self) {
  NSObject_init(self);
}

RxObserversTestSubscriberTest_$6 *new_RxObserversTestSubscriberTest_$6_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriberTest_$6, init)
}

RxObserversTestSubscriberTest_$6 *create_RxObserversTestSubscriberTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriberTest_$6, init)
}
