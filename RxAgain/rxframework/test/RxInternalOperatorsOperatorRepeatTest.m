//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorRepeatTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorRepeatTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$13();

@interface RxInternalOperatorsOperatorRepeatTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRepeatTest_$1, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRepeatTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$1 *new_RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$1 *create_RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRepeatTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)sub;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRepeatTest_$2, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRepeatTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$2 *new_RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$2 *create_RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorRepeatTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$3_init(RxInternalOperatorsOperatorRepeatTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$3 *new_RxInternalOperatorsOperatorRepeatTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$3 *create_RxInternalOperatorsOperatorRepeatTest_$3_init();

@interface RxInternalOperatorsOperatorRepeatTest_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  id<JavaUtilList> val$concatBase_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)x;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorRepeatTest_$4, val$concatBase_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(RxInternalOperatorsOperatorRepeatTest_$4 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$4 *new_RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$4 *create_RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorRepeatTest_$5 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$5_init(RxInternalOperatorsOperatorRepeatTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$5 *new_RxInternalOperatorsOperatorRepeatTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$5 *create_RxInternalOperatorsOperatorRepeatTest_$5_init();

@interface RxInternalOperatorsOperatorRepeatTest_$6 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorRepeatTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorRepeatTest_$6_init(RxInternalOperatorsOperatorRepeatTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$6 *new_RxInternalOperatorsOperatorRepeatTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorRepeatTest_$6 *create_RxInternalOperatorsOperatorRepeatTest_$6_init();

@implementation RxInternalOperatorsOperatorRepeatTest

- (void)testRepetition {
  jint NUM = 10;
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint value = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)))) repeatWithRxScheduler:RxSchedulersSchedulers_computation()])) takeWithInt:NUM])) toBlocking])) last])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, value);
}

- (void)testRepeatTake {
  RxObservable *xs = RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2));
  IOSObjectArray *ys = [((id<JavaUtilList>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(xs)) repeatWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:4])) toList])) toBlocking])) last])) toArray];
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:4 type:NSObject_class_()], ys);
}

- (void)testNoStackOverFlow {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:100000])) toBlocking])) last];
}

- (void)testRepeatTakeWithSubscribeOn {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *oi = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  IOSObjectArray *ys = [((id<JavaUtilList>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(oi)) repeatWithRxScheduler:RxSchedulersSchedulers_newThread()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRepeatTest_$3_init()])) takeWithInt:4])) toList])) toBlocking])) last])) toArray];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [counter get]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:4 type:NSObject_class_()], ys);
}

- (void)testRepeatAndTake {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeat])) takeWithInt:10])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(10)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRepeatLimited {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWithLong:10])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(10)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRepeatError {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_RxExceptionsTestException_init()))) repeatWithLong:10])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testRepeatZero {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWithLong:0])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRepeatOne {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWithLong:1])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testRepeatAndDistinctUnbounded {
  RxObservable *src = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()])))) takeWithInt:3])) repeatWithLong:3])) distinct];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(src)) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])];
}

- (void)testRepeatRetarget {
  id<JavaUtilList> concatBase = create_JavaUtilArrayList_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)))) repeatWithLong:5])) concatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(concatBase)])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_emptyList()];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:10 type:JavaLangInteger_class_()]), concatBase);
}

- (void)repeatScheduled {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWithLong:5 withRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)repeatWhenDefaultScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRepeatTest_$5_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)repeatWhenTrampolineScheduler {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) repeatWhenWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorRepeatTest_$6_init() withRxScheduler:RxSchedulersSchedulers_trampoline()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(1) } count:2 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRepeatTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testRepetition);
  methods[1].selector = @selector(testRepeatTake);
  methods[2].selector = @selector(testNoStackOverFlow);
  methods[3].selector = @selector(testRepeatTakeWithSubscribeOn);
  methods[4].selector = @selector(testRepeatAndTake);
  methods[5].selector = @selector(testRepeatLimited);
  methods[6].selector = @selector(testRepeatError);
  methods[7].selector = @selector(testRepeatZero);
  methods[8].selector = @selector(testRepeatOne);
  methods[9].selector = @selector(testRepeatAndDistinctUnbounded);
  methods[10].selector = @selector(testRepeatRetarget);
  methods[11].selector = @selector(repeatScheduled);
  methods[12].selector = @selector(repeatWhenDefaultScheduler);
  methods[13].selector = @selector(repeatWhenTrampolineScheduler);
  methods[14].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$0, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$1, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$2, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$3, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$4, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$5, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$6, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$7, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$8, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$9, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$10, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$11, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$12, (void *)&RxInternalOperatorsOperatorRepeatTest__Annotations$13 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest = { "OperatorRepeatTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 15, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest;
}

@end

void RxInternalOperatorsOperatorRepeatTest_init(RxInternalOperatorsOperatorRepeatTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest *new_RxInternalOperatorsOperatorRepeatTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest, init)
}

RxInternalOperatorsOperatorRepeatTest *create_RxInternalOperatorsOperatorRepeatTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 3000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorRepeatTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorRepeatTest)

@implementation RxInternalOperatorsOperatorRepeatTest_$1

- (void)callWithId:(RxSubscriber *)o {
  [((RxSubscriber *) nil_chk(o)) onNextWithId:JavaLangInteger_valueOfWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet])];
  [o onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRepeatTest;", "testRepetition", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$1;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRepeatTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$1 *new_RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRepeatTest_$1 *create_RxInternalOperatorsOperatorRepeatTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRepeatTest_$2

- (void)callWithId:(RxSubscriber *)sub {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
  [((RxSubscriber *) nil_chk(sub)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [sub onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [sub onCompleted];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorRepeatTest;", "testRepeatTakeWithSubscribeOn", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$2;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorRepeatTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$2 *new_RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorRepeatTest_$2 *create_RxInternalOperatorsOperatorRepeatTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorRepeatTest_$3

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  @try {
    JavaLangThread_sleepWithLong_(50);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRepeatTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorRepeatTest;", "testRepeatTakeWithSubscribeOn", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$3;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$3_init(RxInternalOperatorsOperatorRepeatTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$3 *new_RxInternalOperatorsOperatorRepeatTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$3, init)
}

RxInternalOperatorsOperatorRepeatTest_$3 *create_RxInternalOperatorsOperatorRepeatTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$3, init)
}

@implementation RxInternalOperatorsOperatorRepeatTest_$4

- (RxObservable *)callWithId:(JavaLangInteger *)x {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"testRepeatRetarget -> ", x)];
  [((id<JavaUtilList>) nil_chk(val$concatBase_)) addWithId:x];
  return [((RxObservable *) nil_chk(RxObservable_empty())) delayWithLong:200 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$concatBase_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$concatBase_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorRepeatTest;", "testRepeatRetarget", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$4;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(RxInternalOperatorsOperatorRepeatTest_$4 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$concatBase_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$4 *new_RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$4, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorRepeatTest_$4 *create_RxInternalOperatorsOperatorRepeatTest_$4_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$4, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorRepeatTest_$5

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRepeatTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "LRxInternalOperatorsOperatorRepeatTest;", "repeatWhenDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable;Lrx/Observable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$5;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$5_init(RxInternalOperatorsOperatorRepeatTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$5 *new_RxInternalOperatorsOperatorRepeatTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$5, init)
}

RxInternalOperatorsOperatorRepeatTest_$5 *create_RxInternalOperatorsOperatorRepeatTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$5, init)
}

@implementation RxInternalOperatorsOperatorRepeatTest_$6

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) takeWithInt:2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorRepeatTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "LRxInternalOperatorsOperatorRepeatTest;", "repeatWhenTrampolineScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable;Lrx/Observable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorRepeatTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorRepeatTest_$6;
}

@end

void RxInternalOperatorsOperatorRepeatTest_$6_init(RxInternalOperatorsOperatorRepeatTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorRepeatTest_$6 *new_RxInternalOperatorsOperatorRepeatTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorRepeatTest_$6, init)
}

RxInternalOperatorsOperatorRepeatTest_$6 *create_RxInternalOperatorsOperatorRepeatTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorRepeatTest_$6, init)
}
