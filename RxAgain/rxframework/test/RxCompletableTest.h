//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/CompletableTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxCompletableTest")
#ifdef RESTRICT_RxCompletableTest
#define INCLUDE_ALL_RxCompletableTest 0
#else
#define INCLUDE_ALL_RxCompletableTest 1
#endif
#undef RESTRICT_RxCompletableTest

#if !defined (RxCompletableTest_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest))
#define RxCompletableTest_

@class RxCompletableTest_ErrorCompletable;
@class RxCompletableTest_NormalCompletable;
@class RxSingle;

@interface RxCompletableTest : NSObject {
 @public
  RxCompletableTest_NormalCompletable *normal_;
  RxCompletableTest_ErrorCompletable *error_;
}

#pragma mark Public

- (instancetype)init;

- (void)after;

- (void)ambArrayEmpty;

- (void)ambArrayNull;

- (void)ambArrayOneFires;

- (void)ambArrayOneFiresError;

- (void)ambArraySecondFires;

- (void)ambArraySecondFiresError;

- (void)ambArraySingleError;

- (void)ambArraySingleNormal;

- (void)ambIterableEmpty;

- (void)ambIterableIterableThrows;

- (void)ambIterableIteratorHasNextThrows;

- (void)ambIterableIteratorNextThrows;

- (void)ambIterableIteratorNull;

- (void)ambIterableMany;

- (void)ambIterableManyOneThrows;

- (void)ambIterableNull;

- (void)ambIterableOneThrows;

- (void)ambIterableSingle;

- (void)ambIterableWithNull;

- (void)ambMultipleOneIsNull;

- (void)ambWithArrayOneFires;

- (void)ambWithArrayOneFiresError;

- (void)ambWithArraySecondFires;

- (void)ambWithArraySecondFiresError;

- (void)ambWithNull;

- (void)andThen;

- (void)andThenCompletableError;

- (void)andThenCompletableNormal;

- (void)andThenCompletableNull;

- (void)andThenError;

- (void)andThenFlowableError;

- (void)andThenFlowableNormal;

- (void)andThenFlowableNull;

- (void)andThenNever;

- (void)andThenSingle;

- (void)andThenSingleError;

- (void)andThenSingleNever;

- (void)andThenSingleSubscribeOn;

- (void)andThenSubscribeOn;

- (void)complete;

- (void)composeNormal;

- (void)composeNull;

- (void)concatEmpty;

- (void)concatIterableEmpty;

- (void)concatIterableIterableThrows;

- (void)concatIterableIteratorHasNextThrows;

- (void)concatIterableIteratorNextThrows;

- (void)concatIterableIteratorNull;

- (void)concatIterableMany;

- (void)concatIterableManyOneThrows;

- (void)concatIterableNull;

- (void)concatIterableOneThrows;

- (void)concatIterableSingle;

- (void)concatIterableWithNull;

- (void)concatMultipleOneIsNull;

- (void)concatMultipleOneThrows;

- (void)concatMultipleSources;

- (void)concatNull;

- (void)concatObservableEmpty;

- (void)concatObservableError;

- (void)concatObservableMany;

- (void)concatObservableManyOneThrows;

- (void)concatObservablePrefetch;

- (void)concatObservableSingle;

- (void)concatObservableSingleThrows;

- (void)concatSingleSource;

- (void)concatSingleSourceThrows;

- (void)concatWithError;

- (void)concatWithNormal;

- (void)concatWithNull;

- (void)createNull;

- (void)createOnSubscribeThrowsNPE;

- (void)createOnSubscribeThrowsRuntimeException;

- (void)defer;

- (void)deferErrorSource;

- (void)deferFunctionThrows;

- (void)deferNull;

- (void)deferReturnsNull;

- (void)delayErrorImmediately;

- (void)delayErrorToo;

- (void)delayNormal;

- (void)delaySchedulerNull;

- (void)delayUnitNull;

- (void)doAfterTerminateNormal;

- (void)doAfterTerminateNull;

- (void)doAfterTerminateWithError;

- (void)doOnCompletedError;

- (void)doOnCompletedNormal;

- (void)doOnCompletedNull;

- (void)doOnCompletedThrows;

- (void)doOnDisposeChildCancels;

- (void)doOnDisposeErrorDoesntCall;

- (void)doOnDisposeNormalDoesntCall;

- (void)doOnDisposeNull;

- (void)doOnDisposeThrows;

- (void)doOnEachCompleted;

- (void)doOnEachError;

- (void)doOnEachNullAction;

- (void)doOnErrorHasError;

- (void)doOnErrorNoError;

- (void)doOnErrorNull;

- (void)doOnErrorThrows;

- (void)doOnSubscribeNormal;

- (void)doOnSubscribeNull;

- (void)doOnSubscribeThrows;

- (void)doOnTerminateError;

- (void)doOnTerminateNormal;

- (void)errorNormal;

- (void)errorNull;

- (void)fromActionNormal;

- (void)fromActionNull;

- (void)fromActionThrows;

- (void)fromCallableNormal;

- (void)fromCallableNull;

- (void)fromCallableThrows;

- (void)fromFutureNormal;

- (void)fromFutureNull;

- (void)fromFutureThrows;

- (void)fromObservableEmpty;

- (void)fromObservableError;

- (void)fromObservableNull;

- (void)fromObservableSome;

- (void)fromSingleNormal;

- (void)fromSingleNull;

- (void)fromSingleThrows;

- (void)getError;

- (void)getNormal;

- (void)getNullUnit;

- (void)getTimeout;

- (void)liftNull;

- (void)liftOnCompleteError;

- (void)liftOnErrorComplete;

- (void)liftReturnsNull;

- (void)mergeDelayErrorEmpty;

- (void)mergeDelayErrorIterableEmpty;

- (void)mergeDelayErrorIterableIterableThrows;

- (void)mergeDelayErrorIterableIteratorHasNextThrows;

- (void)mergeDelayErrorIterableIteratorNextThrows;

- (void)mergeDelayErrorIterableIteratorNull;

- (void)mergeDelayErrorIterableMany;

- (void)mergeDelayErrorIterableManyOneThrows;

- (void)mergeDelayErrorIterableNull;

- (void)mergeDelayErrorIterableOneThrows;

- (void)mergeDelayErrorIterableSingle;

- (void)mergeDelayErrorIterableWithNull;

- (void)mergeDelayErrorMultipleOneIsNull;

- (void)mergeDelayErrorMultipleOneThrows;

- (void)mergeDelayErrorMultipleSources;

- (void)mergeDelayErrorNull;

- (void)mergeDelayErrorObservableEmpty;

- (void)mergeDelayErrorObservableError;

- (void)mergeDelayErrorObservableMany;

- (void)mergeDelayErrorObservableManyOneThrows;

- (void)mergeDelayErrorObservableMaxConcurrent;

- (void)mergeDelayErrorObservableSingle;

- (void)mergeDelayErrorObservableSingleThrows;

- (void)mergeDelayErrorSingleSource;

- (void)mergeDelayErrorSingleSourceThrows;

- (void)mergeEmpty;

- (void)mergeIterableEmpty;

- (void)mergeIterableIterableThrows;

- (void)mergeIterableIteratorHasNextThrows;

- (void)mergeIterableIteratorNextThrows;

- (void)mergeIterableIteratorNull;

- (void)mergeIterableMany;

- (void)mergeIterableManyOneThrows;

- (void)mergeIterableNull;

- (void)mergeIterableOneThrows;

- (void)mergeIterableSingle;

- (void)mergeIterableWithNull;

- (void)mergeMultipleOneIsNull;

- (void)mergeMultipleOneThrows;

- (void)mergeMultipleSources;

- (void)mergeNull;

- (void)mergeObservableEmpty;

- (void)mergeObservableError;

- (void)mergeObservableMany;

- (void)mergeObservableManyOneThrows;

- (void)mergeObservableMaxConcurrent;

- (void)mergeObservableSingle;

- (void)mergeObservableSingleThrows;

- (void)mergeSingleSource;

- (void)mergeSingleSourceThrows;

- (void)mergeWithNormal;

- (void)mergeWithNull;

- (void)never;

- (void)observeOnError;

- (void)observeOnNormal;

- (void)observeOnNull;

- (void)onErrorComplete;

- (void)onErrorCompleteFalse;

- (void)onErrorCompleteFunctionThrows;

- (void)onErrorCompleteNull;

- (void)onErrorResumeNextError;

- (void)onErrorResumeNextFunctionReturnsNull;

- (void)onErrorResumeNextFunctionThrows;

- (void)onErrorResumeNextNormal;

- (void)onErrorResumeNextNull;

- (void)onStartCalledSafe;

- (void)onStartCalledUnsafeSafe;

- (void)propagateExceptionSubscribeEmpty;

- (void)propagateExceptionSubscribeOneAction;

- (void)propagateExceptionSubscribeOneActionThrowFromOnSuccess;

- (void)repeat0Time;

- (void)repeat1Time;

- (void)repeat5Times;

- (void)repeatError;

- (void)repeatNormal;

- (void)repeatWhenNull;

- (void)retry5Times;

- (void)retryBiPredicate5Times;

- (void)retryNegativeTimes;

- (void)retryNormal;

- (void)retryTimes5Error;

- (void)retryTimes5Normal;

- (void)retryWhen5Times;

- (void)safeOnCompleteThrows;

- (void)safeOnCompleteThrowsRegularSubscriber;

- (void)safeOnErrorThrows;

- (void)safeOnErrorThrowsRegularSubscriber;

- (void)setUp;

- (void)startWithCompletableError;

- (void)startWithCompletableNormal;

- (void)startWithCompletableNull;

- (void)startWithFlowableError;

- (void)startWithFlowableNormal;

- (void)startWithFlowableNull;

- (void)subscribe;

- (void)subscribeAction2ReportsUnsubscribed;

- (void)subscribeAction2ReportsUnsubscribedAfter;

- (void)subscribeAction2ReportsUnsubscribedOnError;

- (void)subscribeAction2ReportsUnsubscribedOnErrorAfter;

- (void)subscribeActionError;

- (void)subscribeActionNormal;

- (void)subscribeActionNull;

- (void)subscribeActionReportsUnsubscribed;

- (void)subscribeActionReportsUnsubscribedAfter;

- (void)subscribeActionReportsUnsubscribedOnError;

- (void)subscribeCompletableSubscriberNull;

- (void)subscribeDispose;

- (void)subscribeEmptyOnError;

- (void)subscribeOneActionOnError;

- (void)subscribeOneActionThrowFromOnCompleted;

- (void)subscribeOnError;

- (void)subscribeOnNormal;

- (void)subscribeOnNull;

- (void)subscribeReportsUnsubscribed;

- (void)subscribeReportsUnsubscribedOnError;

- (void)subscribeSubscriberError;

- (void)subscribeSubscriberNormal;

- (void)subscribeSubscriberNull;

- (void)subscribeTwoActionsThrowFromOnError;

- (void)subscribeTwoCallbacksCompleteThrows;

- (void)subscribeTwoCallbacksError;

- (void)subscribeTwoCallbacksFirstNull;

- (void)subscribeTwoCallbacksNormal;

- (void)subscribeTwoCallbacksOnErrorThrows;

- (void)subscribeTwoCallbacksSecondNull;

- (void)testHookCreate;

- (void)testHookSubscribeStart;

- (void)testHookUnsafeSubscribeStart;

- (void)timeoutEmitError;

- (void)timeoutOtherNull;

- (void)timeoutSchedulerNull;

- (void)timeoutSwitchNormal;

- (void)timeoutTimerCancelled;

- (void)timeoutUnitNull;

- (void)timer;

- (void)timerCancel;

- (void)timerNewThread;

- (void)timerSchedulerNull;

- (void)timerTestScheduler;

- (void)timerUnitNull;

- (void)toFunctionReceivesObservableReturnsResult;

- (void)toNormal;

- (void)toNull;

- (void)toObservableError;

- (void)toObservableNormal;

- (void)toSingleDefaultError;

- (void)toSingleDefaultNormal;

- (void)toSingleDefaultNull;

- (void)toSingleSupplierError;

- (void)toSingleSupplierNormal;

- (void)toSingleSupplierNull;

- (void)toSingleSupplierReturnsNull;

- (void)toSingleSupplierThrows;

- (void)unsubscribeOnNormal;

- (void)usingDisposeNull;

- (void)usingDisposerThrows;

- (void)usingErrorEager;

- (void)usingErrorLazy;

- (void)usingFactoryAndDisposerThrow;

- (void)usingFactoryReturnsNull;

- (void)usingFactoryReturnsNullAndDisposerThrows;

- (void)usingFactoryThrows;

- (void)usingMapperNull;

- (void)usingMapperReturnsNull;

- (void)usingMapperThrows;

- (void)usingNormalEager;

- (void)usingNormalLazy;

- (void)usingResourceSupplierNull;

- (void)usingResourceThrows;

#pragma mark Package-Private

+ (id)getWithRxSingle:(RxSingle *)single;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest)

J2OBJC_FIELD_SETTER(RxCompletableTest, normal_, RxCompletableTest_NormalCompletable *)
J2OBJC_FIELD_SETTER(RxCompletableTest, error_, RxCompletableTest_ErrorCompletable *)

FOUNDATION_EXPORT id RxCompletableTest_getWithRxSingle_(RxSingle *single);

FOUNDATION_EXPORT void RxCompletableTest_init(RxCompletableTest *self);

FOUNDATION_EXPORT RxCompletableTest *new_RxCompletableTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest *create_RxCompletableTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest)

#endif

#if !defined (RxCompletableTest_IterableIteratorNextThrows_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest_IterableIteratorNextThrows))
#define RxCompletableTest_IterableIteratorNextThrows_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface RxCompletableTest_IterableIteratorNextThrows : NSObject < JavaLangIterable >

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_IterableIteratorNextThrows)

FOUNDATION_EXPORT void RxCompletableTest_IterableIteratorNextThrows_init(RxCompletableTest_IterableIteratorNextThrows *self);

FOUNDATION_EXPORT RxCompletableTest_IterableIteratorNextThrows *new_RxCompletableTest_IterableIteratorNextThrows_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest_IterableIteratorNextThrows *create_RxCompletableTest_IterableIteratorNextThrows_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest_IterableIteratorNextThrows)

#endif

#if !defined (RxCompletableTest_IterableIteratorHasNextThrows_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest_IterableIteratorHasNextThrows))
#define RxCompletableTest_IterableIteratorHasNextThrows_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface RxCompletableTest_IterableIteratorHasNextThrows : NSObject < JavaLangIterable >

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_IterableIteratorHasNextThrows)

FOUNDATION_EXPORT void RxCompletableTest_IterableIteratorHasNextThrows_init(RxCompletableTest_IterableIteratorHasNextThrows *self);

FOUNDATION_EXPORT RxCompletableTest_IterableIteratorHasNextThrows *new_RxCompletableTest_IterableIteratorHasNextThrows_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest_IterableIteratorHasNextThrows *create_RxCompletableTest_IterableIteratorHasNextThrows_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest_IterableIteratorHasNextThrows)

#endif

#if !defined (RxCompletableTest_NormalCompletable_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest_NormalCompletable))
#define RxCompletableTest_NormalCompletable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

@class RxCompletable;

@interface RxCompletableTest_NormalCompletable : JavaUtilConcurrentAtomicAtomicInteger {
 @public
  RxCompletable *completable_;
}

#pragma mark Public

- (void)assertSubscriptionsWithInt:(jint)n;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_NormalCompletable)

J2OBJC_FIELD_SETTER(RxCompletableTest_NormalCompletable, completable_, RxCompletable *)

FOUNDATION_EXPORT void RxCompletableTest_NormalCompletable_init(RxCompletableTest_NormalCompletable *self);

FOUNDATION_EXPORT RxCompletableTest_NormalCompletable *new_RxCompletableTest_NormalCompletable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest_NormalCompletable *create_RxCompletableTest_NormalCompletable_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest_NormalCompletable)

#endif

#if !defined (RxCompletableTest_ErrorCompletable_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest_ErrorCompletable))
#define RxCompletableTest_ErrorCompletable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

@class RxCompletable;

@interface RxCompletableTest_ErrorCompletable : JavaUtilConcurrentAtomicAtomicInteger {
 @public
  RxCompletable *completable_;
}

#pragma mark Public

- (void)assertSubscriptionsWithInt:(jint)n;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_ErrorCompletable)

J2OBJC_FIELD_SETTER(RxCompletableTest_ErrorCompletable, completable_, RxCompletable *)

FOUNDATION_EXPORT void RxCompletableTest_ErrorCompletable_init(RxCompletableTest_ErrorCompletable *self);

FOUNDATION_EXPORT RxCompletableTest_ErrorCompletable *new_RxCompletableTest_ErrorCompletable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest_ErrorCompletable *create_RxCompletableTest_ErrorCompletable_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest_ErrorCompletable)

#endif

#if !defined (RxCompletableTest_CompletableOperatorSwap_) && (INCLUDE_ALL_RxCompletableTest || defined(INCLUDE_RxCompletableTest_CompletableOperatorSwap))
#define RxCompletableTest_CompletableOperatorSwap_

#define RESTRICT_RxCompletable 1
#define INCLUDE_RxCompletable_Operator 1
#include "RxCompletable.h"

@protocol RxCompletableSubscriber;

@interface RxCompletableTest_CompletableOperatorSwap : NSObject < RxCompletable_Operator >

#pragma mark Public

- (id<RxCompletableSubscriber>)callWithId:(id<RxCompletableSubscriber>)v;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletableTest_CompletableOperatorSwap)

FOUNDATION_EXPORT void RxCompletableTest_CompletableOperatorSwap_init(RxCompletableTest_CompletableOperatorSwap *self);

FOUNDATION_EXPORT RxCompletableTest_CompletableOperatorSwap *new_RxCompletableTest_CompletableOperatorSwap_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletableTest_CompletableOperatorSwap *create_RxCompletableTest_CompletableOperatorSwap_init();

J2OBJC_TYPE_LITERAL_HEADER(RxCompletableTest_CompletableOperatorSwap)

#endif

#pragma pop_macro("INCLUDE_ALL_RxCompletableTest")
