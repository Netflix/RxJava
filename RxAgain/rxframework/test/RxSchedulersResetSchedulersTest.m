//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/ResetSchedulersTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalSchedulersCachedThreadScheduler.h"
#include "RxInternalSchedulersEventLoopsScheduler.h"
#include "RxInternalSchedulersNewThreadScheduler.h"
#include "RxPluginsRxJavaPlugins.h"
#include "RxPluginsRxJavaSchedulersHook.h"
#include "RxScheduler.h"
#include "RxSchedulersResetSchedulersTest.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersResetSchedulersTest__Annotations$0();

@interface RxSchedulersResetSchedulersTest_$1 : RxPluginsRxJavaSchedulersHook {
 @public
  RxSchedulersTestScheduler *val$testScheduler_;
}

- (RxScheduler *)getComputationScheduler;

- (RxScheduler *)getIOScheduler;

- (RxScheduler *)getNewThreadScheduler;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersResetSchedulersTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersResetSchedulersTest_$1, val$testScheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersResetSchedulersTest_$1 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxSchedulersResetSchedulersTest_$1 *new_RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersResetSchedulersTest_$1 *create_RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@implementation RxSchedulersResetSchedulersTest

- (void)reset {
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
  RxSchedulersTestScheduler *testScheduler = create_RxSchedulersTestScheduler_init();
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:create_RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(testScheduler)];
  RxSchedulersSchedulers_reset();
  OrgJunitAssert_assertTrueWithBoolean_([((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) isEqual:testScheduler]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) isEqual:testScheduler]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) isEqual:testScheduler]);
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) reset];
  [((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:RxPluginsRxJavaSchedulersHook_getDefaultInstance()];
  RxSchedulersSchedulers_reset();
  OrgJunitAssert_assertTrueWithBoolean_([RxSchedulersSchedulers_io() isKindOfClass:[RxInternalSchedulersCachedThreadScheduler class]]);
  OrgJunitAssert_assertTrueWithBoolean_([RxSchedulersSchedulers_computation() isKindOfClass:[RxInternalSchedulersEventLoopsScheduler class]]);
  OrgJunitAssert_assertTrueWithBoolean_([RxSchedulersSchedulers_newThread() isKindOfClass:[RxInternalSchedulersNewThreadScheduler class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersResetSchedulersTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(reset);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersResetSchedulersTest__Annotations$0 };
  static const J2ObjcClassInfo _RxSchedulersResetSchedulersTest = { "ResetSchedulersTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersResetSchedulersTest;
}

@end

void RxSchedulersResetSchedulersTest_init(RxSchedulersResetSchedulersTest *self) {
  NSObject_init(self);
}

RxSchedulersResetSchedulersTest *new_RxSchedulersResetSchedulersTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersResetSchedulersTest, init)
}

RxSchedulersResetSchedulersTest *create_RxSchedulersResetSchedulersTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersResetSchedulersTest, init)
}

IOSObjectArray *RxSchedulersResetSchedulersTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersResetSchedulersTest)

@implementation RxSchedulersResetSchedulersTest_$1

- (RxScheduler *)getComputationScheduler {
  return val$testScheduler_;
}

- (RxScheduler *)getIOScheduler {
  return val$testScheduler_;
}

- (RxScheduler *)getNewThreadScheduler {
  return val$testScheduler_;
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$testScheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getComputationScheduler);
  methods[1].selector = @selector(getIOScheduler);
  methods[2].selector = @selector(getNewThreadScheduler);
  methods[3].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$testScheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulersTestScheduler;", "LRxSchedulersResetSchedulersTest;", "reset" };
  static const J2ObjcClassInfo _RxSchedulersResetSchedulersTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 1, -1, 2, -1, -1 };
  return &_RxSchedulersResetSchedulersTest_$1;
}

@end

void RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersResetSchedulersTest_$1 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$testScheduler_, capture$0);
  RxPluginsRxJavaSchedulersHook_init(self);
}

RxSchedulersResetSchedulersTest_$1 *new_RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersResetSchedulersTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}

RxSchedulersResetSchedulersTest_$1 *create_RxSchedulersResetSchedulersTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersResetSchedulersTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}
