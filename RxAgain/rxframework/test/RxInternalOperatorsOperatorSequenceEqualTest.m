//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSequenceEqualTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorSequenceEqual.h"
#include "RxInternalOperatorsOperatorSequenceEqualTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscription.h"
#include "RxTestUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorSequenceEqualTest ()

- (void)verifyResultWithRxObservable:(RxObservable *)observable
                         withBoolean:(jboolean)result;

- (void)verifyErrorWithRxObservable:(RxObservable *)observable;

@end

__attribute__((unused)) static void RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(RxInternalOperatorsOperatorSequenceEqualTest *self, RxObservable *observable, jboolean result);

__attribute__((unused)) static void RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(RxInternalOperatorsOperatorSequenceEqualTest *self, RxObservable *observable);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$12();

@interface RxInternalOperatorsOperatorSequenceEqualTest_$1 : NSObject < RxFunctionsFunc2 >

- (JavaLangBoolean *)callWithId:(NSString *)t1
                         withId:(NSString *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSequenceEqualTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorSequenceEqualTest_$1_init(RxInternalOperatorsOperatorSequenceEqualTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSequenceEqualTest_$1 *new_RxInternalOperatorsOperatorSequenceEqualTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSequenceEqualTest_$1 *create_RxInternalOperatorsOperatorSequenceEqualTest_$1_init();

@implementation RxInternalOperatorsOperatorSequenceEqualTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxInternalOperatorsOperatorSequenceEqual_class_());
}

- (void)test1 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"), RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, true);
}

- (void)test2 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"), RxObservable_justWithId_withId_withId_withId_(@"one", @"two", @"three", @"four"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, false);
}

- (void)test3 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_withId_withId_withId_(@"one", @"two", @"three", @"four"), RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, false);
}

- (void)testWithError1 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_justWithId_(@"one"), RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())), RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(self, observable);
}

- (void)testWithError2 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"), RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_justWithId_(@"one"), RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(self, observable);
}

- (void)testWithError3 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_justWithId_(@"one"), RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())), RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_justWithId_(@"one"), RxObservable_errorWithNSException_(create_RxExceptionsTestException_init())));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(self, observable);
}

- (void)testWithEmpty1 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_empty(), RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, false);
}

- (void)testWithEmpty2 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_withId_withId_(@"one", @"two", @"three"), RxObservable_empty());
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, false);
}

- (void)testWithEmpty3 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_empty(), RxObservable_empty());
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, true);
}

- (void)testWithNull1 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_(nil), RxObservable_justWithId_(@"one"));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, false);
}

- (void)testWithNull2 {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_(RxObservable_justWithId_(nil), RxObservable_justWithId_(nil));
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, true);
}

- (void)testWithEqualityError {
  RxObservable *observable = RxObservable_sequenceEqualWithRxObservable_withRxObservable_withRxFunctionsFunc2_(RxObservable_justWithId_(@"one"), RxObservable_justWithId_(@"one"), create_RxInternalOperatorsOperatorSequenceEqualTest_$1_init());
  RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(self, observable);
}

- (void)verifyResultWithRxObservable:(RxObservable *)observable
                         withBoolean:(jboolean)result {
  RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(self, observable, result);
}

- (void)verifyErrorWithRxObservable:(RxObservable *)observable {
  RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(self, observable);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSequenceEqualTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x2, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(test1);
  methods[2].selector = @selector(test2);
  methods[3].selector = @selector(test3);
  methods[4].selector = @selector(testWithError1);
  methods[5].selector = @selector(testWithError2);
  methods[6].selector = @selector(testWithError3);
  methods[7].selector = @selector(testWithEmpty1);
  methods[8].selector = @selector(testWithEmpty2);
  methods[9].selector = @selector(testWithEmpty3);
  methods[10].selector = @selector(testWithNull1);
  methods[11].selector = @selector(testWithNull2);
  methods[12].selector = @selector(testWithEqualityError);
  methods[13].selector = @selector(verifyResultWithRxObservable:withBoolean:);
  methods[14].selector = @selector(verifyErrorWithRxObservable:);
  methods[15].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$4, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$5, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$6, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$7, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$8, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$9, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$10, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$11, (void *)&RxInternalOperatorsOperatorSequenceEqualTest__Annotations$12, "verifyResult", "LRxObservable;Z", "(Lrx/Observable<Ljava/lang/Boolean;>;Z)V", "verifyError", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Boolean;>;)V" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSequenceEqualTest = { "OperatorSequenceEqualTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSequenceEqualTest;
}

@end

void RxInternalOperatorsOperatorSequenceEqualTest_verifyResultWithRxObservable_withBoolean_(RxInternalOperatorsOperatorSequenceEqualTest *self, RxObservable *observable, jboolean result) {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangBoolean_valueOfWithBoolean_(result)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

void RxInternalOperatorsOperatorSequenceEqualTest_verifyErrorWithRxObservable_(RxInternalOperatorsOperatorSequenceEqualTest *self, RxObservable *observable) {
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(observable)) subscribeWithRxObserver:observer];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(RxExceptionsTestException_class_())];
  [inOrder verifyNoMoreInteractions];
}

void RxInternalOperatorsOperatorSequenceEqualTest_init(RxInternalOperatorsOperatorSequenceEqualTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSequenceEqualTest *new_RxInternalOperatorsOperatorSequenceEqualTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSequenceEqualTest, init)
}

RxInternalOperatorsOperatorSequenceEqualTest *create_RxInternalOperatorsOperatorSequenceEqualTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSequenceEqualTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSequenceEqualTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSequenceEqualTest)

@implementation RxInternalOperatorsOperatorSequenceEqualTest_$1

- (JavaLangBoolean *)callWithId:(NSString *)t1
                         withId:(NSString *)t2 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSequenceEqualTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;LNSString;", "LRxInternalOperatorsOperatorSequenceEqualTest;", "testWithEqualityError", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSequenceEqualTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorSequenceEqualTest_$1;
}

@end

void RxInternalOperatorsOperatorSequenceEqualTest_$1_init(RxInternalOperatorsOperatorSequenceEqualTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSequenceEqualTest_$1 *new_RxInternalOperatorsOperatorSequenceEqualTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSequenceEqualTest_$1, init)
}

RxInternalOperatorsOperatorSequenceEqualTest_$1 *create_RxInternalOperatorsOperatorSequenceEqualTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSequenceEqualTest_$1, init)
}
