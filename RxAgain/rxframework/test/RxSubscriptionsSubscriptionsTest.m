//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subscriptions/SubscriptionsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "RxSubscriptionsSubscriptionsTest.h"
#include "RxTestUtil.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$3();

@implementation RxSubscriptionsSubscriptionsTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxSubscriptionsSubscriptions_class_());
}

- (void)testUnsubscribeOnlyOnce {
  id<RxFunctionsAction0> unsubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxSubscription> subscription = RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(unsubscribe);
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [subscription unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(unsubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
}

- (void)testEmpty {
  id<RxSubscription> empty = RxSubscriptionsSubscriptions_empty();
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(empty)) isUnsubscribed]);
  [empty unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([empty isUnsubscribed]);
}

- (void)testUnsubscribed {
  id<RxSubscription> unsubscribed = RxSubscriptionsSubscriptions_unsubscribed();
  OrgJunitAssert_assertTrueWithBoolean_([((id<RxSubscription>) nil_chk(unsubscribed)) isUnsubscribed]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsSubscriptionsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testUnsubscribeOnlyOnce);
  methods[2].selector = @selector(testEmpty);
  methods[3].selector = @selector(testUnsubscribed);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSubscriptionsSubscriptionsTest__Annotations$0, (void *)&RxSubscriptionsSubscriptionsTest__Annotations$1, (void *)&RxSubscriptionsSubscriptionsTest__Annotations$2, (void *)&RxSubscriptionsSubscriptionsTest__Annotations$3 };
  static const J2ObjcClassInfo _RxSubscriptionsSubscriptionsTest = { "SubscriptionsTest", "rx.subscriptions", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsSubscriptionsTest;
}

@end

void RxSubscriptionsSubscriptionsTest_init(RxSubscriptionsSubscriptionsTest *self) {
  NSObject_init(self);
}

RxSubscriptionsSubscriptionsTest *new_RxSubscriptionsSubscriptionsTest_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsSubscriptionsTest, init)
}

RxSubscriptionsSubscriptionsTest *create_RxSubscriptionsSubscriptionsTest_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsSubscriptionsTest, init)
}

IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsSubscriptionsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsSubscriptionsTest)
