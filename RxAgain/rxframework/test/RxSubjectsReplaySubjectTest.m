//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/ReplaySubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsReplaySubject.h"
#include "RxSubjectsReplaySubjectTest.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxSubjectsReplaySubjectTest () {
 @public
  NSException *testException_;
}

- (void)assertCompletedObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertErrorObserverWithRxObserver:(id<RxObserver>)observer;

- (void)assertObservedUntilTwoWithRxObserver:(id<RxObserver>)observer;

@end

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest, testException_, NSException *)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_assertErrorObserverWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer);

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$32();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$33();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$34();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$35();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$36();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$37();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$38();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$39();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$40();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$41();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$42();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$43();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$44();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$45();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$46();

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$47();

@interface RxSubjectsReplaySubjectTest_$1 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$lastValueForObserver1_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$1)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$1, val$lastValueForObserver1_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsReplaySubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$1 *new_RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$1 *create_RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxSubjectsReplaySubjectTest_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$completed_;
  JavaUtilConcurrentCountDownLatch *val$oneReceived_;
  JavaUtilConcurrentCountDownLatch *val$makeSlow_;
  JavaUtilConcurrentAtomicAtomicReference *val$lastValueForObserver2_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$2, val$completed_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$2, val$oneReceived_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$2, val$makeSlow_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$2, val$lastValueForObserver2_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsReplaySubjectTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$2 *new_RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$2 *create_RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3);

@interface RxSubjectsReplaySubjectTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$3)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$3_init(RxSubjectsReplaySubjectTest_$3 *self);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$3 *new_RxSubjectsReplaySubjectTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$3 *create_RxSubjectsReplaySubjectTest_$3_init();

@interface RxSubjectsReplaySubjectTest_$4 : NSObject < RxObserver > {
 @public
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(NSString *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$4)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$4, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(RxSubjectsReplaySubjectTest_$4 *self, id<RxObserver> capture$0);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$4 *new_RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$4 *create_RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0);

@interface RxSubjectsReplaySubjectTest_$5 : RxSubscriber {
 @public
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$5)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectTest_$5, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(RxSubjectsReplaySubjectTest_$5 *self, id<RxObserver> capture$0);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$5 *new_RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(id<RxObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$5 *create_RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(id<RxObserver> capture$0);

@interface RxSubjectsReplaySubjectTest_$6 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectTest_$6)

__attribute__((unused)) static void RxSubjectsReplaySubjectTest_$6_init(RxSubjectsReplaySubjectTest_$6 *self);

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$6 *new_RxSubjectsReplaySubjectTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectTest_$6 *create_RxSubjectsReplaySubjectTest_$6_init();

@implementation RxSubjectsReplaySubjectTest

- (void)testCompleted {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  id<RxObserver> o1 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsReplaySubject *) nil_chk(subject)) subscribeWithRxObserver:o1];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  [subject onNextWithId:@"four"];
  [subject onCompleted];
  [subject onErrorWithNSException:create_NSException_init()];
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, o1);
  id<RxObserver> o2 = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:o2];
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, o2);
}

- (void)testCompletedStopsEmittingData {
  RxSubjectsReplaySubject *channel = RxSubjectsReplaySubject_create();
  id<RxObserver> observerA = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerB = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerC = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxObserver> observerD = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> a = [((RxSubjectsReplaySubject *) nil_chk(channel)) subscribeWithRxObserver:observerA];
  [channel subscribeWithRxObserver:observerB];
  id<OrgMockitoInOrder> inOrderA = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerA } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderB = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerB } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderC = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerC } count:1 type:NSObject_class_()]);
  id<OrgMockitoInOrder> inOrderD = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerD } count:1 type:NSObject_class_()]);
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderA)) verifyWithId:observerA])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderB)) verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxSubscription>) nil_chk(a)) unsubscribe];
  [inOrderA verifyNoMoreInteractions];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [channel onCompleted];
  [((id<RxObserver>) nil_chk([inOrderB verifyWithId:observerB])) onCompleted];
  [channel subscribeWithRxObserver:observerC];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderC)) verifyWithId:observerC])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([inOrderC verifyWithId:observerC])) onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [((id<RxObserver>) nil_chk([inOrderC verifyWithId:observerC])) onCompleted];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(13)];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(14)];
  [channel onNextWithId:JavaLangInteger_valueOfWithInt_(15)];
  [channel onErrorWithNSException:create_JavaLangRuntimeException_init()];
  [channel subscribeWithRxObserver:observerD];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrderD)) verifyWithId:observerD])) onNextWithId:JavaLangInteger_valueOfWithInt_(42)];
  [((id<RxObserver>) nil_chk([inOrderD verifyWithId:observerD])) onNextWithId:JavaLangInteger_valueOfWithInt_(4711)];
  [((id<RxObserver>) nil_chk([inOrderD verifyWithId:observerD])) onCompleted];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerA } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerB } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerC } count:1 type:NSObject_class_()]);
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observerD } count:1 type:NSObject_class_()]);
}

- (void)testCompletedAfterError {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsReplaySubject *) nil_chk(subject)) onNextWithId:@"one"];
  [subject onErrorWithNSException:testException_];
  [subject onNextWithId:@"two"];
  [subject onCompleted];
  [subject onErrorWithNSException:create_JavaLangRuntimeException_init()];
  [subject subscribeWithRxObserver:observer];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:testException_];
  OrgMockitoMockito_verifyNoMoreInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
}

- (void)assertCompletedObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, observer);
}

- (void)testError {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsReplaySubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [subject onNextWithId:@"three"];
  [subject onErrorWithNSException:testException_];
  [subject onNextWithId:@"four"];
  [subject onErrorWithNSException:create_NSException_init()];
  [subject onCompleted];
  RxSubjectsReplaySubjectTest_assertErrorObserverWithRxObserver_(self, observer);
  observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:observer];
  RxSubjectsReplaySubjectTest_assertErrorObserverWithRxObserver_(self, observer);
}

- (void)assertErrorObserverWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsReplaySubjectTest_assertErrorObserverWithRxObserver_(self, observer);
}

- (void)testSubscribeMidSequence {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsReplaySubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, anotherObserver);
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, observer);
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, anotherObserver);
}

- (void)testUnsubscribeFirstObserver {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxSubscription> subscription = [((RxSubjectsReplaySubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:@"one"];
  [subject onNextWithId:@"two"];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  id<RxObserver> anotherObserver = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [subject subscribeWithRxObserver:anotherObserver];
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, anotherObserver);
  [subject onNextWithId:@"three"];
  [subject onCompleted];
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
  RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(self, anotherObserver);
}

- (void)assertObservedUntilTwoWithRxObserver:(id<RxObserver>)observer {
  RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(self, observer);
}

- (void)testNewSubscriberDoesntBlockExisting {
  JavaUtilConcurrentAtomicAtomicReference *lastValueForObserver1 = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxSubscriber *observer1 = create_RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(lastValueForObserver1);
  JavaUtilConcurrentAtomicAtomicReference *lastValueForObserver2 = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *oneReceived = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *makeSlow = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *completed = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxSubscriber *observer2 = create_RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(completed, oneReceived, makeSlow, lastValueForObserver2);
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(subject)) subscribeWithRxSubscriber:observer1];
  [subject onNextWithId:@"one"];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [lastValueForObserver1 get]);
  [subject onNextWithId:@"two"];
  OrgJunitAssert_assertEqualsWithId_withId_(@"two", [lastValueForObserver1 get]);
  [((RxObservable *) nil_chk([subject subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:observer2];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"before waiting for one"];
  [oneReceived await];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"after waiting for one"];
  [subject onNextWithId:@"three"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"sent three"];
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [lastValueForObserver1 get]);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"about to send onCompleted"];
  [subject onCompleted];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"completed subject"];
  [makeSlow countDown];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"makeSlow released"];
  [completed await];
  OrgJunitAssert_assertEqualsWithId_withId_(@"three", [lastValueForObserver2 get]);
}

- (void)testSubscriptionLeak {
  RxSubjectsReplaySubject *replaySubject = RxSubjectsReplaySubject_create();
  id<RxSubscription> s = [((RxSubjectsReplaySubject *) nil_chk(replaySubject)) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [replaySubject subscriberCount]);
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [replaySubject subscriberCount]);
}

- (void)testUnsubscriptionCase {
  RxSubjectsReplaySubject *src = RxSubjectsReplaySubject_create();
  for (jint i = 0; i < 10; i++) {
    id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
    NSString *v = JreStrcat("I", i);
    [((RxSubjectsReplaySubject *) nil_chk(src)) onNextWithId:v];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"Turn: %d%n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([src first])) flatMapWithRxFunctionsFunc1:create_RxSubjectsReplaySubjectTest_$3_init()])) subscribeWithRxObserver:create_RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(o)];
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:@"0, 0"];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testTerminateOnce {
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onCompleted];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [source unsafeSubscribeWithRxSubscriber:create_RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(o)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testReplay1AfterTermination {
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  [((RxSubjectsReplaySubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onCompleted];
  for (jint i = 0; i < 1; i++) {
    id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    [source subscribeWithRxObserver:o];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

- (void)testReplay1Directly {
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsReplaySubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testReplayTimestampedAfterTermination {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), scheduler);
  [((RxSubjectsReplaySubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [source onCompleted];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [source subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testReplayTimestampedDirectly {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsReplaySubject *source = RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), scheduler);
  [((RxSubjectsReplaySubject *) nil_chk(source)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [source subscribeWithRxObserver:o];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [source onCompleted];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
}

- (void)testOnErrorThrowsDoesntPreventDelivery {
  RxSubjectsReplaySubject *ps = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(ps)) subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsOnErrorNotImplementedException *e) {
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testOnErrorThrowsDoesntPreventDelivery2 {
  RxSubjectsReplaySubject *ps = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(ps)) subscribe];
  [ps subscribe];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [ps subscribeWithRxSubscriber:ts];
  [ps subscribe];
  [ps subscribe];
  [ps subscribe];
  @try {
    [ps onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"an exception")];
    OrgJunitAssert_failWithNSString_(@"expect OnErrorNotImplementedException");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size]);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
}

- (void)testCurrentStateMethodsNormal {
  RxSubjectsReplaySubject *as = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsReplaySubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsEmpty {
  RxSubjectsReplaySubject *as = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsReplaySubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertTrueWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
}

- (void)testCurrentStateMethodsError {
  RxSubjectsReplaySubject *as = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsReplaySubject *) nil_chk(as)) hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertNullWithId_([as getThrowable]);
  [as onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithBoolean_([as hasThrowable]);
  OrgJunitAssert_assertFalseWithBoolean_([as hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([[as getThrowable] isKindOfClass:[RxExceptionsTestException class]]);
}

- (void)testSizeAndHasAnyValueUnbounded {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueEffectivelyUnbounded {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createUnbounded();
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueUnboundedError {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueEffectivelyUnboundedError {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createUnbounded();
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  [rs onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueUnboundedEmptyError {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueEffectivelyUnboundedEmptyError {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createUnbounded();
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueUnboundedEmptyCompleted {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createUnbounded();
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueSizeBounded {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  for (jint i = 0; i < 1000; i++) {
    [rs onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
    OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
  }
  [rs onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
  OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
}

- (void)testSizeAndHasAnyValueTimeBounded {
  RxSchedulersTestScheduler *ts = create_RxSchedulersTestScheduler_init();
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), ts);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((RxSubjectsReplaySubject *) nil_chk(rs)) size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  for (jint i = 0; i < 1000; i++) {
    [rs onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    [ts advanceTimeByWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [rs size]);
    OrgJunitAssert_assertTrueWithBoolean_([rs hasAnyValue]);
    [ts advanceTimeByWithLong:1500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
    OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
  }
  [rs onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [rs size]);
  OrgJunitAssert_assertFalseWithBoolean_([rs hasAnyValue]);
}

- (void)testGetValues {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_create();
  IOSObjectArray *expected = [IOSObjectArray arrayWithLength:10 type:NSObject_class_()];
  for (jint i = 0; i < expected->size_; i++) {
    IOSObjectArray_Set(expected, i, JavaLangInteger_valueOfWithInt_(i));
    [((RxSubjectsReplaySubject *) nil_chk(rs)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(JavaUtilArrays_copyOfWithNSObjectArray_withInt_(expected, i + 1), [rs getValues]);
  }
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(expected, [rs getValues]);
}

- (void)testGetValuesUnbounded {
  RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createUnbounded();
  IOSObjectArray *expected = [IOSObjectArray arrayWithLength:10 type:NSObject_class_()];
  for (jint i = 0; i < expected->size_; i++) {
    IOSObjectArray_Set(expected, i, JavaLangInteger_valueOfWithInt_(i));
    [((RxSubjectsReplaySubject *) nil_chk(rs)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(JavaUtilArrays_copyOfWithNSObjectArray_withInt_(expected, i + 1), [rs getValues]);
  }
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(expected, [rs getValues]);
}

- (void)testReplaySubjectValueRelay {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [async onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectValueRelayIncomplete {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectValueRelayBounded {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  [((RxSubjectsReplaySubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [async onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [async onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectValueRelayBoundedIncomplete {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  [((RxSubjectsReplaySubject *) nil_chk(async)) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [async onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [async getValue]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), nil } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectValueRelayBoundedEmptyIncomplete {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsReplaySubject *) nil_chk(async)) hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectValueRelayEmptyIncomplete {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_create();
  OrgJunitAssert_assertFalseWithBoolean_([((RxSubjectsReplaySubject *) nil_chk(async)) hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectEmpty {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_create();
  [((RxSubjectsReplaySubject *) nil_chk(async)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectError {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_create();
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  [((RxSubjectsReplaySubject *) nil_chk(async)) onErrorWithNSException:te];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertSameWithId_withId_(te, [async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectBoundedEmpty {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  [((RxSubjectsReplaySubject *) nil_chk(async)) onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertNullWithId_([async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)testReplaySubjectBoundedError {
  RxSubjectsReplaySubject *async = RxSubjectsReplaySubject_createWithSizeWithInt_(1);
  RxExceptionsTestException *te = create_RxExceptionsTestException_init();
  [((RxSubjectsReplaySubject *) nil_chk(async)) onErrorWithNSException:te];
  OrgJunitAssert_assertFalseWithBoolean_([async hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasCompleted]);
  OrgJunitAssert_assertTrueWithBoolean_([async hasThrowable]);
  OrgJunitAssert_assertSameWithId_withId_(te, [async getThrowable]);
  OrgJunitAssert_assertNullWithId_([async getValue]);
  OrgJunitAssert_assertFalseWithBoolean_([async hasValue]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], [async getValues]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:JavaLangInteger_class_()]]);
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ nil, JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()], [async getValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:JavaLangInteger_class_()]]);
}

- (void)backpressureLiveWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  [((RxSubjectsReplaySubject *) nil_chk(rs)) subscribeWithRxSubscriber:ts];
  for (jint i = 1; i <= 5; i++) {
    [rs onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts requestMoreWithLong:6];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5) } count:5 type:JavaLangInteger_class_()]];
  for (jint i = 6; i <= 10; i++) {
    [rs onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8) } count:8 type:JavaLangInteger_class_()]];
  [rs onCompleted];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)backpressureOfflineWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  for (jint i = 1; i <= 10; i++) {
    [((RxSubjectsReplaySubject *) nil_chk(rs)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  [rs subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]];
  [ts requestMoreWithLong:6];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8) } count:8 type:JavaLangInteger_class_()]];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)backpressureOffline5WithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)rs {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
  for (jint i = 1; i <= 10; i++) {
    [((RxSubjectsReplaySubject *) nil_chk(rs)) onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  [((RxSubjectsReplaySubject *) nil_chk(rs)) onCompleted];
  [rs subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoValues];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7) } count:2 type:JavaLangInteger_class_()]];
  [ts requestMoreWithLong:2];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9) } count:4 type:JavaLangInteger_class_()]];
  [ts assertNotCompleted];
  [ts requestMoreWithLong:1];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:5 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)backpressureUnboundedLive {
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_create()];
}

- (void)backpressureSizeBoundLive {
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(1)];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(5)];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(10)];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(100)];
}

- (void)backpressureSizeAndTimeLive {
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 1, RxSchedulersSchedulers_immediate())];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 5, RxSchedulersSchedulers_immediate())];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 10, RxSchedulersSchedulers_immediate())];
  [self backpressureLiveWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 100, RxSchedulersSchedulers_immediate())];
}

- (void)backpressureUnboundedOffline {
  [self backpressureOfflineWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_create()];
}

- (void)backpressureSizeBoundOffline {
  [self backpressureOffline5WithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(5)];
  [self backpressureOfflineWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(10)];
  [self backpressureOfflineWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithSizeWithInt_(100)];
}

- (void)backpressureSizeAndTimeOffline {
  [self backpressureOffline5WithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 5, RxSchedulersSchedulers_immediate())];
  [self backpressureOfflineWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 10, RxSchedulersSchedulers_immediate())];
  [self backpressureOfflineWithRxSubjectsReplaySubject:RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS), 100, RxSchedulersSchedulers_immediate())];
}

- (void)filtered {
  RxSubjectsReplaySubject *subject = RxSubjectsReplaySubject_create();
  RxObserversTestSubscriber *ts1 = RxObserversTestSubscriber_create();
  RxObserversTestSubscriber *ts2 = RxObserversTestSubscriber_create();
  RxObservable *o = [((RxSubjectsReplaySubject *) nil_chk(subject)) filterWithRxFunctionsFunc1:create_RxSubjectsReplaySubjectTest_$6_init()];
  [((RxObservable *) nil_chk(o)) subscribeWithRxSubscriber:ts1];
  [o subscribeWithRxSubscriber:ts2];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  [((RxObserversTestSubscriber *) nil_chk(ts1)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(6) } count:4 type:JavaLangInteger_class_()]];
  [((RxObserversTestSubscriber *) nil_chk(ts2)) assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(6) } count:4 type:JavaLangInteger_class_()]];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [ts1 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7) } count:5 type:JavaLangInteger_class_()]];
  [ts2 assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7) } count:5 type:JavaLangInteger_class_()]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsReplaySubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(testException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x2, 7, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x2, 10, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 11, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 34, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 35, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 38, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 39, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 40, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 41, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 42, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 44, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 45, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 46, -1 },
    { NULL, "V", 0x0, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x0, 50, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x0, 51, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 52, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 53, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 54, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 55, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 56, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 57, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 58, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testCompleted);
  methods[1].selector = @selector(testCompletedStopsEmittingData);
  methods[2].selector = @selector(testCompletedAfterError);
  methods[3].selector = @selector(assertCompletedObserverWithRxObserver:);
  methods[4].selector = @selector(testError);
  methods[5].selector = @selector(assertErrorObserverWithRxObserver:);
  methods[6].selector = @selector(testSubscribeMidSequence);
  methods[7].selector = @selector(testUnsubscribeFirstObserver);
  methods[8].selector = @selector(assertObservedUntilTwoWithRxObserver:);
  methods[9].selector = @selector(testNewSubscriberDoesntBlockExisting);
  methods[10].selector = @selector(testSubscriptionLeak);
  methods[11].selector = @selector(testUnsubscriptionCase);
  methods[12].selector = @selector(testTerminateOnce);
  methods[13].selector = @selector(testReplay1AfterTermination);
  methods[14].selector = @selector(testReplay1Directly);
  methods[15].selector = @selector(testReplayTimestampedAfterTermination);
  methods[16].selector = @selector(testReplayTimestampedDirectly);
  methods[17].selector = @selector(testOnErrorThrowsDoesntPreventDelivery);
  methods[18].selector = @selector(testOnErrorThrowsDoesntPreventDelivery2);
  methods[19].selector = @selector(testCurrentStateMethodsNormal);
  methods[20].selector = @selector(testCurrentStateMethodsEmpty);
  methods[21].selector = @selector(testCurrentStateMethodsError);
  methods[22].selector = @selector(testSizeAndHasAnyValueUnbounded);
  methods[23].selector = @selector(testSizeAndHasAnyValueEffectivelyUnbounded);
  methods[24].selector = @selector(testSizeAndHasAnyValueUnboundedError);
  methods[25].selector = @selector(testSizeAndHasAnyValueEffectivelyUnboundedError);
  methods[26].selector = @selector(testSizeAndHasAnyValueUnboundedEmptyError);
  methods[27].selector = @selector(testSizeAndHasAnyValueEffectivelyUnboundedEmptyError);
  methods[28].selector = @selector(testSizeAndHasAnyValueUnboundedEmptyCompleted);
  methods[29].selector = @selector(testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted);
  methods[30].selector = @selector(testSizeAndHasAnyValueSizeBounded);
  methods[31].selector = @selector(testSizeAndHasAnyValueTimeBounded);
  methods[32].selector = @selector(testGetValues);
  methods[33].selector = @selector(testGetValuesUnbounded);
  methods[34].selector = @selector(testReplaySubjectValueRelay);
  methods[35].selector = @selector(testReplaySubjectValueRelayIncomplete);
  methods[36].selector = @selector(testReplaySubjectValueRelayBounded);
  methods[37].selector = @selector(testReplaySubjectValueRelayBoundedIncomplete);
  methods[38].selector = @selector(testReplaySubjectValueRelayBoundedEmptyIncomplete);
  methods[39].selector = @selector(testReplaySubjectValueRelayEmptyIncomplete);
  methods[40].selector = @selector(testReplaySubjectEmpty);
  methods[41].selector = @selector(testReplaySubjectError);
  methods[42].selector = @selector(testReplaySubjectBoundedEmpty);
  methods[43].selector = @selector(testReplaySubjectBoundedError);
  methods[44].selector = @selector(backpressureLiveWithRxSubjectsReplaySubject:);
  methods[45].selector = @selector(backpressureOfflineWithRxSubjectsReplaySubject:);
  methods[46].selector = @selector(backpressureOffline5WithRxSubjectsReplaySubject:);
  methods[47].selector = @selector(backpressureUnboundedLive);
  methods[48].selector = @selector(backpressureSizeBoundLive);
  methods[49].selector = @selector(backpressureSizeAndTimeLive);
  methods[50].selector = @selector(backpressureUnboundedOffline);
  methods[51].selector = @selector(backpressureSizeBoundOffline);
  methods[52].selector = @selector(backpressureSizeAndTimeOffline);
  methods[53].selector = @selector(filtered);
  methods[54].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testException_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubjectsReplaySubjectTest__Annotations$0, (void *)&RxSubjectsReplaySubjectTest__Annotations$1, (void *)&RxSubjectsReplaySubjectTest__Annotations$2, "assertCompletedObserver", "LRxObserver;", "(Lrx/Observer<Ljava/lang/String;>;)V", (void *)&RxSubjectsReplaySubjectTest__Annotations$3, "assertErrorObserver", (void *)&RxSubjectsReplaySubjectTest__Annotations$4, (void *)&RxSubjectsReplaySubjectTest__Annotations$5, "assertObservedUntilTwo", "LJavaLangInterruptedException;", (void *)&RxSubjectsReplaySubjectTest__Annotations$6, (void *)&RxSubjectsReplaySubjectTest__Annotations$7, (void *)&RxSubjectsReplaySubjectTest__Annotations$8, (void *)&RxSubjectsReplaySubjectTest__Annotations$9, (void *)&RxSubjectsReplaySubjectTest__Annotations$10, (void *)&RxSubjectsReplaySubjectTest__Annotations$11, (void *)&RxSubjectsReplaySubjectTest__Annotations$12, (void *)&RxSubjectsReplaySubjectTest__Annotations$13, (void *)&RxSubjectsReplaySubjectTest__Annotations$14, (void *)&RxSubjectsReplaySubjectTest__Annotations$15, (void *)&RxSubjectsReplaySubjectTest__Annotations$16, (void *)&RxSubjectsReplaySubjectTest__Annotations$17, (void *)&RxSubjectsReplaySubjectTest__Annotations$18, (void *)&RxSubjectsReplaySubjectTest__Annotations$19, (void *)&RxSubjectsReplaySubjectTest__Annotations$20, (void *)&RxSubjectsReplaySubjectTest__Annotations$21, (void *)&RxSubjectsReplaySubjectTest__Annotations$22, (void *)&RxSubjectsReplaySubjectTest__Annotations$23, (void *)&RxSubjectsReplaySubjectTest__Annotations$24, (void *)&RxSubjectsReplaySubjectTest__Annotations$25, (void *)&RxSubjectsReplaySubjectTest__Annotations$26, (void *)&RxSubjectsReplaySubjectTest__Annotations$27, (void *)&RxSubjectsReplaySubjectTest__Annotations$28, (void *)&RxSubjectsReplaySubjectTest__Annotations$29, (void *)&RxSubjectsReplaySubjectTest__Annotations$30, (void *)&RxSubjectsReplaySubjectTest__Annotations$31, (void *)&RxSubjectsReplaySubjectTest__Annotations$32, (void *)&RxSubjectsReplaySubjectTest__Annotations$33, (void *)&RxSubjectsReplaySubjectTest__Annotations$34, (void *)&RxSubjectsReplaySubjectTest__Annotations$35, (void *)&RxSubjectsReplaySubjectTest__Annotations$36, (void *)&RxSubjectsReplaySubjectTest__Annotations$37, (void *)&RxSubjectsReplaySubjectTest__Annotations$38, (void *)&RxSubjectsReplaySubjectTest__Annotations$39, (void *)&RxSubjectsReplaySubjectTest__Annotations$40, "backpressureLive", "LRxSubjectsReplaySubject;", "(Lrx/subjects/ReplaySubject<Ljava/lang/Integer;>;)V", "backpressureOffline", "backpressureOffline5", (void *)&RxSubjectsReplaySubjectTest__Annotations$41, (void *)&RxSubjectsReplaySubjectTest__Annotations$42, (void *)&RxSubjectsReplaySubjectTest__Annotations$43, (void *)&RxSubjectsReplaySubjectTest__Annotations$44, (void *)&RxSubjectsReplaySubjectTest__Annotations$45, (void *)&RxSubjectsReplaySubjectTest__Annotations$46, (void *)&RxSubjectsReplaySubjectTest__Annotations$47 };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest = { "ReplaySubjectTest", "rx.subjects", ptrTable, methods, fields, 7, 0x1, 55, 1, -1, -1, -1, -1, -1 };
  return &_RxSubjectsReplaySubjectTest;
}

@end

void RxSubjectsReplaySubjectTest_assertCompletedObserverWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer) {
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

void RxSubjectsReplaySubjectTest_assertErrorObserverWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:self->testException_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

void RxSubjectsReplaySubjectTest_assertObservedUntilTwoWithRxObserver_(RxSubjectsReplaySubjectTest *self, id<RxObserver> observer) {
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onCompleted];
}

void RxSubjectsReplaySubjectTest_init(RxSubjectsReplaySubjectTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testException_, new_NSException_init());
}

RxSubjectsReplaySubjectTest *new_RxSubjectsReplaySubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest, init)
}

RxSubjectsReplaySubjectTest *create_RxSubjectsReplaySubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest, init)
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$35() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$36() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$37() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$38() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$39() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$40() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$41() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$42() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$43() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$44() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$45() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$46() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsReplaySubjectTest__Annotations$47() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubjectTest)

@implementation RxSubjectsReplaySubjectTest_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"observer1: ", v)];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$lastValueForObserver1_)) setWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lastValueForObserver1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lastValueForObserver1_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxSubjectsReplaySubjectTest;", "testNewSubscriberDoesntBlockExisting", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxSubjectsReplaySubjectTest_$1;
}

@end

void RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsReplaySubjectTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$lastValueForObserver1_, capture$0);
  RxSubscriber_init(self);
}

RxSubjectsReplaySubjectTest_$1 *new_RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxSubjectsReplaySubjectTest_$1 *create_RxSubjectsReplaySubjectTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxSubjectsReplaySubjectTest_$2

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$completed_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"observer2: ", v)];
  if ([((NSString *) nil_chk(v)) isEqual:@"one"]) {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$oneReceived_)) countDown];
  }
  else {
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$makeSlow_)) await];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$lastValueForObserver2_)) setWithId:v];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$3 {
  RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  RELEASE_(val$completed_);
  RELEASE_(val$oneReceived_);
  RELEASE_(val$makeSlow_);
  RELEASE_(val$lastValueForObserver2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$completed_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$oneReceived_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$makeSlow_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$lastValueForObserver2_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSString;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxSubjectsReplaySubjectTest;", "testNewSubscriberDoesntBlockExisting", "Lrx/Subscriber<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 4, 7, -1, 8, 9, -1 };
  return &_RxSubjectsReplaySubjectTest_$2;
}

@end

void RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSubjectsReplaySubjectTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  JreStrongAssign(&self->val$completed_, capture$0);
  JreStrongAssign(&self->val$oneReceived_, capture$1);
  JreStrongAssign(&self->val$makeSlow_, capture$2);
  JreStrongAssign(&self->val$lastValueForObserver2_, capture$3);
  RxSubscriber_init(self);
}

RxSubjectsReplaySubjectTest_$2 *new_RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$2, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2, capture$3)
}

RxSubjectsReplaySubjectTest_$2 *create_RxSubjectsReplaySubjectTest_$2_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2, JavaUtilConcurrentAtomicAtomicReference *capture$3) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$2, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxSubjectsReplaySubjectTest_$3

- (RxObservable *)callWithId:(NSString *)t1 {
  return RxObservable_justWithId_(JreStrcat("$$$", t1, @", ", t1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsReplaySubjectTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxSubjectsReplaySubjectTest;", "testUnsubscriptionCase", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$3 = { "", "rx.subjects", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxSubjectsReplaySubjectTest_$3;
}

@end

void RxSubjectsReplaySubjectTest_$3_init(RxSubjectsReplaySubjectTest_$3 *self) {
  NSObject_init(self);
}

RxSubjectsReplaySubjectTest_$3 *new_RxSubjectsReplaySubjectTest_$3_init() {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$3, init)
}

RxSubjectsReplaySubjectTest_$3 *create_RxSubjectsReplaySubjectTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$3, init)
}

@implementation RxSubjectsReplaySubjectTest_$4

- (void)onNextWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:t];
  [((id<RxObserver>) nil_chk(val$o_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0 {
  RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSString;", "onError", "LNSException;", "LRxObserver;", "(Lrx/Observer<Ljava/lang/Object;>;)V", "Lrx/Observer<Ljava/lang/Object;>;", "LRxSubjectsReplaySubjectTest;", "testUnsubscriptionCase", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$4 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxSubjectsReplaySubjectTest_$4;
}

@end

void RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(RxSubjectsReplaySubjectTest_$4 *self, id<RxObserver> capture$0) {
  JreStrongAssign(&self->val$o_, capture$0);
  NSObject_init(self);
}

RxSubjectsReplaySubjectTest_$4 *new_RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$4, initWithRxObserver_, capture$0)
}

RxSubjectsReplaySubjectTest_$4 *create_RxSubjectsReplaySubjectTest_$4_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$4, initWithRxObserver_, capture$0)
}

@implementation RxSubjectsReplaySubjectTest_$5

- (void)onNextWithId:(JavaLangInteger *)t {
  [((id<RxObserver>) nil_chk(val$o_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)capture$0 {
  RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "onError", "LNSException;", "LRxObserver;", "(Lrx/Observer<Ljava/lang/Integer;>;)V", "Lrx/Observer<Ljava/lang/Integer;>;", "LRxSubjectsReplaySubjectTest;", "testTerminateOnce", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$5 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxSubjectsReplaySubjectTest_$5;
}

@end

void RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(RxSubjectsReplaySubjectTest_$5 *self, id<RxObserver> capture$0) {
  JreStrongAssign(&self->val$o_, capture$0);
  RxSubscriber_init(self);
}

RxSubjectsReplaySubjectTest_$5 *new_RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$5, initWithRxObserver_, capture$0)
}

RxSubjectsReplaySubjectTest_$5 *create_RxSubjectsReplaySubjectTest_$5_initWithRxObserver_(id<RxObserver> capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$5, initWithRxObserver_, capture$0)
}

@implementation RxSubjectsReplaySubjectTest_$6

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)v {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(v)) intValue] > 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsReplaySubjectTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSubjectsReplaySubjectTest;", "filtered", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectTest_$6 = { "", "rx.subjects", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSubjectsReplaySubjectTest_$6;
}

@end

void RxSubjectsReplaySubjectTest_$6_init(RxSubjectsReplaySubjectTest_$6 *self) {
  NSObject_init(self);
}

RxSubjectsReplaySubjectTest_$6 *new_RxSubjectsReplaySubjectTest_$6_init() {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectTest_$6, init)
}

RxSubjectsReplaySubjectTest_$6 *create_RxSubjectsReplaySubjectTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectTest_$6, init)
}
