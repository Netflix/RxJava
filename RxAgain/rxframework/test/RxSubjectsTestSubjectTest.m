//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/TestSubjectTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxObserver.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsTestSubject.h"
#include "RxSubjectsTestSubjectTest.h"
#include "RxSubscription.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$5();

@implementation RxSubjectsTestSubjectTest

- (void)testObserverPropagateValueAfterTriggeringActions {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)testObserverPropagateValueInFutureTimeAfterTriggeringActions {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [scheduler advanceTimeToWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)testObserverPropagateErrorAfterTriggeringActions {
  JavaIoIOException *e = create_JavaIoIOException_init();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onErrorWithNSException:e];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:e];
}

- (void)testObserverPropagateErrorInFutureTimeAfterTriggeringActions {
  JavaIoIOException *e = create_JavaIoIOException_init();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [scheduler advanceTimeToWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onErrorWithNSException:e];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:e];
}

- (void)testObserverPropagateCompletedAfterTriggeringActions {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onCompleted];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testObserverPropagateCompletedInFutureTimeAfterTriggeringActions {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [scheduler advanceTimeToWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  RxSubjectsTestSubject *subject = RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(scheduler);
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxSubjectsTestSubject *) nil_chk(subject)) subscribeWithRxObserver:observer];
  [subject onCompleted];
  [scheduler triggerActions];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsTestSubjectTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testObserverPropagateValueAfterTriggeringActions);
  methods[1].selector = @selector(testObserverPropagateValueInFutureTimeAfterTriggeringActions);
  methods[2].selector = @selector(testObserverPropagateErrorAfterTriggeringActions);
  methods[3].selector = @selector(testObserverPropagateErrorInFutureTimeAfterTriggeringActions);
  methods[4].selector = @selector(testObserverPropagateCompletedAfterTriggeringActions);
  methods[5].selector = @selector(testObserverPropagateCompletedInFutureTimeAfterTriggeringActions);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSubjectsTestSubjectTest__Annotations$0, (void *)&RxSubjectsTestSubjectTest__Annotations$1, (void *)&RxSubjectsTestSubjectTest__Annotations$2, (void *)&RxSubjectsTestSubjectTest__Annotations$3, (void *)&RxSubjectsTestSubjectTest__Annotations$4, (void *)&RxSubjectsTestSubjectTest__Annotations$5 };
  static const J2ObjcClassInfo _RxSubjectsTestSubjectTest = { "TestSubjectTest", "rx.subjects", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxSubjectsTestSubjectTest;
}

@end

void RxSubjectsTestSubjectTest_init(RxSubjectsTestSubjectTest *self) {
  NSObject_init(self);
}

RxSubjectsTestSubjectTest *new_RxSubjectsTestSubjectTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsTestSubjectTest, init)
}

RxSubjectsTestSubjectTest *create_RxSubjectsTestSubjectTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsTestSubjectTest, init)
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubjectsTestSubjectTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsTestSubjectTest)
