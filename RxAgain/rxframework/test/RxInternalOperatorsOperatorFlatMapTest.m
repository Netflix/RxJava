//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorFlatMapTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorFlatMapTest.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOperatorFlatMapTest ()

+ (RxObservable *)composeWithRxObservable:(RxObservable *)source
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)subscriptionCount
                                  withInt:(jint)m;

@end

__attribute__((unused)) static RxObservable *RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxObservable *source, JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount, jint m);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$21();

@interface RxInternalOperatorsOperatorFlatMapTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$1, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(RxInternalOperatorsOperatorFlatMapTest_$1 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$1 *new_RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$1 *create_RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$2 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$2_init(RxInternalOperatorsOperatorFlatMapTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$2 *new_RxInternalOperatorsOperatorFlatMapTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$2 *create_RxInternalOperatorsOperatorFlatMapTest_$2_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$3 : NSObject < RxFunctionsFunc1 >

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$3_init(RxInternalOperatorsOperatorFlatMapTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$3 *new_RxInternalOperatorsOperatorFlatMapTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$3 *create_RxInternalOperatorsOperatorFlatMapTest_$3_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$4 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$4_init(RxInternalOperatorsOperatorFlatMapTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$4 *new_RxInternalOperatorsOperatorFlatMapTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$4 *create_RxInternalOperatorsOperatorFlatMapTest_$4_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$5 : NSObject < RxFunctionsFunc1 > {
 @public
  id<JavaUtilList> val$list_;
}

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$5, val$list_, id<JavaUtilList>)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(RxInternalOperatorsOperatorFlatMapTest_$5 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$5 *new_RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$5 *create_RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$6 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$6_init(RxInternalOperatorsOperatorFlatMapTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$6 *new_RxInternalOperatorsOperatorFlatMapTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$6 *create_RxInternalOperatorsOperatorFlatMapTest_$6_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$7 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$7_init(RxInternalOperatorsOperatorFlatMapTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$7 *new_RxInternalOperatorsOperatorFlatMapTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$7 *create_RxInternalOperatorsOperatorFlatMapTest_$7_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$8 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$8_init(RxInternalOperatorsOperatorFlatMapTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$8 *new_RxInternalOperatorsOperatorFlatMapTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$8 *create_RxInternalOperatorsOperatorFlatMapTest_$8_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$9 : NSObject < RxFunctionsFunc1 > {
 @public
  id val$value_;
}

- (id)callWithId:(id)t1;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$9, val$value_, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(RxInternalOperatorsOperatorFlatMapTest_$9 *self, id capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$9 *new_RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$9 *create_RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(id capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$10 : NSObject < RxFunctionsFunc0 > {
 @public
  id val$value_;
}

- (id)call;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$10, val$value_, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(RxInternalOperatorsOperatorFlatMapTest_$10 *self, id capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$10 *new_RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$10 *create_RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(id capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$11 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$11_init(RxInternalOperatorsOperatorFlatMapTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$11 *new_RxInternalOperatorsOperatorFlatMapTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$11 *create_RxInternalOperatorsOperatorFlatMapTest_$11_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$12 : NSObject < RxFunctionsFunc1 >

- (id)callWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$12_init(RxInternalOperatorsOperatorFlatMapTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$12 *new_RxInternalOperatorsOperatorFlatMapTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$12 *create_RxInternalOperatorsOperatorFlatMapTest_$12_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$13 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscriptionCount_;
  jint val$m_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                                      withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$13, val$subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxInternalOperatorsOperatorFlatMapTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$13 *new_RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$13 *create_RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1);

@interface RxInternalOperatorsOperatorFlatMapTest_$14 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscriptionCount_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$14, val$subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$14 *new_RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$14 *create_RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$15 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscriptionCount_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$15)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$15, val$subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$15 *new_RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$15 *create_RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$16 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$subscriptionCount_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t1;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$16)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$16, val$subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$16 *new_RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$16 *create_RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$17 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$17)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$17_init(RxInternalOperatorsOperatorFlatMapTest_$17 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$17 *new_RxInternalOperatorsOperatorFlatMapTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$17 *create_RxInternalOperatorsOperatorFlatMapTest_$17_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$18 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$18)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$18_init(RxInternalOperatorsOperatorFlatMapTest_$18 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$18 *new_RxInternalOperatorsOperatorFlatMapTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$18 *create_RxInternalOperatorsOperatorFlatMapTest_$18_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$19 : NSObject < RxFunctionsFunc1 > {
 @public
  JavaUtilRandom *rnd_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$19)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorFlatMapTest_$19, rnd_, JavaUtilRandom *)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$19_init(RxInternalOperatorsOperatorFlatMapTest_$19 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$19 *new_RxInternalOperatorsOperatorFlatMapTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$19 *create_RxInternalOperatorsOperatorFlatMapTest_$19_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$20 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$20)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$20_init(RxInternalOperatorsOperatorFlatMapTest_$20 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$20 *new_RxInternalOperatorsOperatorFlatMapTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$20 *create_RxInternalOperatorsOperatorFlatMapTest_$20_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$21 : NSObject < RxFunctionsFunc1 > {
 @public
  jint val$n_;
}

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$21)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(RxInternalOperatorsOperatorFlatMapTest_$21 *self, jint capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$21 *new_RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$21 *create_RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(jint capture$0);

@interface RxInternalOperatorsOperatorFlatMapTest_$22 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$22)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$22_init(RxInternalOperatorsOperatorFlatMapTest_$22 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$22 *new_RxInternalOperatorsOperatorFlatMapTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$22 *create_RxInternalOperatorsOperatorFlatMapTest_$22_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$23 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$23)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$23_init(RxInternalOperatorsOperatorFlatMapTest_$23 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$23 *new_RxInternalOperatorsOperatorFlatMapTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$23 *create_RxInternalOperatorsOperatorFlatMapTest_$23_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$24 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$24)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$24_init(RxInternalOperatorsOperatorFlatMapTest_$24 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$24 *new_RxInternalOperatorsOperatorFlatMapTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$24 *create_RxInternalOperatorsOperatorFlatMapTest_$24_init();

@interface RxInternalOperatorsOperatorFlatMapTest_$25 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorFlatMapTest_$25)

__attribute__((unused)) static void RxInternalOperatorsOperatorFlatMapTest_$25_init(RxInternalOperatorsOperatorFlatMapTest_$25 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$25 *new_RxInternalOperatorsOperatorFlatMapTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorFlatMapTest_$25 *create_RxInternalOperatorsOperatorFlatMapTest_$25_init();

@implementation RxInternalOperatorsOperatorFlatMapTest

- (void)testNormal {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> list = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]);
  id<RxFunctionsFunc1> func = create_RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(list);
  id<RxFunctionsFunc2> resFunc = create_RxInternalOperatorsOperatorFlatMapTest_$2_init();
  id<JavaUtilList> source = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(16), JavaLangInteger_valueOfWithInt_(32), JavaLangInteger_valueOfWithInt_(64) } count:3 type:JavaLangInteger_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(source))) flatMapIterableWithRxFunctionsFunc1:func withRxFunctionsFunc2:resFunc])) subscribeWithRxObserver:o];
  for (JavaLangInteger * __strong s in nil_chk(source)) {
    for (JavaLangInteger * __strong v in nil_chk(list)) {
      [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(s)) intValue] | [((JavaLangInteger *) nil_chk(v)) intValue])];
    }
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testCollectionFunctionThrows {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxFunctionsFunc1> func = create_RxInternalOperatorsOperatorFlatMapTest_$3_init();
  id<RxFunctionsFunc2> resFunc = create_RxInternalOperatorsOperatorFlatMapTest_$4_init();
  id<JavaUtilList> source = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(16), JavaLangInteger_valueOfWithInt_(32), JavaLangInteger_valueOfWithInt_(64) } count:3 type:JavaLangInteger_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(source))) flatMapIterableWithRxFunctionsFunc1:func withRxFunctionsFunc2:resFunc])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testResultFunctionThrows {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> list = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]);
  id<RxFunctionsFunc1> func = create_RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(list);
  id<RxFunctionsFunc2> resFunc = create_RxInternalOperatorsOperatorFlatMapTest_$6_init();
  id<JavaUtilList> source = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(16), JavaLangInteger_valueOfWithInt_(32), JavaLangInteger_valueOfWithInt_(64) } count:3 type:JavaLangInteger_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(source))) flatMapIterableWithRxFunctionsFunc1:func withRxFunctionsFunc2:resFunc])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testMergeError {
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<RxFunctionsFunc1> func = create_RxInternalOperatorsOperatorFlatMapTest_$7_init();
  id<RxFunctionsFunc2> resFunc = create_RxInternalOperatorsOperatorFlatMapTest_$8_init();
  id<JavaUtilList> source = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(16), JavaLangInteger_valueOfWithInt_(32), JavaLangInteger_valueOfWithInt_(64) } count:3 type:JavaLangInteger_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(source))) flatMapWithRxFunctionsFunc1:func withRxFunctionsFunc2:resFunc])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (id<RxFunctionsFunc1>)justWithId:(id)value {
  return create_RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(value);
}

- (id<RxFunctionsFunc0>)just0WithId:(id)value {
  return create_RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(value);
}

- (void)testFlatMapTransformsNormal {
  RxObservable *onNext = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]));
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30) } count:3 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self just0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testFlatMapTransformsException {
  RxObservable *onNext = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]));
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_concatWithRxObservable_withRxObservable_(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30) } count:3 type:JavaLangInteger_class_()])), RxObservable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"Forced failure!")));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self just0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (id<RxFunctionsFunc0>)funcThrow0WithId:(id)r {
  return create_RxInternalOperatorsOperatorFlatMapTest_$11_init();
}

- (id<RxFunctionsFunc1>)funcThrowWithId:(id)t
                                 withId:(id)r {
  return create_RxInternalOperatorsOperatorFlatMapTest_$12_init();
}

- (void)testFlatMapTransformsOnNextFuncThrows {
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30) } count:3 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self funcThrowWithId:JavaLangInteger_valueOfWithInt_(1) withId:onError] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self just0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testFlatMapTransformsOnErrorFuncThrows {
  RxObservable *onNext = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]));
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self funcThrowWithId:nil withId:onError] withRxFunctionsFunc0:[self just0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testFlatMapTransformsOnCompletedFuncThrows {
  RxObservable *onNext = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()]));
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self funcThrow0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testFlatMapTransformsMergeException {
  RxObservable *onNext = RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
  RxObservable *onCompleted = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30) } count:3 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self funcThrow0WithId:onCompleted]])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

+ (RxObservable *)composeWithRxObservable:(RxObservable *)source
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)subscriptionCount
                                  withInt:(jint)m {
  return RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(source, subscriptionCount, m);
}

- (void)testFlatMapMaxConcurrent {
  jint m = 4;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscriptionCount) withInt:m];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  id<JavaUtilSet> expected = create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(11), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(21), JavaLangInteger_valueOfWithInt_(30), JavaLangInteger_valueOfWithInt_(31), JavaLangInteger_valueOfWithInt_(40), JavaLangInteger_valueOfWithInt_(41), JavaLangInteger_valueOfWithInt_(50), JavaLangInteger_valueOfWithInt_(51), JavaLangInteger_valueOfWithInt_(60), JavaLangInteger_valueOfWithInt_(61), JavaLangInteger_valueOfWithInt_(70), JavaLangInteger_valueOfWithInt_(71), JavaLangInteger_valueOfWithInt_(80), JavaLangInteger_valueOfWithInt_(81), JavaLangInteger_valueOfWithInt_(90), JavaLangInteger_valueOfWithInt_(91), JavaLangInteger_valueOfWithInt_(100), JavaLangInteger_valueOfWithInt_(101) } count:20 type:JavaLangInteger_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_([expected size], [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([expected containsAllWithJavaUtilCollection:[ts getOnNextEvents]]);
}

- (void)testFlatMapSelectorMaxConcurrent {
  jint m = 4;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *source = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscriptionCount) withRxFunctionsFunc2:create_RxInternalOperatorsOperatorFlatMapTest_$17_init() withInt:m];
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  id<JavaUtilSet> expected = create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1010), JavaLangInteger_valueOfWithInt_(1011), JavaLangInteger_valueOfWithInt_(2020), JavaLangInteger_valueOfWithInt_(2021), JavaLangInteger_valueOfWithInt_(3030), JavaLangInteger_valueOfWithInt_(3031), JavaLangInteger_valueOfWithInt_(4040), JavaLangInteger_valueOfWithInt_(4041), JavaLangInteger_valueOfWithInt_(5050), JavaLangInteger_valueOfWithInt_(5051), JavaLangInteger_valueOfWithInt_(6060), JavaLangInteger_valueOfWithInt_(6061), JavaLangInteger_valueOfWithInt_(7070), JavaLangInteger_valueOfWithInt_(7071), JavaLangInteger_valueOfWithInt_(8080), JavaLangInteger_valueOfWithInt_(8081), JavaLangInteger_valueOfWithInt_(9090), JavaLangInteger_valueOfWithInt_(9091), JavaLangInteger_valueOfWithInt_(10100), JavaLangInteger_valueOfWithInt_(10101) } count:20 type:JavaLangInteger_class_()]));
  OrgJunitAssert_assertEqualsWithLong_withLong_([expected size], [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"--> testFlatMapSelectorMaxConcurrent: ", [ts getOnNextEvents])];
  OrgJunitAssert_assertTrueWithBoolean_([expected containsAllWithJavaUtilCollection:[ts getOnNextEvents]]);
}

- (void)testFlatMapTransformsMaxConcurrentNormalLoop {
  for (jint i = 0; i < 1000; i++) {
    @autoreleasepool {
      if (i % 100 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"testFlatMapTransformsMaxConcurrentNormalLoop => ", i)];
      }
      [self testFlatMapTransformsMaxConcurrentNormal];
    }
  }
}

- (void)testFlatMapTransformsMaxConcurrentNormal {
  jint m = 2;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *onNext = [((RxObservable *) nil_chk(RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_([((RxObservable *) nil_chk(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3) } count:3 type:JavaLangInteger_class_()])))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()], subscriptionCount, m))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObservable *onCompleted = [((RxObservable *) nil_chk(RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(4) } count:1 type:JavaLangInteger_class_()])), subscriptionCount, m))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  RxObservable *onError = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5) } count:1 type:JavaLangInteger_class_()]));
  RxObservable *source = RxObservable_fromWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30) } count:3 type:JavaLangInteger_class_()]));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) flatMapWithRxFunctionsFunc1:[self justWithId:onNext] withRxFunctionsFunc1:[self justWithId:onError] withRxFunctionsFunc0:[self just0WithId:onCompleted] withInt:m])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(3)))) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)flatMapRangeAsyncLoop {
  for (jint i = 0; i < 2000; i++) {
    @autoreleasepool {
      if (i % 10 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"flatMapRangeAsyncLoop > ", i)];
      }
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$18_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEventWithLong:2500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
      if ([ts getCompletions] == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:[((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]];
      }
      [ts assertTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> list = [ts getOnNextEvents];
      OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [((id<JavaUtilList>) nil_chk(list)) size]);
      jboolean f = false;
      for (jint j = 0; j < [list size]; j++) {
        if ([((JavaLangInteger *) nil_chk([list getWithInt:j])) intValue] != j) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("IC@", j, ' ', [list getWithInt:j])];
          f = true;
        }
      }
      if (f) {
        OrgJunitAssert_failWithNSString_(@"Results are out of order!");
      }
    }
  }
}

- (void)flatMapRangeMixedAsyncLoop {
  for (jint i = 0; i < 2000; i++) {
    @autoreleasepool {
      if (i % 10 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"flatMapRangeAsyncLoop > ", i)];
      }
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 1000))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$19_init()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEventWithLong:2500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
      if ([ts getCompletions] == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:[((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]];
      }
      [ts assertTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> list = [ts getOnNextEvents];
      if ([((id<JavaUtilList>) nil_chk(list)) size] < 1000) {
        id<JavaUtilSet> set = create_JavaUtilHashSet_initWithJavaUtilCollection_(list);
        for (jint j = 0; j < 1000; j++) {
          if (![set containsWithId:JavaLangInteger_valueOfWithInt_(j)]) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$", j, @" missing")];
          }
        }
      }
      OrgJunitAssert_assertEqualsWithLong_withLong_(1000, [list size]);
    }
  }
}

- (void)flatMapIntPassthruAsync {
  for (jint i = 0; i < 1000; i++) {
    @autoreleasepool {
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1000))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$20_init()])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEventWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      [ts assertNoErrors];
      [ts assertCompleted];
      [ts assertValueCountWithInt:1000];
    }
  }
}

- (void)flatMapTwoNestedSync {
  {
    IOSIntArray *a__ = [IOSIntArray arrayWithInts:(jint[]){ 1, 1000, 1000000 } count:3];
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint n = *b__++;
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(n)])) subscribeWithRxSubscriber:ts];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"flatMapTwoNestedSync >> @ ", n)];
      [ts assertNoErrors];
      [ts assertCompleted];
      [ts assertValueCountWithInt:n * 2];
    }
  }
}

- (void)justEmptyMixture {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$22_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueCountWithInt:2 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertNoErrors];
  [ts assertCompleted];
  jint j = 1;
  for (JavaLangInteger * __strong v in nil_chk([ts getOnNextEvents])) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(j, [((JavaLangInteger *) nil_chk(v)) intValue]);
    j += 2;
  }
}

- (void)rangeEmptyMixture {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$23_init()])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueCountWithInt:4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertNoErrors];
  [ts assertCompleted];
  jint j = 1;
  id<JavaUtilList> list = [ts getOnNextEvents];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i += 2) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(j, [((JavaLangInteger *) nil_chk([list getWithInt:i])) intValue]);
    OrgJunitAssert_assertEqualsWithLong_withLong_(j + 1, [((JavaLangInteger *) nil_chk([list getWithInt:i + 1])) intValue]);
    j += 2;
  }
}

- (void)justEmptyMixtureMaxConcurrent {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$24_init() withInt:16])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueCountWithInt:2 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertNoErrors];
  [ts assertCompleted];
  jint j = 1;
  for (JavaLangInteger * __strong v in nil_chk([ts getOnNextEvents])) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(j, [((JavaLangInteger *) nil_chk(v)) intValue]);
    j += 2;
  }
}

- (void)rangeEmptyMixtureMaxConcurrent {
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(0, 4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorFlatMapTest_$25_init() withInt:16])) subscribeWithRxSubscriber:ts];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertValueCountWithInt:4 * JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE)];
  [ts assertNoErrors];
  [ts assertCompleted];
  jint j = 1;
  id<JavaUtilList> list = [ts getOnNextEvents];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i += 2) {
    OrgJunitAssert_assertEqualsWithLong_withLong_(j, [((JavaLangInteger *) nil_chk([list getWithInt:i])) intValue]);
    OrgJunitAssert_assertEqualsWithLong_withLong_(j + 1, [((JavaLangInteger *) nil_chk([list getWithInt:i + 1])) intValue]);
    j += 2;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "LRxFunctionsFunc0;", 0x0, 7, 5, -1, 8, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "LRxFunctionsFunc0;", 0x0, 11, 5, -1, 8, -1, -1 },
    { NULL, "LRxFunctionsFunc1;", 0x0, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "LRxObservable;", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 33, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testNormal);
  methods[1].selector = @selector(testCollectionFunctionThrows);
  methods[2].selector = @selector(testResultFunctionThrows);
  methods[3].selector = @selector(testMergeError);
  methods[4].selector = @selector(justWithId:);
  methods[5].selector = @selector(just0WithId:);
  methods[6].selector = @selector(testFlatMapTransformsNormal);
  methods[7].selector = @selector(testFlatMapTransformsException);
  methods[8].selector = @selector(funcThrow0WithId:);
  methods[9].selector = @selector(funcThrowWithId:withId:);
  methods[10].selector = @selector(testFlatMapTransformsOnNextFuncThrows);
  methods[11].selector = @selector(testFlatMapTransformsOnErrorFuncThrows);
  methods[12].selector = @selector(testFlatMapTransformsOnCompletedFuncThrows);
  methods[13].selector = @selector(testFlatMapTransformsMergeException);
  methods[14].selector = @selector(composeWithRxObservable:withJavaUtilConcurrentAtomicAtomicInteger:withInt:);
  methods[15].selector = @selector(testFlatMapMaxConcurrent);
  methods[16].selector = @selector(testFlatMapSelectorMaxConcurrent);
  methods[17].selector = @selector(testFlatMapTransformsMaxConcurrentNormalLoop);
  methods[18].selector = @selector(testFlatMapTransformsMaxConcurrentNormal);
  methods[19].selector = @selector(flatMapRangeAsyncLoop);
  methods[20].selector = @selector(flatMapRangeMixedAsyncLoop);
  methods[21].selector = @selector(flatMapIntPassthruAsync);
  methods[22].selector = @selector(flatMapTwoNestedSync);
  methods[23].selector = @selector(justEmptyMixture);
  methods[24].selector = @selector(rangeEmptyMixture);
  methods[25].selector = @selector(justEmptyMixtureMaxConcurrent);
  methods[26].selector = @selector(rangeEmptyMixtureMaxConcurrent);
  methods[27].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$0, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$1, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$2, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$3, "just", "LNSObject;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(TR;)Lrx/functions/Func1<TT;TR;>;", "just0", "<R:Ljava/lang/Object;>(TR;)Lrx/functions/Func0<TR;>;", (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$4, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$5, "funcThrow0", "funcThrow", "LNSObject;LNSObject;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(TT;TR;)Lrx/functions/Func1<TT;TR;>;", (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$6, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$7, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$8, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$9, "compose", "LRxObservable;LJavaUtilConcurrentAtomicAtomicInteger;I", "<T:Ljava/lang/Object;>(Lrx/Observable<TT;>;Ljava/util/concurrent/atomic/AtomicInteger;I)Lrx/Observable<TT;>;", (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$10, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$11, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$12, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$13, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$14, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$15, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$16, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$17, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$18, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$19, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$20, (void *)&RxInternalOperatorsOperatorFlatMapTest__Annotations$21 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest = { "OperatorFlatMapTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 28, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest;
}

@end

RxObservable *RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxObservable *source, JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount, jint m) {
  RxInternalOperatorsOperatorFlatMapTest_initialize();
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(subscriptionCount, m)])) doOnCompletedWithRxFunctionsAction0:create_RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(subscriptionCount)];
}

void RxInternalOperatorsOperatorFlatMapTest_init(RxInternalOperatorsOperatorFlatMapTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest *new_RxInternalOperatorsOperatorFlatMapTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest, init)
}

RxInternalOperatorsOperatorFlatMapTest *create_RxInternalOperatorsOperatorFlatMapTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitIgnore(@"Don't care for any reordering"), create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 90000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorFlatMapTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorFlatMapTest)

@implementation RxInternalOperatorsOperatorFlatMapTest_$1

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1 {
  return val$list_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Ljava/util/List<Ljava/lang/Integer;>;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "testNormal", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$1;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(RxInternalOperatorsOperatorFlatMapTest_$1 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$1 *new_RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$1, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$1 *create_RxInternalOperatorsOperatorFlatMapTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$1, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] | [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testNormal", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$2;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$2_init(RxInternalOperatorsOperatorFlatMapTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$2 *new_RxInternalOperatorsOperatorFlatMapTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$2, init)
}

RxInternalOperatorsOperatorFlatMapTest_$2 *create_RxInternalOperatorsOperatorFlatMapTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$2, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$3

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Ljava/util/List<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "testCollectionFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$3;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$3_init(RxInternalOperatorsOperatorFlatMapTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$3 *new_RxInternalOperatorsOperatorFlatMapTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$3, init)
}

RxInternalOperatorsOperatorFlatMapTest_$3 *create_RxInternalOperatorsOperatorFlatMapTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$3, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$4

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] | [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testCollectionFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$4;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$4_init(RxInternalOperatorsOperatorFlatMapTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$4 *new_RxInternalOperatorsOperatorFlatMapTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$4, init)
}

RxInternalOperatorsOperatorFlatMapTest_$4 *create_RxInternalOperatorsOperatorFlatMapTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$4, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$5

- (id<JavaUtilList>)callWithId:(JavaLangInteger *)t1 {
  return val$list_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Ljava/util/List<Ljava/lang/Integer;>;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "testResultFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/util/List<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$5;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(RxInternalOperatorsOperatorFlatMapTest_$5 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$list_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$5 *new_RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$5, initWithJavaUtilList_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$5 *create_RxInternalOperatorsOperatorFlatMapTest_$5_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$5, initWithJavaUtilList_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$6

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testResultFunctionThrows", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$6;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$6_init(RxInternalOperatorsOperatorFlatMapTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$6 *new_RxInternalOperatorsOperatorFlatMapTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$6, init)
}

RxInternalOperatorsOperatorFlatMapTest_$6 *create_RxInternalOperatorsOperatorFlatMapTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$6, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$7

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return RxObservable_errorWithNSException_(create_RxExceptionsTestException_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "testMergeError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$7;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$7_init(RxInternalOperatorsOperatorFlatMapTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$7 *new_RxInternalOperatorsOperatorFlatMapTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$7, init)
}

RxInternalOperatorsOperatorFlatMapTest_$7 *create_RxInternalOperatorsOperatorFlatMapTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$7, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$8

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] | [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testMergeError", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$8;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$8_init(RxInternalOperatorsOperatorFlatMapTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$8 *new_RxInternalOperatorsOperatorFlatMapTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$8, init)
}

RxInternalOperatorsOperatorFlatMapTest_$8 *create_RxInternalOperatorsOperatorFlatMapTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$8, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$9

- (id)callWithId:(id)t1 {
  return val$value_;
}

- (instancetype)initWithId:(id)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "(TT;)TR;", "(TR;)V", "TR;", "LRxInternalOperatorsOperatorFlatMapTest;", "justWithId:", "Ljava/lang/Object;Lrx/functions/Func1<TT;TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$9;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(RxInternalOperatorsOperatorFlatMapTest_$9 *self, id capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$9 *new_RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$9, initWithId_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$9 *create_RxInternalOperatorsOperatorFlatMapTest_$9_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$9, initWithId_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$10

- (id)call {
  return val$value_;
}

- (instancetype)initWithId:(id)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TR;", "LNSObject;", "(TR;)V", "TR;", "LRxInternalOperatorsOperatorFlatMapTest;", "just0WithId:", "Ljava/lang/Object;Lrx/functions/Func0<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$10;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(RxInternalOperatorsOperatorFlatMapTest_$10 *self, id capture$0) {
  JreStrongAssign(&self->val$value_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$10 *new_RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$10, initWithId_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$10 *create_RxInternalOperatorsOperatorFlatMapTest_$10_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$10, initWithId_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$11

- (id)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TR;", "LRxInternalOperatorsOperatorFlatMapTest;", "funcThrow0WithId:", "Ljava/lang/Object;Lrx/functions/Func0<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$11;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$11_init(RxInternalOperatorsOperatorFlatMapTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$11 *new_RxInternalOperatorsOperatorFlatMapTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$11, init)
}

RxInternalOperatorsOperatorFlatMapTest_$11 *create_RxInternalOperatorsOperatorFlatMapTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$11, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$12

- (id)callWithId:(id)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "(TT;)TR;", "LRxInternalOperatorsOperatorFlatMapTest;", "funcThrowWithId:withId:", "Ljava/lang/Object;Lrx/functions/Func1<TT;TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$12;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$12_init(RxInternalOperatorsOperatorFlatMapTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$12 *new_RxInternalOperatorsOperatorFlatMapTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$12, init)
}

RxInternalOperatorsOperatorFlatMapTest_$12 *create_RxInternalOperatorsOperatorFlatMapTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$12, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$13

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscriptionCount_)) getAndIncrement] >= val$m_) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"Too many subscriptions! ", [val$subscriptionCount_ get]));
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                                      withInt:(jint)capture$1 {
  RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$m_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;I", "LRxInternalOperatorsOperatorFlatMapTest;", "composeWithRxObservable:withJavaUtilConcurrentAtomicAtomicInteger:withInt:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$13;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxInternalOperatorsOperatorFlatMapTest_$13 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1) {
  JreStrongAssign(&self->val$subscriptionCount_, capture$0);
  self->val$m_ = capture$1;
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$13 *new_RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_, capture$0, capture$1)
}

RxInternalOperatorsOperatorFlatMapTest_$13 *create_RxInternalOperatorsOperatorFlatMapTest_$13_initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$13, initWithJavaUtilConcurrentAtomicAtomicInteger_withInt_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$14

- (void)call {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$subscriptionCount_)) decrementAndGet] < 0) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"Too many unsubscriptions! ", [val$subscriptionCount_ get]));
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "composeWithRxObservable:withJavaUtilConcurrentAtomicAtomicInteger:withInt:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$14;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscriptionCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$14 *new_RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$14 *create_RxInternalOperatorsOperatorFlatMapTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$15

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return [((RxObservable *) nil_chk(RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxObservable_rangeWithInt_withInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 10, 2), val$subscriptionCount_, 4))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testFlatMapMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$15 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$15;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscriptionCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$15 *new_RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$15 *create_RxInternalOperatorsOperatorFlatMapTest_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$16

- (RxObservable *)callWithId:(JavaLangInteger *)t1 {
  return [((RxObservable *) nil_chk(RxInternalOperatorsOperatorFlatMapTest_composeWithRxObservable_withJavaUtilConcurrentAtomicAtomicInteger_withInt_(RxObservable_rangeWithInt_withInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 10, 2), val$subscriptionCount_, 4))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscriptionCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscriptionCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testFlatMapSelectorMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$16 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$16;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorFlatMapTest_$16 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$subscriptionCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$16 *new_RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$16 *create_RxInternalOperatorsOperatorFlatMapTest_$16_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$16, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$17

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] * 1000 + [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorFlatMapTest;", "testFlatMapSelectorMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$17 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$17;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$17_init(RxInternalOperatorsOperatorFlatMapTest_$17 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$17 *new_RxInternalOperatorsOperatorFlatMapTest_$17_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$17, init)
}

RxInternalOperatorsOperatorFlatMapTest_$17 *create_RxInternalOperatorsOperatorFlatMapTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$17, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$18

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_justWithId_(t);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "flatMapRangeAsyncLoop", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$18 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$18;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$18_init(RxInternalOperatorsOperatorFlatMapTest_$18 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$18 *new_RxInternalOperatorsOperatorFlatMapTest_$18_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$18, init)
}

RxInternalOperatorsOperatorFlatMapTest_$18 *create_RxInternalOperatorsOperatorFlatMapTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$18, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$19

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  RxObservable *r = RxObservable_justWithId_(t);
  if ([((JavaUtilRandom *) nil_chk(rnd_)) nextBoolean]) {
    r = [((RxObservable *) nil_chk(r)) asObservable];
  }
  return r;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(rnd_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rnd_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "flatMapRangeMixedAsyncLoop", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$19 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$19;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$19_init(RxInternalOperatorsOperatorFlatMapTest_$19 *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->rnd_, new_JavaUtilRandom_init());
}

RxInternalOperatorsOperatorFlatMapTest_$19 *new_RxInternalOperatorsOperatorFlatMapTest_$19_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$19, init)
}

RxInternalOperatorsOperatorFlatMapTest_$19 *create_RxInternalOperatorsOperatorFlatMapTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$19, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$20

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "flatMapIntPassthruAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$20 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$20;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$20_init(RxInternalOperatorsOperatorFlatMapTest_$20 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$20 *new_RxInternalOperatorsOperatorFlatMapTest_$20_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$20, init)
}

RxInternalOperatorsOperatorFlatMapTest_$20 *create_RxInternalOperatorsOperatorFlatMapTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$20, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$21

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  return RxObservable_rangeWithInt_withInt_(1, val$n_);
}

- (instancetype)initWithInt:(jint)capture$0 {
  RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$n_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "I", "LRxInternalOperatorsOperatorFlatMapTest;", "flatMapTwoNestedSync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$21 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$21;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(RxInternalOperatorsOperatorFlatMapTest_$21 *self, jint capture$0) {
  self->val$n_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$21 *new_RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$21, initWithInt_, capture$0)
}

RxInternalOperatorsOperatorFlatMapTest_$21 *create_RxInternalOperatorsOperatorFlatMapTest_$21_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$21, initWithInt_, capture$0)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$22

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  return ([((JavaLangInteger *) nil_chk(v)) intValue] & 1) == 0 ? RxObservable_empty() : RxObservable_justWithId_(v);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "justEmptyMixture", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$22 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$22;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$22_init(RxInternalOperatorsOperatorFlatMapTest_$22 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$22 *new_RxInternalOperatorsOperatorFlatMapTest_$22_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$22, init)
}

RxInternalOperatorsOperatorFlatMapTest_$22 *create_RxInternalOperatorsOperatorFlatMapTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$22, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$23

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  return ([((JavaLangInteger *) nil_chk(v)) intValue] & 1) == 0 ? RxObservable_empty() : RxObservable_rangeWithInt_withInt_([v intValue], 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "rangeEmptyMixture", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$23 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$23;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$23_init(RxInternalOperatorsOperatorFlatMapTest_$23 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$23 *new_RxInternalOperatorsOperatorFlatMapTest_$23_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$23, init)
}

RxInternalOperatorsOperatorFlatMapTest_$23 *create_RxInternalOperatorsOperatorFlatMapTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$23, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$24

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  return ([((JavaLangInteger *) nil_chk(v)) intValue] & 1) == 0 ? RxObservable_empty() : RxObservable_justWithId_(v);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "justEmptyMixtureMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$24 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$24;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$24_init(RxInternalOperatorsOperatorFlatMapTest_$24 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$24 *new_RxInternalOperatorsOperatorFlatMapTest_$24_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$24, init)
}

RxInternalOperatorsOperatorFlatMapTest_$24 *create_RxInternalOperatorsOperatorFlatMapTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$24, init)
}

@implementation RxInternalOperatorsOperatorFlatMapTest_$25

- (RxObservable *)callWithId:(JavaLangInteger *)v {
  return ([((JavaLangInteger *) nil_chk(v)) intValue] & 1) == 0 ? RxObservable_empty() : RxObservable_rangeWithInt_withInt_([v intValue], 2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorFlatMapTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorFlatMapTest;", "rangeEmptyMixtureMaxConcurrent", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorFlatMapTest_$25 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorFlatMapTest_$25;
}

@end

void RxInternalOperatorsOperatorFlatMapTest_$25_init(RxInternalOperatorsOperatorFlatMapTest_$25 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorFlatMapTest_$25 *new_RxInternalOperatorsOperatorFlatMapTest_$25_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorFlatMapTest_$25, init)
}

RxInternalOperatorsOperatorFlatMapTest_$25 *create_RxInternalOperatorsOperatorFlatMapTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorFlatMapTest_$25, init)
}
