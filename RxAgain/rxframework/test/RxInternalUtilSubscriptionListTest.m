//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/SubscriptionListTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsCompositeException.h"
#include "RxInternalUtilSubscriptionList.h"
#include "RxInternalUtilSubscriptionListTest.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$8();

@interface RxInternalUtilSubscriptionListTest_$1 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$1)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$1, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$1 *new_RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$1 *create_RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$2 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$2)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$2, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$2 *new_RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$2 *create_RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$3 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$3)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$3, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$3 *new_RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$3 *create_RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$4 : JavaLangThread {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxInternalUtilSubscriptionList *val$s_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                      withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$4)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$4, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$4, val$s_, RxInternalUtilSubscriptionList *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(RxInternalUtilSubscriptionListTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$4 *new_RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$4 *create_RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1);

@interface RxInternalUtilSubscriptionListTest_$5 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$5)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$5_init(RxInternalUtilSubscriptionListTest_$5 *self);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$5 *new_RxInternalUtilSubscriptionListTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$5 *create_RxInternalUtilSubscriptionListTest_$5_init();

@interface RxInternalUtilSubscriptionListTest_$6 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$6)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$6, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$6 *new_RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$6 *create_RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$7 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$7)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$7_init(RxInternalUtilSubscriptionListTest_$7 *self);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$7 *new_RxInternalUtilSubscriptionListTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$7 *create_RxInternalUtilSubscriptionListTest_$7_init();

@interface RxInternalUtilSubscriptionListTest_$8 : NSObject < RxSubscription >

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$8)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$8_init(RxInternalUtilSubscriptionListTest_$8 *self);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$8 *new_RxInternalUtilSubscriptionListTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$8 *create_RxInternalUtilSubscriptionListTest_$8_init();

@interface RxInternalUtilSubscriptionListTest_$9 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$9)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$9, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$9 *new_RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$9 *create_RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$10 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$10)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$10, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$10 *new_RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$10 *create_RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$11 : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$11)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$11, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$11 *new_RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$11 *create_RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalUtilSubscriptionListTest_$12 : JavaLangThread {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxInternalUtilSubscriptionList *val$s_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                      withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilSubscriptionListTest_$12)

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$12, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionListTest_$12, val$s_, RxInternalUtilSubscriptionList *)

__attribute__((unused)) static void RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(RxInternalUtilSubscriptionListTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1);

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$12 *new_RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilSubscriptionListTest_$12 *create_RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1);

@implementation RxInternalUtilSubscriptionListTest

- (void)testSuccess {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [counter get]);
}

- (void)shouldUnsubscribeAll {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  for (jint i = 0; i < count; i++) {
    [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  }
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(start, s);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(count, [counter get]);
}

- (void)testException {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$5_init()];
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  @try {
    [s unsubscribe];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception");
  }
  @catch (JavaLangRuntimeException *e) {
    OrgJunitAssert_assertEqualsWithId_withId_([((JavaLangRuntimeException *) nil_chk(e)) getMessage], @"failed on first one");
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testCompositeException {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$7_init()];
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$8_init()];
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  @try {
    [s unsubscribe];
    OrgJunitAssert_failWithNSString_(@"Expecting an exception");
  }
  @catch (RxExceptionsCompositeException *e) {
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk([((RxExceptionsCompositeException *) nil_chk(e)) getExceptions])) size], 2);
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testUnsubscribeIdempotence {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  [s unsubscribe];
  [s unsubscribe];
  [s unsubscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)testUnsubscribeIdempotenceConcurrently {
  JavaUtilConcurrentAtomicAtomicInteger *counter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxInternalUtilSubscriptionList *s = create_RxInternalUtilSubscriptionList_init();
  jint count = 10;
  JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [s addWithRxSubscription:create_RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter)];
  id<JavaUtilList> threads = create_JavaUtilArrayList_init();
  for (jint i = 0; i < count; i++) {
    JavaLangThread *t = create_RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(start, s);
    [t start];
    [threads addWithId:t];
  }
  [start countDown];
  for (JavaLangThread * __strong t in threads) {
    [((JavaLangThread *) nil_chk(t)) join];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [counter get]);
}

- (void)removeWhenEmpty {
  RxInternalUtilSubscriptionList *slist = create_RxInternalUtilSubscriptionList_init();
  id<RxSubscription> s = RxSubscriptionsSubscriptions_empty();
  [slist removeWithRxSubscription:s];
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(s)) isUnsubscribed]);
}

- (void)removeNotIn {
  RxInternalUtilSubscriptionList *slist = create_RxInternalUtilSubscriptionList_init();
  id<RxSubscription> s0 = RxSubscriptionsSubscriptions_empty();
  [slist addWithRxSubscription:s0];
  OrgJunitAssert_assertTrueWithBoolean_([slist hasSubscriptions]);
  id<RxSubscription> s = RxSubscriptionsSubscriptions_empty();
  [slist removeWithRxSubscription:s];
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(s)) isUnsubscribed]);
  [slist clear];
  OrgJunitAssert_assertTrueWithBoolean_([((id<RxSubscription>) nil_chk(s0)) isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([slist hasSubscriptions]);
}

- (void)unsubscribeClear {
  RxInternalUtilSubscriptionList *slist = create_RxInternalUtilSubscriptionList_init();
  OrgJunitAssert_assertFalseWithBoolean_([slist hasSubscriptions]);
  id<RxSubscription> s0 = RxSubscriptionsSubscriptions_empty();
  [slist addWithRxSubscription:s0];
  [slist unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([((id<RxSubscription>) nil_chk(s0)) isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([slist hasSubscriptions]);
  [slist clear];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionListTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSuccess);
  methods[1].selector = @selector(shouldUnsubscribeAll);
  methods[2].selector = @selector(testException);
  methods[3].selector = @selector(testCompositeException);
  methods[4].selector = @selector(testUnsubscribeIdempotence);
  methods[5].selector = @selector(testUnsubscribeIdempotenceConcurrently);
  methods[6].selector = @selector(removeWhenEmpty);
  methods[7].selector = @selector(removeNotIn);
  methods[8].selector = @selector(unsubscribeClear);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalUtilSubscriptionListTest__Annotations$0, "LJavaLangInterruptedException;", (void *)&RxInternalUtilSubscriptionListTest__Annotations$1, (void *)&RxInternalUtilSubscriptionListTest__Annotations$2, (void *)&RxInternalUtilSubscriptionListTest__Annotations$3, (void *)&RxInternalUtilSubscriptionListTest__Annotations$4, (void *)&RxInternalUtilSubscriptionListTest__Annotations$5, (void *)&RxInternalUtilSubscriptionListTest__Annotations$6, (void *)&RxInternalUtilSubscriptionListTest__Annotations$7, (void *)&RxInternalUtilSubscriptionListTest__Annotations$8 };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest = { "SubscriptionListTest", "rx.internal.util", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest;
}

@end

void RxInternalUtilSubscriptionListTest_init(RxInternalUtilSubscriptionListTest *self) {
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest *new_RxInternalUtilSubscriptionListTest_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest, init)
}

RxInternalUtilSubscriptionListTest *create_RxInternalUtilSubscriptionListTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest, init)
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilSubscriptionListTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilSubscriptionListTest)

@implementation RxInternalUtilSubscriptionListTest_$1

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testSuccess" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$1 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$1;
}

@end

void RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$1 *new_RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$1 *create_RxInternalUtilSubscriptionListTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$2

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testSuccess" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$2 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$2;
}

@end

void RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$2 *new_RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$2 *create_RxInternalUtilSubscriptionListTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$3

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "shouldUnsubscribeAll" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$3 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$3;
}

@end

void RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$3 *new_RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$3 *create_RxInternalUtilSubscriptionListTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$4

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxInternalUtilSubscriptionList *) nil_chk(val$s_)) unsubscribe];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                      withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)capture$1 {
  RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxInternalUtilSubscriptionList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxInternalUtilSubscriptionList;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxInternalUtilSubscriptionList;", "LRxInternalUtilSubscriptionListTest;", "shouldUnsubscribeAll" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$4 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$4;
}

@end

void RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(RxInternalUtilSubscriptionListTest_$4 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JavaLangThread_init(self);
}

RxInternalUtilSubscriptionListTest_$4 *new_RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$4, initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_, capture$0, capture$1)
}

RxInternalUtilSubscriptionListTest_$4 *create_RxInternalUtilSubscriptionListTest_$4_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$4, initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_, capture$0, capture$1)
}

@implementation RxInternalUtilSubscriptionListTest_$5

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on first one");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionListTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalUtilSubscriptionListTest;", "testException" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$5 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$5;
}

@end

void RxInternalUtilSubscriptionListTest_$5_init(RxInternalUtilSubscriptionListTest_$5 *self) {
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$5 *new_RxInternalUtilSubscriptionListTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$5, init)
}

RxInternalUtilSubscriptionListTest_$5 *create_RxInternalUtilSubscriptionListTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$5, init)
}

@implementation RxInternalUtilSubscriptionListTest_$6

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testException" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$6 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$6;
}

@end

void RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$6 *new_RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$6 *create_RxInternalUtilSubscriptionListTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$7

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on first one");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionListTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalUtilSubscriptionListTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$7 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$7;
}

@end

void RxInternalUtilSubscriptionListTest_$7_init(RxInternalUtilSubscriptionListTest_$7 *self) {
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$7 *new_RxInternalUtilSubscriptionListTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$7, init)
}

RxInternalUtilSubscriptionListTest_$7 *create_RxInternalUtilSubscriptionListTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$7, init)
}

@implementation RxInternalUtilSubscriptionListTest_$8

- (void)unsubscribe {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"failed on second one too");
}

- (jboolean)isUnsubscribed {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionListTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalUtilSubscriptionListTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$8 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 3, 0, 0, -1, 1, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$8;
}

@end

void RxInternalUtilSubscriptionListTest_$8_init(RxInternalUtilSubscriptionListTest_$8 *self) {
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$8 *new_RxInternalUtilSubscriptionListTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$8, init)
}

RxInternalUtilSubscriptionListTest_$8 *create_RxInternalUtilSubscriptionListTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$8, init)
}

@implementation RxInternalUtilSubscriptionListTest_$9

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testCompositeException" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$9 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$9;
}

@end

void RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$9 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$9 *new_RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$9 *create_RxInternalUtilSubscriptionListTest_$9_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$9, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$10

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testUnsubscribeIdempotence" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$10 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$10;
}

@end

void RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$10 *new_RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$10 *create_RxInternalUtilSubscriptionListTest_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$11

- (void)unsubscribe {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
}

- (jboolean)isUnsubscribed {
  return false;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalUtilSubscriptionListTest;", "testUnsubscribeIdempotenceConcurrently" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$11 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$11;
}

@end

void RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalUtilSubscriptionListTest_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
}

RxInternalUtilSubscriptionListTest_$11 *new_RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalUtilSubscriptionListTest_$11 *create_RxInternalUtilSubscriptionListTest_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalUtilSubscriptionListTest_$12

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
    [((RxInternalUtilSubscriptionList *) nil_chk(val$s_)) unsubscribe];
  }
  @catch (JavaLangInterruptedException *e) {
    OrgJunitAssert_failWithNSString_([((JavaLangInterruptedException *) nil_chk(e)) getMessage]);
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                      withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)capture$1 {
  RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxInternalUtilSubscriptionList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxInternalUtilSubscriptionList;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxInternalUtilSubscriptionList;", "LRxInternalUtilSubscriptionListTest;", "testUnsubscribeIdempotenceConcurrently" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionListTest_$12 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalUtilSubscriptionListTest_$12;
}

@end

void RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(RxInternalUtilSubscriptionListTest_$12 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$s_, capture$1);
  JavaLangThread_init(self);
}

RxInternalUtilSubscriptionListTest_$12 *new_RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionListTest_$12, initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_, capture$0, capture$1)
}

RxInternalUtilSubscriptionListTest_$12 *create_RxInternalUtilSubscriptionListTest_$12_initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_(JavaUtilConcurrentCountDownLatch *capture$0, RxInternalUtilSubscriptionList *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionListTest_$12, initWithJavaUtilConcurrentCountDownLatch_withRxInternalUtilSubscriptionList_, capture$0, capture$1)
}
