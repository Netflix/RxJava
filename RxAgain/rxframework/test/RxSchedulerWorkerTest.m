//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/SchedulerWorkerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxScheduler.h"
#include "RxSchedulerWorkerTest.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulerWorkerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulerWorkerTest__Annotations$1();

@interface RxSchedulerWorkerTest_CustomDriftScheduler_$1 : RxScheduler_Worker {
 @public
  RxSchedulerWorkerTest_CustomDriftScheduler *this$0_;
  RxScheduler_Worker *val$w_;
}

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jlong)now;

- (instancetype)initWithRxSchedulerWorkerTest_CustomDriftScheduler:(RxSchedulerWorkerTest_CustomDriftScheduler *)outer$
                                            withRxScheduler_Worker:(RxScheduler_Worker *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulerWorkerTest_CustomDriftScheduler_$1)

J2OBJC_FIELD_SETTER(RxSchedulerWorkerTest_CustomDriftScheduler_$1, this$0_, RxSchedulerWorkerTest_CustomDriftScheduler *)
J2OBJC_FIELD_SETTER(RxSchedulerWorkerTest_CustomDriftScheduler_$1, val$w_, RxScheduler_Worker *)

__attribute__((unused)) static void RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler_$1 *self, RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0);

__attribute__((unused)) static RxSchedulerWorkerTest_CustomDriftScheduler_$1 *new_RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulerWorkerTest_CustomDriftScheduler_$1 *create_RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0);

@interface RxSchedulerWorkerTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilList> val$times_;
}

- (void)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulerWorkerTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulerWorkerTest_$1, val$times_, id<JavaUtilList>)

__attribute__((unused)) static void RxSchedulerWorkerTest_$1_initWithJavaUtilList_(RxSchedulerWorkerTest_$1 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSchedulerWorkerTest_$1 *new_RxSchedulerWorkerTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulerWorkerTest_$1 *create_RxSchedulerWorkerTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxSchedulerWorkerTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  id<JavaUtilList> val$times_;
}

- (void)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulerWorkerTest_$2)

J2OBJC_FIELD_SETTER(RxSchedulerWorkerTest_$2, val$times_, id<JavaUtilList>)

__attribute__((unused)) static void RxSchedulerWorkerTest_$2_initWithJavaUtilList_(RxSchedulerWorkerTest_$2 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxSchedulerWorkerTest_$2 *new_RxSchedulerWorkerTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulerWorkerTest_$2 *create_RxSchedulerWorkerTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@implementation RxSchedulerWorkerTest

- (void)testCurrentTimeDriftBackwards {
  jint adjust = 100;
  RxSchedulerWorkerTest_CustomDriftScheduler *s = create_RxSchedulerWorkerTest_CustomDriftScheduler_init();
  RxScheduler_Worker *w = [s createWorker];
  @try {
    id<JavaUtilList> times = create_JavaUtilArrayList_init();
    id<RxSubscription> d = [((RxScheduler_Worker *) nil_chk(w)) schedulePeriodicallyWithRxFunctionsAction0:create_RxSchedulerWorkerTest_$1_initWithJavaUtilList_(times) withLong:100 withLong:100 + adjust withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    JavaLangThread_sleepWithLong_(150 + adjust);
    JreAssignVolatileLong(&s->drift_, -1000 - [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) toMillisWithLong:JreLoadStatic(RxScheduler, CLOCK_DRIFT_TOLERANCE_NANOS)]);
    JavaLangThread_sleepWithLong_(400);
    [((id<RxSubscription>) nil_chk(d)) unsubscribe];
    JavaLangThread_sleepWithLong_(150 + adjust);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Runs: ", [times size])];
    jint halfAdjust = adjust / 2;
    for (jint i = 0; i < [times size] - 1; i++) {
      jlong diff = [((JavaLangLong *) nil_chk([times getWithInt:i + 1])) longLongValue] - [((JavaLangLong *) nil_chk([times getWithInt:i])) longLongValue];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$J", @"Diff #", i, @": ", diff)];
      OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("ICJ", i, ':', diff), diff < 150 + (adjust * 2) && diff > 50 + halfAdjust);
    }
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$I", @"Too few invocations: ", [times size]), [times size] > 2);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

- (void)testCurrentTimeDriftForwards {
  RxSchedulerWorkerTest_CustomDriftScheduler *s = create_RxSchedulerWorkerTest_CustomDriftScheduler_init();
  RxScheduler_Worker *w = [s createWorker];
  @try {
    id<JavaUtilList> times = create_JavaUtilArrayList_init();
    id<RxSubscription> d = [((RxScheduler_Worker *) nil_chk(w)) schedulePeriodicallyWithRxFunctionsAction0:create_RxSchedulerWorkerTest_$2_initWithJavaUtilList_(times) withLong:100 withLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    JavaLangThread_sleepWithLong_(150);
    JreAssignVolatileLong(&s->drift_, 1000 + [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) toMillisWithLong:JreLoadStatic(RxScheduler, CLOCK_DRIFT_TOLERANCE_NANOS)]);
    JavaLangThread_sleepWithLong_(400);
    [((id<RxSubscription>) nil_chk(d)) unsubscribe];
    JavaLangThread_sleepWithLong_(150);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Runs: ", [times size])];
    OrgJunitAssert_assertTrueWithBoolean_([times size] > 2);
    for (jint i = 0; i < [times size] - 1; i++) {
      jlong diff = [((JavaLangLong *) nil_chk([times getWithInt:i + 1])) longLongValue] - [((JavaLangLong *) nil_chk([times getWithInt:i])) longLongValue];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$J", @"Diff #", i, @": ", diff)];
      OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("$J", @"Diff out of range: ", diff), diff < 250 && diff > 50);
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulerWorkerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testCurrentTimeDriftBackwards);
  methods[1].selector = @selector(testCurrentTimeDriftForwards);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxSchedulerWorkerTest__Annotations$0, (void *)&RxSchedulerWorkerTest__Annotations$1, "LRxSchedulerWorkerTest_CustomDriftScheduler;" };
  static const J2ObjcClassInfo _RxSchedulerWorkerTest = { "SchedulerWorkerTest", "rx", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 3, -1, -1, -1 };
  return &_RxSchedulerWorkerTest;
}

@end

void RxSchedulerWorkerTest_init(RxSchedulerWorkerTest *self) {
  NSObject_init(self);
}

RxSchedulerWorkerTest *new_RxSchedulerWorkerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulerWorkerTest, init)
}

RxSchedulerWorkerTest *create_RxSchedulerWorkerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulerWorkerTest, init)
}

IOSObjectArray *RxSchedulerWorkerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulerWorkerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulerWorkerTest)

@implementation RxSchedulerWorkerTest_CustomDriftScheduler

- (RxScheduler_Worker *)createWorker {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  return create_RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(self, w);
}

- (jlong)now {
  return [super now] + JreLoadVolatileLong(&drift_);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulerWorkerTest_CustomDriftScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWorker);
  methods[1].selector = @selector(now);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "drift_", "J", .constantValue.asLong = 0, 0x41, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSchedulerWorkerTest;" };
  static const J2ObjcClassInfo _RxSchedulerWorkerTest_CustomDriftScheduler = { "CustomDriftScheduler", "rx", ptrTable, methods, fields, 7, 0x18, 3, 1, 0, -1, -1, -1, -1 };
  return &_RxSchedulerWorkerTest_CustomDriftScheduler;
}

@end

void RxSchedulerWorkerTest_CustomDriftScheduler_init(RxSchedulerWorkerTest_CustomDriftScheduler *self) {
  RxScheduler_init(self);
}

RxSchedulerWorkerTest_CustomDriftScheduler *new_RxSchedulerWorkerTest_CustomDriftScheduler_init() {
  J2OBJC_NEW_IMPL(RxSchedulerWorkerTest_CustomDriftScheduler, init)
}

RxSchedulerWorkerTest_CustomDriftScheduler *create_RxSchedulerWorkerTest_CustomDriftScheduler_init() {
  J2OBJC_CREATE_IMPL(RxSchedulerWorkerTest_CustomDriftScheduler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulerWorkerTest_CustomDriftScheduler)

@implementation RxSchedulerWorkerTest_CustomDriftScheduler_$1

- (void)unsubscribe {
  [((RxScheduler_Worker *) nil_chk(val$w_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxScheduler_Worker *) nil_chk(val$w_)) isUnsubscribed];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return [((RxScheduler_Worker *) nil_chk(val$w_)) scheduleWithRxFunctionsAction0:action];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((RxScheduler_Worker *) nil_chk(val$w_)) scheduleWithRxFunctionsAction0:action withLong:delayTime withJavaUtilConcurrentTimeUnit:unit];
}

- (jlong)now {
  return [super now] + JreLoadVolatileLong(&this$0_->drift_);
}

- (instancetype)initWithRxSchedulerWorkerTest_CustomDriftScheduler:(RxSchedulerWorkerTest_CustomDriftScheduler *)outer$
                                            withRxScheduler_Worker:(RxScheduler_Worker *)capture$0 {
  RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(unsubscribe);
  methods[1].selector = @selector(isUnsubscribed);
  methods[2].selector = @selector(scheduleWithRxFunctionsAction0:);
  methods[3].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(now);
  methods[5].selector = @selector(initWithRxSchedulerWorkerTest_CustomDriftScheduler:withRxScheduler_Worker:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxSchedulerWorkerTest_CustomDriftScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$w_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "LRxSchedulerWorkerTest_CustomDriftScheduler;LRxScheduler_Worker;", "LRxSchedulerWorkerTest_CustomDriftScheduler;", "createWorker" };
  static const J2ObjcClassInfo _RxSchedulerWorkerTest_CustomDriftScheduler_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 6, 2, 4, -1, 5, -1, -1 };
  return &_RxSchedulerWorkerTest_CustomDriftScheduler_$1;
}

@end

void RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler_$1 *self, RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$w_, capture$0);
  RxScheduler_Worker_init(self);
}

RxSchedulerWorkerTest_CustomDriftScheduler_$1 *new_RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulerWorkerTest_CustomDriftScheduler_$1, initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_, outer$, capture$0)
}

RxSchedulerWorkerTest_CustomDriftScheduler_$1 *create_RxSchedulerWorkerTest_CustomDriftScheduler_$1_initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_(RxSchedulerWorkerTest_CustomDriftScheduler *outer$, RxScheduler_Worker *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulerWorkerTest_CustomDriftScheduler_$1, initWithRxSchedulerWorkerTest_CustomDriftScheduler_withRxScheduler_Worker_, outer$, capture$0)
}

@implementation RxSchedulerWorkerTest_$1

- (void)call {
  [((id<JavaUtilList>) nil_chk(val$times_)) addWithId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSchedulerWorkerTest_$1_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$times_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$times_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxSchedulerWorkerTest;", "testCurrentTimeDriftBackwards" };
  static const J2ObjcClassInfo _RxSchedulerWorkerTest_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSchedulerWorkerTest_$1;
}

@end

void RxSchedulerWorkerTest_$1_initWithJavaUtilList_(RxSchedulerWorkerTest_$1 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$times_, capture$0);
  NSObject_init(self);
}

RxSchedulerWorkerTest_$1 *new_RxSchedulerWorkerTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulerWorkerTest_$1, initWithJavaUtilList_, capture$0)
}

RxSchedulerWorkerTest_$1 *create_RxSchedulerWorkerTest_$1_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulerWorkerTest_$1, initWithJavaUtilList_, capture$0)
}

@implementation RxSchedulerWorkerTest_$2

- (void)call {
  [((id<JavaUtilList>) nil_chk(val$times_)) addWithId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxSchedulerWorkerTest_$2_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$times_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$times_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Long;>;)V", "Ljava/util/List<Ljava/lang/Long;>;", "LRxSchedulerWorkerTest;", "testCurrentTimeDriftForwards" };
  static const J2ObjcClassInfo _RxSchedulerWorkerTest_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSchedulerWorkerTest_$2;
}

@end

void RxSchedulerWorkerTest_$2_initWithJavaUtilList_(RxSchedulerWorkerTest_$2 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$times_, capture$0);
  NSObject_init(self);
}

RxSchedulerWorkerTest_$2 *new_RxSchedulerWorkerTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulerWorkerTest_$2, initWithJavaUtilList_, capture$0)
}

RxSchedulerWorkerTest_$2 *create_RxSchedulerWorkerTest_$2_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulerWorkerTest_$2, initWithJavaUtilList_, capture$0)
}
