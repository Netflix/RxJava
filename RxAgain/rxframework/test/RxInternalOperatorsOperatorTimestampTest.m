//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTimestampTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorTimestampTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxScheduler.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSchedulersTimestamped.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$4();

@interface RxInternalOperatorsOperatorTimestampTest_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  RxSchedulersTestScheduler *val$scheduler_;
}

- (RxScheduler *)callWithId:(RxScheduler *)t;

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimestampTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTimestampTest_$1, val$scheduler_, RxSchedulersTestScheduler *)

__attribute__((unused)) static void RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTimestampTest_$1 *self, RxSchedulersTestScheduler *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorTimestampTest_$1 *new_RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTimestampTest_$1 *create_RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0);

@implementation RxInternalOperatorsOperatorTimestampTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)timestampWithScheduler {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) timestampWithRxScheduler:scheduler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(0, JavaLangInteger_valueOfWithInt_(1))];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(100, JavaLangInteger_valueOfWithInt_(2))];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(200, JavaLangInteger_valueOfWithInt_(3))];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
}

- (void)timestampWithScheduler2 {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) timestampWithRxScheduler:scheduler];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer_];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(0, JavaLangInteger_valueOfWithInt_(1))];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(0, JavaLangInteger_valueOfWithInt_(2))];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(200, JavaLangInteger_valueOfWithInt_(3))];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
}

- (void)withDefaultScheduler {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxPluginsRxJavaHooks_setOnComputationSchedulerWithRxFunctionsFunc1_(create_RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(scheduler));
  @try {
    RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
    RxObservable *m = [((RxSubjectsPublishSubject *) nil_chk(source)) timestamp];
    [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:observer_];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
    [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
    [scheduler advanceTimeByWithLong:100 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]);
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(0, JavaLangInteger_valueOfWithInt_(1))];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(100, JavaLangInteger_valueOfWithInt_(2))];
    [((id<RxObserver>) nil_chk([inOrder verifyWithId:observer_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:create_RxSchedulersTimestamped_initWithLong_withId_(200, JavaLangInteger_valueOfWithInt_(3))];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer_, OrgMockitoMockito_never()))) onCompleted];
  }
  @finally {
    RxPluginsRxJavaHooks_reset();
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTimestampTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(timestampWithScheduler);
  methods[2].selector = @selector(timestampWithScheduler2);
  methods[3].selector = @selector(withDefaultScheduler);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 4, 5 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTimestampTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTimestampTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTimestampTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTimestampTest__Annotations$3, "Lrx/Observer<Ljava/lang/Object;>;", (void *)&RxInternalOperatorsOperatorTimestampTest__Annotations$4 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimestampTest = { "OperatorTimestampTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTimestampTest;
}

@end

void RxInternalOperatorsOperatorTimestampTest_init(RxInternalOperatorsOperatorTimestampTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimestampTest *new_RxInternalOperatorsOperatorTimestampTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimestampTest, init)
}

RxInternalOperatorsOperatorTimestampTest *create_RxInternalOperatorsOperatorTimestampTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimestampTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTimestampTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTimestampTest)

@implementation RxInternalOperatorsOperatorTimestampTest_$1

- (RxScheduler *)callWithId:(RxScheduler *)t {
  return val$scheduler_;
}

- (instancetype)initWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)capture$0 {
  RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSchedulersTestScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduler_", "LRxSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxScheduler;", "LRxSchedulersTestScheduler;", "LRxInternalOperatorsOperatorTimestampTest;", "withDefaultScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Scheduler;Lrx/Scheduler;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTimestampTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorTimestampTest_$1;
}

@end

void RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxInternalOperatorsOperatorTimestampTest_$1 *self, RxSchedulersTestScheduler *capture$0) {
  JreStrongAssign(&self->val$scheduler_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorTimestampTest_$1 *new_RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTimestampTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}

RxInternalOperatorsOperatorTimestampTest_$1 *create_RxInternalOperatorsOperatorTimestampTest_$1_initWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTimestampTest_$1, initWithRxSchedulersTestScheduler_, capture$0)
}
