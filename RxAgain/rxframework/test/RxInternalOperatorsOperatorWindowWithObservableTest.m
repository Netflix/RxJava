//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorWindowWithObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc0.h"
#include "RxInternalOperatorsOperatorWindowWithObservableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$10();

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$1 : NSObject < RxObserver > {
 @public
  id<JavaUtilList> val$values_;
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(RxObservable *)args;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$1, val$values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$1, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$1 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$1 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$1 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$2 : NSObject < RxObserver > {
 @public
  id<JavaUtilList> val$values_;
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(RxObservable *)args;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$2, val$values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$2, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$2 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$2 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$2 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$3 : NSObject < RxObserver > {
 @public
  id<JavaUtilList> val$values_;
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(RxObservable *)args;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$3, val$values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$3, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$3 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$3 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$3 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$4 : NSObject < RxObserver > {
 @public
  id<JavaUtilList> val$values_;
  id<RxObserver> val$o_;
}

- (void)onNextWithId:(RxObservable *)args;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$4, val$values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$4, val$o_, id<RxObserver>)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$4 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$4 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$4 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$5 : RxObserversTestSubscriber {
 @public
  jboolean once_;
  RxSubjectsPublishSubject *val$source_;
}

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$5, val$source_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$5 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$5 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$5 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$6 : RxObserversTestSubscriber {
 @public
  RxObserversTestSubscriber *val$tsw_;
}

- (void)onNextWithId:(RxObservable *)t;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$6, val$tsw_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxInternalOperatorsOperatorWindowWithObservableTest_$6 *self, RxObserversTestSubscriber *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$6 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$6 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$7 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$7_init(RxInternalOperatorsOperatorWindowWithObservableTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$7 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$7 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$7_init();

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$8 : NSObject < RxFunctionsFunc0 >

- (RxObservable *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$8_init(RxInternalOperatorsOperatorWindowWithObservableTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$8 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$8 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$8_init();

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$9 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$boundary_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$9)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$9, val$boundary_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$9 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$9 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$9 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$10 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$boundary_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$10)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$10, val$boundary_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$10 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$10 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$10 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$11 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$boundary_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$11)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$11, val$boundary_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$11 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$11 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$11 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$12 : NSObject < RxFunctionsFunc0 > {
 @public
  RxSubjectsPublishSubject *val$boundary_;
}

- (RxObservable *)call;

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$12)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$12, val$boundary_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$12 *self, RxSubjectsPublishSubject *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$12 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$12 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$13 : RxObserversTestSubscriber {
 @public
  RxObserversTestSubscriber *val$ts_;
}

- (void)onNextWithId:(RxObservable *)t;

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0
                                         withLong:(jlong)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$13)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$13, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxInternalOperatorsOperatorWindowWithObservableTest_$13 *self, RxObserversTestSubscriber *capture$0, jlong arg$0);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$13 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxObserversTestSubscriber *capture$0, jlong arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$13 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxObserversTestSubscriber *capture$0, jlong arg$0);

@interface RxInternalOperatorsOperatorWindowWithObservableTest_$14 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calls_;
  RxSubjectsPublishSubject *val$boundary_;
}

- (RxObservable *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservableTest_$14)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$14, val$calls_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservableTest_$14, val$boundary_, RxSubjectsPublishSubject *)

__attribute__((unused)) static void RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$14 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorWindowWithObservableTest_$14 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1);

@implementation RxInternalOperatorsOperatorWindowWithObservableTest

- (void)testWindowViaObservableNormal1 {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  id<RxObserver> wo = create_RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(values, o);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxObservable:boundary])) subscribeWithRxObserver:wo];
  jint n = 30;
  for (jint i = 0; i < n; i++) {
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    if (i % 3 == 2 && i < n - 1) {
      [((RxSubjectsPublishSubject *) nil_chk(boundary)) onNextWithId:JavaLangInteger_valueOfWithInt_(i / 3)];
    }
  }
  [source onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(n / 3, [values size]);
  jint j = 0;
  for (id<RxObserver> __strong mo in values) {
    for (jint i = 0; i < 3; i++) {
      [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(j + i)];
    }
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mo, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
    j += 3;
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testWindowViaObservableBoundaryCompletes {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  id<RxObserver> wo = create_RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(values, o);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxObservable:boundary])) subscribeWithRxObserver:wo];
  jint n = 30;
  for (jint i = 0; i < n; i++) {
    [source onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
    if (i % 3 == 2 && i < n - 1) {
      [((RxSubjectsPublishSubject *) nil_chk(boundary)) onNextWithId:JavaLangInteger_valueOfWithInt_(i / 3)];
    }
  }
  [((RxSubjectsPublishSubject *) nil_chk(boundary)) onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(n / 3, [values size]);
  jint j = 0;
  for (id<RxObserver> __strong mo in values) {
    for (jint i = 0; i < 3; i++) {
      [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(j + i)];
    }
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(mo, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
    j += 3;
  }
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testWindowViaObservableBoundaryThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  id<RxObserver> wo = create_RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(values, o);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxObservable:boundary])) subscribeWithRxObserver:wo];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((RxSubjectsPublishSubject *) nil_chk(boundary)) onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [values size]);
  id<RxObserver> mo = [values getWithInt:0];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testWindowViaObservableSourceThrows {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<JavaUtilList> values = create_JavaUtilArrayList_init();
  id<RxObserver> wo = create_RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(values, o);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxObservable:boundary])) subscribeWithRxObserver:wo];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [values size]);
  id<RxObserver> mo = [values getWithInt:0];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(0)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(mo))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testWindowNoDuplication {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *tsw = create_RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(source);
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(tsw);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxFunctionsFunc0:create_RxInternalOperatorsOperatorWindowWithObservableTest_$7_init()])) subscribeWithRxSubscriber:ts];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2) } count:2 type:JavaLangInteger_class_()]), [tsw getOnNextEvents]);
}

- (void)testWindowViaObservableNoUnsubscribe {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(1, 10);
  id<RxFunctionsFunc0> boundary = create_RxInternalOperatorsOperatorWindowWithObservableTest_$8_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) windowWithRxFunctionsFunc0:boundary])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithBoolean_([((RxObserversTestSubscriber *) nil_chk(ts)) isUnsubscribed]);
}

- (void)testBoundaryUnsubscribedOnMainCompletion {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> boundaryFunc = create_RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(boundary);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxFunctionsFunc0:boundaryFunc])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(boundary)) hasObservers]);
  [source onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([boundary hasObservers]);
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertCompleted];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1];
}

- (void)testMainUnsubscribedOnBoundaryCompletion {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> boundaryFunc = create_RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(boundary);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxFunctionsFunc0:boundaryFunc])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(boundary)) hasObservers]);
  [boundary onCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([boundary hasObservers]);
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertCompleted];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1];
}

- (void)testChildUnsubscribed {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> boundaryFunc = create_RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(boundary);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxFunctionsFunc0:boundaryFunc])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(boundary)) hasObservers]);
  [((RxObserversTestSubscriber *) nil_chk(ts)) unsubscribe];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([boundary hasObservers]);
  [ts assertNotCompleted];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1];
}

- (void)testInnerBackpressure {
  RxObservable *source = RxObservable_rangeWithInt_withInt_(1, 10);
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> boundaryFunc = create_RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(boundary);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(1);
  RxObserversTestSubscriber *ts1 = create_RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(ts, 1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(source)) windowWithRxFunctionsFunc0:boundaryFunc])) subscribeWithRxSubscriber:ts1];
  [ts1 assertNoErrors];
  [ts1 assertCompleted];
  [ts1 assertValueCountWithInt:1];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoErrors];
  [ts assertNotCompleted];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]];
  [ts requestMoreWithLong:11];
  [ts assertValuesWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()]];
  [ts assertNoErrors];
  [ts assertCompleted];
}

- (void)newBoundaryCalledAfterWindowClosed {
  JavaUtilConcurrentAtomicAtomicInteger *calls = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *boundary = RxSubjectsPublishSubject_create();
  id<RxFunctionsFunc0> boundaryFunc = create_RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(calls, boundary);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) windowWithRxFunctionsFunc0:boundaryFunc])) subscribeWithRxSubscriber:ts];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((RxSubjectsPublishSubject *) nil_chk(boundary)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertTrueWithBoolean_([boundary hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [boundary onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  OrgJunitAssert_assertTrueWithBoolean_([boundary hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [boundary onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  OrgJunitAssert_assertTrueWithBoolean_([boundary hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [source onCompleted];
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertNoErrors];
  [ts assertValueCountWithInt:4];
  [ts assertCompleted];
  OrgJunitAssert_assertFalseWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertFalseWithBoolean_([boundary hasObservers]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWindowViaObservableNormal1);
  methods[1].selector = @selector(testWindowViaObservableBoundaryCompletes);
  methods[2].selector = @selector(testWindowViaObservableBoundaryThrows);
  methods[3].selector = @selector(testWindowViaObservableSourceThrows);
  methods[4].selector = @selector(testWindowNoDuplication);
  methods[5].selector = @selector(testWindowViaObservableNoUnsubscribe);
  methods[6].selector = @selector(testBoundaryUnsubscribedOnMainCompletion);
  methods[7].selector = @selector(testMainUnsubscribedOnBoundaryCompletion);
  methods[8].selector = @selector(testChildUnsubscribed);
  methods[9].selector = @selector(testInnerBackpressure);
  methods[10].selector = @selector(newBoundaryCalledAfterWindowClosed);
  methods[11].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$0, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$1, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$2, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$3, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$4, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$5, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$6, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$7, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$8, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$9, (void *)&RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$10 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest = { "OperatorWindowWithObservableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_init(RxInternalOperatorsOperatorWindowWithObservableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest *new_RxInternalOperatorsOperatorWindowWithObservableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest, init)
}

RxInternalOperatorsOperatorWindowWithObservableTest *create_RxInternalOperatorsOperatorWindowWithObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorWindowWithObservableTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorWindowWithObservableTest)

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$1

- (void)onNextWithId:(RxObservable *)args {
  id<RxObserver> mo = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<JavaUtilList>) nil_chk(val$values_)) addWithId:mo];
  [((RxObservable *) nil_chk(args)) subscribeWithRxObserver:mo];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$values_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilList:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "onError", "LNSException;", "LJavaUtilList;LRxObserver;", "(Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;Lrx/Observer<Ljava/lang/Object;>;)V", "Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;", "Lrx/Observer<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowViaObservableNormal1", "Ljava/lang/Object;Lrx/Observer<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$1;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$1 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$values_, capture$0);
  JreStrongAssign(&self->val$o_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$1 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$1, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$1 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$1_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$1, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$2

- (void)onNextWithId:(RxObservable *)args {
  id<RxObserver> mo = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<JavaUtilList>) nil_chk(val$values_)) addWithId:mo];
  [((RxObservable *) nil_chk(args)) subscribeWithRxObserver:mo];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$values_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilList:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "onError", "LNSException;", "LJavaUtilList;LRxObserver;", "(Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;Lrx/Observer<Ljava/lang/Object;>;)V", "Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;", "Lrx/Observer<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowViaObservableBoundaryCompletes", "Ljava/lang/Object;Lrx/Observer<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$2;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$2 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$values_, capture$0);
  JreStrongAssign(&self->val$o_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$2 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$2, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$2 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$2_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$2, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$3

- (void)onNextWithId:(RxObservable *)args {
  id<RxObserver> mo = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<JavaUtilList>) nil_chk(val$values_)) addWithId:mo];
  [((RxObservable *) nil_chk(args)) subscribeWithRxObserver:mo];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$values_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilList:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "onError", "LNSException;", "LJavaUtilList;LRxObserver;", "(Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;Lrx/Observer<Ljava/lang/Object;>;)V", "Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;", "Lrx/Observer<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowViaObservableBoundaryThrows", "Ljava/lang/Object;Lrx/Observer<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$3;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$3 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$values_, capture$0);
  JreStrongAssign(&self->val$o_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$3 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$3, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$3 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$3_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$3, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$4

- (void)onNextWithId:(RxObservable *)args {
  id<RxObserver> mo = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((id<JavaUtilList>) nil_chk(val$values_)) addWithId:mo];
  [((RxObservable *) nil_chk(args)) subscribeWithRxObserver:mo];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(val$o_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((id<RxObserver>) nil_chk(val$o_)) onCompleted];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0
                      withRxObserver:(id<RxObserver>)capture$1 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$values_);
  RELEASE_(val$o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilList:withRxObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$o_", "LRxObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "onError", "LNSException;", "LJavaUtilList;LRxObserver;", "(Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;Lrx/Observer<Ljava/lang/Object;>;)V", "Ljava/util/List<Lrx/Observer<Ljava/lang/Object;>;>;", "Lrx/Observer<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowViaObservableSourceThrows", "Ljava/lang/Object;Lrx/Observer<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 9, -1, 10, 11, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$4;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(RxInternalOperatorsOperatorWindowWithObservableTest_$4 *self, id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  JreStrongAssign(&self->val$values_, capture$0);
  JreStrongAssign(&self->val$o_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$4 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$4, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$4 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$4_initWithJavaUtilList_withRxObserver_(id<JavaUtilList> capture$0, id<RxObserver> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$4, initWithJavaUtilList_withRxObserver_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$5

- (void)onNextWithId:(JavaLangInteger *)t {
  if (!once_) {
    once_ = true;
    [((RxSubjectsPublishSubject *) nil_chk(val$source_)) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  }
  [super onNextWithId:t];
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "once_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$source_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LJavaLangInteger;", "(Ljava/lang/Integer;)V", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowNoDuplication", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$5;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$5 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$source_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$5 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$5, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$5 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$5_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$5, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$6

- (void)onNextWithId:(RxObservable *)t {
  [((RxObservable *) nil_chk(t)) subscribeWithRxSubscriber:val$tsw_];
  [super onNextWithId:t];
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$tsw_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$tsw_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowNoDuplication", "Lrx/observers/TestSubscriber<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$6;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxInternalOperatorsOperatorWindowWithObservableTest_$6 *self, RxObserversTestSubscriber *capture$0) {
  JreStrongAssign(&self->val$tsw_, capture$0);
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$6 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$6, initWithRxObserversTestSubscriber_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$6 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$6_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$6, initWithRxObserversTestSubscriber_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$7

- (RxObservable *)call {
  return RxObservable_never();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithObservableTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowNoDuplication", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$7;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$7_init(RxInternalOperatorsOperatorWindowWithObservableTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$7 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$7, init)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$7 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$7, init)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$8

- (RxObservable *)call {
  return RxObservable_empty();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorWindowWithObservableTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testWindowViaObservableNoUnsubscribe", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$8;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$8_init(RxInternalOperatorsOperatorWindowWithObservableTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$8 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$8, init)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$8 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$8, init)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$9

- (RxObservable *)call {
  return val$boundary_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$boundary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$boundary_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testBoundaryUnsubscribedOnMainCompletion", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$9 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$9;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$9 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$boundary_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$9 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$9, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$9 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$9_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$9, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$10

- (RxObservable *)call {
  return val$boundary_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$boundary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$boundary_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testMainUnsubscribedOnBoundaryCompletion", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$10 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$10;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$10 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$boundary_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$10 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$10, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$10 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$10_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$10, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$11

- (RxObservable *)call {
  return val$boundary_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$boundary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$boundary_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testChildUnsubscribed", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$11 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$11;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$11 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$boundary_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$11 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$11, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$11 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$11_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$11, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$12

- (RxObservable *)call {
  return val$boundary_;
}

- (instancetype)initWithRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$boundary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$boundary_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LRxSubjectsPublishSubject;", "(Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testInnerBackpressure", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$12 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$12;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$12 *self, RxSubjectsPublishSubject *capture$0) {
  JreStrongAssign(&self->val$boundary_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$12 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$12, initWithRxSubjectsPublishSubject_, capture$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$12 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$12_initWithRxSubjectsPublishSubject_(RxSubjectsPublishSubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$12, initWithRxSubjectsPublishSubject_, capture$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$13

- (void)onNextWithId:(RxObservable *)t {
  [super onNextWithId:t];
  [((RxObservable *) nil_chk(t)) subscribeWithRxSubscriber:val$ts_];
}

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$0
                                         withLong:(jlong)arg$0 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(self, capture$0, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(initWithRxObserversTestSubscriber:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LRxObservable;", "(Lrx/Observable<Ljava/lang/Integer;>;)V", "LRxObserversTestSubscriber;J", "(Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;J)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "testInnerBackpressure", "Lrx/observers/TestSubscriber<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$13 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$13;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxInternalOperatorsOperatorWindowWithObservableTest_$13 *self, RxObserversTestSubscriber *capture$0, jlong arg$0) {
  JreStrongAssign(&self->val$ts_, capture$0);
  RxObserversTestSubscriber_initWithLong_(self, arg$0);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$13 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxObserversTestSubscriber *capture$0, jlong arg$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$13, initWithRxObserversTestSubscriber_withLong_, capture$0, arg$0)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$13 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$13_initWithRxObserversTestSubscriber_withLong_(RxObserversTestSubscriber *capture$0, jlong arg$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$13, initWithRxObserversTestSubscriber_withLong_, capture$0, arg$0)
}

@implementation RxInternalOperatorsOperatorWindowWithObservableTest_$14

- (RxObservable *)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calls_)) getAndIncrement];
  return val$boundary_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                                 withRxSubjectsPublishSubject:(RxSubjectsPublishSubject *)capture$1 {
  RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  RELEASE_(val$boundary_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withRxSubjectsPublishSubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$boundary_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;LRxSubjectsPublishSubject;", "(Ljava/util/concurrent/atomic/AtomicInteger;Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;)V", "Lrx/subjects/PublishSubject<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorWindowWithObservableTest;", "newBoundaryCalledAfterWindowClosed", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorWindowWithObservableTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorWindowWithObservableTest_$14;
}

@end

void RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(RxInternalOperatorsOperatorWindowWithObservableTest_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  JreStrongAssign(&self->val$calls_, capture$0);
  JreStrongAssign(&self->val$boundary_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorWindowWithObservableTest_$14 *new_RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_, capture$0, capture$1)
}

RxInternalOperatorsOperatorWindowWithObservableTest_$14 *create_RxInternalOperatorsOperatorWindowWithObservableTest_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, RxSubjectsPublishSubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorWindowWithObservableTest_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_withRxSubjectsPublishSubject_, capture$0, capture$1)
}
