//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/BlockingUtilsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilBlockingUtils.h"
#include "RxInternalUtilBlockingUtilsTest.h"
#include "RxObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"

@interface RxInternalUtilBlockingUtilsTest ()

+ (RxSubscriber *)createSubscriptionWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch;

@end

__attribute__((unused)) static RxSubscriber *RxInternalUtilBlockingUtilsTest_createSubscriptionWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch);

__attribute__((unused)) static IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$4();

@interface RxInternalUtilBlockingUtilsTest_$1 : NSObject < JavaLangRunnable > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  id<RxSubscription> val$subscription_;
  JavaUtilConcurrentAtomicAtomicReference *val$caught_;
}

- (void)run;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                      withRxSubscription:(id<RxSubscription>)capture$1
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilBlockingUtilsTest_$1)

J2OBJC_FIELD_SETTER(RxInternalUtilBlockingUtilsTest_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalUtilBlockingUtilsTest_$1, val$subscription_, id<RxSubscription>)
J2OBJC_FIELD_SETTER(RxInternalUtilBlockingUtilsTest_$1, val$caught_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalUtilBlockingUtilsTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxInternalUtilBlockingUtilsTest_$1 *new_RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilBlockingUtilsTest_$1 *create_RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

@interface RxInternalUtilBlockingUtilsTest_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilBlockingUtilsTest_$2)

J2OBJC_FIELD_SETTER(RxInternalUtilBlockingUtilsTest_$2, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalUtilBlockingUtilsTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalUtilBlockingUtilsTest_$2 *new_RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilBlockingUtilsTest_$2 *create_RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@implementation RxInternalUtilBlockingUtilsTest

- (void)before {
  JavaLangThread_interrupted();
}

- (void)awaitCompleteShouldReturnIfCountIsZero {
  id<RxSubscription> subscription = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(0);
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
  OrgMockitoMockito_verifyZeroInteractionsWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ subscription } count:1 type:NSObject_class_()]);
}

- (void)awaitCompleteShouldReturnOnEmpty {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxSubscriber *subscription = RxInternalUtilBlockingUtilsTest_createSubscriptionWithJavaUtilConcurrentCountDownLatch_(latch);
  RxObservable *observable = [((RxObservable *) nil_chk(RxObservable_empty())) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxSubscriber:subscription];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
}

- (void)awaitCompleteShouldReturnOnError {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxSubscriber *subscription = RxInternalUtilBlockingUtilsTest_createSubscriptionWithJavaUtilConcurrentCountDownLatch_(latch);
  RxObservable *observable = [((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  [((RxObservable *) nil_chk(observable)) subscribeWithRxSubscriber:subscription];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
}

- (void)shouldThrowRuntimeExceptionOnThreadInterrupted {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxSubscription> subscription = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  JavaUtilConcurrentAtomicAtomicReference *caught = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangRunnable_(create_RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(latch, subscription, caught));
  [thread run];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_(subscription))) unsubscribe];
  JavaLangException *actual = [caught get];
  OrgJunitAssert_assertNotNullWithId_(actual);
  OrgJunitAssert_assertNotNullWithId_([((JavaLangException *) nil_chk(actual)) getCause]);
  OrgJunitAssert_assertTrueWithBoolean_([[actual getCause] isKindOfClass:[JavaLangInterruptedException class]]);
}

+ (RxSubscriber *)createSubscriptionWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch {
  return RxInternalUtilBlockingUtilsTest_createSubscriptionWithJavaUtilConcurrentCountDownLatch_(latch);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilBlockingUtilsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, 5, -1 },
    { NULL, "LRxSubscriber;", 0xa, 6, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(awaitCompleteShouldReturnIfCountIsZero);
  methods[2].selector = @selector(awaitCompleteShouldReturnOnEmpty);
  methods[3].selector = @selector(awaitCompleteShouldReturnOnError);
  methods[4].selector = @selector(shouldThrowRuntimeExceptionOnThreadInterrupted);
  methods[5].selector = @selector(createSubscriptionWithJavaUtilConcurrentCountDownLatch:);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalUtilBlockingUtilsTest__Annotations$0, (void *)&RxInternalUtilBlockingUtilsTest__Annotations$1, (void *)&RxInternalUtilBlockingUtilsTest__Annotations$2, (void *)&RxInternalUtilBlockingUtilsTest__Annotations$3, "LJavaLangException;", (void *)&RxInternalUtilBlockingUtilsTest__Annotations$4, "createSubscription", "LJavaUtilConcurrentCountDownLatch;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/CountDownLatch;)Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalUtilBlockingUtilsTest = { "BlockingUtilsTest", "rx.internal.util", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilBlockingUtilsTest;
}

@end

RxSubscriber *RxInternalUtilBlockingUtilsTest_createSubscriptionWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch) {
  RxInternalUtilBlockingUtilsTest_initialize();
  return create_RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(latch);
}

void RxInternalUtilBlockingUtilsTest_init(RxInternalUtilBlockingUtilsTest *self) {
  NSObject_init(self);
}

RxInternalUtilBlockingUtilsTest *new_RxInternalUtilBlockingUtilsTest_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilBlockingUtilsTest, init)
}

RxInternalUtilBlockingUtilsTest *create_RxInternalUtilBlockingUtilsTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilBlockingUtilsTest, init)
}

IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore(), create_OrgJunitAfter() } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilBlockingUtilsTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilBlockingUtilsTest)

@implementation RxInternalUtilBlockingUtilsTest_$1

- (void)run {
  [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  @try {
    RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(val$latch_, val$subscription_);
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$caught_)) setWithId:e];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                                      withRxSubscription:(id<RxSubscription>)capture$1
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  RELEASE_(val$subscription_);
  RELEASE_(val$caught_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubscription:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscription_", "LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$caught_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubscription;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Exception;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Exception;>;", "LRxInternalUtilBlockingUtilsTest;", "shouldThrowRuntimeExceptionOnThreadInterrupted" };
  static const J2ObjcClassInfo _RxInternalUtilBlockingUtilsTest_$1 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalUtilBlockingUtilsTest_$1;
}

@end

void RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalUtilBlockingUtilsTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$subscription_, capture$1);
  JreStrongAssign(&self->val$caught_, capture$2);
  NSObject_init(self);
}

RxInternalUtilBlockingUtilsTest_$1 *new_RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalUtilBlockingUtilsTest_$1, initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxInternalUtilBlockingUtilsTest_$1 *create_RxInternalUtilBlockingUtilsTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, id<RxSubscription> capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalUtilBlockingUtilsTest_$1, initWithJavaUtilConcurrentCountDownLatch_withRxSubscription_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

@implementation RxInternalUtilBlockingUtilsTest_$2

- (void)onNextWithId:(id)t {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalUtilBlockingUtilsTest_$2 class]);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onNextWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalUtilBlockingUtilsTest;", "createSubscriptionWithJavaUtilConcurrentCountDownLatch:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalUtilBlockingUtilsTest_$2 = { "", "rx.internal.util", ptrTable, methods, fields, 7, 0x8008, 4, 1, 6, -1, 7, 8, -1 };
  return &_RxInternalUtilBlockingUtilsTest_$2;
}

@end

void RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(RxInternalUtilBlockingUtilsTest_$2 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  RxSubscriber_init(self);
}

RxInternalUtilBlockingUtilsTest_$2 *new_RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalUtilBlockingUtilsTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalUtilBlockingUtilsTest_$2 *create_RxInternalUtilBlockingUtilsTest_$2_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalUtilBlockingUtilsTest_$2, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}
