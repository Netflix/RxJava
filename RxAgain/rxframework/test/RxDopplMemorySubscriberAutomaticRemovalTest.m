//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/doppl/memory/SubscriberAutomaticRemovalTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxDopplMemorySubscriberAutomaticRemovalTest.h"
#include "RxInternalOperatorsCachedObservable.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

@interface RxDopplMemorySubscriberAutomaticRemovalTest ()

- (void)innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)refCount;

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter;

@end

__attribute__((unused)) static void RxDopplMemorySubscriberAutomaticRemovalTest_innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest *self, JavaUtilConcurrentAtomicAtomicInteger *refCount);

__attribute__((unused)) static RxObservable *RxDopplMemorySubscriberAutomaticRemovalTest_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter);

__attribute__((unused)) static IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$2();

@interface RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber : RxObserversTestSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)refCount;

- (void)javaFinalize;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber)

J2OBJC_FIELD_SETTER(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *self, JavaUtilConcurrentAtomicAtomicInteger *refCount);

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *new_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *refCount) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *create_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *refCount);

J2OBJC_TYPE_LITERAL_HEADER(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber)

@interface RxDopplMemorySubscriberAutomaticRemovalTest_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMemorySubscriberAutomaticRemovalTest_$1)

__attribute__((unused)) static void RxDopplMemorySubscriberAutomaticRemovalTest_$1_init(RxDopplMemorySubscriberAutomaticRemovalTest_$1 *self);

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_$1 *new_RxDopplMemorySubscriberAutomaticRemovalTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_$1 *create_RxDopplMemorySubscriberAutomaticRemovalTest_$1_init();

@interface RxDopplMemorySubscriberAutomaticRemovalTest_$2 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxDopplMemorySubscriberAutomaticRemovalTest_$2)

J2OBJC_FIELD_SETTER(RxDopplMemorySubscriberAutomaticRemovalTest_$2, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxDopplMemorySubscriberAutomaticRemovalTest_$2, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_$2 *new_RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxDopplMemorySubscriberAutomaticRemovalTest_$2 *create_RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxDopplMemorySubscriberAutomaticRemovalTest

- (void)testTake {
  JavaUtilConcurrentAtomicAtomicInteger *refCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxDopplMemorySubscriberAutomaticRemovalTest_innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger_(self, refCount);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [refCount get]);
}

- (void)innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)refCount {
  RxDopplMemorySubscriberAutomaticRemovalTest_innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger_(self, refCount);
}

- (void)testObserveOn {
  JavaUtilConcurrentAtomicAtomicInteger *refCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [self innerTestObserveOnWithJavaUtilConcurrentAtomicAtomicInteger:refCount];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [refCount get]);
}

- (void)innerTestObserveOnWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)refCount {
  @autoreleasepool {
    jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
    JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
    RxObserversTestSubscriber *ts = create_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(refCount);
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxDopplMemorySubscriberAutomaticRemovalTest_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
    @try {
      JavaLangThread_sleepWithLong_(3000);
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
    [ts awaitTerminalEvent];
    [ts assertNoErrors];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testObserveOn => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
    OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
    OrgJunitAssert_assertTrueWithBoolean_([c get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4);
  }
}

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter {
  return RxDopplMemorySubscriberAutomaticRemovalTest_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(counter);
}

- (void)testAsyncComeAndGo {
  RxObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withLong_withJavaUtilConcurrentTimeUnit_(1, 1, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) takeWithInt:1000])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_io()];
  RxInternalOperatorsCachedObservable *cached = RxInternalOperatorsCachedObservable_fromWithRxObservable_(source);
  RxObservable *output = [((RxInternalOperatorsCachedObservable *) nil_chk(cached)) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(100);
  for (jint i = 0; i < 1; i++) {
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [list addWithId:ts];
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(output)) skipWithInt:i * 10])) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  }
  id<JavaUtilList> expected = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 10; i++) {
    [expected addWithId:JavaLangLong_valueOfWithLong_((jlong) (i - 10))];
  }
  jint j = 0;
  for (RxObserversTestSubscriber * __strong ts in list) {
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:3 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts assertNoErrors];
    [ts assertTerminalEvent];
    for (jint i = j * 10; i < j * 10 + 10; i++) {
      [expected setWithInt:i - j * 10 withId:JavaLangLong_valueOfWithLong_((jlong) i)];
    }
    [ts assertReceivedOnNextWithJavaUtilList:expected];
    j++;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMemorySubscriberAutomaticRemovalTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LRxObservable;", 0xa, 5, 2, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTake);
  methods[1].selector = @selector(innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[2].selector = @selector(testObserveOn);
  methods[3].selector = @selector(innerTestObserveOnWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[4].selector = @selector(incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[5].selector = @selector(testAsyncComeAndGo);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$0, "innerTestTake", "LJavaUtilConcurrentAtomicAtomicInteger;", (void *)&RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$1, "innerTestObserveOn", "incrementingIntegers", "(Ljava/util/concurrent/atomic/AtomicInteger;)Lrx/Observable<Ljava/lang/Integer;>;", (void *)&RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$2, "LRxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer;LRxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber;LRxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest = { "SubscriberAutomaticRemovalTest", "rx.doppl.memory", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, 8, -1, -1, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest *self, JavaUtilConcurrentAtomicAtomicInteger *refCount) {
  @autoreleasepool {
    RxObservable *observable = RxObservable_createWithRxObservable_OnSubscribe_(create_RxDopplMemorySubscriberAutomaticRemovalTest_$1_init());
    RxObserversTestSubscriber *ts = create_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(refCount);
    OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount)) get]);
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk(observable)) takeWithInt:3])) subscribeWithRxSubscriber:ts];
    OrgJunitAssert_assertEqualsWithLong_withLong_([ts getValueCount], 3);
    [ts assertCompleted];
  }
}

RxObservable *RxDopplMemorySubscriberAutomaticRemovalTest_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter) {
  RxDopplMemorySubscriberAutomaticRemovalTest_initialize();
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter));
}

void RxDopplMemorySubscriberAutomaticRemovalTest_init(RxDopplMemorySubscriberAutomaticRemovalTest *self) {
  NSObject_init(self);
}

RxDopplMemorySubscriberAutomaticRemovalTest *new_RxDopplMemorySubscriberAutomaticRemovalTest_init() {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest, init)
}

RxDopplMemorySubscriberAutomaticRemovalTest *create_RxDopplMemorySubscriberAutomaticRemovalTest_init() {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest, init)
}

IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxDopplMemorySubscriberAutomaticRemovalTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMemorySubscriberAutomaticRemovalTest)

@implementation RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer

- (instancetype)initWithRxSubscriber:(RxSubscriber *)s {
  RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer_initWithRxSubscriber_(self, s);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (![((RxSubscriber *) nil_chk(s_)) isUnsubscribed]) {
    for (i_ = 0; i_ < n; i_++) {
      [s_ onNextWithId:JavaLangInteger_valueOfWithInt_(i_)];
    }
  }
}

- (void)__javaClone:(RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer *)original {
  [super __javaClone:original];
  [s_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "request", "J", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxDopplMemorySubscriberAutomaticRemovalTest;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer = { "EasyProducer", "rx.doppl.memory", ptrTable, methods, fields, 7, 0x8, 2, 2, 5, -1, -1, -1, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer_initWithRxSubscriber_(RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer *self, RxSubscriber *s) {
  NSObject_init(self);
  self->i_ = 0;
  self->s_ = s;
}

RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer *new_RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer_initWithRxSubscriber_(RxSubscriber *s) {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer, initWithRxSubscriber_, s)
}

RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer *create_RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer_initWithRxSubscriber_(RxSubscriber *s) {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer, initWithRxSubscriber_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer)

@implementation RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)refCount {
  RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, refCount);
  return self;
}

- (void)javaFinalize {
  [super javaFinalize];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) decrementAndGet];
}

- (void)dealloc {
  JreCheckFinalize(self, [RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber class]);
  RELEASE_(refCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(javaFinalize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "refCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "finalize", "LNSException;", "LRxDopplMemorySubscriberAutomaticRemovalTest;", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber = { "RefCountTestSubscriber", "rx.doppl.memory", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, 4, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *self, JavaUtilConcurrentAtomicAtomicInteger *refCount) {
  RxObserversTestSubscriber_init(self);
  JreStrongAssign(&self->refCount_, refCount);
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount)) incrementAndGet];
}

RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *new_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *refCount) {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber, initWithJavaUtilConcurrentAtomicAtomicInteger_, refCount)
}

RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber *create_RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *refCount) {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber, initWithJavaUtilConcurrentAtomicAtomicInteger_, refCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMemorySubscriberAutomaticRemovalTest_RefCountTestSubscriber)

@implementation RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter
                       withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                             withRxSubscriber:(RxSubscriber *)s {
  RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(self, counter, requested, s);
  return self;
}

- (void)requestWithLong:(jlong)n {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"BPTPRoducer: ", n)];
  if (n == 0) {
    return;
  }
  jlong _c = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) getAndAddWithLong:n];
  if (_c == 0) {
    while (![((RxSubscriber *) nil_chk(s_)) isUnsubscribed]) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(counter_)) incrementAndGet];
      [s_ onNextWithId:JavaLangInteger_valueOfWithInt_(i_++)];
      if ([requested_ decrementAndGet] == 0) {
        return;
      }
    }
  }
}

- (void)__javaClone:(RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer *)original {
  [super __javaClone:original];
  [s_ release];
}

- (void)dealloc {
  RELEASE_(counter_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicLong:withRxSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicLong;LRxSubscriber;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicLong;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "request", "J", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxDopplMemorySubscriberAutomaticRemovalTest;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer = { "BPTPRoducer", "rx.doppl.memory", ptrTable, methods, fields, 7, 0x8, 2, 4, 5, -1, -1, -1, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer *self, JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  NSObject_init(self);
  self->i_ = 0;
  JreStrongAssign(&self->counter_, counter);
  JreStrongAssign(&self->requested_, requested);
  self->s_ = s;
}

RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer *new_RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, counter, requested, s)
}

RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer *create_RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, counter, requested, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer)

@implementation RxDopplMemorySubscriberAutomaticRemovalTest_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  [((RxSubscriber *) nil_chk(subscriber)) setProducerWithRxProducer:create_RxDopplMemorySubscriberAutomaticRemovalTest_EasyProducer_initWithRxSubscriber_(subscriber)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxDopplMemorySubscriberAutomaticRemovalTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LRxDopplMemorySubscriberAutomaticRemovalTest;", "innerTestTakeWithJavaUtilConcurrentAtomicAtomicInteger:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest_$1 = { "", "rx.doppl.memory", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest_$1;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_$1_init(RxDopplMemorySubscriberAutomaticRemovalTest_$1 *self) {
  NSObject_init(self);
}

RxDopplMemorySubscriberAutomaticRemovalTest_$1 *new_RxDopplMemorySubscriberAutomaticRemovalTest_$1_init() {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_$1, init)
}

RxDopplMemorySubscriberAutomaticRemovalTest_$1 *create_RxDopplMemorySubscriberAutomaticRemovalTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_$1, init)
}

@implementation RxDopplMemorySubscriberAutomaticRemovalTest_$2

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxDopplMemorySubscriberAutomaticRemovalTest_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(val$counter_, requested_, s)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(requested_);
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxDopplMemorySubscriberAutomaticRemovalTest;", "incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxDopplMemorySubscriberAutomaticRemovalTest_$2 = { "", "rx.doppl.memory", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxDopplMemorySubscriberAutomaticRemovalTest_$2;
}

@end

void RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxDopplMemorySubscriberAutomaticRemovalTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

RxDopplMemorySubscriberAutomaticRemovalTest_$2 *new_RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxDopplMemorySubscriberAutomaticRemovalTest_$2 *create_RxDopplMemorySubscriberAutomaticRemovalTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxDopplMemorySubscriberAutomaticRemovalTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
