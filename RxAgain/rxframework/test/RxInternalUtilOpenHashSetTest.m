//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/util/OpenHashSetTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalUtilOpenHashSet.h"
#include "RxInternalUtilOpenHashSetTest.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalUtilOpenHashSetTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalUtilOpenHashSetTest__Annotations$1();

@implementation RxInternalUtilOpenHashSetTest

- (void)addRemove {
  RxInternalUtilOpenHashSet *set = create_RxInternalUtilOpenHashSet_init();
  for (jint i = 0; i < 1000; i++) {
    OrgJunitAssert_assertTrueWithBoolean_([set addWithId:JavaLangInteger_valueOfWithInt_(i)]);
    OrgJunitAssert_assertFalseWithBoolean_([set addWithId:JavaLangInteger_valueOfWithInt_(i)]);
    OrgJunitAssert_assertTrueWithBoolean_([set removeWithId:JavaLangInteger_valueOfWithInt_(i)]);
    OrgJunitAssert_assertFalseWithBoolean_([set removeWithId:JavaLangInteger_valueOfWithInt_(i)]);
  }
  IOSObjectArray *values = [set values];
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id i = *b__++;
      OrgJunitAssert_assertNullWithId_(i);
    }
  }
}

- (void)addAllRemoveAll {
  for (jint i = 16; i < 128 * 1024; i *= 2) {
    RxInternalUtilOpenHashSet *set = create_RxInternalUtilOpenHashSet_initWithInt_(i);
    for (jint j = 0; j < i * 2; j++) {
      OrgJunitAssert_assertTrueWithBoolean_([set addWithId:JavaLangInteger_valueOfWithInt_(j)]);
      OrgJunitAssert_assertFalseWithBoolean_([set addWithId:JavaLangInteger_valueOfWithInt_(j)]);
    }
    for (jint j = i * 2 - 1; j >= 0; j--) {
      OrgJunitAssert_assertTrueWithBoolean_([set removeWithId:JavaLangInteger_valueOfWithInt_(j)]);
      OrgJunitAssert_assertFalseWithBoolean_([set removeWithId:JavaLangInteger_valueOfWithInt_(j)]);
    }
    IOSObjectArray *values = [set values];
    {
      IOSObjectArray *a__ = values;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id j = *b__++;
        OrgJunitAssert_assertNullWithId_(j);
      }
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilOpenHashSetTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addRemove);
  methods[1].selector = @selector(addAllRemoveAll);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalUtilOpenHashSetTest__Annotations$0, (void *)&RxInternalUtilOpenHashSetTest__Annotations$1 };
  static const J2ObjcClassInfo _RxInternalUtilOpenHashSetTest = { "OpenHashSetTest", "rx.internal.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilOpenHashSetTest;
}

@end

void RxInternalUtilOpenHashSetTest_init(RxInternalUtilOpenHashSetTest *self) {
  NSObject_init(self);
}

RxInternalUtilOpenHashSetTest *new_RxInternalUtilOpenHashSetTest_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilOpenHashSetTest, init)
}

RxInternalUtilOpenHashSetTest *create_RxInternalUtilOpenHashSetTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilOpenHashSetTest, init)
}

IOSObjectArray *RxInternalUtilOpenHashSetTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalUtilOpenHashSetTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilOpenHashSetTest)
