//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorGroupByTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorGroupByTest")
#ifdef RESTRICT_RxInternalOperatorsOperatorGroupByTest
#define INCLUDE_ALL_RxInternalOperatorsOperatorGroupByTest 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorGroupByTest 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorGroupByTest

#if !defined (RxInternalOperatorsOperatorGroupByTest_) && (INCLUDE_ALL_RxInternalOperatorsOperatorGroupByTest || defined(INCLUDE_RxInternalOperatorsOperatorGroupByTest))
#define RxInternalOperatorsOperatorGroupByTest_

@class JavaUtilConcurrentAtomicAtomicInteger;
@class RxObservable;
@protocol RxFunctionsFunc1;

@interface RxInternalOperatorsOperatorGroupByTest : NSObject {
 @public
  id<RxFunctionsFunc1> length_;
  id<RxFunctionsFunc1> dbl_;
  id<RxFunctionsFunc1> identity_;
}

#pragma mark Public

- (instancetype)init;

- (void)before;

- (void)innerEscapeCompleted;

- (void)keySelectorThrows;

- (void)mapFactoryEvictionWorks;

- (void)normalBehavior;

- (void)testBackpressureInnerDoesntOverflowOuter;

- (void)testBackpressureObserveOnOuter;

- (void)testCollectedGroups;

- (void)testCompletionIfInnerNotSubscribed;

- (void)testEmpty;

- (void)testError;

- (void)testError2;

- (void)testEvictingMapFactoryIfMapCreateThrowsFatalErrorThenSubscribeThrows;

- (void)testEvictingMapFactoryIfMapCreateThrowsRuntimeExceptionThenErrorEmittedByStream;

- (void)testEvictingMapFactoryIfMapPutThrowsFatalErrorThenErrorThrownBySubscribe;

- (void)testEvictingMapFactoryIfMapPutThrowsRuntimeExceptionThenErrorEmittedByStream;

- (void)testExceptionIfSubscribeToChildMoreThanOnce;

- (void)testFirstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete;

- (void)testFirstGroupsCompleteAndParentSlowToThenEmitFinalGroupsWhichThenObservesOnAndDelaysAndThenCompletes;

- (void)testFirstGroupsCompleteAndParentSlowToThenEmitFinalGroupsWhichThenSubscribesOnAndDelaysAndThenCompletes;

- (void)testGroupBy;

- (void)testGroupByBackpressure;

- (void)testGroupByBackpressure2;

- (void)testgroupByBackpressure2;

- (void)testGroupByOnAsynchronousSourceAcceptsMultipleSubscriptions;

- (void)testGroupByShouldPropagateError;

- (void)testGroupByThrowsNpeIfEvictingMapFactoryNull;

- (void)testGroupByUnsubscribe;

- (void)testGroupByWithElementSelector;

- (void)testGroupByWithElementSelector2;

- (void)testGroupByWithNullKey;

- (void)testGroupedEventStream;

- (void)testGroupedObservableCollection;

- (void)testGroupsWithNestedObserveOn;

- (void)testGroupsWithNestedSubscribeOn;

- (void)testIgnoringGroups;

- (void)testMappedCollectedGroups;

- (void)testOneGroupInnerRequestsTwiceBuffer;

- (void)testRequestOverflow;

- (void)testSkippedGroup;

- (void)testStaggeredCompletion;

- (void)testUnsubscribeOnNestedTakeAndAsyncInfiniteStream;

- (void)testUnsubscribeOnNestedTakeAndSyncInfiniteStream;

- (void)testUnsubscribeViaTakeOnGroupThenMergeAndTake;

- (void)testUnsubscribeViaTakeOnGroupThenTakeOnInner;

- (void)valueSelectorThrows;

#pragma mark Package-Private

- (RxObservable *)ASYNC_INFINITE_OBSERVABLE_OF_EVENTWithInt:(jint)numGroups
                  withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)subscribeCounter
                  withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)sentEventCounter;

- (id<RxFunctionsFunc1>)failWithId:(id)dummy;

- (id<RxFunctionsFunc1>)fail2WithId:(id)dummy2;

- (id<RxFunctionsFunc1>)justWithId:(id)value;

- (RxObservable *)SYNC_INFINITE_OBSERVABLE_OF_EVENTWithInt:(jint)numGroups
                 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)subscribeCounter
                 withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)sentEventCounter;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorGroupByTest)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorGroupByTest, length_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorGroupByTest, dbl_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorGroupByTest, identity_, id<RxFunctionsFunc1>)

inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorGroupByTest_get_FLATTEN_INTEGER();
inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorGroupByTest_set_FLATTEN_INTEGER(id<RxFunctionsFunc1> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<RxFunctionsFunc1> RxInternalOperatorsOperatorGroupByTest_FLATTEN_INTEGER;
J2OBJC_STATIC_FIELD_OBJ(RxInternalOperatorsOperatorGroupByTest, FLATTEN_INTEGER, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorGroupByTest_init(RxInternalOperatorsOperatorGroupByTest *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorGroupByTest *new_RxInternalOperatorsOperatorGroupByTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorGroupByTest *create_RxInternalOperatorsOperatorGroupByTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorGroupByTest)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorGroupByTest")
