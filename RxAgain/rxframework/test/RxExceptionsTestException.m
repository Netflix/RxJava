//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/exceptions/TestException.java
//

#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "java/lang/RuntimeException.h"

inline jlong RxExceptionsTestException_get_serialVersionUID();
#define RxExceptionsTestException_serialVersionUID -1138830497957801910LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsTestException, serialVersionUID, jlong)

@implementation RxExceptionsTestException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsTestException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)message {
  RxExceptionsTestException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxExceptionsTestException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _RxExceptionsTestException = { "TestException", "rx.exceptions", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_RxExceptionsTestException;
}

@end

void RxExceptionsTestException_init(RxExceptionsTestException *self) {
  JavaLangRuntimeException_init(self);
}

RxExceptionsTestException *new_RxExceptionsTestException_init() {
  J2OBJC_NEW_IMPL(RxExceptionsTestException, init)
}

RxExceptionsTestException *create_RxExceptionsTestException_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsTestException, init)
}

void RxExceptionsTestException_initWithNSString_(RxExceptionsTestException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

RxExceptionsTestException *new_RxExceptionsTestException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(RxExceptionsTestException, initWithNSString_, message)
}

RxExceptionsTestException *create_RxExceptionsTestException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(RxExceptionsTestException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsTestException)
