//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSubscribeOnTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorSubscribeOnTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$5();

@interface RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner () {
 @public
  RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *this$0_;
  RxScheduler_Worker *actualInner_;
}

- (instancetype)initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler:(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *)outer$
                                                          withRxScheduler_Worker:(RxScheduler_Worker *)actual;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner, this$0_, RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner, actualInner_, RxScheduler_Worker *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *self, RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *new_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *create_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual);

@interface RxInternalOperatorsOperatorSubscribeOnTest_$1 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentCountDownLatch *val$scheduled_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentCountDownLatch *val$doneLatch_;
}

- (void)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$1, val$scheduled_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$1, val$doneLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorSubscribeOnTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$1 *new_RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$1 *create_RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxInternalOperatorsOperatorSubscribeOnTest_$2 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$2_init(RxInternalOperatorsOperatorSubscribeOnTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$2 *new_RxInternalOperatorsOperatorSubscribeOnTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$2 *create_RxInternalOperatorsOperatorSubscribeOnTest_$2_init();

@interface RxInternalOperatorsOperatorSubscribeOnTest_$3 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$3_init(RxInternalOperatorsOperatorSubscribeOnTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$3 *new_RxInternalOperatorsOperatorSubscribeOnTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$3 *create_RxInternalOperatorsOperatorSubscribeOnTest_$3_init();

@interface RxInternalOperatorsOperatorSubscribeOnTest_$4 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)callWithId:(RxSubscriber *)sub;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$4, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorSubscribeOnTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$4 *new_RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$4 *create_RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorSubscribeOnTest_$5 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$5, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorSubscribeOnTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$5 *new_RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$5 *create_RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxInternalOperatorsOperatorSubscribeOnTest_$6 : NSObject < RxObservable_Operator >

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$6_init(RxInternalOperatorsOperatorSubscribeOnTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_init();

@interface RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 : NSObject < RxProducer > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
  RxSubscriber *val$child_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                                          withRxSubscriber:(RxSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1, val$child_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1);

@interface RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 : RxSubscriber {
 @public
  RxSubscriber *val$child_;
  JavaUtilConcurrentAtomicAtomicLong *val$requested_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2, val$child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2, val$requested_, JavaUtilConcurrentAtomicAtomicLong *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *self, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1);

@implementation RxInternalOperatorsOperatorSubscribeOnTest

- (void)testIssue813 {
  JavaUtilConcurrentCountDownLatch *scheduled = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *doneLatch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObserversTestSubscriber *observer = create_RxObserversTestSubscriber_init();
  id<RxSubscription> subscription = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(scheduled, latch, doneLatch)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:observer];
  [scheduled await];
  [((id<RxSubscription>) nil_chk(subscription)) unsubscribe];
  [latch countDown];
  [doneLatch await];
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [((id<JavaUtilList>) nil_chk([observer getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [observer getCompletions]);
}

- (void)testThrownErrorHandling {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSubscribeOnTest_$2_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
}

- (void)testOnError {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSubscribeOnTest_$3_init()))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [ts assertTerminalEvent];
}

- (void)testUnsubscribeInfiniteStream {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:10])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  JavaLangThread_sleepWithLong_(200);
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10) } count:10 type:JavaLangInteger_class_()])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(10, [count get]);
}

- (void)testBackpressureReschedulesCorrectly {
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(10);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(create_RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(latch));
  [ts requestMoreWithLong:10];
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10000000))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:20])) subscribeWithRxSubscriber:ts];
  [latch await];
  JavaLangThread *t = [ts getLastSeenThread];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"First schedule: ", t)];
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(t)) getName])) hasPrefix:@"Rx"]);
  [ts requestMoreWithLong:10];
  [ts awaitTerminalEvent];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"After reschedule: ", [ts getLastSeenThread])];
  OrgJunitAssert_assertEqualsWithId_withId_(t, [ts getLastSeenThread]);
}

- (void)testSetProducerSynchronousRequest {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) liftWithRxObservable_Operator:create_RxInternalOperatorsOperatorSubscribeOnTest_$6_init()])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSubscribeOnTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testIssue813);
  methods[1].selector = @selector(testThrownErrorHandling);
  methods[2].selector = @selector(testOnError);
  methods[3].selector = @selector(testUnsubscribeInfiniteStream);
  methods[4].selector = @selector(testBackpressureReschedulesCorrectly);
  methods[5].selector = @selector(testSetProducerSynchronousRequest);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$4, (void *)&RxInternalOperatorsOperatorSubscribeOnTest__Annotations$5, "LRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest = { "OperatorSubscribeOnTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, 7, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_init(RxInternalOperatorsOperatorSubscribeOnTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest *new_RxInternalOperatorsOperatorSubscribeOnTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest, init)
}

RxInternalOperatorsOperatorSubscribeOnTest *create_RxInternalOperatorsOperatorSubscribeOnTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 5000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSubscribeOnTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSubscribeOnTest)

@implementation RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRxScheduler:(RxScheduler *)actual
                           withLong:(jlong)delay
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_(self, actual, delay, unit);
  return self;
}

- (RxScheduler_Worker *)createWorker {
  return create_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(self, [((RxScheduler *) nil_chk(actual_)) createWorker]);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithRxScheduler:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delay_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;JLJavaUtilConcurrentTimeUnit;", "LRxInternalOperatorsOperatorSubscribeOnTest;", "LRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler = { "SlowScheduler", "rx.internal.operators", ptrTable, methods, fields, 7, 0x9, 3, 3, 1, 2, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_init(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *self) {
  RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_(self, RxSchedulersSchedulers_computation(), 2, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *new_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler, init)
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *create_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler, init)
}

void RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *self, RxScheduler *actual, jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  RxScheduler_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->delay_ = delay;
  JreStrongAssign(&self->unit_, unit);
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *new_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_(RxScheduler *actual, jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler, initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_, actual, delay, unit)
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *create_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_(RxScheduler *actual, jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler, initWithRxScheduler_withLong_withJavaUtilConcurrentTimeUnit_, actual, delay, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler)

@implementation RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner

- (instancetype)initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler:(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *)outer$
                                                          withRxScheduler_Worker:(RxScheduler_Worker *)actual {
  RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(self, outer$, actual);
  return self;
}

- (void)unsubscribe {
  [((RxScheduler_Worker *) nil_chk(actualInner_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxScheduler_Worker *) nil_chk(actualInner_)) isUnsubscribed];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return [((RxScheduler_Worker *) nil_chk(actualInner_)) scheduleWithRxFunctionsAction0:action withLong:this$0_->delay_ withJavaUtilConcurrentTimeUnit:this$0_->unit_];
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)delayUnit {
  JavaUtilConcurrentTimeUnit *common = [((JavaUtilConcurrentTimeUnit *) nil_chk(delayUnit)) compareToWithId:this$0_->unit_] < 0 ? delayUnit : this$0_->unit_;
  jlong t = [common convertWithLong:delayTime withJavaUtilConcurrentTimeUnit:delayUnit] + [common convertWithLong:this$0_->delay_ withJavaUtilConcurrentTimeUnit:this$0_->unit_];
  return [((RxScheduler_Worker *) nil_chk(actualInner_)) scheduleWithRxFunctionsAction0:action withLong:t withJavaUtilConcurrentTimeUnit:common];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(actualInner_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LRxSubscription;", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler:withRxScheduler_Worker:);
  methods[1].selector = @selector(unsubscribe);
  methods[2].selector = @selector(isUnsubscribed);
  methods[3].selector = @selector(scheduleWithRxFunctionsAction0:);
  methods[4].selector = @selector(scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "actualInner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler;LRxScheduler_Worker;", "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "LRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner = { "SlowInner", "rx.internal.operators", ptrTable, methods, fields, 7, 0x10, 5, 2, 4, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *self, RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual) {
  JreStrongAssign(&self->this$0_, outer$);
  RxScheduler_Worker_init(self);
  JreStrongAssign(&self->actualInner_, actual);
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *new_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner, initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_, outer$, actual)
}

RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner *create_RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner_initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler *outer$, RxScheduler_Worker *actual) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner, initWithRxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_withRxScheduler_Worker_, outer$, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSubscribeOnTest_SlowScheduler_SlowInner)

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$1

- (void)callWithId:(RxSubscriber *)subscriber {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$scheduled_)) countDown];
  @try {
    @try {
      [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) await];
    }
    @catch (JavaLangInterruptedException *e) {
    }
    [((RxSubscriber *) nil_chk(subscriber)) onCompleted];
  }
  @catch (NSException *e) {
    [((RxSubscriber *) nil_chk(subscriber)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$doneLatch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(val$scheduled_);
  RELEASE_(val$latch_);
  RELEASE_(val$doneLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$scheduled_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$doneLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testIssue813", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$1;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorSubscribeOnTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$scheduled_, capture$0);
  JreStrongAssign(&self->val$latch_, capture$1);
  JreStrongAssign(&self->val$doneLatch_, capture$2);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$1 *new_RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorSubscribeOnTest_$1 *create_RxInternalOperatorsOperatorSubscribeOnTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$2

- (void)callWithId:(RxSubscriber *)s {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"fail");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSubscribeOnTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testThrownErrorHandling", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$2;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$2_init(RxInternalOperatorsOperatorSubscribeOnTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$2 *new_RxInternalOperatorsOperatorSubscribeOnTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$2, init)
}

RxInternalOperatorsOperatorSubscribeOnTest_$2 *create_RxInternalOperatorsOperatorSubscribeOnTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$2, init)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$3

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"fail")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSubscribeOnTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testOnError", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$3;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$3_init(RxInternalOperatorsOperatorSubscribeOnTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$3 *new_RxInternalOperatorsOperatorSubscribeOnTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$3, init)
}

RxInternalOperatorsOperatorSubscribeOnTest_$3 *create_RxInternalOperatorsOperatorSubscribeOnTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$3, init)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$4

- (void)callWithId:(RxSubscriber *)sub {
  for (jint i = 1; ![((RxSubscriber *) nil_chk(sub)) isUnsubscribed]; i++) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
    [sub onNextWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testUnsubscribeInfiniteStream", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$4;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorSubscribeOnTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$4 *new_RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorSubscribeOnTest_$4 *create_RxInternalOperatorsOperatorSubscribeOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$5

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testBackpressureReschedulesCorrectly", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$5;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(RxInternalOperatorsOperatorSubscribeOnTest_$5 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$5 *new_RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxInternalOperatorsOperatorSubscribeOnTest_$5 *create_RxInternalOperatorsOperatorSubscribeOnTest_$5_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$5, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$6

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  JavaUtilConcurrentAtomicAtomicLong *requested = create_JavaUtilConcurrentAtomicAtomicLong_init();
  [((RxSubscriber *) nil_chk(child)) setProducerWithRxProducer:create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(requested, child)];
  RxSubscriber *parent = create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(child, requested);
  [child addWithRxSubscription:parent];
  return parent;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSubscribeOnTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorSubscribeOnTest;", "testSetProducerSynchronousRequest", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$6;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$6_init(RxInternalOperatorsOperatorSubscribeOnTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$6 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6, init)
}

RxInternalOperatorsOperatorSubscribeOnTest_$6 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6, init)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$6_$1

- (void)requestWithLong:(jlong)n {
  if (![((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requested_)) compareAndSetWithLong:0 withLong:n]) {
    [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Expected to receive request before onNext but didn't")];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$0
                                          withRxSubscriber:(RxSubscriber *)capture$1 {
  RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$requested_);
  RELEASE_(val$child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(requestWithLong:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicLong:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LJavaUtilConcurrentAtomicAtomicLong;LRxSubscriber;", "(Ljava/util/concurrent/atomic/AtomicLong;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorSubscribeOnTest_$6;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, -1, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *self, JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1) {
  JreStrongAssign(&self->val$requested_, capture$0);
  JreStrongAssign(&self->val$child_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1, initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, capture$0, capture$1)
}

RxInternalOperatorsOperatorSubscribeOnTest_$6_$1 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$1_initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicLong *capture$0, RxSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6_$1, initWithJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorSubscribeOnTest_$6_$2

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$child_)) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$requested_)) compareAndSetWithLong:0 withLong:-99]) {
    [((RxSubscriber *) nil_chk(val$child_)) onErrorWithNSException:create_JavaLangRuntimeException_initWithNSString_(@"Got values before requested")];
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$1 {
  RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$child_);
  RELEASE_(val$requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithRxSubscriber:withJavaUtilConcurrentAtomicAtomicLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LRxSubscriber;LJavaUtilConcurrentAtomicAtomicLong;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicLong;)V", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorSubscribeOnTest_$6;", "callWithId:", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2;
}

@end

void RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *self, RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1) {
  JreStrongAssign(&self->val$child_, capture$0);
  JreStrongAssign(&self->val$requested_, capture$1);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *new_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2, initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_, capture$0, capture$1)
}

RxInternalOperatorsOperatorSubscribeOnTest_$6_$2 *create_RxInternalOperatorsOperatorSubscribeOnTest_$6_$2_initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_(RxSubscriber *capture$0, JavaUtilConcurrentAtomicAtomicLong *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSubscribeOnTest_$6_$2, initWithRxSubscriber_withJavaUtilConcurrentAtomicAtomicLong_, capture$0, capture$1)
}
