//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observers/CompletableSubscriberTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RxCompletableSubscriber.h"
#include "RxExceptionsCompositeException.h"
#include "RxExceptionsOnErrorFailedException.h"
#include "RxExceptionsTestException.h"
#include "RxObserversCompletableSubscriberTest.h"
#include "RxObserversSafeCompletableSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/io/IOException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$4();

@interface RxObserversCompletableSubscriberTest_$1 : NSObject < RxCompletableSubscriber > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$error_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversCompletableSubscriberTest_$1)

J2OBJC_FIELD_SETTER(RxObserversCompletableSubscriberTest_$1, val$error_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversCompletableSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$1 *new_RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$1 *create_RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObserversCompletableSubscriberTest_$2 : NSObject < RxCompletableSubscriber >

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversCompletableSubscriberTest_$2)

__attribute__((unused)) static void RxObserversCompletableSubscriberTest_$2_init(RxObserversCompletableSubscriberTest_$2 *self);

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$2 *new_RxObserversCompletableSubscriberTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$2 *create_RxObserversCompletableSubscriberTest_$2_init();

@interface RxObserversCompletableSubscriberTest_$3 : NSObject < RxCompletableSubscriber >

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversCompletableSubscriberTest_$3)

__attribute__((unused)) static void RxObserversCompletableSubscriberTest_$3_init(RxObserversCompletableSubscriberTest_$3 *self);

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$3 *new_RxObserversCompletableSubscriberTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$3 *create_RxObserversCompletableSubscriberTest_$3_init();

@interface RxObserversCompletableSubscriberTest_$4 : NSObject < RxCompletableSubscriber > {
 @public
  IOSBooleanArray *val$calls_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversCompletableSubscriberTest_$4)

J2OBJC_FIELD_SETTER(RxObserversCompletableSubscriberTest_$4, val$calls_, IOSBooleanArray *)

__attribute__((unused)) static void RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(RxObserversCompletableSubscriberTest_$4 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$4 *new_RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$4 *create_RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(IOSBooleanArray *capture$0);

@interface RxObserversCompletableSubscriberTest_$5 : NSObject < RxCompletableSubscriber > {
 @public
  IOSBooleanArray *val$calls_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversCompletableSubscriberTest_$5)

J2OBJC_FIELD_SETTER(RxObserversCompletableSubscriberTest_$5, val$calls_, IOSBooleanArray *)

__attribute__((unused)) static void RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(RxObserversCompletableSubscriberTest_$5 *self, IOSBooleanArray *capture$0);

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$5 *new_RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(IOSBooleanArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversCompletableSubscriberTest_$5 *create_RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(IOSBooleanArray *capture$0);

@implementation RxObserversCompletableSubscriberTest

- (void)childOnSubscribeThrows {
  JavaUtilConcurrentAtomicAtomicReference *error = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversSafeCompletableSubscriber *safe = create_RxObserversSafeCompletableSubscriber_initWithRxCompletableSubscriber_(create_RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(error));
  [safe onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [error get]), [[error get] isKindOfClass:[RxExceptionsTestException class]]);
  OrgJunitAssert_assertTrueWithBoolean_([safe isUnsubscribed]);
}

- (void)unsubscribeComposes {
  RxObserversSafeCompletableSubscriber *safe = create_RxObserversSafeCompletableSubscriber_initWithRxCompletableSubscriber_(create_RxObserversCompletableSubscriberTest_$2_init());
  id<RxSubscription> empty = RxSubscriptionsSubscriptions_empty();
  [safe onSubscribeWithRxSubscription:empty];
  OrgJunitAssert_assertFalseWithBoolean_([((id<RxSubscription>) nil_chk(empty)) isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_([safe isUnsubscribed]);
  [safe unsubscribe];
  OrgJunitAssert_assertTrueWithBoolean_([empty isUnsubscribed]);
  OrgJunitAssert_assertTrueWithBoolean_([safe isUnsubscribed]);
}

- (void)childOnErrorThrows {
  RxObserversSafeCompletableSubscriber *safe = create_RxObserversSafeCompletableSubscriber_initWithRxCompletableSubscriber_(create_RxObserversCompletableSubscriberTest_$3_init());
  [safe onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
  @try {
    [safe onErrorWithNSException:create_JavaIoIOException_init()];
    OrgJunitAssert_failWithNSString_(@"Didn't throw a fatal exception");
  }
  @catch (RxExceptionsOnErrorFailedException *ex) {
    RxExceptionsCompositeException *ce = (RxExceptionsCompositeException *) cast_chk([((RxExceptionsOnErrorFailedException *) nil_chk(ex)) getCause], [RxExceptionsCompositeException class]);
    id<JavaUtilList> list = [((RxExceptionsCompositeException *) nil_chk(ce)) getExceptions];
    OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((id<JavaUtilList>) nil_chk(list)) size]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:0]), [[list getWithInt:0] isKindOfClass:[JavaIoIOException class]]);
    OrgJunitAssert_assertTrueWithNSString_withBoolean_(JreStrcat("@", [list getWithInt:1]), [[list getWithInt:1] isKindOfClass:[RxExceptionsTestException class]]);
  }
}

- (void)preventsCompleteError {
  IOSBooleanArray *calls = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false, false } count:2];
  RxObserversSafeCompletableSubscriber *safe = create_RxObserversSafeCompletableSubscriber_initWithRxCompletableSubscriber_(create_RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(calls));
  [safe onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
  [safe onCompleted];
  [safe onErrorWithNSException:create_RxExceptionsTestException_init()];
  OrgJunitAssert_assertTrueWithBoolean_([safe isUnsubscribed]);
  OrgJunitAssert_assertFalseWithBoolean_(IOSBooleanArray_Get(calls, 0));
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(calls, 1));
}

- (void)preventsErrorComplete {
  IOSBooleanArray *calls = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ false, false } count:2];
  RxObserversSafeCompletableSubscriber *safe = create_RxObserversSafeCompletableSubscriber_initWithRxCompletableSubscriber_(create_RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(calls));
  [safe onSubscribeWithRxSubscription:RxSubscriptionsSubscriptions_empty()];
  [safe onErrorWithNSException:create_RxExceptionsTestException_init()];
  [safe onCompleted];
  OrgJunitAssert_assertTrueWithBoolean_([safe isUnsubscribed]);
  OrgJunitAssert_assertTrueWithBoolean_(IOSBooleanArray_Get(calls, 0));
  OrgJunitAssert_assertFalseWithBoolean_(IOSBooleanArray_Get(calls, 1));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversCompletableSubscriberTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(childOnSubscribeThrows);
  methods[1].selector = @selector(unsubscribeComposes);
  methods[2].selector = @selector(childOnErrorThrows);
  methods[3].selector = @selector(preventsCompleteError);
  methods[4].selector = @selector(preventsErrorComplete);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObserversCompletableSubscriberTest__Annotations$0, (void *)&RxObserversCompletableSubscriberTest__Annotations$1, (void *)&RxObserversCompletableSubscriberTest__Annotations$2, (void *)&RxObserversCompletableSubscriberTest__Annotations$3, (void *)&RxObserversCompletableSubscriberTest__Annotations$4 };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest = { "CompletableSubscriberTest", "rx.observers", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxObserversCompletableSubscriberTest;
}

@end

void RxObserversCompletableSubscriberTest_init(RxObserversCompletableSubscriberTest *self) {
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest *new_RxObserversCompletableSubscriberTest_init() {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest, init)
}

RxObserversCompletableSubscriberTest *create_RxObserversCompletableSubscriberTest_init() {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest, init)
}

IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObserversCompletableSubscriberTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversCompletableSubscriberTest)

@implementation RxObserversCompletableSubscriberTest_$1

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  @throw create_RxExceptionsTestException_init();
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$error_)) setWithId:e];
}

- (void)onCompleted {
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$error_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObserversCompletableSubscriberTest;", "childOnSubscribeThrows" };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest_$1 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, -1, -1 };
  return &_RxObserversCompletableSubscriberTest_$1;
}

@end

void RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObserversCompletableSubscriberTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$error_, capture$0);
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest_$1 *new_RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObserversCompletableSubscriberTest_$1 *create_RxObserversCompletableSubscriberTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObserversCompletableSubscriberTest_$2

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversCompletableSubscriberTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxObserversCompletableSubscriberTest;", "unsubscribeComposes" };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest_$2 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxObserversCompletableSubscriberTest_$2;
}

@end

void RxObserversCompletableSubscriberTest_$2_init(RxObserversCompletableSubscriberTest_$2 *self) {
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest_$2 *new_RxObserversCompletableSubscriberTest_$2_init() {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest_$2, init)
}

RxObserversCompletableSubscriberTest_$2 *create_RxObserversCompletableSubscriberTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest_$2, init)
}

@implementation RxObserversCompletableSubscriberTest_$3

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  @throw create_RxExceptionsTestException_init();
}

- (void)onCompleted {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversCompletableSubscriberTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxObserversCompletableSubscriberTest;", "childOnErrorThrows" };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest_$3 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, 5, -1, -1 };
  return &_RxObserversCompletableSubscriberTest_$3;
}

@end

void RxObserversCompletableSubscriberTest_$3_init(RxObserversCompletableSubscriberTest_$3 *self) {
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest_$3 *new_RxObserversCompletableSubscriberTest_$3_init() {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest_$3, init)
}

RxObserversCompletableSubscriberTest_$3 *create_RxObserversCompletableSubscriberTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest_$3, init)
}

@implementation RxObserversCompletableSubscriberTest_$4

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  *IOSBooleanArray_GetRef(nil_chk(val$calls_), 0) = true;
}

- (void)onCompleted {
  *IOSBooleanArray_GetRef(nil_chk(val$calls_), 1) = true;
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "[Z", "LRxObserversCompletableSubscriberTest;", "preventsCompleteError" };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest_$4 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, -1, -1 };
  return &_RxObserversCompletableSubscriberTest_$4;
}

@end

void RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(RxObserversCompletableSubscriberTest_$4 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest_$4 *new_RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest_$4, initWithBooleanArray_, capture$0)
}

RxObserversCompletableSubscriberTest_$4 *create_RxObserversCompletableSubscriberTest_$4_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest_$4, initWithBooleanArray_, capture$0)
}

@implementation RxObserversCompletableSubscriberTest_$5

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
}

- (void)onErrorWithNSException:(NSException *)e {
  *IOSBooleanArray_GetRef(nil_chk(val$calls_), 0) = true;
}

- (void)onCompleted {
  *IOSBooleanArray_GetRef(nil_chk(val$calls_), 1) = true;
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0 {
  RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calls_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSubscribeWithRxSubscription:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onCompleted);
  methods[3].selector = @selector(initWithBooleanArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calls_", "[Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "[Z", "LRxObserversCompletableSubscriberTest;", "preventsErrorComplete" };
  static const J2ObjcClassInfo _RxObserversCompletableSubscriberTest_$5 = { "", "rx.observers", ptrTable, methods, fields, 7, 0x8008, 4, 1, 5, -1, 6, -1, -1 };
  return &_RxObserversCompletableSubscriberTest_$5;
}

@end

void RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(RxObserversCompletableSubscriberTest_$5 *self, IOSBooleanArray *capture$0) {
  JreStrongAssign(&self->val$calls_, capture$0);
  NSObject_init(self);
}

RxObserversCompletableSubscriberTest_$5 *new_RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObserversCompletableSubscriberTest_$5, initWithBooleanArray_, capture$0)
}

RxObserversCompletableSubscriberTest_$5 *create_RxObserversCompletableSubscriberTest_$5_initWithBooleanArray_(IOSBooleanArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObserversCompletableSubscriberTest_$5, initWithBooleanArray_, capture$0)
}
