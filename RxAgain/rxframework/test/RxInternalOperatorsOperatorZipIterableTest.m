//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorZipIterableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc2.h"
#include "RxFunctionsFunc3.h"
#include "RxInternalOperatorsOperatorZipIterableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/function/Consumer.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$11();

@interface RxInternalOperatorsOperatorZipIterableTest_$4 : NSObject < RxFunctionsFunc2 >

- (NSString *)callWithId:(NSString *)t1
                  withId:(NSString *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$4_init(RxInternalOperatorsOperatorZipIterableTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$4 *new_RxInternalOperatorsOperatorZipIterableTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$4 *create_RxInternalOperatorsOperatorZipIterableTest_$4_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$1 : NSObject < RxFunctionsFunc2 >

- (NSString *)callWithId:(id)t1
                  withId:(id)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$1_init(RxInternalOperatorsOperatorZipIterableTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$1_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$2 : NSObject < RxFunctionsFunc3 >

- (NSString *)callWithId:(id)t1
                  withId:(id)t2
                  withId:(id)t3;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$2_init(RxInternalOperatorsOperatorZipIterableTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$2 *new_RxInternalOperatorsOperatorZipIterableTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$2 *create_RxInternalOperatorsOperatorZipIterableTest_$2_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$5 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$5_init(RxInternalOperatorsOperatorZipIterableTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$5 *new_RxInternalOperatorsOperatorZipIterableTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$5 *create_RxInternalOperatorsOperatorZipIterableTest_$5_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$6 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$6_init(RxInternalOperatorsOperatorZipIterableTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$6 *new_RxInternalOperatorsOperatorZipIterableTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$6 *create_RxInternalOperatorsOperatorZipIterableTest_$6_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$6_$1 : NSObject < JavaUtilIterator > {
 @public
  jint count_;
}

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$6_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$6_$1_init(RxInternalOperatorsOperatorZipIterableTest_$6_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$6_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$6_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$6_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$6_$1_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$7 : NSObject < JavaLangIterable >

- (id<JavaUtilIterator>)iterator;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$7_init(RxInternalOperatorsOperatorZipIterableTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$7 *new_RxInternalOperatorsOperatorZipIterableTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$7 *create_RxInternalOperatorsOperatorZipIterableTest_$7_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$7_$1 : NSObject < JavaUtilIterator >

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$7_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$7_$1_init(RxInternalOperatorsOperatorZipIterableTest_$7_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$7_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$7_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$7_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$7_$1_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$3 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$3_init(RxInternalOperatorsOperatorZipIterableTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$3 *new_RxInternalOperatorsOperatorZipIterableTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$3 *create_RxInternalOperatorsOperatorZipIterableTest_$3_init();

@interface RxInternalOperatorsOperatorZipIterableTest_$8 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)v1
                         withId:(JavaLangInteger *)v2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZipIterableTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOperatorZipIterableTest_$8_init(RxInternalOperatorsOperatorZipIterableTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$8 *new_RxInternalOperatorsOperatorZipIterableTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorZipIterableTest_$8 *create_RxInternalOperatorsOperatorZipIterableTest_$8_init();

@implementation RxInternalOperatorsOperatorZipIterableTest

- (void)setUp {
  JreStrongAssignAndConsume(&concat2Strings_, new_RxInternalOperatorsOperatorZipIterableTest_$4_init());
  JreStrongAssign(&s1_, RxSubjectsPublishSubject_create());
  JreStrongAssign(&s2_, RxSubjectsPublishSubject_create());
  JreStrongAssign(&zipped_, RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(s1_, s2_, concat2Strings_));
  JreStrongAssign(&observer_, OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_()));
  JreStrongAssign(&inOrder_, OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ observer_ } count:1 type:NSObject_class_()]));
  [((RxObservable *) nil_chk(zipped_)) subscribeWithRxObserver:observer_];
}

- (void)testZipIterableSameSize {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2", @"3" } count:3 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onNextWithId:@"three-"];
  [r1 onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onNextWithId:@"one-1"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onNextWithId:@"two-2"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onNextWithId:@"three-3"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testZipIterableEmptyFirstSize {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2", @"3" } count:3 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testZipIterableEmptySecond {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onNextWithId:@"three-"];
  [r1 onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testZipIterableFirstShorter {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2", @"3" } count:3 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onNextWithId:@"one-1"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onNextWithId:@"two-2"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testZipIterableSecondShorter {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2" } count:2 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onNextWithId:@"three-"];
  [r1 onCompleted];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onNextWithId:@"one-1"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onNextWithId:@"two-2"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testZipIterableFirstThrows {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"1", @"2", @"3" } count:3 type:NSString_class_()]);
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onNextWithId:@"one-1"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onNextWithId:@"two-2"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testZipIterableIteratorThrows {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = create_RxInternalOperatorsOperatorZipIterableTest_$5_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onNextWithId:@"two-"];
  [r1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
}

- (void)testZipIterableHasNextThrows {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = create_RxInternalOperatorsOperatorZipIterableTest_$6_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onNextWithId:@"one-"];
  [r1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onNextWithId:@"one-1"];
  [((id<RxObserver>) nil_chk([io verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testZipIterableNextThrows {
  RxSubjectsPublishSubject *r1 = RxSubjectsPublishSubject_create();
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> io = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  id<JavaLangIterable> r2 = create_RxInternalOperatorsOperatorZipIterableTest_$7_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(r1)) zipWithWithJavaLangIterable:r2 withRxFunctionsFunc2:zipr2_])) subscribeWithRxObserver:o];
  [r1 onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(io)) verifyWithId:o])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSString_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testTake2 {
  RxObservable *o = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  id<JavaLangIterable> it = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"a", @"b", @"c", @"d", @"e" } count:5 type:NSString_class_()]);
  RxInternalOperatorsOperatorZipIterableTest_SquareStr *squareStr = create_RxInternalOperatorsOperatorZipIterableTest_SquareStr_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) mapWithRxFunctionsFunc1:squareStr])) zipWithWithJavaLangIterable:it withRxFunctionsFunc2:concat2Strings_])) takeWithInt:2])) subscribeWithRxFunctionsAction1:printer_];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(squareStr->counter_)) get]);
}

- (void)testZipIterableWithDelay {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2)))) zipWithWithJavaLangIterable:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()]) withRxFunctionsFunc2:create_RxInternalOperatorsOperatorZipIterableTest_$8_init()])) delayWithLong:500 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS) withRxScheduler:scheduler];
  RxObserversTestSubscriber *subscriber = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(o)) subscribeWithRxSubscriber:subscriber];
  [scheduler advanceTimeByWithLong:1000 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  [subscriber assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber assertNoErrors];
  [subscriber assertCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(concat2Strings_);
  RELEASE_(s1_);
  RELEASE_(s2_);
  RELEASE_(zipped_);
  RELEASE_(observer_);
  RELEASE_(inOrder_);
  RELEASE_(zipr2_);
  RELEASE_(zipr3_);
  RELEASE_(printer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setUp);
  methods[1].selector = @selector(testZipIterableSameSize);
  methods[2].selector = @selector(testZipIterableEmptyFirstSize);
  methods[3].selector = @selector(testZipIterableEmptySecond);
  methods[4].selector = @selector(testZipIterableFirstShorter);
  methods[5].selector = @selector(testZipIterableSecondShorter);
  methods[6].selector = @selector(testZipIterableFirstThrows);
  methods[7].selector = @selector(testZipIterableIteratorThrows);
  methods[8].selector = @selector(testZipIterableHasNextThrows);
  methods[9].selector = @selector(testZipIterableNextThrows);
  methods[10].selector = @selector(testTake2);
  methods[11].selector = @selector(testZipIterableWithDelay);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "concat2Strings_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "s1_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "s2_", "LRxSubjectsPublishSubject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "zipped_", "LRxObservable;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 15, -1 },
    { "inOrder_", "LOrgMockitoInOrder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "zipr2_", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "zipr3_", "LRxFunctionsFunc3;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
    { "printer_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x0, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$0, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$1, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$2, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$3, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$4, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$5, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$6, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$7, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$8, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$9, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$10, (void *)&RxInternalOperatorsOperatorZipIterableTest__Annotations$11, "Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;>;", "Lrx/subjects/PublishSubject<Ljava/lang/String;>;", "Lrx/Observable<Ljava/lang/String;>;", "Lrx/Observer<Ljava/lang/String;>;", "Lrx/functions/Func2<Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;>;", "Lrx/functions/Func3<Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;>;", "Lrx/functions/Action1<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorZipIterableTest_SquareStr;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest = { "OperatorZipIterableTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 13, 9, -1, 19, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_init(RxInternalOperatorsOperatorZipIterableTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->zipr2_, new_RxInternalOperatorsOperatorZipIterableTest_$1_init());
  JreStrongAssignAndConsume(&self->zipr3_, new_RxInternalOperatorsOperatorZipIterableTest_$2_init());
  JreStrongAssignAndConsume(&self->printer_, new_RxInternalOperatorsOperatorZipIterableTest_$3_init());
}

RxInternalOperatorsOperatorZipIterableTest *new_RxInternalOperatorsOperatorZipIterableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest, init)
}

RxInternalOperatorsOperatorZipIterableTest *create_RxInternalOperatorsOperatorZipIterableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorZipIterableTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorZipIterableTest)

@implementation RxInternalOperatorsOperatorZipIterableTest_SquareStr

- (NSString *)callWithId:(JavaLangInteger *)t1 {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(counter_)) incrementAndGet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@CI", @"Omg I'm calculating so hard: ", t1, '*', t1, '=', ([((JavaLangInteger *) nil_chk(t1)) intValue] * [t1 intValue]))];
  return JreStrcat("CI", ' ', ([t1 intValue] * [t1 intValue]));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_SquareStr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorZipIterableTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_SquareStr = { "SquareStr", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 2, 1, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_SquareStr;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_SquareStr_init(RxInternalOperatorsOperatorZipIterableTest_SquareStr *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->counter_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

RxInternalOperatorsOperatorZipIterableTest_SquareStr *new_RxInternalOperatorsOperatorZipIterableTest_SquareStr_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_SquareStr, init)
}

RxInternalOperatorsOperatorZipIterableTest_SquareStr *create_RxInternalOperatorsOperatorZipIterableTest_SquareStr_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_SquareStr, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorZipIterableTest_SquareStr)

@implementation RxInternalOperatorsOperatorZipIterableTest_$4

- (NSString *)callWithId:(NSString *)t1
                  withId:(NSString *)t2 {
  return JreStrcat("$C$", t1, '-', t2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;LNSString;", "LRxInternalOperatorsOperatorZipIterableTest;", "setUp", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$4;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$4_init(RxInternalOperatorsOperatorZipIterableTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$4 *new_RxInternalOperatorsOperatorZipIterableTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$4, init)
}

RxInternalOperatorsOperatorZipIterableTest_$4 *create_RxInternalOperatorsOperatorZipIterableTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$4, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$1

- (NSString *)callWithId:(id)t1
                  withId:(id)t2 {
  return JreStrcat("@@", t1, t2);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;LNSObject;", "LRxInternalOperatorsOperatorZipIterableTest;", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$1;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$1_init(RxInternalOperatorsOperatorZipIterableTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$1, init)
}

RxInternalOperatorsOperatorZipIterableTest_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$1, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$2

- (NSString *)callWithId:(id)t1
                  withId:(id)t2
                  withId:(id)t3 {
  return JreStrcat("@@@", t1, t2, t3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;LNSObject;LNSObject;", "LRxInternalOperatorsOperatorZipIterableTest;", "Ljava/lang/Object;Lrx/functions/Func3<Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$2;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$2_init(RxInternalOperatorsOperatorZipIterableTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$2 *new_RxInternalOperatorsOperatorZipIterableTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$2, init)
}

RxInternalOperatorsOperatorZipIterableTest_$2 *create_RxInternalOperatorsOperatorZipIterableTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$2, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$5

- (id<JavaUtilIterator>)iterator {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorZipIterableTest;", "testZipIterableIteratorThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$5;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$5_init(RxInternalOperatorsOperatorZipIterableTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$5 *new_RxInternalOperatorsOperatorZipIterableTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$5, init)
}

RxInternalOperatorsOperatorZipIterableTest_$5 *create_RxInternalOperatorsOperatorZipIterableTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$5, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$6

- (id<JavaUtilIterator>)iterator {
  return create_RxInternalOperatorsOperatorZipIterableTest_$6_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorZipIterableTest;", "testZipIterableHasNextThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$6;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$6_init(RxInternalOperatorsOperatorZipIterableTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$6 *new_RxInternalOperatorsOperatorZipIterableTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$6, init)
}

RxInternalOperatorsOperatorZipIterableTest_$6 *create_RxInternalOperatorsOperatorZipIterableTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$6, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$6_$1

- (jboolean)hasNext {
  if (count_ == 0) {
    return true;
  }
  @throw create_RxExceptionsTestException_init();
}

- (NSString *)next {
  count_++;
  return @"1";
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not supported yet.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$6_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorZipIterableTest_$6;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$6_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$6_$1;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$6_$1_init(RxInternalOperatorsOperatorZipIterableTest_$6_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$6_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$6_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$6_$1, init)
}

RxInternalOperatorsOperatorZipIterableTest_$6_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$6_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$6_$1, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$7

- (id<JavaUtilIterator>)iterator {
  return create_RxInternalOperatorsOperatorZipIterableTest_$7_$1_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/String;>;", "LRxInternalOperatorsOperatorZipIterableTest;", "testZipIterableNextThrows", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, 2, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$7;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$7_init(RxInternalOperatorsOperatorZipIterableTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$7 *new_RxInternalOperatorsOperatorZipIterableTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$7, init)
}

RxInternalOperatorsOperatorZipIterableTest_$7 *create_RxInternalOperatorsOperatorZipIterableTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$7, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$7_$1

- (jboolean)hasNext {
  return true;
}

- (NSString *)next {
  @throw create_RxExceptionsTestException_init();
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Not supported yet.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$7_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorZipIterableTest_$7;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$7_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$7_$1;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$7_$1_init(RxInternalOperatorsOperatorZipIterableTest_$7_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$7_$1 *new_RxInternalOperatorsOperatorZipIterableTest_$7_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$7_$1, init)
}

RxInternalOperatorsOperatorZipIterableTest_$7_$1 *create_RxInternalOperatorsOperatorZipIterableTest_$7_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$7_$1, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$3

- (void)callWithId:(NSString *)t1 {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:t1];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorZipIterableTest;", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$3;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$3_init(RxInternalOperatorsOperatorZipIterableTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$3 *new_RxInternalOperatorsOperatorZipIterableTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$3, init)
}

RxInternalOperatorsOperatorZipIterableTest_$3 *create_RxInternalOperatorsOperatorZipIterableTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$3, init)
}

@implementation RxInternalOperatorsOperatorZipIterableTest_$8

- (JavaLangInteger *)callWithId:(JavaLangInteger *)v1
                         withId:(JavaLangInteger *)v2 {
  return v1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorZipIterableTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorZipIterableTest;", "testZipIterableWithDelay", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorZipIterableTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorZipIterableTest_$8;
}

@end

void RxInternalOperatorsOperatorZipIterableTest_$8_init(RxInternalOperatorsOperatorZipIterableTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorZipIterableTest_$8 *new_RxInternalOperatorsOperatorZipIterableTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorZipIterableTest_$8, init)
}

RxInternalOperatorsOperatorZipIterableTest_$8 *create_RxInternalOperatorsOperatorZipIterableTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorZipIterableTest_$8, init)
}
