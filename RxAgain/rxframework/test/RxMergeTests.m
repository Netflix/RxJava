//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/MergeTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxCovarianceTest.h"
#include "RxMergeTests.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxSubscriber.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxMergeTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxMergeTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxMergeTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxMergeTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxMergeTests__Annotations$4();

@interface RxMergeTests_$1 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxMergeTests_$1)

__attribute__((unused)) static void RxMergeTests_$1_init(RxMergeTests_$1 *self);

__attribute__((unused)) static RxMergeTests_$1 *new_RxMergeTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxMergeTests_$1 *create_RxMergeTests_$1_init();

@implementation RxMergeTests

- (void)testCovarianceOfMerge {
  RxObservable *horrors = RxObservable_justWithId_(create_RxCovarianceTest_HorrorMovie_init());
  RxObservable *metaHorrors = RxObservable_justWithId_(horrors);
  RxObservable_mergeWithRxObservable_(metaHorrors);
}

- (void)testMergeCovariance {
  RxObservable *o1 = RxObservable_justWithId_withId_(create_RxCovarianceTest_HorrorMovie_init(), create_RxCovarianceTest_Movie_init());
  RxObservable *o2 = RxObservable_justWithId_withId_(create_RxCovarianceTest_Media_init(), create_RxCovarianceTest_HorrorMovie_init());
  RxObservable *os = RxObservable_justWithId_withId_(o1, o2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_(os))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithLong_withLong_(4, [((id<JavaUtilList>) nil_chk(values)) size]);
}

- (void)testMergeCovariance2 {
  RxObservable *o1 = RxObservable_justWithId_withId_withId_(create_RxCovarianceTest_HorrorMovie_init(), create_RxCovarianceTest_Movie_init(), create_RxCovarianceTest_Media_init());
  RxObservable *o2 = RxObservable_justWithId_withId_(create_RxCovarianceTest_Media_init(), create_RxCovarianceTest_HorrorMovie_init());
  RxObservable *os = RxObservable_justWithId_withId_(o1, o2);
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_(os))) toList])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithLong_withLong_(5, [((id<JavaUtilList>) nil_chk(values)) size]);
}

- (void)testMergeCovariance3 {
  RxObservable *o1 = RxObservable_justWithId_withId_(create_RxCovarianceTest_HorrorMovie_init(), create_RxCovarianceTest_Movie_init());
  RxObservable *o2 = RxObservable_justWithId_withId_(create_RxCovarianceTest_Media_init(), create_RxCovarianceTest_HorrorMovie_init());
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) toList])) toBlocking])) single];
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk(values)) getWithInt:0] isKindOfClass:[RxCovarianceTest_HorrorMovie class]]);
  OrgJunitAssert_assertTrueWithBoolean_([[values getWithInt:1] isKindOfClass:[RxCovarianceTest_Movie class]]);
  OrgJunitAssert_assertNotNullWithId_([values getWithInt:2]);
  OrgJunitAssert_assertTrueWithBoolean_([[values getWithInt:3] isKindOfClass:[RxCovarianceTest_HorrorMovie class]]);
}

- (void)testMergeCovariance4 {
  RxObservable *o1 = RxObservable_createWithRxObservable_OnSubscribe_(create_RxMergeTests_$1_init());
  RxObservable *o2 = RxObservable_justWithId_withId_(create_RxCovarianceTest_Media_init(), create_RxCovarianceTest_HorrorMovie_init());
  id<JavaUtilList> values = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) toList])) toBlocking])) single];
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk(values)) getWithInt:0] isKindOfClass:[RxCovarianceTest_HorrorMovie class]]);
  OrgJunitAssert_assertTrueWithBoolean_([[values getWithInt:1] isKindOfClass:[RxCovarianceTest_Movie class]]);
  OrgJunitAssert_assertNotNullWithId_([values getWithInt:2]);
  OrgJunitAssert_assertTrueWithBoolean_([[values getWithInt:3] isKindOfClass:[RxCovarianceTest_HorrorMovie class]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxMergeTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testCovarianceOfMerge);
  methods[1].selector = @selector(testMergeCovariance);
  methods[2].selector = @selector(testMergeCovariance2);
  methods[3].selector = @selector(testMergeCovariance3);
  methods[4].selector = @selector(testMergeCovariance4);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxMergeTests__Annotations$0, (void *)&RxMergeTests__Annotations$1, (void *)&RxMergeTests__Annotations$2, (void *)&RxMergeTests__Annotations$3, (void *)&RxMergeTests__Annotations$4 };
  static const J2ObjcClassInfo _RxMergeTests = { "MergeTests", "rx", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_RxMergeTests;
}

@end

void RxMergeTests_init(RxMergeTests *self) {
  NSObject_init(self);
}

RxMergeTests *new_RxMergeTests_init() {
  J2OBJC_NEW_IMPL(RxMergeTests, init)
}

RxMergeTests *create_RxMergeTests_init() {
  J2OBJC_CREATE_IMPL(RxMergeTests, init)
}

IOSObjectArray *RxMergeTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxMergeTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxMergeTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxMergeTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxMergeTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxMergeTests)

@implementation RxMergeTests_$1

- (void)callWithId:(RxSubscriber *)o {
  [((RxSubscriber *) nil_chk(o)) onNextWithId:create_RxCovarianceTest_HorrorMovie_init()];
  [o onNextWithId:create_RxCovarianceTest_Movie_init()];
  [o onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxMergeTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Lrx/CovarianceTest$Movie;>;)V", "LRxMergeTests;", "testMergeCovariance4", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Lrx/CovarianceTest$Movie;>;" };
  static const J2ObjcClassInfo _RxMergeTests_$1 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxMergeTests_$1;
}

@end

void RxMergeTests_$1_init(RxMergeTests_$1 *self) {
  NSObject_init(self);
}

RxMergeTests_$1 *new_RxMergeTests_$1_init() {
  J2OBJC_NEW_IMPL(RxMergeTests_$1, init)
}

RxMergeTests_$1 *create_RxMergeTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxMergeTests_$1, init)
}
