//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/BackpressureTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxBackpressureTests.h"
#include "RxExceptionsMissingBackpressureException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalUtilRxRingBuffer.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "RxTestTestObstructionDetection.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Ignore.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/rules/TestName.h"

@interface RxBackpressureTests ()

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter;

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter
                                    withJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)threadsSeen;

+ (RxObservable *)firehoseWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter;

@end

__attribute__((unused)) static RxObservable *RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter);

__attribute__((unused)) static RxObservable *RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentConcurrentLinkedQueue *threadsSeen);

__attribute__((unused)) static RxObservable *RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter);

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxBackpressureTests__Annotations$21();

@interface RxBackpressureTests_$2 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$2)

__attribute__((unused)) static void RxBackpressureTests_$2_init(RxBackpressureTests_$2 *self);

__attribute__((unused)) static RxBackpressureTests_$2 *new_RxBackpressureTests_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$2 *create_RxBackpressureTests_$2_init();

@interface RxBackpressureTests_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$3)

__attribute__((unused)) static void RxBackpressureTests_$3_init(RxBackpressureTests_$3 *self);

__attribute__((unused)) static RxBackpressureTests_$3 *new_RxBackpressureTests_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$3 *create_RxBackpressureTests_$3_init();

@interface RxBackpressureTests_$4 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$4)

__attribute__((unused)) static void RxBackpressureTests_$4_init(RxBackpressureTests_$4 *self);

__attribute__((unused)) static RxBackpressureTests_$4 *new_RxBackpressureTests_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$4 *create_RxBackpressureTests_$4_init();

@interface RxBackpressureTests_$5 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$5)

__attribute__((unused)) static void RxBackpressureTests_$5_init(RxBackpressureTests_$5 *self);

__attribute__((unused)) static RxBackpressureTests_$5 *new_RxBackpressureTests_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$5 *create_RxBackpressureTests_$5_init();

@interface RxBackpressureTests_$6 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$6)

__attribute__((unused)) static void RxBackpressureTests_$6_init(RxBackpressureTests_$6 *self);

__attribute__((unused)) static RxBackpressureTests_$6 *new_RxBackpressureTests_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$6 *create_RxBackpressureTests_$6_init();

@interface RxBackpressureTests_$7 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$7)

__attribute__((unused)) static void RxBackpressureTests_$7_init(RxBackpressureTests_$7 *self);

__attribute__((unused)) static RxBackpressureTests_$7 *new_RxBackpressureTests_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$7 *create_RxBackpressureTests_$7_init();

@interface RxBackpressureTests_$8 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$totalReceived_;
  JavaUtilConcurrentAtomicAtomicInteger *val$received_;
  JavaUtilConcurrentAtomicAtomicInteger *val$batches_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$8)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$8, val$totalReceived_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$8, val$received_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$8, val$batches_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

__attribute__((unused)) static RxBackpressureTests_$8 *new_RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$8 *create_RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2);

@interface RxBackpressureTests_$9 : RxSubscriber {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicInteger *val$totalReceived_;
  JavaUtilConcurrentAtomicAtomicInteger *val$received_;
  JavaUtilConcurrentAtomicAtomicInteger *val$batches_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$9)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$9, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$9, val$totalReceived_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$9, val$received_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$9, val$batches_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$9 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

__attribute__((unused)) static RxBackpressureTests_$9 *new_RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$9 *create_RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3);

@interface RxBackpressureTests_$10 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$dropCount_;
}

- (void)callWithId:(JavaLangInteger *)i;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$10)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$10, val$dropCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxBackpressureTests_$10 *new_RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$10 *create_RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxBackpressureTests_$11 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$passCount_;
}

- (void)callWithId:(JavaLangInteger *)integer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$11)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$11, val$passCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxBackpressureTests_$11 *new_RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$11 *create_RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxBackpressureTests_$12 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$dropCount_;
}

- (void)callWithId:(JavaLangInteger *)i;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$12)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$12, val$dropCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxBackpressureTests_$12 *new_RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$12 *create_RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxBackpressureTests_$13 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$13)

__attribute__((unused)) static void RxBackpressureTests_$13_init(RxBackpressureTests_$13 *self);

__attribute__((unused)) static RxBackpressureTests_$13 *new_RxBackpressureTests_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$13 *create_RxBackpressureTests_$13_init();

@interface RxBackpressureTests_$14 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
  JavaUtilConcurrentConcurrentLinkedQueue *val$threadsSeen_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$14)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$14, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$14, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxBackpressureTests_$14, val$threadsSeen_, JavaUtilConcurrentConcurrentLinkedQueue *)

__attribute__((unused)) static void RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(RxBackpressureTests_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1);

__attribute__((unused)) static RxBackpressureTests_$14 *new_RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$14 *create_RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1);

@interface RxBackpressureTests_$15 : NSObject < RxObservable_OnSubscribe > {
 @public
  jint i_;
  JavaUtilConcurrentAtomicAtomicInteger *val$counter_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$15)

J2OBJC_FIELD_SETTER(RxBackpressureTests_$15, val$counter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxBackpressureTests_$15 *new_RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$15 *create_RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxBackpressureTests_$1 : NSObject < RxFunctionsFunc1 > {
 @public
  volatile_jint sink_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxBackpressureTests_$1)

__attribute__((unused)) static void RxBackpressureTests_$1_init(RxBackpressureTests_$1 *self);

__attribute__((unused)) static RxBackpressureTests_$1 *new_RxBackpressureTests_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxBackpressureTests_$1 *create_RxBackpressureTests_$1_init();

J2OBJC_INITIALIZED_DEFN(RxBackpressureTests)

id<RxFunctionsFunc1> RxBackpressureTests_SLOW_PASS_THRU;

@implementation RxBackpressureTests

- (void)doAfterTest {
  RxTestTestObstructionDetection_checkObstruction();
}

- (void)testObserveOn {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testObserveOn => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4);
}

- (void)testObserveOnWithSlowConsumer {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 0.2));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxBackpressureTests_$2_init()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testObserveOnWithSlowConsumer => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2);
}

- (void)testMergeSync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4.1));
  JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *merged = RxObservable_mergeWithRxObservable_withRxObservable_(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1), RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(merged)) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"Expected: ", NUM, @" got: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I", @"testMergeSync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
  OrgJunitAssert_assertTrueWithBoolean_([c2 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
}

- (void)testMergeAsync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4.1));
  JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *merged = RxObservable_mergeWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()], [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(merged)) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testMergeAsync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
  OrgJunitAssert_assertTrueWithBoolean_([c2 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
}

- (void)testMergeAsyncThenObserveOnLoop {
  for (jint i = 0; i < 500; i++) {
    @autoreleasepool {
      if (i % 10 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"testMergeAsyncThenObserveOnLoop >> ", i)];
      }
      jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4.1));
      JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      RxObservable *merged = RxObservable_mergeWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()], [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()]);
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(merged)) observeOnWithRxScheduler:RxSchedulersSchedulers_io()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testMergeAsyncThenObserveOn => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
    }
  }
}

- (void)testMergeAsyncThenObserveOn {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4.1));
  JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *merged = RxObservable_mergeWithRxObservable_withRxObservable_([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()], [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(merged)) observeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testMergeAsyncThenObserveOn => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 7);
  OrgJunitAssert_assertTrueWithBoolean_([c2 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 7);
}

- (void)testFlatMapSync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) flatMapWithRxFunctionsFunc1:create_RxBackpressureTests_$3_init()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testFlatMapSync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

- (void)testFlatMapAsync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) flatMapWithRxFunctionsFunc1:create_RxBackpressureTests_$4_init()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testFlatMapAsync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get], @" Size: ", JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE))];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c get] <= JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2);
}

- (void)testZipSync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4.1));
  JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *zipped = RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1), RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2), create_RxBackpressureTests_$5_init());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(zipped)) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testZipSync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
  OrgJunitAssert_assertTrueWithBoolean_([c2 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 5);
}

- (void)testZipAsync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
  JavaUtilConcurrentAtomicAtomicInteger *c1 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *c2 = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxObservable *zipped = RxObservable_zipWithRxObservable_withRxObservable_withRxFunctionsFunc2_([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c1))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()], [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()], create_RxBackpressureTests_$6_init());
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(zipped)) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testZipAsync => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c1 get], @" / ", [c2 get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c1 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 3);
  OrgJunitAssert_assertTrueWithBoolean_([c2 get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 3);
}

- (void)testSubscribeOnScheduling {
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
      JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      JavaUtilConcurrentConcurrentLinkedQueue *threads = create_JavaUtilConcurrentConcurrentLinkedQueue_init();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(c, threads))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testSubscribeOnScheduling => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
      OrgJunitAssert_assertTrueWithBoolean_([c get] < JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 4);
      JavaLangThread *first = nil;
      for (JavaLangThread * __strong t in threads) {
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"testSubscribeOnScheduling => thread: ", t)];
        if (first == nil) {
          first = t;
        }
        else {
          if (![first isEqual:t]) {
            OrgJunitAssert_failWithNSString_(@"Expected to see the same thread");
          }
        }
      }
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"testSubscribeOnScheduling => Number of batch requests seen: ", [threads size])];
      OrgJunitAssert_assertTrueWithBoolean_([threads size] > 1);
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"-------------------------------------------------------------------------------------------"];
    }
  }
}

- (void)testTakeFilterSkipChainAsync {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 2.1));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) skipWithInt:10000])) filterWithRxFunctionsFunc1:create_RxBackpressureTests_$7_init()])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  jint expected = 10000 + 1000 + JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 3 + JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) / 2;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testTakeFilterSkipChain => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get], @" Expected: ", expected)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([c get] < expected);
}

- (void)testUserSubscriberUsingRequestSync {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *totalReceived = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *batches = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *received = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) subscribeWithRxSubscriber:create_RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(totalReceived, received, batches)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testUserSubscriberUsingRequestSync => Received: ", [totalReceived get], @"  Emitted: ", [c get], @" Request Batches: ", [batches get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2000, [c get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2000, [totalReceived get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(20, [batches get]);
}

- (void)testUserSubscriberUsingRequestAsync {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *totalReceived = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *received = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *batches = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(c))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:create_RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(latch, totalReceived, received, batches)];
  [latch await];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I", @"testUserSubscriberUsingRequestAsync => Received: ", [totalReceived get], @"  Emitted: ", [c get], @" Request Batches: ", [batches get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2000, [c get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2000, [totalReceived get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(20, [batches get]);
}

- (void)testFirehoseFailsAsExpected {
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(c))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testFirehoseFailsAsExpected => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  OrgJunitAssert_assertTrueWithBoolean_([[((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0] isKindOfClass:[RxExceptionsMissingBackpressureException class]]);
}

- (void)testOnBackpressureDrop {
  jlong t = JavaLangSystem_currentTimeMillis();
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      if (JavaLangSystem_currentTimeMillis() - t > [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toMillisWithLong:9]) {
        break;
      }
      jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 1.1));
      JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(c))) onBackpressureDrop])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
      JavaLangInteger *lastEvent = [onNextEvents getWithInt:NUM - 1];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$@", @"testOnBackpressureDrop => Received: ", [onNextEvents size], @"  Emitted: ", [c get], @" Last value: ", lastEvent)];
      OrgJunitAssert_assertTrueWithBoolean_(NUM - 1 <= [((JavaLangInteger *) nil_chk(lastEvent)) intValue]);
    }
  }
}

- (void)testOnBackpressureDropWithAction {
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      JavaUtilConcurrentAtomicAtomicInteger *emitCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      JavaUtilConcurrentAtomicAtomicInteger *dropCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      JavaUtilConcurrentAtomicAtomicInteger *passCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      jint NUM = JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 3;
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(emitCount))) onBackpressureDropWithRxFunctionsAction1:create_RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(dropCount)])) doOnNextWithRxFunctionsAction1:create_RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(passCount)])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
      JavaLangInteger *lastEvent = [((id<JavaUtilList>) nil_chk(onNextEvents)) getWithInt:NUM - 1];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$I$I$I$I$@", [((OrgJunitRulesTestName *) nil_chk(testName_)) getMethodName], @" => Received: ", [onNextEvents size], @" Passed: ", [passCount get], @" Dropped: ", [dropCount get], @"  Emitted: ", [emitCount get], @" Last value: ", lastEvent)];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [onNextEvents size]);
      OrgJunitAssert_assertTrueWithBoolean_(NUM <= [passCount get]);
      OrgJunitAssert_assertTrueWithBoolean_(NUM - 1 <= [((JavaLangInteger *) nil_chk(lastEvent)) intValue]);
      OrgJunitAssert_assertTrueWithBoolean_(0 < [dropCount get]);
      OrgJunitAssert_assertEqualsWithLong_withLong_([emitCount get], [passCount get] + [dropCount get]);
    }
  }
}

- (void)testOnBackpressureDropSynchronous {
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 1.1));
      JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(c))) onBackpressureDrop])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
      JavaLangInteger *lastEvent = [onNextEvents getWithInt:NUM - 1];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$@", @"testOnBackpressureDrop => Received: ", [onNextEvents size], @"  Emitted: ", [c get], @" Last value: ", lastEvent)];
      OrgJunitAssert_assertTrueWithBoolean_(NUM - 1 <= [((JavaLangInteger *) nil_chk(lastEvent)) intValue]);
    }
  }
}

- (void)testOnBackpressureDropSynchronousWithAction {
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      JavaUtilConcurrentAtomicAtomicInteger *dropCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 1.1));
      JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
      [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(c))) onBackpressureDropWithRxFunctionsAction1:create_RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(dropCount)])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
      [ts awaitTerminalEvent];
      [ts assertNoErrors];
      id<JavaUtilList> onNextEvents = [ts getOnNextEvents];
      OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk(onNextEvents)) size]);
      JavaLangInteger *lastEvent = [onNextEvents getWithInt:NUM - 1];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I$@", @"testOnBackpressureDrop => Received: ", [onNextEvents size], @" Dropped: ", [dropCount get], @"  Emitted: ", [c get], @" Last value: ", lastEvent)];
      OrgJunitAssert_assertTrueWithBoolean_(NUM - 1 <= [((JavaLangInteger *) nil_chk(lastEvent)) intValue]);
      OrgJunitAssert_assertEqualsWithLong_withLong_(0, [dropCount get]);
      OrgJunitAssert_assertEqualsWithLong_withLong_([c get], [onNextEvents size]);
    }
  }
}

- (void)testOnBackpressureBuffer {
  jint NUM = JreFpToInt((JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE) * 1.1));
  JavaUtilConcurrentAtomicAtomicInteger *c = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(c))) takeWhileWithRxFunctionsFunc1:create_RxBackpressureTests_$13_init()])) onBackpressureBuffer])) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:RxBackpressureTests_SLOW_PASS_THRU])) takeWithInt:NUM])) subscribeWithRxSubscriber:ts];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"testOnBackpressureBuffer => Received: ", [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size], @"  Emitted: ", [c get])];
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) size]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(NUM - 1, [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnNextEvents])) getWithInt:NUM - 1])) intValue]);
}

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter {
  return RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(counter);
}

+ (RxObservable *)incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter
                                    withJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)threadsSeen {
  return RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(counter, threadsSeen);
}

+ (RxObservable *)firehoseWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter {
  return RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(counter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(testName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, 14, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 17, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "LRxObservable;", 0xa, 22, 23, -1, 24, -1, -1 },
    { NULL, "LRxObservable;", 0xa, 22, 25, -1, 26, -1, -1 },
    { NULL, "LRxObservable;", 0xa, 27, 23, -1, 24, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(doAfterTest);
  methods[1].selector = @selector(testObserveOn);
  methods[2].selector = @selector(testObserveOnWithSlowConsumer);
  methods[3].selector = @selector(testMergeSync);
  methods[4].selector = @selector(testMergeAsync);
  methods[5].selector = @selector(testMergeAsyncThenObserveOnLoop);
  methods[6].selector = @selector(testMergeAsyncThenObserveOn);
  methods[7].selector = @selector(testFlatMapSync);
  methods[8].selector = @selector(testFlatMapAsync);
  methods[9].selector = @selector(testZipSync);
  methods[10].selector = @selector(testZipAsync);
  methods[11].selector = @selector(testSubscribeOnScheduling);
  methods[12].selector = @selector(testTakeFilterSkipChainAsync);
  methods[13].selector = @selector(testUserSubscriberUsingRequestSync);
  methods[14].selector = @selector(testUserSubscriberUsingRequestAsync);
  methods[15].selector = @selector(testFirehoseFailsAsExpected);
  methods[16].selector = @selector(testOnBackpressureDrop);
  methods[17].selector = @selector(testOnBackpressureDropWithAction);
  methods[18].selector = @selector(testOnBackpressureDropSynchronous);
  methods[19].selector = @selector(testOnBackpressureDropSynchronousWithAction);
  methods[20].selector = @selector(testOnBackpressureBuffer);
  methods[21].selector = @selector(incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[22].selector = @selector(incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentConcurrentLinkedQueue:);
  methods[23].selector = @selector(firehoseWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[24].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testName_", "LOrgJunitRulesTestName;", .constantValue.asLong = 0, 0x1, -1, -1, -1, 28 },
    { "SLOW_PASS_THRU", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x18, -1, 29, 30, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxBackpressureTests__Annotations$0, (void *)&RxBackpressureTests__Annotations$1, (void *)&RxBackpressureTests__Annotations$2, (void *)&RxBackpressureTests__Annotations$3, (void *)&RxBackpressureTests__Annotations$4, (void *)&RxBackpressureTests__Annotations$5, (void *)&RxBackpressureTests__Annotations$6, (void *)&RxBackpressureTests__Annotations$7, (void *)&RxBackpressureTests__Annotations$8, (void *)&RxBackpressureTests__Annotations$9, (void *)&RxBackpressureTests__Annotations$10, (void *)&RxBackpressureTests__Annotations$11, (void *)&RxBackpressureTests__Annotations$12, (void *)&RxBackpressureTests__Annotations$13, "LJavaLangInterruptedException;", (void *)&RxBackpressureTests__Annotations$14, (void *)&RxBackpressureTests__Annotations$15, (void *)&RxBackpressureTests__Annotations$16, (void *)&RxBackpressureTests__Annotations$17, (void *)&RxBackpressureTests__Annotations$18, (void *)&RxBackpressureTests__Annotations$19, (void *)&RxBackpressureTests__Annotations$20, "incrementingIntegers", "LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicInteger;)Lrx/Observable<Ljava/lang/Integer;>;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentConcurrentLinkedQueue;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Thread;>;)Lrx/Observable<Ljava/lang/Integer;>;", "firehose", (void *)&RxBackpressureTests__Annotations$21, &RxBackpressureTests_SLOW_PASS_THRU, "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;", "LRxBackpressureTests_BPTPRoducer;" };
  static const J2ObjcClassInfo _RxBackpressureTests = { "BackpressureTests", "rx", ptrTable, methods, fields, 7, 0x1, 25, 2, -1, 31, -1, -1, -1 };
  return &_RxBackpressureTests;
}

+ (void)initialize {
  if (self == [RxBackpressureTests class]) {
    JreStrongAssignAndConsume(&RxBackpressureTests_SLOW_PASS_THRU, new_RxBackpressureTests_$1_init());
    J2OBJC_SET_INITIALIZED(RxBackpressureTests)
  }
}

@end

RxObservable *RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter) {
  RxBackpressureTests_initialize();
  return RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(counter, nil);
}

RxObservable *RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentConcurrentLinkedQueue *threadsSeen) {
  RxBackpressureTests_initialize();
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(counter, threadsSeen));
}

RxObservable *RxBackpressureTests_firehoseWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *counter) {
  RxBackpressureTests_initialize();
  return RxObservable_createWithRxObservable_OnSubscribe_(create_RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(counter));
}

void RxBackpressureTests_init(RxBackpressureTests *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testName_, new_OrgJunitRulesTestName_init());
}

RxBackpressureTests *new_RxBackpressureTests_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests, init)
}

RxBackpressureTests *create_RxBackpressureTests_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests, init)
}

IOSObjectArray *RxBackpressureTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0), create_OrgJunitIgnore(@"The test is non-deterministic and can't be made deterministic") } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 20000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 2000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxBackpressureTests__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRule() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxBackpressureTests)

@implementation RxBackpressureTests_BPTPRoducer

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)counter
                  withJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)threadsSeen
                       withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested
                                             withRxSubscriber:(RxSubscriber *)s {
  RxBackpressureTests_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(self, counter, threadsSeen, requested, s);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (n == 0) {
    return;
  }
  if (threadsSeen_ != nil) {
    [threadsSeen_ offerWithId:JavaLangThread_currentThread()];
  }
  jlong _c = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) getAndAddWithLong:n];
  if (_c == 0) {
    while (![((RxSubscriber *) nil_chk(s_)) isUnsubscribed]) {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(counter_)) incrementAndGet];
      [s_ onNextWithId:JavaLangInteger_valueOfWithInt_(i_++)];
      if ([requested_ decrementAndGet] == 0) {
        return;
      }
    }
  }
}

- (void)__javaClone:(RxBackpressureTests_BPTPRoducer *)original {
  [super __javaClone:original];
  [s_ release];
}

- (void)dealloc {
  RELEASE_(counter_);
  RELEASE_(threadsSeen_);
  RELEASE_(requested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentConcurrentLinkedQueue:withJavaUtilConcurrentAtomicAtomicLong:withRxSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "threadsSeen_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentConcurrentLinkedQueue;LJavaUtilConcurrentAtomicAtomicLong;LRxSubscriber;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Thread;>;Ljava/util/concurrent/atomic/AtomicLong;Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "request", "J", "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Thread;>;", "Lrx/Subscriber<-Ljava/lang/Integer;>;", "LRxBackpressureTests;" };
  static const J2ObjcClassInfo _RxBackpressureTests_BPTPRoducer = { "BPTPRoducer", "rx", ptrTable, methods, fields, 7, 0x8, 2, 5, 6, -1, -1, -1, -1 };
  return &_RxBackpressureTests_BPTPRoducer;
}

@end

void RxBackpressureTests_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(RxBackpressureTests_BPTPRoducer *self, JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentConcurrentLinkedQueue *threadsSeen, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  NSObject_init(self);
  self->i_ = 0;
  JreStrongAssign(&self->counter_, counter);
  JreStrongAssign(&self->threadsSeen_, threadsSeen);
  JreStrongAssign(&self->requested_, requested);
  self->s_ = s;
}

RxBackpressureTests_BPTPRoducer *new_RxBackpressureTests_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentConcurrentLinkedQueue *threadsSeen, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_BPTPRoducer, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, counter, threadsSeen, requested, s)
}

RxBackpressureTests_BPTPRoducer *create_RxBackpressureTests_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicInteger *counter, JavaUtilConcurrentConcurrentLinkedQueue *threadsSeen, JavaUtilConcurrentAtomicAtomicLong *requested, RxSubscriber *s) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_BPTPRoducer, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_, counter, threadsSeen, requested, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxBackpressureTests_BPTPRoducer)

@implementation RxBackpressureTests_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i {
  @try {
    JavaLangThread_sleepWithLong_(1);
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return i;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxBackpressureTests;", "testObserveOnWithSlowConsumer", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$2 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxBackpressureTests_$2;
}

@end

void RxBackpressureTests_$2_init(RxBackpressureTests_$2 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$2 *new_RxBackpressureTests_$2_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$2, init)
}

RxBackpressureTests_$2 *create_RxBackpressureTests_$2_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$2, init)
}

@implementation RxBackpressureTests_$3

- (RxObservable *)callWithId:(JavaLangInteger *)i {
  return [((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(create_JavaUtilConcurrentAtomicAtomicInteger_init()))) takeWithInt:10];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxBackpressureTests;", "testFlatMapSync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$3 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxBackpressureTests_$3;
}

@end

void RxBackpressureTests_$3_init(RxBackpressureTests_$3 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$3 *new_RxBackpressureTests_$3_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$3, init)
}

RxBackpressureTests_$3 *create_RxBackpressureTests_$3_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$3, init)
}

@implementation RxBackpressureTests_$4

- (RxObservable *)callWithId:(JavaLangInteger *)i {
  return [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxBackpressureTests_incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger_(create_JavaUtilConcurrentAtomicAtomicInteger_init()))) takeWithInt:10])) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxBackpressureTests;", "testFlatMapAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$4 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxBackpressureTests_$4;
}

@end

void RxBackpressureTests_$4_init(RxBackpressureTests_$4 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$4 *new_RxBackpressureTests_$4_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$4, init)
}

RxBackpressureTests_$4 *create_RxBackpressureTests_$4_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$4, init)
}

@implementation RxBackpressureTests_$5

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] + [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxBackpressureTests;", "testZipSync", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$5 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxBackpressureTests_$5;
}

@end

void RxBackpressureTests_$5_init(RxBackpressureTests_$5 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$5 *new_RxBackpressureTests_$5_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$5, init)
}

RxBackpressureTests_$5 *create_RxBackpressureTests_$5_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$5, init)
}

@implementation RxBackpressureTests_$6

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(t1)) intValue] + [((JavaLangInteger *) nil_chk(t2)) intValue]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxBackpressureTests;", "testZipAsync", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$6 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxBackpressureTests_$6;
}

@end

void RxBackpressureTests_$6_init(RxBackpressureTests_$6 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$6 *new_RxBackpressureTests_$6_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$6, init)
}

RxBackpressureTests_$6 *create_RxBackpressureTests_$6_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$6, init)
}

@implementation RxBackpressureTests_$7

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)i {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(i)) intValue] > 11000);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxBackpressureTests;", "testTakeFilterSkipChainAsync", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$7 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxBackpressureTests_$7;
}

@end

void RxBackpressureTests_$7_init(RxBackpressureTests_$7 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$7 *new_RxBackpressureTests_$7_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$7, init)
}

RxBackpressureTests_$7 *create_RxBackpressureTests_$7_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$7, init)
}

@implementation RxBackpressureTests_$8

- (void)onStart {
  [self requestWithLong:100];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  jint total = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$totalReceived_)) incrementAndGet];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$received_)) incrementAndGet];
  if (total >= 2000) {
    [self unsubscribe];
  }
  if ([val$received_ get] == 100) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$batches_)) incrementAndGet];
    [self requestWithLong:100];
    [val$received_ setWithInt:0];
  }
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
                    withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2 {
  RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxBackpressureTests_$8 class]);
  RELEASE_(val$totalReceived_);
  RELEASE_(val$received_);
  RELEASE_(val$batches_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$totalReceived_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$received_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$batches_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "testUserSubscriberUsingRequestSync", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$8 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 3, 5, -1, 6, 7, -1 };
  return &_RxBackpressureTests_$8;
}

@end

void RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$8 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  JreStrongAssign(&self->val$totalReceived_, capture$0);
  JreStrongAssign(&self->val$received_, capture$1);
  JreStrongAssign(&self->val$batches_, capture$2);
  RxSubscriber_init(self);
}

RxBackpressureTests_$8 *new_RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

RxBackpressureTests_$8 *create_RxBackpressureTests_$8_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$8, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2)
}

@implementation RxBackpressureTests_$9

- (void)onStart {
  [self requestWithLong:100];
}

- (void)onCompleted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  jint total = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$totalReceived_)) incrementAndGet];
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$received_)) incrementAndGet];
  jboolean done = false;
  if (total >= 2000) {
    done = true;
    [self unsubscribe];
  }
  if ([val$received_ get] == 100) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$batches_)) incrementAndGet];
    [val$received_ setWithInt:0];
    if (!done) {
      [self requestWithLong:100];
    }
  }
  if (done) {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
               withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$3 {
  RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxBackpressureTests_$9 class]);
  RELEASE_(val$latch_);
  RELEASE_(val$totalReceived_);
  RELEASE_(val$received_);
  RELEASE_(val$batches_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$totalReceived_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$received_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$batches_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "testUserSubscriberUsingRequestAsync", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$9 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 5, 4, 5, -1, 6, 7, -1 };
  return &_RxBackpressureTests_$9;
}

@end

void RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$9 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  JreStrongAssign(&self->val$latch_, capture$0);
  JreStrongAssign(&self->val$totalReceived_, capture$1);
  JreStrongAssign(&self->val$received_, capture$2);
  JreStrongAssign(&self->val$batches_, capture$3);
  RxSubscriber_init(self);
}

RxBackpressureTests_$9 *new_RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$9, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

RxBackpressureTests_$9 *create_RxBackpressureTests_$9_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, JavaUtilConcurrentAtomicAtomicInteger *capture$3) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$9, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1, capture$2, capture$3)
}

@implementation RxBackpressureTests_$10

- (void)callWithId:(JavaLangInteger *)i {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$dropCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$dropCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dropCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "testOnBackpressureDropWithAction", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$10 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxBackpressureTests_$10;
}

@end

void RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$10 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$dropCount_, capture$0);
  NSObject_init(self);
}

RxBackpressureTests_$10 *new_RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxBackpressureTests_$10 *create_RxBackpressureTests_$10_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$10, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxBackpressureTests_$11

- (void)callWithId:(JavaLangInteger *)integer {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$passCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$passCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$passCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "testOnBackpressureDropWithAction", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$11 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxBackpressureTests_$11;
}

@end

void RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$11 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$passCount_, capture$0);
  NSObject_init(self);
}

RxBackpressureTests_$11 *new_RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxBackpressureTests_$11 *create_RxBackpressureTests_$11_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$11, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxBackpressureTests_$12

- (void)callWithId:(JavaLangInteger *)i {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$dropCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$dropCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dropCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "testOnBackpressureDropSynchronousWithAction", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$12 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxBackpressureTests_$12;
}

@end

void RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$12 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$dropCount_, capture$0);
  NSObject_init(self);
}

RxBackpressureTests_$12 *new_RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxBackpressureTests_$12 *create_RxBackpressureTests_$12_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$12, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxBackpressureTests_$13

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)t1 {
  return JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(t1)) intValue] < 100000);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxBackpressureTests;", "testOnBackpressureBuffer", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$13 = { "", "rx", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxBackpressureTests_$13;
}

@end

void RxBackpressureTests_$13_init(RxBackpressureTests_$13 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$13 *new_RxBackpressureTests_$13_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$13, init)
}

RxBackpressureTests_$13 *create_RxBackpressureTests_$13_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$13, init)
}

@implementation RxBackpressureTests_$14

- (void)callWithId:(RxSubscriber *)s {
  [((RxSubscriber *) nil_chk(s)) setProducerWithRxProducer:create_RxBackpressureTests_BPTPRoducer_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_withJavaUtilConcurrentAtomicAtomicLong_withRxSubscriber_(val$counter_, val$threadsSeen_, requested_, s)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentConcurrentLinkedQueue:(JavaUtilConcurrentConcurrentLinkedQueue *)capture$1 {
  RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(requested_);
  RELEASE_(val$counter_);
  RELEASE_(val$threadsSeen_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentConcurrentLinkedQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$threadsSeen_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentConcurrentLinkedQueue;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Thread;>;)V", "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Thread;>;", "LRxBackpressureTests;", "incrementingIntegersWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentConcurrentLinkedQueue:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$14 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 3, 6, -1, 7, 8, -1 };
  return &_RxBackpressureTests_$14;
}

@end

void RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(RxBackpressureTests_$14 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1) {
  JreStrongAssign(&self->val$counter_, capture$0);
  JreStrongAssign(&self->val$threadsSeen_, capture$1);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
}

RxBackpressureTests_$14 *new_RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_, capture$0, capture$1)
}

RxBackpressureTests_$14 *create_RxBackpressureTests_$14_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentConcurrentLinkedQueue *capture$1) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$14, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentConcurrentLinkedQueue_, capture$0, capture$1)
}

@implementation RxBackpressureTests_$15

- (void)callWithId:(RxSubscriber *)s {
  while (![((RxSubscriber *) nil_chk(s)) isUnsubscribed]) {
    [s onNextWithId:JavaLangInteger_valueOfWithInt_(i_++)];
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$counter_)) incrementAndGet];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"unsubscribed after: ", i_)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$counter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxBackpressureTests;", "firehoseWithJavaUtilConcurrentAtomicAtomicInteger:", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$15 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxBackpressureTests_$15;
}

@end

void RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxBackpressureTests_$15 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$counter_, capture$0);
  NSObject_init(self);
  self->i_ = 0;
}

RxBackpressureTests_$15 *new_RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxBackpressureTests_$15 *create_RxBackpressureTests_$15_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$15, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxBackpressureTests_$1

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1 {
  NSString *t = @"";
  jint s = JreLoadVolatileInt(&sink_);
  for (jint i = 1000; i >= 0; i--) {
    t = NSString_valueOfInt_(i + ((jint) [((NSString *) nil_chk(t)) hash]) + s);
  }
  JreAssignVolatileInt(&sink_, ((jint) [((NSString *) nil_chk(t)) hash]));
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxBackpressureTests_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sink_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxBackpressureTests;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxBackpressureTests_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, -1, 3, -1 };
  return &_RxBackpressureTests_$1;
}

@end

void RxBackpressureTests_$1_init(RxBackpressureTests_$1 *self) {
  NSObject_init(self);
}

RxBackpressureTests_$1 *new_RxBackpressureTests_$1_init() {
  J2OBJC_NEW_IMPL(RxBackpressureTests_$1, init)
}

RxBackpressureTests_$1 *create_RxBackpressureTests_$1_init() {
  J2OBJC_CREATE_IMPL(RxBackpressureTests_$1, init)
}
