//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorAsObservableTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxInternalOperatorsOperatorAsObservableTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAsObservableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorAsObservableTest__Annotations$1();

@implementation RxInternalOperatorsOperatorAsObservableTest

- (void)testHiding {
  RxSubjectsPublishSubject *src = RxSubjectsPublishSubject_create();
  RxObservable *dst = [((RxSubjectsPublishSubject *) nil_chk(src)) asObservable];
  OrgJunitAssert_assertFalseWithBoolean_([dst isKindOfClass:[RxSubjectsPublishSubject class]]);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dst)) subscribeWithRxObserver:o];
  [src onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [src onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testHidingError {
  RxSubjectsPublishSubject *src = RxSubjectsPublishSubject_create();
  RxObservable *dst = [((RxSubjectsPublishSubject *) nil_chk(src)) asObservable];
  OrgJunitAssert_assertFalseWithBoolean_([dst isKindOfClass:[RxSubjectsPublishSubject class]]);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(dst)) subscribeWithRxObserver:o];
  [src onErrorWithNSException:create_RxExceptionsTestException_init()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorAsObservableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testHiding);
  methods[1].selector = @selector(testHidingError);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorAsObservableTest__Annotations$0, (void *)&RxInternalOperatorsOperatorAsObservableTest__Annotations$1 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorAsObservableTest = { "OperatorAsObservableTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorAsObservableTest;
}

@end

void RxInternalOperatorsOperatorAsObservableTest_init(RxInternalOperatorsOperatorAsObservableTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorAsObservableTest *new_RxInternalOperatorsOperatorAsObservableTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorAsObservableTest, init)
}

RxInternalOperatorsOperatorAsObservableTest *create_RxInternalOperatorsOperatorAsObservableTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorAsObservableTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorAsObservableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorAsObservableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorAsObservableTest)
