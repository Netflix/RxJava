//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/ComputationSchedulerTests.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"
#include "RxSchedulersComputationSchedulerTests.h"
#include "RxSchedulersSchedulerTests.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashMap.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$5();

@interface RxSchedulersComputationSchedulerTests_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilHashMap *statefulMap_;
  jint nonThreadSafeCounter_;
  RxScheduler_Worker *val$inner_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (void)call;

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)capture$0
                 withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersComputationSchedulerTests_$1)

J2OBJC_FIELD_SETTER(RxSchedulersComputationSchedulerTests_$1, statefulMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(RxSchedulersComputationSchedulerTests_$1, val$inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxSchedulersComputationSchedulerTests_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersComputationSchedulerTests_$1 *self, JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$1 *new_RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$1 *create_RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2);

@interface RxSchedulersComputationSchedulerTests_$2 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersComputationSchedulerTests_$2)

__attribute__((unused)) static void RxSchedulersComputationSchedulerTests_$2_init(RxSchedulersComputationSchedulerTests_$2 *self);

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$2 *new_RxSchedulersComputationSchedulerTests_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$2 *create_RxSchedulersComputationSchedulerTests_$2_init();

@interface RxSchedulersComputationSchedulerTests_$3 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersComputationSchedulerTests_$3)

__attribute__((unused)) static void RxSchedulersComputationSchedulerTests_$3_init(RxSchedulersComputationSchedulerTests_$3 *self);

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$3 *new_RxSchedulersComputationSchedulerTests_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$3 *create_RxSchedulersComputationSchedulerTests_$3_init();

@interface RxSchedulersComputationSchedulerTests_$4 : NSObject < RxFunctionsFunc1 > {
 @public
  NSString *val$currentThreadName_;
}

- (NSString *)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersComputationSchedulerTests_$4)

J2OBJC_FIELD_SETTER(RxSchedulersComputationSchedulerTests_$4, val$currentThreadName_, NSString *)

__attribute__((unused)) static void RxSchedulersComputationSchedulerTests_$4_initWithNSString_(RxSchedulersComputationSchedulerTests_$4 *self, NSString *capture$0);

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$4 *new_RxSchedulersComputationSchedulerTests_$4_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$4 *create_RxSchedulersComputationSchedulerTests_$4_initWithNSString_(NSString *capture$0);

@interface RxSchedulersComputationSchedulerTests_$5 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersComputationSchedulerTests_$5)

__attribute__((unused)) static void RxSchedulersComputationSchedulerTests_$5_init(RxSchedulersComputationSchedulerTests_$5 *self);

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$5 *new_RxSchedulersComputationSchedulerTests_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersComputationSchedulerTests_$5 *create_RxSchedulersComputationSchedulerTests_$5_init();

@implementation RxSchedulersComputationSchedulerTests

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_computation();
}

- (void)testThreadSafetyWhenSchedulerIsHoppingBetweenThreads {
  jint NUM = 100000;
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilHashMap *map = create_JavaUtilHashMap_init();
  RxScheduler_Worker *inner = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(inner)) scheduleWithRxFunctionsAction0:create_RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(map, inner, latch)];
    @try {
      [latch await];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Count A: ", [map getWithId:@"a"])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"Count B: ", [map getWithId:@"b"])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"nonThreadSafeCounter: ", [map getWithId:@"nonThreadSafeCounter"])];
    OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((JavaLangInteger *) nil_chk([map getWithId:@"a"])) intValue]);
    OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((JavaLangInteger *) nil_chk([map getWithId:@"b"])) intValue]);
    OrgJunitAssert_assertEqualsWithLong_withLong_(NUM, [((JavaLangInteger *) nil_chk([map getWithId:@"nonThreadSafeCounter"])) intValue]);
  }
  @finally {
    [inner unsubscribe];
  }
}

- (void)testComputationThreadPool1 {
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) mapWithRxFunctionsFunc1:create_RxSchedulersComputationSchedulerTests_$2_init()];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(o)) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersComputationSchedulerTests_$3_init()];
}

- (void)testMergeWithExecutorScheduler {
  NSString *currentThreadName = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName];
  RxObservable *o1 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  RxObservable *o2 = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(6), JavaLangInteger_valueOfWithInt_(7), JavaLangInteger_valueOfWithInt_(8), JavaLangInteger_valueOfWithInt_(9), JavaLangInteger_valueOfWithInt_(10));
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_mergeWithRxObservable_withRxObservable_(o1, o2))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxSchedulersComputationSchedulerTests_$4_initWithNSString_(currentThreadName)];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(o)) toBlocking])) forEachWithRxFunctionsAction1:create_RxSchedulersComputationSchedulerTests_$5_init()];
}

- (void)testUnhandledErrorIsDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testUnhandledErrorIsDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testHandledErrorIsNotDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testHandledErrorIsNotDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testCancelledTaskRetention {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, false);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
  w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    RxSchedulersSchedulerTests_testCancelledRetentionWithRxScheduler_Worker_withBoolean_(w, true);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(w)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersComputationSchedulerTests_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x11, -1, -1, 3, -1, 4, -1 },
    { NULL, "V", 0x11, -1, -1, 3, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testThreadSafetyWhenSchedulerIsHoppingBetweenThreads);
  methods[2].selector = @selector(testComputationThreadPool1);
  methods[3].selector = @selector(testMergeWithExecutorScheduler);
  methods[4].selector = @selector(testUnhandledErrorIsDeliveredToThreadHandler);
  methods[5].selector = @selector(testHandledErrorIsNotDeliveredToThreadHandler);
  methods[6].selector = @selector(testCancelledTaskRetention);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxSchedulersComputationSchedulerTests__Annotations$0, (void *)&RxSchedulersComputationSchedulerTests__Annotations$1, (void *)&RxSchedulersComputationSchedulerTests__Annotations$2, "LJavaLangInterruptedException;", (void *)&RxSchedulersComputationSchedulerTests__Annotations$3, (void *)&RxSchedulersComputationSchedulerTests__Annotations$4, (void *)&RxSchedulersComputationSchedulerTests__Annotations$5 };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests = { "ComputationSchedulerTests", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersComputationSchedulerTests;
}

@end

void RxSchedulersComputationSchedulerTests_init(RxSchedulersComputationSchedulerTests *self) {
  RxSchedulersAbstractSchedulerConcurrencyTests_init(self);
}

RxSchedulersComputationSchedulerTests *new_RxSchedulersComputationSchedulerTests_init() {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests, init)
}

RxSchedulersComputationSchedulerTests *create_RxSchedulersComputationSchedulerTests_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests, init)
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersComputationSchedulerTests__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 60000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersComputationSchedulerTests)

@implementation RxSchedulersComputationSchedulerTests_$1

- (void)call {
  JavaLangInteger *i = [((JavaUtilHashMap *) nil_chk(statefulMap_)) getWithId:@"a"];
  if (i == nil) {
    i = JavaLangInteger_valueOfWithInt_(1);
    [((JavaUtilHashMap *) nil_chk(statefulMap_)) putWithId:@"a" withId:i];
    [((JavaUtilHashMap *) nil_chk(statefulMap_)) putWithId:@"b" withId:i];
  }
  else {
    JreBoxedPostIncrInt(&i);
    [((JavaUtilHashMap *) nil_chk(statefulMap_)) putWithId:@"a" withId:i];
    [((JavaUtilHashMap *) nil_chk(statefulMap_)) putWithId:@"b" withId:i];
  }
  nonThreadSafeCounter_++;
  [((JavaUtilHashMap *) nil_chk(statefulMap_)) putWithId:@"nonThreadSafeCounter" withId:JavaLangInteger_valueOfWithInt_(nonThreadSafeCounter_)];
  if ([i intValue] < 100000) {
    [((RxScheduler_Worker *) nil_chk(val$inner_)) scheduleWithRxFunctionsAction0:self];
  }
  else {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
  }
}

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)capture$0
                 withRxScheduler_Worker:(RxScheduler_Worker *)capture$1
   withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$2 {
  RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)dealloc {
  RELEASE_(statefulMap_);
  RELEASE_(val$inner_);
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilHashMap:withRxScheduler_Worker:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "statefulMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "nonThreadSafeCounter_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$inner_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilHashMap;LRxScheduler_Worker;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;Lrx/Scheduler$Worker;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LRxSchedulersComputationSchedulerTests;", "testThreadSafetyWhenSchedulerIsHoppingBetweenThreads" };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 4, 3, -1, 4, -1, -1 };
  return &_RxSchedulersComputationSchedulerTests_$1;
}

@end

void RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(RxSchedulersComputationSchedulerTests_$1 *self, JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  JreStrongAssign(&self->val$inner_, capture$1);
  JreStrongAssign(&self->val$latch_, capture$2);
  NSObject_init(self);
  JreStrongAssign(&self->statefulMap_, capture$0);
  self->nonThreadSafeCounter_ = 0;
}

RxSchedulersComputationSchedulerTests_$1 *new_RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests_$1, initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

RxSchedulersComputationSchedulerTests_$1 *create_RxSchedulersComputationSchedulerTests_$1_initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_(JavaUtilHashMap *capture$0, RxScheduler_Worker *capture$1, JavaUtilConcurrentCountDownLatch *capture$2) {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests_$1, initWithJavaUtilHashMap_withRxScheduler_Worker_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1, capture$2)
}

@implementation RxSchedulersComputationSchedulerTests_$2

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxComputationScheduler"]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersComputationSchedulerTests_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxSchedulersComputationSchedulerTests;", "testComputationThreadPool1", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests_$2 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersComputationSchedulerTests_$2;
}

@end

void RxSchedulersComputationSchedulerTests_$2_init(RxSchedulersComputationSchedulerTests_$2 *self) {
  NSObject_init(self);
}

RxSchedulersComputationSchedulerTests_$2 *new_RxSchedulersComputationSchedulerTests_$2_init() {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests_$2, init)
}

RxSchedulersComputationSchedulerTests_$2 *create_RxSchedulersComputationSchedulerTests_$2_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests_$2, init)
}

@implementation RxSchedulersComputationSchedulerTests_$3

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersComputationSchedulerTests_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersComputationSchedulerTests;", "testComputationThreadPool1", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests_$3 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersComputationSchedulerTests_$3;
}

@end

void RxSchedulersComputationSchedulerTests_$3_init(RxSchedulersComputationSchedulerTests_$3 *self) {
  NSObject_init(self);
}

RxSchedulersComputationSchedulerTests_$3 *new_RxSchedulersComputationSchedulerTests_$3_init() {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests_$3, init)
}

RxSchedulersComputationSchedulerTests_$3 *create_RxSchedulersComputationSchedulerTests_$3_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests_$3, init)
}

@implementation RxSchedulersComputationSchedulerTests_$4

- (NSString *)callWithId:(JavaLangInteger *)t {
  OrgJunitAssert_assertFalseWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) isEqual:val$currentThreadName_]);
  OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])) hasPrefix:@"RxComputationScheduler"]);
  return JreStrcat("$@$$", @"Value_", t, @"_Thread_", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName]);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  RxSchedulersComputationSchedulerTests_$4_initWithNSString_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$currentThreadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$currentThreadName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LNSString;", "LRxSchedulersComputationSchedulerTests;", "testMergeWithExecutorScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests_$4 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxSchedulersComputationSchedulerTests_$4;
}

@end

void RxSchedulersComputationSchedulerTests_$4_initWithNSString_(RxSchedulersComputationSchedulerTests_$4 *self, NSString *capture$0) {
  JreStrongAssign(&self->val$currentThreadName_, capture$0);
  NSObject_init(self);
}

RxSchedulersComputationSchedulerTests_$4 *new_RxSchedulersComputationSchedulerTests_$4_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests_$4, initWithNSString_, capture$0)
}

RxSchedulersComputationSchedulerTests_$4 *create_RxSchedulersComputationSchedulerTests_$4_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests_$4, initWithNSString_, capture$0)
}

@implementation RxSchedulersComputationSchedulerTests_$5

- (void)callWithId:(NSString *)t {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"t: ", t)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersComputationSchedulerTests_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxSchedulersComputationSchedulerTests;", "testMergeWithExecutorScheduler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxSchedulersComputationSchedulerTests_$5 = { "", "rx.schedulers", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxSchedulersComputationSchedulerTests_$5;
}

@end

void RxSchedulersComputationSchedulerTests_$5_init(RxSchedulersComputationSchedulerTests_$5 *self) {
  NSObject_init(self);
}

RxSchedulersComputationSchedulerTests_$5 *new_RxSchedulersComputationSchedulerTests_$5_init() {
  J2OBJC_NEW_IMPL(RxSchedulersComputationSchedulerTests_$5, init)
}

RxSchedulersComputationSchedulerTests_$5 *create_RxSchedulersComputationSchedulerTests_$5_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersComputationSchedulerTests_$5, init)
}
