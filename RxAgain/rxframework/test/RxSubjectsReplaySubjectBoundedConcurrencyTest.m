//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsReplaySubject.h"
#include "RxSubjectsReplaySubjectBoundedConcurrencyTest.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSubjectsReplaySubjectBoundedConcurrencyTest__Annotations$0();

@interface RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$start_;
  RxSubjectsReplaySubject *val$rs_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                             withRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1, val$start_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1, val$rs_, RxSubjectsReplaySubject *)

__attribute__((unused)) static void RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1);

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1);

@interface RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 : NSObject < RxObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$o_;
  JavaUtilConcurrentCountDownLatch *val$finish_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2, val$o_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2, val$finish_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  RxSubjectsReplaySubject *val$rs_;
}

- (void)call;

- (instancetype)initWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3)

J2OBJC_FIELD_SETTER(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3, val$rs_, RxSubjectsReplaySubject *)

__attribute__((unused)) static void RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *self, RxSubjectsReplaySubject *capture$0);

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubject *capture$0);

@implementation RxSubjectsReplaySubjectBoundedConcurrencyTest

- (void)testReplaySubjectEmissionSubscriptionRace {
  RxScheduler *s = RxSchedulersSchedulers_io();
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_io())) createWorker];
  @try {
    for (jint i = 0; i < 5000; i++) {
      @autoreleasepool {
        if (i % 100 == 0) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:i];
        }
        RxSubjectsReplaySubject *rs = RxSubjectsReplaySubject_createWithSizeWithInt_(2);
        JavaUtilConcurrentCountDownLatch *finish = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
        JavaUtilConcurrentCountDownLatch *start = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
        [((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(start, rs)];
        JavaUtilConcurrentAtomicAtomicReference *o = create_JavaUtilConcurrentAtomicAtomicReference_init();
        [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsReplaySubject *) nil_chk(rs)) subscribeOnWithRxScheduler:s])) observeOnWithRxScheduler:RxSchedulersSchedulers_io()])) subscribeWithRxObserver:create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(o, finish)];
        [start countDown];
        if (![finish awaitWithLong:5 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[o get]];
          [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[rs hasObservers]];
          [rs onCompleted];
          OrgJunitAssert_failWithNSString_(JreStrcat("$I", @"Timeout @ ", i));
          break;
        }
        else {
          OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [o get]);
          [worker scheduleWithRxFunctionsAction0:create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(rs)];
        }
      }
    }
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(worker)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubjectsReplaySubjectBoundedConcurrencyTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testReplaySubjectEmissionSubscriptionRace);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxSubjectsReplaySubjectBoundedConcurrencyTest__Annotations$0 };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectBoundedConcurrencyTest = { "ReplaySubjectBoundedConcurrencyTest", "rx.subjects", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxSubjectsReplaySubjectBoundedConcurrencyTest;
}

@end

void RxSubjectsReplaySubjectBoundedConcurrencyTest_init(RxSubjectsReplaySubjectBoundedConcurrencyTest *self) {
  NSObject_init(self);
}

RxSubjectsReplaySubjectBoundedConcurrencyTest *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_init() {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest, init)
}

RxSubjectsReplaySubjectBoundedConcurrencyTest *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_init() {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest, init)
}

IOSObjectArray *RxSubjectsReplaySubjectBoundedConcurrencyTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubjectBoundedConcurrencyTest)

@implementation RxSubjectsReplaySubjectBoundedConcurrencyTest_$1

- (void)call {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$start_)) await];
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
  }
  [((RxSubjectsReplaySubject *) nil_chk(val$rs_)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                             withRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)capture$1 {
  RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$start_);
  RELEASE_(val$rs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withRxSubjectsReplaySubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$start_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$rs_", "LRxSubjectsReplaySubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LRxSubjectsReplaySubject;", "(Ljava/util/concurrent/CountDownLatch;Lrx/subjects/ReplaySubject<Ljava/lang/Object;>;)V", "Lrx/subjects/ReplaySubject<Ljava/lang/Object;>;", "LRxSubjectsReplaySubjectBoundedConcurrencyTest;", "testReplaySubjectEmissionSubscriptionRace" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1;
}

@end

void RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1) {
  JreStrongAssign(&self->val$start_, capture$0);
  JreStrongAssign(&self->val$rs_, capture$1);
  NSObject_init(self);
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1, initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_, capture$0, capture$1)
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$1 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$1_initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_(JavaUtilConcurrentCountDownLatch *capture$0, RxSubjectsReplaySubject *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$1, initWithJavaUtilConcurrentCountDownLatch_withRxSubjectsReplaySubject_, capture$0, capture$1)
}

@implementation RxSubjectsReplaySubjectBoundedConcurrencyTest_$2

- (void)onCompleted {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:JavaLangInteger_valueOfWithInt_(-1)];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:e];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (void)onNextWithId:(id)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$o_)) setWithId:t];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$finish_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$o_);
  RELEASE_(val$finish_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$o_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$finish_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Ljava/util/concurrent/CountDownLatch;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "LRxSubjectsReplaySubjectBoundedConcurrencyTest;", "testReplaySubjectEmissionSubscriptionRace", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 4, 2, 7, -1, 8, 9, -1 };
  return &_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2;
}

@end

void RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$o_, capture$0);
  JreStrongAssign(&self->val$finish_, capture$1);
  NSObject_init(self);
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$2 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxSubjectsReplaySubjectBoundedConcurrencyTest_$3

- (void)call {
  [((RxSubjectsReplaySubject *) nil_chk(val$rs_)) onCompleted];
}

- (instancetype)initWithRxSubjectsReplaySubject:(RxSubjectsReplaySubject *)capture$0 {
  RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$rs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithRxSubjectsReplaySubject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$rs_", "LRxSubjectsReplaySubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsReplaySubject;", "(Lrx/subjects/ReplaySubject<Ljava/lang/Object;>;)V", "Lrx/subjects/ReplaySubject<Ljava/lang/Object;>;", "LRxSubjectsReplaySubjectBoundedConcurrencyTest;", "testReplaySubjectEmissionSubscriptionRace" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 = { "", "rx.subjects", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3;
}

@end

void RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *self, RxSubjectsReplaySubject *capture$0) {
  JreStrongAssign(&self->val$rs_, capture$0);
  NSObject_init(self);
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *new_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubject *capture$0) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3, initWithRxSubjectsReplaySubject_, capture$0)
}

RxSubjectsReplaySubjectBoundedConcurrencyTest_$3 *create_RxSubjectsReplaySubjectBoundedConcurrencyTest_$3_initWithRxSubjectsReplaySubject_(RxSubjectsReplaySubject *capture$0) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubjectBoundedConcurrencyTest_$3, initWithRxSubjectsReplaySubject_, capture$0)
}
