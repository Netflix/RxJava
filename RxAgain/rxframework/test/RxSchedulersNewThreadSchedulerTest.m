//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/schedulers/NewThreadSchedulerTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalSchedulersScheduledAction.h"
#include "RxScheduler.h"
#include "RxSchedulersAbstractSchedulerConcurrencyTests.h"
#include "RxSchedulersNewThreadSchedulerTest.h"
#include "RxSchedulersSchedulerTests.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$2();

@interface RxSchedulersNewThreadSchedulerTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$run_;
  JavaUtilConcurrentAtomicAtomicReference *val$exception_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersNewThreadSchedulerTest_$1)

J2OBJC_FIELD_SETTER(RxSchedulersNewThreadSchedulerTest_$1, val$run_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSchedulersNewThreadSchedulerTest_$1, val$exception_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersNewThreadSchedulerTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

__attribute__((unused)) static RxSchedulersNewThreadSchedulerTest_$1 *new_RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersNewThreadSchedulerTest_$1 *create_RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

@interface RxSchedulersNewThreadSchedulerTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$interruptFlag_;
  JavaUtilConcurrentCountDownLatch *val$done_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersNewThreadSchedulerTest_$2)

J2OBJC_FIELD_SETTER(RxSchedulersNewThreadSchedulerTest_$2, val$interruptFlag_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxSchedulersNewThreadSchedulerTest_$2, val$done_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxSchedulersNewThreadSchedulerTest_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxSchedulersNewThreadSchedulerTest_$2 *new_RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSchedulersNewThreadSchedulerTest_$2 *create_RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@implementation RxSchedulersNewThreadSchedulerTest

- (RxScheduler *)getScheduler {
  return RxSchedulersSchedulers_newThread();
}

- (void)testUnhandledErrorIsDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testUnhandledErrorIsDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testHandledErrorIsNotDeliveredToThreadHandler {
  RxSchedulersSchedulerTests_testHandledErrorIsNotDeliveredToThreadHandlerWithRxScheduler_([self getScheduler]);
}

- (void)testNoSelfInterrupt {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_newThread())) createWorker];
  @try {
    JavaUtilConcurrentCountDownLatch *run = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    JavaUtilConcurrentCountDownLatch *done = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
    JavaUtilConcurrentAtomicAtomicReference *exception = create_JavaUtilConcurrentAtomicAtomicReference_init();
    JavaUtilConcurrentAtomicAtomicBoolean *interruptFlag = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
    RxInternalSchedulersScheduledAction *sa = (RxInternalSchedulersScheduledAction *) cast_chk([((RxScheduler_Worker *) nil_chk(worker)) scheduleWithRxFunctionsAction0:create_RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(run, exception)], [RxInternalSchedulersScheduledAction class]);
    [((RxInternalSchedulersScheduledAction *) nil_chk(sa)) addWithRxSubscription:RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(create_RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(interruptFlag, done))];
    [run countDown];
    [done await];
    OrgJunitAssert_assertEqualsWithId_withId_(nil, [exception get]);
    OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Interrupted?!", [interruptFlag get]);
  }
  @finally {
    [((RxScheduler_Worker *) nil_chk(worker)) unsubscribe];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSchedulersNewThreadSchedulerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxScheduler;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x11, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheduler);
  methods[1].selector = @selector(testUnhandledErrorIsDeliveredToThreadHandler);
  methods[2].selector = @selector(testHandledErrorIsNotDeliveredToThreadHandler);
  methods[3].selector = @selector(testNoSelfInterrupt);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", (void *)&RxSchedulersNewThreadSchedulerTest__Annotations$0, (void *)&RxSchedulersNewThreadSchedulerTest__Annotations$1, (void *)&RxSchedulersNewThreadSchedulerTest__Annotations$2 };
  static const J2ObjcClassInfo _RxSchedulersNewThreadSchedulerTest = { "NewThreadSchedulerTest", "rx.schedulers", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxSchedulersNewThreadSchedulerTest;
}

@end

void RxSchedulersNewThreadSchedulerTest_init(RxSchedulersNewThreadSchedulerTest *self) {
  RxSchedulersAbstractSchedulerConcurrencyTests_init(self);
}

RxSchedulersNewThreadSchedulerTest *new_RxSchedulersNewThreadSchedulerTest_init() {
  J2OBJC_NEW_IMPL(RxSchedulersNewThreadSchedulerTest, init)
}

RxSchedulersNewThreadSchedulerTest *create_RxSchedulersNewThreadSchedulerTest_init() {
  J2OBJC_CREATE_IMPL(RxSchedulersNewThreadSchedulerTest, init)
}

IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSchedulersNewThreadSchedulerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 3000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSchedulersNewThreadSchedulerTest)

@implementation RxSchedulersNewThreadSchedulerTest_$1

- (void)call {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$run_)) await];
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$exception_)) setWithId:ex];
  }
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
             withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1 {
  RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$run_);
  RELEASE_(val$exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$run_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$exception_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxSchedulersNewThreadSchedulerTest;", "testNoSelfInterrupt" };
  static const J2ObjcClassInfo _RxSchedulersNewThreadSchedulerTest_$1 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, -1, -1 };
  return &_RxSchedulersNewThreadSchedulerTest_$1;
}

@end

void RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSchedulersNewThreadSchedulerTest_$1 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  JreStrongAssign(&self->val$run_, capture$0);
  JreStrongAssign(&self->val$exception_, capture$1);
  NSObject_init(self);
}

RxSchedulersNewThreadSchedulerTest_$1 *new_RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersNewThreadSchedulerTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

RxSchedulersNewThreadSchedulerTest_$1 *create_RxSchedulersNewThreadSchedulerTest_$1_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersNewThreadSchedulerTest_$1, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

@implementation RxSchedulersNewThreadSchedulerTest_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$interruptFlag_)) setWithBoolean:[((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) isInterrupted]];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$done_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                         withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$interruptFlag_);
  RELEASE_(val$done_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$interruptFlag_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$done_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;LJavaUtilConcurrentCountDownLatch;", "LRxSchedulersNewThreadSchedulerTest;", "testNoSelfInterrupt" };
  static const J2ObjcClassInfo _RxSchedulersNewThreadSchedulerTest_$2 = { "", "rx.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxSchedulersNewThreadSchedulerTest_$2;
}

@end

void RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(RxSchedulersNewThreadSchedulerTest_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$interruptFlag_, capture$0);
  JreStrongAssign(&self->val$done_, capture$1);
  NSObject_init(self);
}

RxSchedulersNewThreadSchedulerTest_$2 *new_RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxSchedulersNewThreadSchedulerTest_$2, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxSchedulersNewThreadSchedulerTest_$2 *create_RxSchedulersNewThreadSchedulerTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxSchedulersNewThreadSchedulerTest_$2, initWithJavaUtilConcurrentAtomicAtomicBoolean_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}
