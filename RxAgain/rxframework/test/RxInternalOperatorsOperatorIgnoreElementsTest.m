//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorIgnoreElementsTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxInternalOperatorsOperatorIgnoreElementsTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$6();

@interface RxInternalOperatorsOperatorIgnoreElementsTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$upstreamCount_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorIgnoreElementsTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorIgnoreElementsTest_$1, val$upstreamCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$1 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$1 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorIgnoreElementsTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$unsub_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorIgnoreElementsTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorIgnoreElementsTest_$2, val$unsub_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorIgnoreElementsTest_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$2 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$2 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxInternalOperatorsOperatorIgnoreElementsTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$upstreamCount_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorIgnoreElementsTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorIgnoreElementsTest_$3, val$upstreamCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$3 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$3 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorIgnoreElementsTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$upstreamCount_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorIgnoreElementsTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorIgnoreElementsTest_$4, val$upstreamCount_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$4 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$4 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorIgnoreElementsTest_$5 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorIgnoreElementsTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorIgnoreElementsTest_$5, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$5 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorIgnoreElementsTest_$5 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxInternalOperatorsOperatorIgnoreElementsTest

- (void)testWithEmpty {
  OrgJunitAssert_assertTrueWithBoolean_([((JavaLangBoolean *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_empty())) ignoreElements])) isEmpty])) toBlocking])) single])) booleanValue]);
}

- (void)testWithNonEmpty {
  OrgJunitAssert_assertTrueWithBoolean_([((JavaLangBoolean *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3)))) ignoreElements])) isEmpty])) toBlocking])) single])) booleanValue]);
}

- (void)testUpstreamIsProcessedButIgnored {
  jint num = 10;
  JavaUtilConcurrentAtomicAtomicInteger *upstreamCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  jint count = [((JavaLangInteger *) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, num))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(upstreamCount)])) ignoreElements])) count])) toBlocking])) single])) intValue];
  OrgJunitAssert_assertEqualsWithLong_withLong_(num, [upstreamCount get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, count);
}

- (void)testCompletedOk {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) ignoreElements])) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSObject_class_()])];
  [ts assertTerminalEvent];
  [ts assertUnsubscribed];
}

- (void)testErrorReceived {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  JavaLangRuntimeException *ex = create_JavaLangRuntimeException_initWithNSString_(@"boo");
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(ex))) ignoreElements])) subscribeWithRxSubscriber:ts];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSObject_class_()])];
  [ts assertTerminalEvent];
  [ts assertUnsubscribed];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) size]);
  OrgJunitAssert_assertEqualsWithId_withId_(@"boo", [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts getOnErrorEvents])) getWithInt:0])) getMessage]);
}

- (void)testUnsubscribesFromUpstream {
  JavaUtilConcurrentAtomicAtomicBoolean *unsub = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) doOnUnsubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(unsub)])) subscribe];
  OrgJunitAssert_assertTrueWithBoolean_([unsub get]);
}

- (void)testDoesNotHangAndProcessesAllUsingBackpressure {
  JavaUtilConcurrentAtomicAtomicInteger *upstreamCount = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  jint num = 10;
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, num))) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(upstreamCount)])) ignoreElements])) doOnNextWithRxFunctionsAction1:create_RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(upstreamCount)])) subscribeWithRxSubscriber:create_RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(num, [upstreamCount get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(0, [count get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorIgnoreElementsTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithEmpty);
  methods[1].selector = @selector(testWithNonEmpty);
  methods[2].selector = @selector(testUpstreamIsProcessedButIgnored);
  methods[3].selector = @selector(testCompletedOk);
  methods[4].selector = @selector(testErrorReceived);
  methods[5].selector = @selector(testUnsubscribesFromUpstream);
  methods[6].selector = @selector(testDoesNotHangAndProcessesAllUsingBackpressure);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$0, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$1, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$2, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$3, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$4, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$5, (void *)&RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$6 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest = { "OperatorIgnoreElementsTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_init(RxInternalOperatorsOperatorIgnoreElementsTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest *new_RxInternalOperatorsOperatorIgnoreElementsTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest, init)
}

RxInternalOperatorsOperatorIgnoreElementsTest *create_RxInternalOperatorsOperatorIgnoreElementsTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorIgnoreElementsTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorIgnoreElementsTest)

@implementation RxInternalOperatorsOperatorIgnoreElementsTest_$1

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$upstreamCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$upstreamCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$upstreamCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorIgnoreElementsTest;", "testUpstreamIsProcessedButIgnored", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest_$1;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$upstreamCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest_$1 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorIgnoreElementsTest_$1 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorIgnoreElementsTest_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$unsub_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$unsub_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$unsub_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorIgnoreElementsTest;", "testUnsubscribesFromUpstream" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest_$2;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorIgnoreElementsTest_$2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$unsub_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest_$2 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$2, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorIgnoreElementsTest_$2 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$2_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$2, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxInternalOperatorsOperatorIgnoreElementsTest_$3

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$upstreamCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$upstreamCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$upstreamCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorIgnoreElementsTest;", "testDoesNotHangAndProcessesAllUsingBackpressure", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest_$3;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$upstreamCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest_$3 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorIgnoreElementsTest_$3 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorIgnoreElementsTest_$4

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$upstreamCount_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$upstreamCount_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$upstreamCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorIgnoreElementsTest;", "testDoesNotHangAndProcessesAllUsingBackpressure", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest_$4;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$upstreamCount_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest_$4 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorIgnoreElementsTest_$4 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorIgnoreElementsTest_$5

- (void)onStart {
  [self requestWithLong:1];
}

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorIgnoreElementsTest_$5 class]);
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorIgnoreElementsTest;", "testDoesNotHangAndProcessesAllUsingBackpressure", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorIgnoreElementsTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 1, 5, -1, 6, 7, -1 };
  return &_RxInternalOperatorsOperatorIgnoreElementsTest_$5;
}

@end

void RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorIgnoreElementsTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorIgnoreElementsTest_$5 *new_RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorIgnoreElementsTest_$5 *create_RxInternalOperatorsOperatorIgnoreElementsTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorIgnoreElementsTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
