//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/schedulers/NewThreadWorkerTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest")
#ifdef RESTRICT_RxInternalSchedulersNewThreadWorkerTest
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest 0
#else
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest 1
#endif
#undef RESTRICT_RxInternalSchedulersNewThreadWorkerTest

#if !defined (RxInternalSchedulersNewThreadWorkerTest_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest || defined(INCLUDE_RxInternalSchedulersNewThreadWorkerTest))
#define RxInternalSchedulersNewThreadWorkerTest_

@interface RxInternalSchedulersNewThreadWorkerTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)findSetRemoveOnCancelPolicyMethodShouldFindMethod;

- (void)findSetRemoveOnCancelPolicyMethodShouldNotFindMethod;

- (void)tryEnableCancelPolicyShouldInvokeMethodOnExecutor;

- (void)tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersNewThreadWorkerTest)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorkerTest_init(RxInternalSchedulersNewThreadWorkerTest *self);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest *new_RxInternalSchedulersNewThreadWorkerTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest *create_RxInternalSchedulersNewThreadWorkerTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadWorkerTest)

#endif

#if !defined (RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest || defined(INCLUDE_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy))
#define RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_

#define RESTRICT_JavaUtilConcurrentScheduledExecutorService 1
#define INCLUDE_JavaUtilConcurrentScheduledExecutorService 1
#include "java/util/concurrent/ScheduledExecutorService.h"

@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentScheduledFuture;
@protocol JavaUtilList;

@interface RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy : NSObject < JavaUtilConcurrentScheduledExecutorService >

#pragma mark Public

- (instancetype)init;

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                       withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)setRemoveOnCancelPolicyWithBoolean:(jboolean)value;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *self);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *new_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy *create_RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadWorkerTest_ScheduledExecutorServiceWithSetRemoveOnCancelPolicy)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorkerTest")
