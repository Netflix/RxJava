//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorDistinctTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorDistinctTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscription.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$8();

@interface RxInternalOperatorsOperatorDistinctTest_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDistinctTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorDistinctTest_$1_init(RxInternalOperatorsOperatorDistinctTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorDistinctTest_$1 *new_RxInternalOperatorsOperatorDistinctTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDistinctTest_$1 *create_RxInternalOperatorsOperatorDistinctTest_$1_init();

@implementation RxInternalOperatorsOperatorDistinctTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testDistinctOfNone {
  RxObservable *src = RxObservable_empty();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinct])) subscribeWithRxObserver:w_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testDistinctOfNoneWithKeySelector {
  RxObservable *src = RxObservable_empty();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinctWithRxFunctionsFunc1:TO_UPPER_WITH_EXCEPTION_])) subscribeWithRxObserver:w_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testDistinctOfNormalSource {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_(@"a", @"b", @"c", @"c", @"c", @"b", @"b", @"a", @"e");
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinct])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"e"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testDistinctOfNormalSourceWithKeySelector {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_withId_(@"a", @"B", @"c", @"C", @"c", @"B", @"b", @"a", @"E");
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinctWithRxFunctionsFunc1:TO_UPPER_WITH_EXCEPTION_])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"B"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"c"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"E"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testDistinctOfSourceWithNulls {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_(nil, @"a", @"a", nil, nil, @"b", nil);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinct])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:nil];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testDistinctOfSourceWithExceptionsFromKeySelector {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_(@"a", @"b", nil, @"c");
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) distinctWithRxFunctionsFunc1:TO_UPPER_WITH_EXCEPTION_])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"a"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:@"b"];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangNullPointerException_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:OrgMockitoMatchers_anyString()];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorDistinctTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(w_);
  RELEASE_(w2_);
  RELEASE_(TO_UPPER_WITH_EXCEPTION_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testDistinctOfNone);
  methods[2].selector = @selector(testDistinctOfNoneWithKeySelector);
  methods[3].selector = @selector(testDistinctOfNormalSource);
  methods[4].selector = @selector(testDistinctOfNormalSourceWithKeySelector);
  methods[5].selector = @selector(testDistinctOfSourceWithNulls);
  methods[6].selector = @selector(testDistinctOfSourceWithExceptionsFromKeySelector);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 7, 8 },
    { "w2_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 7, 9 },
    { "TO_UPPER_WITH_EXCEPTION_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$0, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$1, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$2, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$3, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$4, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$5, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$6, "Lrx/Observer<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$7, (void *)&RxInternalOperatorsOperatorDistinctTest__Annotations$8, "Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDistinctTest = { "OperatorDistinctTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorDistinctTest;
}

@end

void RxInternalOperatorsOperatorDistinctTest_init(RxInternalOperatorsOperatorDistinctTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->TO_UPPER_WITH_EXCEPTION_, new_RxInternalOperatorsOperatorDistinctTest_$1_init());
}

RxInternalOperatorsOperatorDistinctTest *new_RxInternalOperatorsOperatorDistinctTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDistinctTest, init)
}

RxInternalOperatorsOperatorDistinctTest *create_RxInternalOperatorsOperatorDistinctTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDistinctTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDistinctTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorDistinctTest)

@implementation RxInternalOperatorsOperatorDistinctTest_$1

- (NSString *)callWithId:(NSString *)s {
  if ([((NSString *) nil_chk(s)) isEqual:@"x"]) {
    return @"XX";
  }
  return [s uppercaseString];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorDistinctTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOperatorDistinctTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDistinctTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorDistinctTest_$1;
}

@end

void RxInternalOperatorsOperatorDistinctTest_$1_init(RxInternalOperatorsOperatorDistinctTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorDistinctTest_$1 *new_RxInternalOperatorsOperatorDistinctTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDistinctTest_$1, init)
}

RxInternalOperatorsOperatorDistinctTest_$1 *create_RxInternalOperatorsOperatorDistinctTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDistinctTest_$1, init)
}
