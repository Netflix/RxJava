//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/subscriptions/RefCountSubscriptionTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxSubscription.h"
#include "RxSubscriptionsRefCountSubscription.h"
#include "RxSubscriptionsRefCountSubscriptionTest.h"
#include "RxSubscriptionsSubscriptions.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$4();

@implementation RxSubscriptionsRefCountSubscriptionTest

- (void)before {
  JreStrongAssign(&main_, OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_()));
  JreStrongAssignAndConsume(&rcs_, new_RxSubscriptionsRefCountSubscription_initWithRxSubscription_(RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(main_)));
}

- (void)testImmediateUnsubscribe {
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ main_ } count:1 type:NSObject_class_()]);
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [inOrder verifyNoMoreInteractions];
}

- (void)testRCSUnsubscribeBeforeClient {
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ main_ } count:1 type:NSObject_class_()]);
  id<RxSubscription> s = [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) get];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
  [((id<RxSubscription>) nil_chk(s)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [s unsubscribe];
  [inOrder verifyNoMoreInteractions];
}

- (void)testMultipleClientsUnsubscribeFirst {
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ main_ } count:1 type:NSObject_class_()]);
  id<RxSubscription> s1 = [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) get];
  id<RxSubscription> s2 = [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) get];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  [s1 unsubscribe];
  [s2 unsubscribe];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [inOrder verifyNoMoreInteractions];
}

- (void)testMultipleClientsMainUnsubscribeFirst {
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ main_ } count:1 type:NSObject_class_()]);
  id<RxSubscription> s1 = [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) get];
  id<RxSubscription> s2 = [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) get];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
  [((id<RxSubscription>) nil_chk(s1)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) call];
  [((id<RxSubscription>) nil_chk(s2)) unsubscribe];
  [((id<RxFunctionsAction0>) nil_chk([inOrder verifyWithId:main_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) call];
  [s1 unsubscribe];
  [s2 unsubscribe];
  [((RxSubscriptionsRefCountSubscription *) nil_chk(rcs_)) unsubscribe];
  [inOrder verifyNoMoreInteractions];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxSubscriptionsRefCountSubscriptionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(main_);
  RELEASE_(rcs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testImmediateUnsubscribe);
  methods[2].selector = @selector(testRCSUnsubscribeBeforeClient);
  methods[3].selector = @selector(testMultipleClientsUnsubscribeFirst);
  methods[4].selector = @selector(testMultipleClientsMainUnsubscribeFirst);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "main_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rcs_", "LRxSubscriptionsRefCountSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxSubscriptionsRefCountSubscriptionTest__Annotations$0, (void *)&RxSubscriptionsRefCountSubscriptionTest__Annotations$1, (void *)&RxSubscriptionsRefCountSubscriptionTest__Annotations$2, (void *)&RxSubscriptionsRefCountSubscriptionTest__Annotations$3, (void *)&RxSubscriptionsRefCountSubscriptionTest__Annotations$4 };
  static const J2ObjcClassInfo _RxSubscriptionsRefCountSubscriptionTest = { "RefCountSubscriptionTest", "rx.subscriptions", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_RxSubscriptionsRefCountSubscriptionTest;
}

@end

void RxSubscriptionsRefCountSubscriptionTest_init(RxSubscriptionsRefCountSubscriptionTest *self) {
  NSObject_init(self);
}

RxSubscriptionsRefCountSubscriptionTest *new_RxSubscriptionsRefCountSubscriptionTest_init() {
  J2OBJC_NEW_IMPL(RxSubscriptionsRefCountSubscriptionTest, init)
}

RxSubscriptionsRefCountSubscriptionTest *create_RxSubscriptionsRefCountSubscriptionTest_init() {
  J2OBJC_CREATE_IMPL(RxSubscriptionsRefCountSubscriptionTest, init)
}

IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxSubscriptionsRefCountSubscriptionTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubscriptionsRefCountSubscriptionTest)
