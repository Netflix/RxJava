//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/test/TestObstructionDetectionTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubscription.h"
#include "RxTestTestObstructionDetection.h"
#include "RxTestTestObstructionDetectionTest.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/After.h"
#include "org/junit/AfterClass.h"
#include "org/junit/Test.h"

inline RxScheduler_Worker *RxTestTestObstructionDetectionTest_get_w();
inline RxScheduler_Worker *RxTestTestObstructionDetectionTest_set_w(RxScheduler_Worker *value);
static RxScheduler_Worker *RxTestTestObstructionDetectionTest_w;
J2OBJC_STATIC_FIELD_OBJ(RxTestTestObstructionDetectionTest, w, RxScheduler_Worker *)

__attribute__((unused)) static IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$3();

@interface RxTestTestObstructionDetectionTest_$1 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxTestTestObstructionDetectionTest_$1)

__attribute__((unused)) static void RxTestTestObstructionDetectionTest_$1_init(RxTestTestObstructionDetectionTest_$1 *self);

__attribute__((unused)) static RxTestTestObstructionDetectionTest_$1 *new_RxTestTestObstructionDetectionTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxTestTestObstructionDetectionTest_$1 *create_RxTestTestObstructionDetectionTest_$1_init();

@interface RxTestTestObstructionDetectionTest_$2 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxTestTestObstructionDetectionTest_$2)

__attribute__((unused)) static void RxTestTestObstructionDetectionTest_$2_init(RxTestTestObstructionDetectionTest_$2 *self);

__attribute__((unused)) static RxTestTestObstructionDetectionTest_$2 *new_RxTestTestObstructionDetectionTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxTestTestObstructionDetectionTest_$2 *create_RxTestTestObstructionDetectionTest_$2_init();

@implementation RxTestTestObstructionDetectionTest

- (void)doAfterTest {
  RxTestTestObstructionDetection_checkObstruction();
}

+ (void)afterClass {
  RxTestTestObstructionDetectionTest_afterClass();
}

- (void)testObstruction {
  RxScheduler_Worker *w = [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker];
  @try {
    [((RxScheduler_Worker *) nil_chk(w)) scheduleWithRxFunctionsAction0:create_RxTestTestObstructionDetectionTest_$1_init()];
    RxTestTestObstructionDetection_checkObstruction();
  }
  @finally {
    [w unsubscribe];
  }
}

- (void)testNoObstruction {
  JreStrongAssign(&RxTestTestObstructionDetectionTest_w, [((RxScheduler *) nil_chk(RxSchedulersSchedulers_computation())) createWorker]);
  [((RxScheduler_Worker *) nil_chk(RxTestTestObstructionDetectionTest_w)) scheduleWithRxFunctionsAction0:create_RxTestTestObstructionDetectionTest_$2_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxTestTestObstructionDetectionTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(doAfterTest);
  methods[1].selector = @selector(afterClass);
  methods[2].selector = @selector(testObstruction);
  methods[3].selector = @selector(testNoObstruction);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxTestTestObstructionDetectionTest__Annotations$0, (void *)&RxTestTestObstructionDetectionTest__Annotations$1, (void *)&RxTestTestObstructionDetectionTest__Annotations$2, (void *)&RxTestTestObstructionDetectionTest__Annotations$3, &RxTestTestObstructionDetectionTest_w };
  static const J2ObjcClassInfo _RxTestTestObstructionDetectionTest = { "TestObstructionDetectionTest", "rx.test", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_RxTestTestObstructionDetectionTest;
}

@end

void RxTestTestObstructionDetectionTest_afterClass() {
  RxTestTestObstructionDetectionTest_initialize();
  RxScheduler_Worker *w2 = RxTestTestObstructionDetectionTest_w;
  if (w2 != nil) {
    [w2 unsubscribe];
  }
}

void RxTestTestObstructionDetectionTest_init(RxTestTestObstructionDetectionTest *self) {
  NSObject_init(self);
}

RxTestTestObstructionDetectionTest *new_RxTestTestObstructionDetectionTest_init() {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetectionTest, init)
}

RxTestTestObstructionDetectionTest *create_RxTestTestObstructionDetectionTest_init() {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetectionTest, init)
}

IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfterClass() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxTestTestObstructionDetection_ObstructionException_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxTestTestObstructionDetectionTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxTestTestObstructionDetectionTest)

@implementation RxTestTestObstructionDetectionTest_$1

- (void)call {
  @try {
    JavaLangThread_sleepWithLong_(5000);
  }
  @catch (JavaLangInterruptedException *ex) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxTestTestObstructionDetectionTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxTestTestObstructionDetectionTest;", "testObstruction" };
  static const J2ObjcClassInfo _RxTestTestObstructionDetectionTest_$1 = { "", "rx.test", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxTestTestObstructionDetectionTest_$1;
}

@end

void RxTestTestObstructionDetectionTest_$1_init(RxTestTestObstructionDetectionTest_$1 *self) {
  NSObject_init(self);
}

RxTestTestObstructionDetectionTest_$1 *new_RxTestTestObstructionDetectionTest_$1_init() {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetectionTest_$1, init)
}

RxTestTestObstructionDetectionTest_$1 *create_RxTestTestObstructionDetectionTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetectionTest_$1, init)
}

@implementation RxTestTestObstructionDetectionTest_$2

- (void)call {
  @try {
    JavaLangThread_sleepWithLong_(500);
  }
  @catch (JavaLangInterruptedException *ex) {
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxTestTestObstructionDetectionTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxTestTestObstructionDetectionTest;", "testNoObstruction" };
  static const J2ObjcClassInfo _RxTestTestObstructionDetectionTest_$2 = { "", "rx.test", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxTestTestObstructionDetectionTest_$2;
}

@end

void RxTestTestObstructionDetectionTest_$2_init(RxTestTestObstructionDetectionTest_$2 *self) {
  NSObject_init(self);
}

RxTestTestObstructionDetectionTest_$2 *new_RxTestTestObstructionDetectionTest_$2_init() {
  J2OBJC_NEW_IMPL(RxTestTestObstructionDetectionTest_$2, init)
}

RxTestTestObstructionDetectionTest_$2 *create_RxTestTestObstructionDetectionTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxTestTestObstructionDetectionTest_$2, init)
}
