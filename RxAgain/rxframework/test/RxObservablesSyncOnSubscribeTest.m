//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/observables/SyncOnSubscribeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsAction2.h"
#include "RxFunctionsFunc0.h"
#include "RxFunctionsFunc2.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObservablesSyncOnSubscribe.h"
#include "RxObservablesSyncOnSubscribeTest.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/CyclicBarrier.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxObservablesSyncOnSubscribeTest ()

- (void)assertJustBehaviorWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)os;

@end

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(RxObservablesSyncOnSubscribeTest *self, id<RxObservable_OnSubscribe> os);

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$14();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$15();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$16();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$17();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$18();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$19();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$20();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$21();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$22();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$23();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$24();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$25();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$26();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$27();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$28();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$29();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$30();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$31();

__attribute__((unused)) static IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$32();

@interface RxObservablesSyncOnSubscribeTest_FooException : JavaLangRuntimeException

- (instancetype)initWithNSString:(NSString *)string;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_FooException)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(RxObservablesSyncOnSubscribeTest_FooException *self, NSString *string);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_FooException *new_RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_FooException *create_RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribeTest_FooException)

@protocol RxObservablesSyncOnSubscribeTest_FooQux < JavaObject >

@end

@interface RxObservablesSyncOnSubscribeTest_FooQux : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_FooQux)

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribeTest_FooQux)

@interface RxObservablesSyncOnSubscribeTest_Foo : NSObject < RxObservablesSyncOnSubscribeTest_FooQux >

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_Foo)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_Foo_init(RxObservablesSyncOnSubscribeTest_Foo *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_Foo *new_RxObservablesSyncOnSubscribeTest_Foo_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_Foo *create_RxObservablesSyncOnSubscribeTest_Foo_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribeTest_Foo)

@protocol RxObservablesSyncOnSubscribeTest_BarQux < RxObservablesSyncOnSubscribeTest_FooQux, JavaObject >

@end

@interface RxObservablesSyncOnSubscribeTest_BarQux : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_BarQux)

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribeTest_BarQux)

@interface RxObservablesSyncOnSubscribeTest_Bar : RxObservablesSyncOnSubscribeTest_Foo < RxObservablesSyncOnSubscribeTest_BarQux >

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_Bar)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_Bar_init(RxObservablesSyncOnSubscribeTest_Bar *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_Bar *new_RxObservablesSyncOnSubscribeTest_Bar_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_Bar *create_RxObservablesSyncOnSubscribeTest_Bar_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribeTest_Bar)

@interface RxObservablesSyncOnSubscribeTest_$1 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$1)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$1_init(RxObservablesSyncOnSubscribeTest_$1 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$1 *new_RxObservablesSyncOnSubscribeTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$1 *create_RxObservablesSyncOnSubscribeTest_$1_init();

@interface RxObservablesSyncOnSubscribeTest_$2 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$2)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$2_init(RxObservablesSyncOnSubscribeTest_$2 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$2 *new_RxObservablesSyncOnSubscribeTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$2 *create_RxObservablesSyncOnSubscribeTest_$2_init();

@interface RxObservablesSyncOnSubscribeTest_$3 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$3)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$3_init(RxObservablesSyncOnSubscribeTest_$3 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$3 *new_RxObservablesSyncOnSubscribeTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$3 *create_RxObservablesSyncOnSubscribeTest_$3_init();

@interface RxObservablesSyncOnSubscribeTest_$4 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$finalStateValue_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$4)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$4, val$finalStateValue_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$4 *new_RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$4 *create_RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$5 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$5)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$5_init(RxObservablesSyncOnSubscribeTest_$5 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$5 *new_RxObservablesSyncOnSubscribeTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$5 *create_RxObservablesSyncOnSubscribeTest_$5_init();

@interface RxObservablesSyncOnSubscribeTest_$6 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$6)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$6_init(RxObservablesSyncOnSubscribeTest_$6 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$6 *new_RxObservablesSyncOnSubscribeTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$6 *create_RxObservablesSyncOnSubscribeTest_$6_init();

@interface RxObservablesSyncOnSubscribeTest_$7 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$7)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$7_init(RxObservablesSyncOnSubscribeTest_$7 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$7 *new_RxObservablesSyncOnSubscribeTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$7 *create_RxObservablesSyncOnSubscribeTest_$7_init();

@interface RxObservablesSyncOnSubscribeTest_$8 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$8)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$8_init(RxObservablesSyncOnSubscribeTest_$8 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$8 *new_RxObservablesSyncOnSubscribeTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$8 *create_RxObservablesSyncOnSubscribeTest_$8_init();

@interface RxObservablesSyncOnSubscribeTest_$9 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$9)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$9_init(RxObservablesSyncOnSubscribeTest_$9 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$9 *new_RxObservablesSyncOnSubscribeTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$9 *create_RxObservablesSyncOnSubscribeTest_$9_init();

@interface RxObservablesSyncOnSubscribeTest_$10 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$10)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$10_init(RxObservablesSyncOnSubscribeTest_$10 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$10 *new_RxObservablesSyncOnSubscribeTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$10 *create_RxObservablesSyncOnSubscribeTest_$10_init();

@interface RxObservablesSyncOnSubscribeTest_$11 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$11)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$11_init(RxObservablesSyncOnSubscribeTest_$11 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$11 *new_RxObservablesSyncOnSubscribeTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$11 *create_RxObservablesSyncOnSubscribeTest_$11_init();

@interface RxObservablesSyncOnSubscribeTest_$12 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$12)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$12_init(RxObservablesSyncOnSubscribeTest_$12 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$12 *new_RxObservablesSyncOnSubscribeTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$12 *create_RxObservablesSyncOnSubscribeTest_$12_init();

@interface RxObservablesSyncOnSubscribeTest_$13 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$13)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$13_init(RxObservablesSyncOnSubscribeTest_$13 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$13 *new_RxObservablesSyncOnSubscribeTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$13 *create_RxObservablesSyncOnSubscribeTest_$13_init();

@interface RxObservablesSyncOnSubscribeTest_$14 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)initWithRxObserver:(id<RxObserver>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$14)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(RxObservablesSyncOnSubscribeTest_$14 *self, id<RxObserver> arg$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$14 *new_RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(id<RxObserver> arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$14 *create_RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(id<RxObserver> arg$0);

@interface RxObservablesSyncOnSubscribeTest_$15 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$15)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$15_init(RxObservablesSyncOnSubscribeTest_$15 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$15 *new_RxObservablesSyncOnSubscribeTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$15 *create_RxObservablesSyncOnSubscribeTest_$15_init();

@interface RxObservablesSyncOnSubscribeTest_$16 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$16)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$16_init(RxObservablesSyncOnSubscribeTest_$16 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$16 *new_RxObservablesSyncOnSubscribeTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$16 *create_RxObservablesSyncOnSubscribeTest_$16_init();

@interface RxObservablesSyncOnSubscribeTest_$17 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)subscriber;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$17)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$17_init(RxObservablesSyncOnSubscribeTest_$17 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$17 *new_RxObservablesSyncOnSubscribeTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$17 *create_RxObservablesSyncOnSubscribeTest_$17_init();

@interface RxObservablesSyncOnSubscribeTest_$18 : NSObject < RxFunctionsFunc0 > {
 @public
  id<JavaUtilList> val$source_;
}

- (id<JavaUtilIterator>)call;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$18)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$18, val$source_, id<JavaUtilList>)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(RxObservablesSyncOnSubscribeTest_$18 *self, id<JavaUtilList> capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$18 *new_RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$18 *create_RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0);

@interface RxObservablesSyncOnSubscribeTest_$19 : NSObject < RxFunctionsFunc2 >

- (id<JavaUtilIterator>)callWithId:(id<JavaUtilIterator>)it
                            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$19)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$19_init(RxObservablesSyncOnSubscribeTest_$19 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$19 *new_RxObservablesSyncOnSubscribeTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$19 *create_RxObservablesSyncOnSubscribeTest_$19_init();

@interface RxObservablesSyncOnSubscribeTest_$20 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$20)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$20_init(RxObservablesSyncOnSubscribeTest_$20 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$20 *new_RxObservablesSyncOnSubscribeTest_$20_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$20 *create_RxObservablesSyncOnSubscribeTest_$20_init();

@interface RxObservablesSyncOnSubscribeTest_$21 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$21)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$21_init(RxObservablesSyncOnSubscribeTest_$21 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$21 *new_RxObservablesSyncOnSubscribeTest_$21_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$21 *create_RxObservablesSyncOnSubscribeTest_$21_init();

@interface RxObservablesSyncOnSubscribeTest_$22 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$22)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$22_init(RxObservablesSyncOnSubscribeTest_$22 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$22 *new_RxObservablesSyncOnSubscribeTest_$22_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$22 *create_RxObservablesSyncOnSubscribeTest_$22_init();

@interface RxObservablesSyncOnSubscribeTest_$23 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$23)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$23_init(RxObservablesSyncOnSubscribeTest_$23 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$23 *new_RxObservablesSyncOnSubscribeTest_$23_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$23 *create_RxObservablesSyncOnSubscribeTest_$23_init();

@interface RxObservablesSyncOnSubscribeTest_$24 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$24)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$24_init(RxObservablesSyncOnSubscribeTest_$24 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$24 *new_RxObservablesSyncOnSubscribeTest_$24_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$24 *create_RxObservablesSyncOnSubscribeTest_$24_init();

@interface RxObservablesSyncOnSubscribeTest_$25 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$25)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$25_init(RxObservablesSyncOnSubscribeTest_$25 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$25 *new_RxObservablesSyncOnSubscribeTest_$25_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$25 *create_RxObservablesSyncOnSubscribeTest_$25_init();

@interface RxObservablesSyncOnSubscribeTest_$26 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$l3_;
}

- (void)callWithId:(id)t;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$26)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$26, val$l3_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$26 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$26 *new_RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$26 *create_RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$27 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$27)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$27_init(RxObservablesSyncOnSubscribeTest_$27 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$27 *new_RxObservablesSyncOnSubscribeTest_$27_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$27 *create_RxObservablesSyncOnSubscribeTest_$27_init();

@interface RxObservablesSyncOnSubscribeTest_$28 : NSObject < RxFunctionsFunc2 > {
 @public
  JavaUtilConcurrentCountDownLatch *val$l2_;
  JavaUtilConcurrentCountDownLatch *val$l1_;
}

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$28)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$28, val$l2_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$28, val$l1_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$28 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$28 *new_RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$28 *create_RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1);

@interface RxObservablesSyncOnSubscribeTest_$29 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$currentlyEvaluating_;
}

- (void)callWithId:(id<RxObserver>)observer;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$29)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$29, val$currentlyEvaluating_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObservablesSyncOnSubscribeTest_$29 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$29 *new_RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$29 *create_RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$30 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$calledUnsubscribe_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$currentlyEvaluating_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$30)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$30, val$calledUnsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$30, val$currentlyEvaluating_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxObservablesSyncOnSubscribeTest_$30 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$30 *new_RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$30 *create_RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1);

@interface RxObservablesSyncOnSubscribeTest_$31 : NSObject < RxObservable_Operator > {
 @public
  JavaUtilConcurrentCountDownLatch *val$latch_;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber;

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$31)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$31, val$latch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$31 *self, JavaUtilConcurrentCountDownLatch *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31 *new_RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31 *create_RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$31_$1 : RxSubscriber {
 @public
  RxObservablesSyncOnSubscribeTest_$31 *this$0_;
  RxSubscriber *val$subscriber_;
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)initWithRxObservablesSyncOnSubscribeTest_$31:(RxObservablesSyncOnSubscribeTest_$31 *)outer$
                                            withRxSubscriber:(RxSubscriber *)capture$0
                                            withRxSubscriber:(RxSubscriber *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$31_$1)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$31_$1, this$0_, RxObservablesSyncOnSubscribeTest_$31 *)
J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$31_$1, val$subscriber_, RxSubscriber *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31_$1 *self, RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31_$1 *new_RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31_$1 *create_RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0);

@interface RxObservablesSyncOnSubscribeTest_$31_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  RxObservablesSyncOnSubscribeTest_$31_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithRxObservablesSyncOnSubscribeTest_$31_$1:(RxObservablesSyncOnSubscribeTest_$31_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$31_$1_$1)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$31_$1_$1, this$0_, RxObservablesSyncOnSubscribeTest_$31_$1 *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1_$1 *self, RxObservablesSyncOnSubscribeTest_$31_$1 *outer$);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31_$1_$1 *new_RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$31_$1_$1 *create_RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1 *outer$);

@interface RxObservablesSyncOnSubscribeTest_$32 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentConcurrentHashMap *val$subscribers_;
}

- (id<JavaUtilMap>)call;

- (instancetype)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$32)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$32, val$subscribers_, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(RxObservablesSyncOnSubscribeTest_$32 *self, JavaUtilConcurrentConcurrentHashMap *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$32 *new_RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(JavaUtilConcurrentConcurrentHashMap *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$32 *create_RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(JavaUtilConcurrentConcurrentHashMap *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$33 : NSObject < RxFunctionsFunc2 >

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)state
                       withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$33)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$33_init(RxObservablesSyncOnSubscribeTest_$33 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$33 *new_RxObservablesSyncOnSubscribeTest_$33_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$33 *create_RxObservablesSyncOnSubscribeTest_$33_init();

@interface RxObservablesSyncOnSubscribeTest_$34 : NSObject < RxFunctionsFunc0 >

- (JavaLangInteger *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$34)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$34_init(RxObservablesSyncOnSubscribeTest_$34 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$34 *new_RxObservablesSyncOnSubscribeTest_$34_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$34 *create_RxObservablesSyncOnSubscribeTest_$34_init();

@interface RxObservablesSyncOnSubscribeTest_$35 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)calls
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$35)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$35_init(RxObservablesSyncOnSubscribeTest_$35 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$35 *new_RxObservablesSyncOnSubscribeTest_$35_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$35 *create_RxObservablesSyncOnSubscribeTest_$35_init();

@interface RxObservablesSyncOnSubscribeTest_$36 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countUnsubscribe_;
}

- (void)callWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$36)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$36, val$countUnsubscribe_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$36 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$36 *new_RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$36 *create_RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$37 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)calls
                         withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$37)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$37_init(RxObservablesSyncOnSubscribeTest_$37 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$37 *new_RxObservablesSyncOnSubscribeTest_$37_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$37 *create_RxObservablesSyncOnSubscribeTest_$37_init();

@interface RxObservablesSyncOnSubscribeTest_$38 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$38)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$38_init(RxObservablesSyncOnSubscribeTest_$38 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$38 *new_RxObservablesSyncOnSubscribeTest_$38_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$38 *create_RxObservablesSyncOnSubscribeTest_$38_init();

@interface RxObservablesSyncOnSubscribeTest_$39 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$exception_;
}

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(JavaLangInteger *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$39)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$39, val$exception_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesSyncOnSubscribeTest_$39 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$39 *new_RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$39 *create_RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$40 : RxObservablesSyncOnSubscribe {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$lastState_;
  JavaUtilConcurrentAtomicAtomicInteger *val$countUnsubs_;
}

- (id)generateState;

- (id)nextWithId:(id)state
  withRxObserver:(id<RxObserver>)observer;

- (void)onUnsubscribeWithId:(id)state;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$40)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$40, val$lastState_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$40, val$countUnsubs_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$40 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$40 *new_RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$40 *create_RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1);

@interface RxObservablesSyncOnSubscribeTest_$41 : NSObject < RxFunctionsFunc0 >

- (RxObservablesSyncOnSubscribeTest_Bar *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$41)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$41_init(RxObservablesSyncOnSubscribeTest_$41 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$41 *new_RxObservablesSyncOnSubscribeTest_$41_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$41 *create_RxObservablesSyncOnSubscribeTest_$41_init();

@interface RxObservablesSyncOnSubscribeTest_$42 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$42)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$42_init(RxObservablesSyncOnSubscribeTest_$42 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$42 *new_RxObservablesSyncOnSubscribeTest_$42_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$42 *create_RxObservablesSyncOnSubscribeTest_$42_init();

@interface RxObservablesSyncOnSubscribeTest_$43 : NSObject < RxFunctionsFunc0 >

- (RxObservablesSyncOnSubscribeTest_Bar *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$43)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$43_init(RxObservablesSyncOnSubscribeTest_$43 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$43 *new_RxObservablesSyncOnSubscribeTest_$43_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$43 *create_RxObservablesSyncOnSubscribeTest_$43_init();

@interface RxObservablesSyncOnSubscribeTest_$44 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
            withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$44)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$44_init(RxObservablesSyncOnSubscribeTest_$44 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$44 *new_RxObservablesSyncOnSubscribeTest_$44_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$44 *create_RxObservablesSyncOnSubscribeTest_$44_init();

@interface RxObservablesSyncOnSubscribeTest_$45 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_FooQux>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$45)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$45_init(RxObservablesSyncOnSubscribeTest_$45 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$45 *new_RxObservablesSyncOnSubscribeTest_$45_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$45 *create_RxObservablesSyncOnSubscribeTest_$45_init();

@interface RxObservablesSyncOnSubscribeTest_$46 : NSObject < RxFunctionsFunc0 >

- (RxObservablesSyncOnSubscribeTest_Bar *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$46)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$46_init(RxObservablesSyncOnSubscribeTest_$46 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$46 *new_RxObservablesSyncOnSubscribeTest_$46_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$46 *create_RxObservablesSyncOnSubscribeTest_$46_init();

@interface RxObservablesSyncOnSubscribeTest_$47 : NSObject < RxFunctionsFunc2 >

- (id<RxObservablesSyncOnSubscribeTest_BarQux>)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
                                                   withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$47)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$47_init(RxObservablesSyncOnSubscribeTest_$47 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$47 *new_RxObservablesSyncOnSubscribeTest_$47_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$47 *create_RxObservablesSyncOnSubscribeTest_$47_init();

@interface RxObservablesSyncOnSubscribeTest_$48 : NSObject < RxFunctionsFunc0 >

- (RxObservablesSyncOnSubscribeTest_Bar *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$48)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$48_init(RxObservablesSyncOnSubscribeTest_$48 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$48 *new_RxObservablesSyncOnSubscribeTest_$48_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$48 *create_RxObservablesSyncOnSubscribeTest_$48_init();

@interface RxObservablesSyncOnSubscribeTest_$49 : NSObject < RxFunctionsFunc2 >

- (id<RxObservablesSyncOnSubscribeTest_BarQux>)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
                                                   withId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$49)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$49_init(RxObservablesSyncOnSubscribeTest_$49 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$49 *new_RxObservablesSyncOnSubscribeTest_$49_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$49 *create_RxObservablesSyncOnSubscribeTest_$49_init();

@interface RxObservablesSyncOnSubscribeTest_$50 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_FooQux>)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$50)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$50_init(RxObservablesSyncOnSubscribeTest_$50 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$50 *new_RxObservablesSyncOnSubscribeTest_$50_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$50 *create_RxObservablesSyncOnSubscribeTest_$50_init();

@interface RxObservablesSyncOnSubscribeTest_$51 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$51)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$51_init(RxObservablesSyncOnSubscribeTest_$51 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$51 *new_RxObservablesSyncOnSubscribeTest_$51_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$51 *create_RxObservablesSyncOnSubscribeTest_$51_init();

@interface RxObservablesSyncOnSubscribeTest_$52 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id<RxObserver>)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$52)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$52_init(RxObservablesSyncOnSubscribeTest_$52 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$52 *new_RxObservablesSyncOnSubscribeTest_$52_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$52 *create_RxObservablesSyncOnSubscribeTest_$52_init();

@interface RxObservablesSyncOnSubscribeTest_$53 : NSObject < RxFunctionsAction0 >

- (void)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$53)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$53_init(RxObservablesSyncOnSubscribeTest_$53 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$53 *new_RxObservablesSyncOnSubscribeTest_$53_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$53 *create_RxObservablesSyncOnSubscribeTest_$53_init();

@interface RxObservablesSyncOnSubscribeTest_$54 : NSObject < RxFunctionsFunc0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$wip_;
}

- (JavaUtilConcurrentAtomicAtomicInteger *)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$54)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$54, val$wip_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$54 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$54 *new_RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$54 *create_RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxObservablesSyncOnSubscribeTest_$55 : NSObject < RxFunctionsFunc2 >

- (JavaUtilConcurrentAtomicAtomicInteger *)callWithId:(JavaUtilConcurrentAtomicAtomicInteger *)s
                                               withId:(id<RxObserver>)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$55)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$55_init(RxObservablesSyncOnSubscribeTest_$55 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$55 *new_RxObservablesSyncOnSubscribeTest_$55_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$55 *create_RxObservablesSyncOnSubscribeTest_$55_init();

@interface RxObservablesSyncOnSubscribeTest_$56 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(JavaUtilConcurrentAtomicAtomicInteger *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$56)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$56_init(RxObservablesSyncOnSubscribeTest_$56 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$56 *new_RxObservablesSyncOnSubscribeTest_$56_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$56 *create_RxObservablesSyncOnSubscribeTest_$56_init();

@interface RxObservablesSyncOnSubscribeTest_$57 : NSObject < JavaUtilConcurrentCallable > {
 @public
  JavaUtilConcurrentCyclicBarrier *val$cb_;
  RxObserversTestSubscriber *val$ts_;
}

- (id)call;

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                          withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$57)

J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$57, val$cb_, JavaUtilConcurrentCyclicBarrier *)
J2OBJC_FIELD_SETTER(RxObservablesSyncOnSubscribeTest_$57, val$ts_, RxObserversTestSubscriber *)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(RxObservablesSyncOnSubscribeTest_$57 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$57 *new_RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$57 *create_RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1);

@interface RxObservablesSyncOnSubscribeTest_$58 : NSObject < RxFunctionsFunc0 >

- (id)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$58)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$58_init(RxObservablesSyncOnSubscribeTest_$58 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$58 *new_RxObservablesSyncOnSubscribeTest_$58_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$58 *create_RxObservablesSyncOnSubscribeTest_$58_init();

@interface RxObservablesSyncOnSubscribeTest_$59 : NSObject < RxFunctionsAction2 >

- (void)callWithId:(id)s
            withId:(id<RxObserver>)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribeTest_$59)

__attribute__((unused)) static void RxObservablesSyncOnSubscribeTest_$59_init(RxObservablesSyncOnSubscribeTest_$59 *self);

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$59 *new_RxObservablesSyncOnSubscribeTest_$59_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesSyncOnSubscribeTest_$59 *create_RxObservablesSyncOnSubscribeTest_$59_init();

@implementation RxObservablesSyncOnSubscribeTest

- (void)testObservableJustEquivalent {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$1_init());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
}

- (void)testStateAfterTerminal {
  JavaUtilConcurrentAtomicAtomicInteger *finalStateValue = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(-1);
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$2_init(), create_RxObservablesSyncOnSubscribeTest_$3_init(), create_RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(finalStateValue));
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:ts];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  [ts assertValueWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [finalStateValue get]);
}

- (void)testMultipleOnNextValuesCallsOnError {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$5_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangIllegalStateException_class_())];
}

- (void)testMultipleOnCompleted {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$6_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testOnNextAfterOnComplete {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$7_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testMultipleOnErrors {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$8_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_isAWithIOSClass_(RxObservablesSyncOnSubscribeTest_FooException_class_())];
}

- (void)testEmpty {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$9_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
}

- (void)testNever {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$10_init());
  RxObservable *neverObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()];
  RxObservable *merged = RxObservable_ambWithRxObservable_withRxObservable_(neverObservable, [((RxObservable *) nil_chk(RxObservable_timerWithLong_withJavaUtilConcurrentTimeUnit_(100, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()]);
  id<JavaUtilIterator> values = [((id<JavaLangIterable>) nil_chk([((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(merged)) toBlocking])) toIterable])) iterator];
  OrgJunitAssert_assertTrueWithBoolean_(([((id<JavaUtilIterator>) nil_chk(values)) hasNext]));
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(0l), [values next]);
}

- (void)testThrows {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$11_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testThrowAfterCompleteFastPath {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$12_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testThrowsSlowPath {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$13_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(o);
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:1];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
}

- (void)testError {
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$15_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onCompleted];
}

- (void)testRange {
  jint start = 1;
  jint count = 4000;
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_(create_RxObservablesSyncOnSubscribeTest_$16_init(), create_RxObservablesSyncOnSubscribeTest_$17_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(count)])) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testFromIterable {
  jint n = 400;
  id<JavaUtilList> source = create_JavaUtilArrayList_init();
  for (jint i = 0; i < n; i++) {
    [source addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_(create_RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(source), create_RxObservablesSyncOnSubscribeTest_$19_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(RxExceptionsTestException_class_())];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(n)])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testInfiniteTake {
  jint start = 0;
  jint finalCount = 4000;
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_(create_RxObservablesSyncOnSubscribeTest_$20_init(), create_RxObservablesSyncOnSubscribeTest_$21_init());
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) takeWithInt:finalCount])) subscribeWithRxObserver:o];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(finalCount)])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o])) onCompleted];
  [inOrder verifyNoMoreInteractions];
}

- (void)testInfiniteRequestSome {
  jint finalCount = 4000;
  jint start = 0;
  id<RxFunctionsAction1> onUnSubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$22_init(), create_RxObservablesSyncOnSubscribeTest_$23_init(), onUnSubscribe);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithLong_(0);
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:ts];
  [ts requestMoreWithLong:finalCount];
  [ts assertNoErrors];
  [ts assertNotCompleted];
  [ts assertValueCountWithInt:finalCount];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onUnSubscribe, OrgMockitoMockito_never()))) callWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testUnsubscribeDownstream {
  id<RxFunctionsAction1> onUnSubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$24_init(), create_RxObservablesSyncOnSubscribeTest_$25_init(), onUnSubscribe);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) takeWithInt:1])) subscribeWithRxSubscriber:ts];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onUnSubscribe, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testConcurrentRequestsLoop {
  for (jint i = 0; i < 100; i++) {
    @autoreleasepool {
      if (i % 10 == 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"testConcurrentRequestsLoop >> ", i)];
      }
      [self testConcurrentRequests];
    }
  }
}

- (void)testConcurrentRequests {
  jint count1 = 1000;
  jint count2 = 1000;
  jint finalCount = count1 + count2;
  jint start = 1;
  JavaUtilConcurrentCountDownLatch *l1 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *l2 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  JavaUtilConcurrentCountDownLatch *l3 = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxFunctionsAction1> onUnSubscribe = create_RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(l3);
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$27_init(), create_RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(l2, l1), onUnSubscribe);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeOnWithRxScheduler:RxSchedulersSchedulers_newThread()])) subscribeWithRxSubscriber:ts];
  if (![l2 awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"SyncOnSubscribe failed to countDown in time");
  }
  [ts requestMoreWithLong:count2];
  [l1 countDown];
  [ts awaitTerminalEventWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(finalCount)])) onNextWithId:OrgMockitoMatchers_any()];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:o withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [inOrder verifyNoMoreInteractions];
  if (![l3 awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    OrgJunitAssert_failWithNSString_(@"SyncOnSubscribe failed to countDown onUnSubscribe latch");
  }
  [ts unsubscribe];
}

- (void)testUnsubscribeOutsideOfLoop {
  JavaUtilConcurrentAtomicAtomicInteger *calledUnsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  JavaUtilConcurrentAtomicAtomicBoolean *currentlyEvaluating = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_withRxFunctionsAction0_(create_RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(currentlyEvaluating), create_RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(calledUnsubscribe, currentlyEvaluating));
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  JavaUtilConcurrentCountDownLatch *latch = create_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) liftWithRxObservable_Operator:create_RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(latch)])) subscribeWithRxSubscriber:ts];
  [latch countDown];
  [ts awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [ts assertNoErrors];
  [ts assertUnsubscribed];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [calledUnsubscribe get]);
}

- (void)testIndependentStates {
  jint count = 100;
  JavaUtilConcurrentConcurrentHashMap *subscribers = create_JavaUtilConcurrentConcurrentHashMap_init();
  id<RxFunctionsAction1> onUnSubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(subscribers), create_RxObservablesSyncOnSubscribeTest_$33_init(), onUnSubscribe);
  RxObservable *source = RxObservable_createWithRxObservable_OnSubscribe_(os);
  for (jint i = 0; i < count; i++) {
    [((RxObservable *) nil_chk(source)) subscribe];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(count, [subscribers size]);
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onUnSubscribe, OrgMockitoMockito_timesWithInt_(count)))) callWithId:OrgMockitoMatchers_any()];
}

- (void)testSubscribeOn {
  jint start = 1;
  jint count = 400;
  JavaUtilConcurrentAtomicAtomicInteger *countUnsubscribe = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  jint numSubscribers = 4;
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(create_RxObservablesSyncOnSubscribeTest_$34_init(), create_RxObservablesSyncOnSubscribeTest_$35_init(), create_RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(countUnsubscribe));
  id<JavaUtilList> subs = create_JavaUtilArrayList_initWithInt_(numSubscribers);
  for (jint i = 0; i < numSubscribers; i++) {
    RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
    [subs addWithId:ts];
  }
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservable *o2 = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeOnWithRxScheduler:scheduler];
  for (RxSubscriber * __strong ts in subs) {
    [((RxObservable *) nil_chk(o2)) subscribeWithRxSubscriber:ts];
  }
  [scheduler triggerActions];
  for (RxObserversTestSubscriber * __strong ts in subs) {
    [((RxObserversTestSubscriber *) nil_chk(ts)) awaitTerminalEventWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    [ts assertNoErrors];
    [ts assertValueCountWithInt:count];
    [ts assertCompleted];
  }
  OrgJunitAssert_assertEqualsWithLong_withLong_(numSubscribers, [countUnsubscribe get]);
}

- (void)testObserveOn {
  jint start = 1;
  jint count = 4000;
  id<RxFunctionsAction1> onUnSubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction1_class_());
  id<RxFunctionsFunc0> generator = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsFunc0_class_());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((id<RxFunctionsFunc0>) nil_chk(generator)) call]))) thenReturnWithId:JavaLangInteger_valueOfWithInt_(start)];
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(generator, create_RxObservablesSyncOnSubscribeTest_$37_init(), onUnSubscribe);
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) observeOnWithRxScheduler:scheduler])) subscribeWithRxSubscriber:ts];
  [scheduler triggerActions];
  [ts awaitTerminalEvent];
  [ts assertNoErrors];
  [ts assertCompleted];
  [ts assertValueCountWithInt:count];
  [((id<RxFunctionsFunc0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(generator, OrgMockitoMockito_timesWithInt_(1)))) call];
  id<JavaUtilList> events = [ts getOnNextEvents];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(events)) size]; i++) {
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(i + 1), [events getWithInt:i]);
  }
  [((id<RxFunctionsAction1>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onUnSubscribe, OrgMockitoMockito_timesWithInt_(1)))) callWithId:OrgMockitoMatchers_anyWithIOSClass_(JavaLangInteger_class_())];
}

- (void)testCanRequestInOnNext {
  id<RxFunctionsAction0> onUnSubscribe = OrgMockitoMockito_mockWithIOSClass_(RxFunctionsAction0_class_());
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_withRxFunctionsAction0_(create_RxObservablesSyncOnSubscribeTest_$38_init(), onUnSubscribe);
  JavaUtilConcurrentAtomicAtomicReference *exception = create_JavaUtilConcurrentAtomicAtomicReference_init();
  [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(os))) subscribeWithRxSubscriber:create_RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(exception)];
  if ([exception get] != nil) {
    [((NSException *) nil_chk([exception get])) printStackTrace];
  }
  OrgJunitAssert_assertNullWithId_([exception get]);
  [((id<RxFunctionsAction0>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(onUnSubscribe, OrgMockitoMockito_timesWithInt_(1)))) call];
}

- (void)testExtendingBase {
  JavaUtilConcurrentAtomicAtomicReference *lastState = create_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicInteger *countUnsubs = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  RxObservablesSyncOnSubscribe *sos = create_RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(lastState, countUnsubs);
  id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_initWithRxObserver_(o);
  jint count = 10;
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservablesSyncOnSubscribe_(sos))) takeWithInt:count])) subscribeWithRxSubscriber:ts];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_timesWithInt_(count)))) onNextWithId:OrgMockitoMatchers_anyWithIOSClass_(NSObject_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_(o))) onCompleted];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [countUnsubs get]);
}

- (void)testGenericsCreateSingleState {
  id<RxFunctionsFunc0> generator = create_RxObservablesSyncOnSubscribeTest_$41_init();
  id<RxFunctionsAction2> next = create_RxObservablesSyncOnSubscribeTest_$42_init();
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, RxObservablesSyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction2_(generator, next));
}

- (void)testGenericsCreateSingleStateWithUnsub {
  id<RxFunctionsFunc0> generator = create_RxObservablesSyncOnSubscribeTest_$43_init();
  id<RxFunctionsAction2> next = create_RxObservablesSyncOnSubscribeTest_$44_init();
  id<RxFunctionsAction1> unsub = create_RxObservablesSyncOnSubscribeTest_$45_init();
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, RxObservablesSyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction2_withRxFunctionsAction1_(generator, next, unsub));
}

- (void)testGenericsCreateStateful {
  id<RxFunctionsFunc0> generator = create_RxObservablesSyncOnSubscribeTest_$46_init();
  id<RxFunctionsFunc2> next = create_RxObservablesSyncOnSubscribeTest_$47_init();
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_(generator, next));
}

- (void)testGenericsCreateStatefulWithUnsub {
  id<RxFunctionsFunc0> generator = create_RxObservablesSyncOnSubscribeTest_$48_init();
  id<RxFunctionsFunc2> next = create_RxObservablesSyncOnSubscribeTest_$49_init();
  id<RxFunctionsAction1> unsub = create_RxObservablesSyncOnSubscribeTest_$50_init();
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(generator, next, unsub);
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, os);
}

- (void)testGenericsCreateStateless {
  id<RxFunctionsAction1> next = create_RxObservablesSyncOnSubscribeTest_$51_init();
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(next);
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, os);
}

- (void)testGenericsCreateStatelessWithUnsub {
  id<RxFunctionsAction1> next = create_RxObservablesSyncOnSubscribeTest_$52_init();
  id<RxFunctionsAction0> unsub = create_RxObservablesSyncOnSubscribeTest_$53_init();
  id<RxObservable_OnSubscribe> os = RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_withRxFunctionsAction0_(next, unsub);
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, os);
}

- (void)assertJustBehaviorWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)os {
  RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(self, os);
}

- (void)testConcurrentUnsubscribe3000Iterations {
  id<JavaUtilConcurrentExecutorService> exec = nil;
  @try {
    exec = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
    for (jint i = 0; i < 3000; i++) {
      JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_init();
      id<RxFunctionsFunc0> func0 = create_RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(wip);
      id<RxFunctionsFunc2> func2 = create_RxObservablesSyncOnSubscribeTest_$55_init();
      id<RxFunctionsAction1> action1 = create_RxObservablesSyncOnSubscribeTest_$56_init();
      RxObservable *source = RxObservable_createWithRxObservablesSyncOnSubscribe_(RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(func0, func2, action1));
      RxObserversTestSubscriber *ts = RxObserversTestSubscriber_createWithLong_(0);
      [((RxObservable *) nil_chk(source)) subscribeWithRxSubscriber:ts];
      JavaUtilConcurrentCyclicBarrier *cb = create_JavaUtilConcurrentCyclicBarrier_initWithInt_(2);
      id<JavaUtilConcurrentFuture> f = [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) submitWithJavaUtilConcurrentCallable:create_RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(cb, ts)];
      [cb await];
      [((RxObserversTestSubscriber *) nil_chk(ts)) unsubscribe];
      [((id<JavaUtilConcurrentFuture>) nil_chk(f)) get];
      OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"Unsubscribe supposed to be called once", 1, [wip get]);
    }
  }
  @finally {
    if (exec != nil) [exec shutdownNow];
  }
}

- (void)testStateThrows {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservablesSyncOnSubscribe *) nil_chk(RxObservablesSyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction2_(create_RxObservablesSyncOnSubscribeTest_$58_init(), create_RxObservablesSyncOnSubscribeTest_$59_init()))) callWithId:ts];
  [ts assertNoValues];
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
  [ts assertNotCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 12, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, "V", 0x1, -1, -1, 17, -1, 18, -1 },
    { NULL, "V", 0x1, -1, -1, 17, -1, 19, -1 },
    { NULL, "V", 0x1, -1, -1, 17, -1, 20, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 21, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 22, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 24, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 25, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 26, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "V", 0x2, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 35, -1, 36, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 37, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testObservableJustEquivalent);
  methods[1].selector = @selector(testStateAfterTerminal);
  methods[2].selector = @selector(testMultipleOnNextValuesCallsOnError);
  methods[3].selector = @selector(testMultipleOnCompleted);
  methods[4].selector = @selector(testOnNextAfterOnComplete);
  methods[5].selector = @selector(testMultipleOnErrors);
  methods[6].selector = @selector(testEmpty);
  methods[7].selector = @selector(testNever);
  methods[8].selector = @selector(testThrows);
  methods[9].selector = @selector(testThrowAfterCompleteFastPath);
  methods[10].selector = @selector(testThrowsSlowPath);
  methods[11].selector = @selector(testError);
  methods[12].selector = @selector(testRange);
  methods[13].selector = @selector(testFromIterable);
  methods[14].selector = @selector(testInfiniteTake);
  methods[15].selector = @selector(testInfiniteRequestSome);
  methods[16].selector = @selector(testUnsubscribeDownstream);
  methods[17].selector = @selector(testConcurrentRequestsLoop);
  methods[18].selector = @selector(testConcurrentRequests);
  methods[19].selector = @selector(testUnsubscribeOutsideOfLoop);
  methods[20].selector = @selector(testIndependentStates);
  methods[21].selector = @selector(testSubscribeOn);
  methods[22].selector = @selector(testObserveOn);
  methods[23].selector = @selector(testCanRequestInOnNext);
  methods[24].selector = @selector(testExtendingBase);
  methods[25].selector = @selector(testGenericsCreateSingleState);
  methods[26].selector = @selector(testGenericsCreateSingleStateWithUnsub);
  methods[27].selector = @selector(testGenericsCreateStateful);
  methods[28].selector = @selector(testGenericsCreateStatefulWithUnsub);
  methods[29].selector = @selector(testGenericsCreateStateless);
  methods[30].selector = @selector(testGenericsCreateStatelessWithUnsub);
  methods[31].selector = @selector(assertJustBehaviorWithRxObservable_OnSubscribe:);
  methods[32].selector = @selector(testConcurrentUnsubscribe3000Iterations);
  methods[33].selector = @selector(testStateThrows);
  methods[34].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObservablesSyncOnSubscribeTest__Annotations$0, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$1, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$2, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$3, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$4, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$5, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$6, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$7, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$8, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$9, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$10, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$11, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$12, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$13, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$14, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$15, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$16, "LJavaLangInterruptedException;", (void *)&RxObservablesSyncOnSubscribeTest__Annotations$17, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$18, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$19, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$20, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$21, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$22, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$23, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$24, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$25, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$26, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$27, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$28, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$29, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$30, "assertJustBehavior", "LRxObservable_OnSubscribe;", "(Lrx/Observable$OnSubscribe<Lrx/observables/SyncOnSubscribeTest$FooQux;>;)V", "LJavaLangInterruptedException;LJavaUtilConcurrentBrokenBarrierException;LJavaUtilConcurrentExecutionException;", (void *)&RxObservablesSyncOnSubscribeTest__Annotations$31, (void *)&RxObservablesSyncOnSubscribeTest__Annotations$32, "LRxObservablesSyncOnSubscribeTest_FooException;LRxObservablesSyncOnSubscribeTest_FooQux;LRxObservablesSyncOnSubscribeTest_Foo;LRxObservablesSyncOnSubscribeTest_BarQux;LRxObservablesSyncOnSubscribeTest_Bar;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest = { "SyncOnSubscribeTest", "rx.observables", ptrTable, methods, NULL, 7, 0x1, 35, 0, -1, 38, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest;
}

@end

void RxObservablesSyncOnSubscribeTest_assertJustBehaviorWithRxObservable_OnSubscribe_(RxObservablesSyncOnSubscribeTest *self, id<RxObservable_OnSubscribe> os) {
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((id<RxObservable_OnSubscribe>) nil_chk(os)) callWithId:ts];
  [ts assertCompleted];
  [ts assertNoErrors];
  [ts assertValueCountWithInt:1];
}

void RxObservablesSyncOnSubscribeTest_init(RxObservablesSyncOnSubscribeTest *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest *new_RxObservablesSyncOnSubscribeTest_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest, init)
}

RxObservablesSyncOnSubscribeTest *create_RxObservablesSyncOnSubscribeTest_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest, init)
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 3000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 10000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservablesSyncOnSubscribeTest__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest)

@implementation RxObservablesSyncOnSubscribeTest_FooException

- (instancetype)initWithNSString:(NSString *)string {
  RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(self, string);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LRxObservablesSyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_FooException = { "FooException", "rx.observables", ptrTable, methods, NULL, 7, 0xa, 1, 0, 1, -1, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_FooException;
}

@end

void RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(RxObservablesSyncOnSubscribeTest_FooException *self, NSString *string) {
  JavaLangRuntimeException_initWithNSString_(self, string);
}

RxObservablesSyncOnSubscribeTest_FooException *new_RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_FooException, initWithNSString_, string)
}

RxObservablesSyncOnSubscribeTest_FooException *create_RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_FooException, initWithNSString_, string)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest_FooException)

@implementation RxObservablesSyncOnSubscribeTest_FooQux

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_FooQux = { "FooQux", "rx.observables", ptrTable, NULL, NULL, 7, 0x60a, 0, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_FooQux;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest_FooQux)

@implementation RxObservablesSyncOnSubscribeTest_Foo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_Foo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_Foo = { "Foo", "rx.observables", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_Foo;
}

@end

void RxObservablesSyncOnSubscribeTest_Foo_init(RxObservablesSyncOnSubscribeTest_Foo *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_Foo *new_RxObservablesSyncOnSubscribeTest_Foo_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_Foo, init)
}

RxObservablesSyncOnSubscribeTest_Foo *create_RxObservablesSyncOnSubscribeTest_Foo_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_Foo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest_Foo)

@implementation RxObservablesSyncOnSubscribeTest_BarQux

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_BarQux = { "BarQux", "rx.observables", ptrTable, NULL, NULL, 7, 0x60a, 0, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_BarQux;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest_BarQux)

@implementation RxObservablesSyncOnSubscribeTest_Bar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_Bar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_Bar = { "Bar", "rx.observables", ptrTable, methods, NULL, 7, 0xa, 1, 0, 0, -1, -1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_Bar;
}

@end

void RxObservablesSyncOnSubscribeTest_Bar_init(RxObservablesSyncOnSubscribeTest_Bar *self) {
  RxObservablesSyncOnSubscribeTest_Foo_init(self);
}

RxObservablesSyncOnSubscribeTest_Bar *new_RxObservablesSyncOnSubscribeTest_Bar_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_Bar, init)
}

RxObservablesSyncOnSubscribeTest_Bar *create_RxObservablesSyncOnSubscribeTest_Bar_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_Bar, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesSyncOnSubscribeTest_Bar)

@implementation RxObservablesSyncOnSubscribeTest_$1

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testObservableJustEquivalent", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$1 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$1;
}

@end

void RxObservablesSyncOnSubscribeTest_$1_init(RxObservablesSyncOnSubscribeTest_$1 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$1 *new_RxObservablesSyncOnSubscribeTest_$1_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$1, init)
}

RxObservablesSyncOnSubscribeTest_$1 *create_RxObservablesSyncOnSubscribeTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$1, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$2

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testStateAfterTerminal", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$2 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$2;
}

@end

void RxObservablesSyncOnSubscribeTest_$2_init(RxObservablesSyncOnSubscribeTest_$2 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$2 *new_RxObservablesSyncOnSubscribeTest_$2_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$2, init)
}

RxObservablesSyncOnSubscribeTest_$2 *create_RxObservablesSyncOnSubscribeTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$2, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$3

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:state];
  [subscriber onCompleted];
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(state)) intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testStateAfterTerminal", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$3 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$3;
}

@end

void RxObservablesSyncOnSubscribeTest_$3_init(RxObservablesSyncOnSubscribeTest_$3 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$3 *new_RxObservablesSyncOnSubscribeTest_$3_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$3, init)
}

RxObservablesSyncOnSubscribeTest_$3 *create_RxObservablesSyncOnSubscribeTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$3, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$4

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$finalStateValue_)) setWithInt:[((JavaLangInteger *) nil_chk(t)) intValue]];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$finalStateValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$finalStateValue_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesSyncOnSubscribeTest;", "testStateAfterTerminal", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$4 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$4;
}

@end

void RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$finalStateValue_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$4 *new_RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$4 *create_RxObservablesSyncOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$5

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [subscriber onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testMultipleOnNextValuesCallsOnError", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$5 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$5;
}

@end

void RxObservablesSyncOnSubscribeTest_$5_init(RxObservablesSyncOnSubscribeTest_$5 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$5 *new_RxObservablesSyncOnSubscribeTest_$5_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$5, init)
}

RxObservablesSyncOnSubscribeTest_$5 *create_RxObservablesSyncOnSubscribeTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$5, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$6

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onCompleted];
  [subscriber onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testMultipleOnCompleted", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$6 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$6;
}

@end

void RxObservablesSyncOnSubscribeTest_$6_init(RxObservablesSyncOnSubscribeTest_$6 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$6 *new_RxObservablesSyncOnSubscribeTest_$6_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$6, init)
}

RxObservablesSyncOnSubscribeTest_$6 *create_RxObservablesSyncOnSubscribeTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$6, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$7

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onCompleted];
  [subscriber onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testOnNextAfterOnComplete", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$7 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$7;
}

@end

void RxObservablesSyncOnSubscribeTest_$7_init(RxObservablesSyncOnSubscribeTest_$7 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$7 *new_RxObservablesSyncOnSubscribeTest_$7_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$7, init)
}

RxObservablesSyncOnSubscribeTest_$7 *create_RxObservablesSyncOnSubscribeTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$7, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$8

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [subscriber onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Forced failure 1")];
  [subscriber onErrorWithNSException:create_RxObservablesSyncOnSubscribeTest_FooException_initWithNSString_(@"Should not see this error.")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testMultipleOnErrors", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$8 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$8;
}

@end

void RxObservablesSyncOnSubscribeTest_$8_init(RxObservablesSyncOnSubscribeTest_$8 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$8 *new_RxObservablesSyncOnSubscribeTest_$8_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$8, init)
}

RxObservablesSyncOnSubscribeTest_$8 *create_RxObservablesSyncOnSubscribeTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$8, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$9

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testEmpty", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$9 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$9;
}

@end

void RxObservablesSyncOnSubscribeTest_$9_init(RxObservablesSyncOnSubscribeTest_$9 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$9 *new_RxObservablesSyncOnSubscribeTest_$9_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$9, init)
}

RxObservablesSyncOnSubscribeTest_$9 *create_RxObservablesSyncOnSubscribeTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$9, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$10

- (void)callWithId:(id<RxObserver>)subscriber {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testNever", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$10 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$10;
}

@end

void RxObservablesSyncOnSubscribeTest_$10_init(RxObservablesSyncOnSubscribeTest_$10 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$10 *new_RxObservablesSyncOnSubscribeTest_$10_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$10, init)
}

RxObservablesSyncOnSubscribeTest_$10 *create_RxObservablesSyncOnSubscribeTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$10, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$11

- (void)callWithId:(id<RxObserver>)subscriber {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testThrows", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$11 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$11;
}

@end

void RxObservablesSyncOnSubscribeTest_$11_init(RxObservablesSyncOnSubscribeTest_$11 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$11 *new_RxObservablesSyncOnSubscribeTest_$11_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$11, init)
}

RxObservablesSyncOnSubscribeTest_$11 *create_RxObservablesSyncOnSubscribeTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$11, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$12

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onCompleted];
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testThrowAfterCompleteFastPath", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$12 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$12;
}

@end

void RxObservablesSyncOnSubscribeTest_$12_init(RxObservablesSyncOnSubscribeTest_$12 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$12 *new_RxObservablesSyncOnSubscribeTest_$12_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$12, init)
}

RxObservablesSyncOnSubscribeTest_$12 *create_RxObservablesSyncOnSubscribeTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$12, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$13

- (void)callWithId:(id<RxObserver>)subscriber {
  @throw create_RxExceptionsTestException_initWithNSString_(@"Forced failure");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testThrowsSlowPath", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$13 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$13;
}

@end

void RxObservablesSyncOnSubscribeTest_$13_init(RxObservablesSyncOnSubscribeTest_$13 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$13 *new_RxObservablesSyncOnSubscribeTest_$13_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$13, init)
}

RxObservablesSyncOnSubscribeTest_$13 *create_RxObservablesSyncOnSubscribeTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$13, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$14

- (void)onStart {
  [self requestMoreWithLong:0];
}

- (instancetype)initWithRxObserver:(id<RxObserver>)arg$0 {
  RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(self, arg$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObservablesSyncOnSubscribeTest_$14 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(initWithRxObserver:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObserver;", "(Lrx/Observer<Ljava/lang/Object;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testThrowsSlowPath", "Lrx/observers/TestSubscriber<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$14 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$14;
}

@end

void RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(RxObservablesSyncOnSubscribeTest_$14 *self, id<RxObserver> arg$0) {
  RxObserversTestSubscriber_initWithRxObserver_(self, arg$0);
}

RxObservablesSyncOnSubscribeTest_$14 *new_RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(id<RxObserver> arg$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$14, initWithRxObserver_, arg$0)
}

RxObservablesSyncOnSubscribeTest_$14 *create_RxObservablesSyncOnSubscribeTest_$14_initWithRxObserver_(id<RxObserver> arg$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$14, initWithRxObserver_, arg$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$15

- (void)callWithId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onErrorWithNSException:create_RxExceptionsTestException_initWithNSString_(@"Forced failure")];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testError", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$15 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$15;
}

@end

void RxObservablesSyncOnSubscribeTest_$15_init(RxObservablesSyncOnSubscribeTest_$15 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$15 *new_RxObservablesSyncOnSubscribeTest_$15_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$15, init)
}

RxObservablesSyncOnSubscribeTest_$15 *create_RxObservablesSyncOnSubscribeTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$15, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$16

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testRange", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$16 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$16;
}

@end

void RxObservablesSyncOnSubscribeTest_$16_init(RxObservablesSyncOnSubscribeTest_$16 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$16 *new_RxObservablesSyncOnSubscribeTest_$16_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$16, init)
}

RxObservablesSyncOnSubscribeTest_$16 *create_RxObservablesSyncOnSubscribeTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$16, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$17

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)subscriber {
  [((id<RxObserver>) nil_chk(subscriber)) onNextWithId:state];
  if ([((JavaLangInteger *) nil_chk(state)) intValue] == 4000) {
    [subscriber onCompleted];
  }
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testRange", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$17 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$17;
}

@end

void RxObservablesSyncOnSubscribeTest_$17_init(RxObservablesSyncOnSubscribeTest_$17 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$17 *new_RxObservablesSyncOnSubscribeTest_$17_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$17, init)
}

RxObservablesSyncOnSubscribeTest_$17 *create_RxObservablesSyncOnSubscribeTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$17, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$18

- (id<JavaUtilIterator>)call {
  return [((id<JavaUtilList>) nil_chk(val$source_)) iterator];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)capture$0 {
  RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$source_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Integer;>;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)V", "Ljava/util/List<Ljava/lang/Integer;>;", "LRxObservablesSyncOnSubscribeTest;", "testFromIterable", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/util/Iterator<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$18 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$18;
}

@end

void RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(RxObservablesSyncOnSubscribeTest_$18 *self, id<JavaUtilList> capture$0) {
  JreStrongAssign(&self->val$source_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$18 *new_RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$18, initWithJavaUtilList_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$18 *create_RxObservablesSyncOnSubscribeTest_$18_initWithJavaUtilList_(id<JavaUtilList> capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$18, initWithJavaUtilList_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$19

- (id<JavaUtilIterator>)callWithId:(id<JavaUtilIterator>)it
                            withId:(id<RxObserver>)observer {
  if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:[it next]];
  }
  if (![it hasNext]) {
    [((id<RxObserver>) nil_chk(observer)) onCompleted];
  }
  return it;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilIterator;LRxObserver;", "(Ljava/util/Iterator<Ljava/lang/Integer;>;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/util/Iterator<Ljava/lang/Integer;>;", "LRxObservablesSyncOnSubscribeTest;", "testFromIterable", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/util/Iterator<Ljava/lang/Integer;>;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/util/Iterator<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$19 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$19;
}

@end

void RxObservablesSyncOnSubscribeTest_$19_init(RxObservablesSyncOnSubscribeTest_$19 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$19 *new_RxObservablesSyncOnSubscribeTest_$19_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$19, init)
}

RxObservablesSyncOnSubscribeTest_$19 *create_RxObservablesSyncOnSubscribeTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$19, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$20

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$20_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testInfiniteTake", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$20 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$20;
}

@end

void RxObservablesSyncOnSubscribeTest_$20_init(RxObservablesSyncOnSubscribeTest_$20 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$20 *new_RxObservablesSyncOnSubscribeTest_$20_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$20, init)
}

RxObservablesSyncOnSubscribeTest_$20 *create_RxObservablesSyncOnSubscribeTest_$20_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$20, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$21

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(state)) intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$21_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testInfiniteTake", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$21 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$21;
}

@end

void RxObservablesSyncOnSubscribeTest_$21_init(RxObservablesSyncOnSubscribeTest_$21 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$21 *new_RxObservablesSyncOnSubscribeTest_$21_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$21, init)
}

RxObservablesSyncOnSubscribeTest_$21 *create_RxObservablesSyncOnSubscribeTest_$21_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$21, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$22

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$22_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testInfiniteRequestSome", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$22 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$22;
}

@end

void RxObservablesSyncOnSubscribeTest_$22_init(RxObservablesSyncOnSubscribeTest_$22 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$22 *new_RxObservablesSyncOnSubscribeTest_$22_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$22, init)
}

RxObservablesSyncOnSubscribeTest_$22 *create_RxObservablesSyncOnSubscribeTest_$22_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$22, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$23

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(state)) intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$23_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testInfiniteRequestSome", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$23 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$23;
}

@end

void RxObservablesSyncOnSubscribeTest_$23_init(RxObservablesSyncOnSubscribeTest_$23 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$23 *new_RxObservablesSyncOnSubscribeTest_$23_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$23, init)
}

RxObservablesSyncOnSubscribeTest_$23 *create_RxObservablesSyncOnSubscribeTest_$23_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$23, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$24

- (JavaLangInteger *)call {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$24_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testUnsubscribeDownstream", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$24 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$24;
}

@end

void RxObservablesSyncOnSubscribeTest_$24_init(RxObservablesSyncOnSubscribeTest_$24 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$24 *new_RxObservablesSyncOnSubscribeTest_$24_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$24, init)
}

RxObservablesSyncOnSubscribeTest_$24 *create_RxObservablesSyncOnSubscribeTest_$24_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$24, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$25

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$25_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testUnsubscribeDownstream", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$25 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$25;
}

@end

void RxObservablesSyncOnSubscribeTest_$25_init(RxObservablesSyncOnSubscribeTest_$25 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$25 *new_RxObservablesSyncOnSubscribeTest_$25_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$25, init)
}

RxObservablesSyncOnSubscribeTest_$25 *create_RxObservablesSyncOnSubscribeTest_$25_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$25, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$26

- (void)callWithId:(id)t {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$l3_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$l3_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$l3_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LJavaUtilConcurrentCountDownLatch;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentRequests", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$26 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$26;
}

@end

void RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$26 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$l3_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$26 *new_RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$26, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$26 *create_RxObservablesSyncOnSubscribeTest_$26_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$26, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$27

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$27_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testConcurrentRequests", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$27 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$27;
}

@end

void RxObservablesSyncOnSubscribeTest_$27_init(RxObservablesSyncOnSubscribeTest_$27 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$27 *new_RxObservablesSyncOnSubscribeTest_$27_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$27, init)
}

RxObservablesSyncOnSubscribeTest_$27 *create_RxObservablesSyncOnSubscribeTest_$27_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$27, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$28

- (JavaLangInteger *)callWithId:(JavaLangInteger *)state
                         withId:(id<RxObserver>)observer {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$l2_)) countDown];
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(val$l1_)) awaitWithLong:2 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
      [((id<RxObserver>) nil_chk(observer)) onErrorWithNSException:create_JavaUtilConcurrentTimeoutException_init()];
      return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(state)) intValue] + 1);
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [((id<RxObserver>) nil_chk(observer)) onErrorWithNSException:e];
    return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(state)) intValue] + 1);
  }
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  if ([((JavaLangInteger *) nil_chk(state)) intValue] == 2000) {
    [observer onCompleted];
  }
  return JavaLangInteger_valueOfWithInt_([state intValue] + 1);
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0
                    withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1 {
  RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$l2_);
  RELEASE_(val$l1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$l2_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$l1_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentCountDownLatch;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentRequests", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$28 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$28;
}

@end

void RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$28 *self, JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  JreStrongAssign(&self->val$l2_, capture$0);
  JreStrongAssign(&self->val$l1_, capture$1);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$28 *new_RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$28, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

RxObservablesSyncOnSubscribeTest_$28 *create_RxObservablesSyncOnSubscribeTest_$28_initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0, JavaUtilConcurrentCountDownLatch *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$28, initWithJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentCountDownLatch_, capture$0, capture$1)
}

@implementation RxObservablesSyncOnSubscribeTest_$29

- (void)callWithId:(id<RxObserver>)observer {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$currentlyEvaluating_)) setWithBoolean:true];
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:nil];
  [val$currentlyEvaluating_ setWithBoolean:false];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$currentlyEvaluating_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$currentlyEvaluating_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Void;>;)V", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxObservablesSyncOnSubscribeTest;", "testUnsubscribeOutsideOfLoop", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Void;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$29 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$29;
}

@end

void RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObservablesSyncOnSubscribeTest_$29 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$currentlyEvaluating_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$29 *new_RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$29, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$29 *create_RxObservablesSyncOnSubscribeTest_$29_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$29, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$30

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$calledUnsubscribe_)) incrementAndGet];
  OrgJunitAssert_assertFalseWithBoolean_([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$currentlyEvaluating_)) get]);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                    withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1 {
  RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$calledUnsubscribe_);
  RELEASE_(val$currentlyEvaluating_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$calledUnsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$currentlyEvaluating_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxObservablesSyncOnSubscribeTest;", "testUnsubscribeOutsideOfLoop" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$30 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$30;
}

@end

void RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(RxObservablesSyncOnSubscribeTest_$30 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  JreStrongAssign(&self->val$calledUnsubscribe_, capture$0);
  JreStrongAssign(&self->val$currentlyEvaluating_, capture$1);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$30 *new_RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$30, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

RxObservablesSyncOnSubscribeTest_$30 *create_RxObservablesSyncOnSubscribeTest_$30_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$30, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicBoolean_, capture$0, capture$1)
}

@implementation RxObservablesSyncOnSubscribeTest_$31

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber {
  return create_RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(self, subscriber, subscriber);
}

- (instancetype)initWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCountDownLatch:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Void;>;)Lrx/Subscriber<-Ljava/lang/Void;>;", "LJavaUtilConcurrentCountDownLatch;", "LRxObservablesSyncOnSubscribeTest;", "testUnsubscribeOutsideOfLoop", "Ljava/lang/Object;Lrx/Observable$Operator<Ljava/lang/Void;Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$31 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$31;
}

@end

void RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(RxObservablesSyncOnSubscribeTest_$31 *self, JavaUtilConcurrentCountDownLatch *capture$0) {
  JreStrongAssign(&self->val$latch_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$31 *new_RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$31, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$31 *create_RxObservablesSyncOnSubscribeTest_$31_initWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$31, initWithJavaUtilConcurrentCountDownLatch_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$31_$1

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [((id<RxProducer>) nil_chk(p)) requestWithLong:1];
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onCompleted];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:e];
}

- (void)onNextWithId:(id)t {
  [((RxSubscriber *) nil_chk(val$subscriber_)) onNextWithId:t];
  [create_JavaLangThread_initWithJavaLangRunnable_(create_RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(self)) start];
}

- (instancetype)initWithRxObservablesSyncOnSubscribeTest_$31:(RxObservablesSyncOnSubscribeTest_$31 *)outer$
                                            withRxSubscriber:(RxSubscriber *)capture$0
                                            withRxSubscriber:(RxSubscriber *)arg$0 {
  RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(self, outer$, capture$0, arg$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObservablesSyncOnSubscribeTest_$31_$1 class]);
  RELEASE_(this$0_);
  RELEASE_(val$subscriber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setProducerWithRxProducer:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  methods[4].selector = @selector(initWithRxObservablesSyncOnSubscribeTest_$31:withRxSubscriber:withRxSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesSyncOnSubscribeTest_$31;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "setProducer", "LRxProducer;", "onError", "LNSException;", "onNext", "LJavaLangVoid;", "LRxObservablesSyncOnSubscribeTest_$31;LRxSubscriber;LRxSubscriber;", "(Lrx/observables/SyncOnSubscribeTest$31;Lrx/Subscriber<-Ljava/lang/Void;>;Lrx/Subscriber<*>;)V", "Lrx/Subscriber<-Ljava/lang/Void;>;", "LRxObservablesSyncOnSubscribeTest_$31;", "callWithId:", "Lrx/Subscriber<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$31_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 5, 2, 9, -1, 10, 11, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$31_$1;
}

@end

void RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31_$1 *self, RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$subscriber_, capture$0);
  RxSubscriber_initWithRxSubscriber_(self, arg$0);
}

RxObservablesSyncOnSubscribeTest_$31_$1 *new_RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$31_$1, initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_, outer$, capture$0, arg$0)
}

RxObservablesSyncOnSubscribeTest_$31_$1 *create_RxObservablesSyncOnSubscribeTest_$31_$1_initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_(RxObservablesSyncOnSubscribeTest_$31 *outer$, RxSubscriber *capture$0, RxSubscriber *arg$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$31_$1, initWithRxObservablesSyncOnSubscribeTest_$31_withRxSubscriber_withRxSubscriber_, outer$, capture$0, arg$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$31_$1_$1

- (void)run {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(this$0_->this$0_->val$latch_)) awaitWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  [this$0_ unsubscribe];
  [((RxSubscriber *) nil_chk(this$0_->val$subscriber_)) onCompleted];
  [this$0_->this$0_->val$latch_ countDown];
}

- (instancetype)initWithRxObservablesSyncOnSubscribeTest_$31_$1:(RxObservablesSyncOnSubscribeTest_$31_$1 *)outer$ {
  RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithRxObservablesSyncOnSubscribeTest_$31_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxObservablesSyncOnSubscribeTest_$31_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest_$31_$1;", "onNextWithId:" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$31_$1_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 0, -1, 1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$31_$1_$1;
}

@end

void RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1_$1 *self, RxObservablesSyncOnSubscribeTest_$31_$1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$31_$1_$1 *new_RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1 *outer$) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$31_$1_$1, initWithRxObservablesSyncOnSubscribeTest_$31_$1_, outer$)
}

RxObservablesSyncOnSubscribeTest_$31_$1_$1 *create_RxObservablesSyncOnSubscribeTest_$31_$1_$1_initWithRxObservablesSyncOnSubscribeTest_$31_$1_(RxObservablesSyncOnSubscribeTest_$31_$1 *outer$) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$31_$1_$1, initWithRxObservablesSyncOnSubscribeTest_$31_$1_, outer$)
}

@implementation RxObservablesSyncOnSubscribeTest_$32

- (id<JavaUtilMap>)call {
  return val$subscribers_;
}

- (instancetype)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$subscribers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentConcurrentHashMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$subscribers_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;", "LJavaUtilConcurrentConcurrentHashMap;", "(Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Object;Ljava/lang/Object;>;)V", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Object;Ljava/lang/Object;>;", "LRxObservablesSyncOnSubscribeTest;", "testIndependentStates", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$32 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$32;
}

@end

void RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(RxObservablesSyncOnSubscribeTest_$32 *self, JavaUtilConcurrentConcurrentHashMap *capture$0) {
  JreStrongAssign(&self->val$subscribers_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$32 *new_RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(JavaUtilConcurrentConcurrentHashMap *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$32, initWithJavaUtilConcurrentConcurrentHashMap_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$32 *create_RxObservablesSyncOnSubscribeTest_$32_initWithJavaUtilConcurrentConcurrentHashMap_(JavaUtilConcurrentConcurrentHashMap *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$32, initWithJavaUtilConcurrentConcurrentHashMap_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$33

- (id<JavaUtilMap>)callWithId:(id<JavaUtilMap>)state
                       withId:(id<RxObserver>)observer {
  [((id<JavaUtilMap>) nil_chk(state)) putWithId:observer withId:observer];
  [((id<RxObserver>) nil_chk(observer)) onCompleted];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$33_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;LRxObserver;", "(Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;", "LRxObservablesSyncOnSubscribeTest;", "testIndependentStates", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$33 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$33;
}

@end

void RxObservablesSyncOnSubscribeTest_$33_init(RxObservablesSyncOnSubscribeTest_$33 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$33 *new_RxObservablesSyncOnSubscribeTest_$33_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$33, init)
}

RxObservablesSyncOnSubscribeTest_$33 *create_RxObservablesSyncOnSubscribeTest_$33_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$33, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$34

- (JavaLangInteger *)call {
  return JavaLangInteger_valueOfWithInt_(1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$34_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testSubscribeOn", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$34 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$34;
}

@end

void RxObservablesSyncOnSubscribeTest_$34_init(RxObservablesSyncOnSubscribeTest_$34 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$34 *new_RxObservablesSyncOnSubscribeTest_$34_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$34, init)
}

RxObservablesSyncOnSubscribeTest_$34 *create_RxObservablesSyncOnSubscribeTest_$34_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$34, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$35

- (JavaLangInteger *)callWithId:(JavaLangInteger *)calls
                         withId:(id<RxObserver>)observer {
  if ([((JavaLangInteger *) nil_chk(calls)) intValue] > 400) {
    [((id<RxObserver>) nil_chk(observer)) onCompleted];
  }
  else {
    [((id<RxObserver>) nil_chk(observer)) onNextWithId:calls];
  }
  return JavaLangInteger_valueOfWithInt_([calls intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$35_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testSubscribeOn", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$35 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$35;
}

@end

void RxObservablesSyncOnSubscribeTest_$35_init(RxObservablesSyncOnSubscribeTest_$35 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$35 *new_RxObservablesSyncOnSubscribeTest_$35_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$35, init)
}

RxObservablesSyncOnSubscribeTest_$35 *create_RxObservablesSyncOnSubscribeTest_$35_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$35, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$36

- (void)callWithId:(JavaLangInteger *)t {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countUnsubscribe_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countUnsubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countUnsubscribe_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesSyncOnSubscribeTest;", "testSubscribeOn", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$36 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$36;
}

@end

void RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$36 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$countUnsubscribe_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$36 *new_RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$36, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$36 *create_RxObservablesSyncOnSubscribeTest_$36_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$36, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$37

- (JavaLangInteger *)callWithId:(JavaLangInteger *)calls
                         withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:calls];
  if ([((JavaLangInteger *) nil_chk(calls)) intValue] == 4000) [observer onCompleted];
  return JavaLangInteger_valueOfWithInt_([calls intValue] + 1);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$37_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LRxObserver;", "(Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/lang/Integer;", "LRxObservablesSyncOnSubscribeTest;", "testObserveOn", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$37 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$37;
}

@end

void RxObservablesSyncOnSubscribeTest_$37_init(RxObservablesSyncOnSubscribeTest_$37 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$37 *new_RxObservablesSyncOnSubscribeTest_$37_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$37, init)
}

RxObservablesSyncOnSubscribeTest_$37 *create_RxObservablesSyncOnSubscribeTest_$37_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$37, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$38

- (void)callWithId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$38_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Ljava/lang/Integer;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testCanRequestInOnNext", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$38 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$38;
}

@end

void RxObservablesSyncOnSubscribeTest_$38_init(RxObservablesSyncOnSubscribeTest_$38 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$38 *new_RxObservablesSyncOnSubscribeTest_$38_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$38, init)
}

RxObservablesSyncOnSubscribeTest_$38 *create_RxObservablesSyncOnSubscribeTest_$38_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$38, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$39

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$exception_)) setWithId:e];
}

- (void)onNextWithId:(JavaLangInteger *)t {
  [self requestWithLong:1];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [RxObservablesSyncOnSubscribeTest_$39 class]);
  RELEASE_(val$exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onCompleted);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$exception_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LJavaLangInteger;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObservablesSyncOnSubscribeTest;", "testCanRequestInOnNext", "Lrx/Subscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$39 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 4, 1, 7, -1, 8, 9, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$39;
}

@end

void RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservablesSyncOnSubscribeTest_$39 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$exception_, capture$0);
  RxSubscriber_init(self);
}

RxObservablesSyncOnSubscribeTest_$39 *new_RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$39, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$39 *create_RxObservablesSyncOnSubscribeTest_$39_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$39, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$40

- (id)generateState {
  id o = create_NSObject_init();
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$lastState_)) setWithId:o];
  return o;
}

- (id)nextWithId:(id)state
  withRxObserver:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:[((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$lastState_)) get]];
  OrgJunitAssert_assertEqualsWithId_withId_([val$lastState_ get], state);
  id o = create_NSObject_init();
  [val$lastState_ setWithId:o];
  return o;
}

- (void)onUnsubscribeWithId:(id)state {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countUnsubs_)) incrementAndGet];
  OrgJunitAssert_assertEqualsWithId_withId_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$lastState_)) get], state);
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1 {
  RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$lastState_);
  RELEASE_(val$countUnsubs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(generateState);
  methods[1].selector = @selector(nextWithId:withRxObserver:);
  methods[2].selector = @selector(onUnsubscribeWithId:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$lastState_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "val$countUnsubs_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Object;", "next", "LNSObject;LRxObserver;", "(Ljava/lang/Object;Lrx/Observer<-Ljava/lang/Object;>;)Ljava/lang/Object;", "onUnsubscribe", "LNSObject;", "(Ljava/lang/Object;)V", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentAtomicAtomicInteger;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Ljava/util/concurrent/atomic/AtomicInteger;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "LRxObservablesSyncOnSubscribeTest;", "testExtendingBase", "Lrx/observables/SyncOnSubscribe<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$40 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 4, 2, 10, -1, 11, 12, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$40;
}

@end

void RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$40 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  JreStrongAssign(&self->val$lastState_, capture$0);
  JreStrongAssign(&self->val$countUnsubs_, capture$1);
  RxObservablesSyncOnSubscribe_init(self);
}

RxObservablesSyncOnSubscribeTest_$40 *new_RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$40, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

RxObservablesSyncOnSubscribeTest_$40 *create_RxObservablesSyncOnSubscribeTest_$40_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$40, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, capture$1)
}

@implementation RxObservablesSyncOnSubscribeTest_$41

- (RxObservablesSyncOnSubscribeTest_Bar *)call {
  return create_RxObservablesSyncOnSubscribeTest_Bar_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$41_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_Bar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateSingleState", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/observables/SyncOnSubscribeTest$Bar;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$41 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$41;
}

@end

void RxObservablesSyncOnSubscribeTest_$41_init(RxObservablesSyncOnSubscribeTest_$41 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$41 *new_RxObservablesSyncOnSubscribeTest_$41_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$41, init)
}

RxObservablesSyncOnSubscribeTest_$41 *create_RxObservablesSyncOnSubscribeTest_$41_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$41, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$42

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
            withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$42_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_BarQux;LRxObserver;", "(Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateSingleState", "Ljava/lang/Object;Lrx/functions/Action2<Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$42 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$42;
}

@end

void RxObservablesSyncOnSubscribeTest_$42_init(RxObservablesSyncOnSubscribeTest_$42 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$42 *new_RxObservablesSyncOnSubscribeTest_$42_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$42, init)
}

RxObservablesSyncOnSubscribeTest_$42 *create_RxObservablesSyncOnSubscribeTest_$42_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$42, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$43

- (RxObservablesSyncOnSubscribeTest_Bar *)call {
  return create_RxObservablesSyncOnSubscribeTest_Bar_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$43_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_Bar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateSingleStateWithUnsub", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/observables/SyncOnSubscribeTest$Bar;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$43 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$43;
}

@end

void RxObservablesSyncOnSubscribeTest_$43_init(RxObservablesSyncOnSubscribeTest_$43 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$43 *new_RxObservablesSyncOnSubscribeTest_$43_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$43, init)
}

RxObservablesSyncOnSubscribeTest_$43 *create_RxObservablesSyncOnSubscribeTest_$43_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$43, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$44

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
            withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$44_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_BarQux;LRxObserver;", "(Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateSingleStateWithUnsub", "Ljava/lang/Object;Lrx/functions/Action2<Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$44 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$44;
}

@end

void RxObservablesSyncOnSubscribeTest_$44_init(RxObservablesSyncOnSubscribeTest_$44 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$44 *new_RxObservablesSyncOnSubscribeTest_$44_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$44, init)
}

RxObservablesSyncOnSubscribeTest_$44 *create_RxObservablesSyncOnSubscribeTest_$44_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$44, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$45

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_FooQux>)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$45_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_FooQux;", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateSingleStateWithUnsub", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/SyncOnSubscribeTest$FooQux;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$45 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$45;
}

@end

void RxObservablesSyncOnSubscribeTest_$45_init(RxObservablesSyncOnSubscribeTest_$45 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$45 *new_RxObservablesSyncOnSubscribeTest_$45_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$45, init)
}

RxObservablesSyncOnSubscribeTest_$45 *create_RxObservablesSyncOnSubscribeTest_$45_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$45, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$46

- (RxObservablesSyncOnSubscribeTest_Bar *)call {
  return create_RxObservablesSyncOnSubscribeTest_Bar_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$46_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_Bar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStateful", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/observables/SyncOnSubscribeTest$Bar;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$46 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$46;
}

@end

void RxObservablesSyncOnSubscribeTest_$46_init(RxObservablesSyncOnSubscribeTest_$46 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$46 *new_RxObservablesSyncOnSubscribeTest_$46_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$46, init)
}

RxObservablesSyncOnSubscribeTest_$46 *create_RxObservablesSyncOnSubscribeTest_$46_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$46, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$47

- (id<RxObservablesSyncOnSubscribeTest_BarQux>)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
                                                   withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  [observer onCompleted];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$47_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_BarQux;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_BarQux;LRxObserver;", "(Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)Lrx/observables/SyncOnSubscribeTest$BarQux;", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStateful", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;Lrx/observables/SyncOnSubscribeTest$BarQux;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$47 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$47;
}

@end

void RxObservablesSyncOnSubscribeTest_$47_init(RxObservablesSyncOnSubscribeTest_$47 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$47 *new_RxObservablesSyncOnSubscribeTest_$47_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$47, init)
}

RxObservablesSyncOnSubscribeTest_$47 *create_RxObservablesSyncOnSubscribeTest_$47_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$47, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$48

- (RxObservablesSyncOnSubscribeTest_Bar *)call {
  return create_RxObservablesSyncOnSubscribeTest_Bar_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$48_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_Bar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStatefulWithUnsub", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/observables/SyncOnSubscribeTest$Bar;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$48 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$48;
}

@end

void RxObservablesSyncOnSubscribeTest_$48_init(RxObservablesSyncOnSubscribeTest_$48 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$48 *new_RxObservablesSyncOnSubscribeTest_$48_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$48, init)
}

RxObservablesSyncOnSubscribeTest_$48 *create_RxObservablesSyncOnSubscribeTest_$48_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$48, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$49

- (id<RxObservablesSyncOnSubscribeTest_BarQux>)callWithId:(id<RxObservablesSyncOnSubscribeTest_BarQux>)state
                                                   withId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:state];
  [observer onCompleted];
  return state;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$49_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservablesSyncOnSubscribeTest_BarQux;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_BarQux;LRxObserver;", "(Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)Lrx/observables/SyncOnSubscribeTest$BarQux;", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStatefulWithUnsub", "Ljava/lang/Object;Lrx/functions/Func2<Lrx/observables/SyncOnSubscribeTest$BarQux;Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;Lrx/observables/SyncOnSubscribeTest$BarQux;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$49 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$49;
}

@end

void RxObservablesSyncOnSubscribeTest_$49_init(RxObservablesSyncOnSubscribeTest_$49 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$49 *new_RxObservablesSyncOnSubscribeTest_$49_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$49, init)
}

RxObservablesSyncOnSubscribeTest_$49 *create_RxObservablesSyncOnSubscribeTest_$49_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$49, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$50

- (void)callWithId:(id<RxObservablesSyncOnSubscribeTest_FooQux>)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$50_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservablesSyncOnSubscribeTest_FooQux;", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStatefulWithUnsub", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/observables/SyncOnSubscribeTest$FooQux;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$50 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$50;
}

@end

void RxObservablesSyncOnSubscribeTest_$50_init(RxObservablesSyncOnSubscribeTest_$50 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$50 *new_RxObservablesSyncOnSubscribeTest_$50_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$50, init)
}

RxObservablesSyncOnSubscribeTest_$50 *create_RxObservablesSyncOnSubscribeTest_$50_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$50, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$51

- (void)callWithId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:create_RxObservablesSyncOnSubscribeTest_Foo_init()];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$51_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStateless", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$51 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$51;
}

@end

void RxObservablesSyncOnSubscribeTest_$51_init(RxObservablesSyncOnSubscribeTest_$51 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$51 *new_RxObservablesSyncOnSubscribeTest_$51_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$51, init)
}

RxObservablesSyncOnSubscribeTest_$51 *create_RxObservablesSyncOnSubscribeTest_$51_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$51, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$52

- (void)callWithId:(id<RxObserver>)observer {
  [((id<RxObserver>) nil_chk(observer)) onNextWithId:create_RxObservablesSyncOnSubscribeTest_Foo_init()];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$52_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObserver;", "(Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStatelessWithUnsub", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Observer<-Lrx/observables/SyncOnSubscribeTest$FooQux;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$52 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$52;
}

@end

void RxObservablesSyncOnSubscribeTest_$52_init(RxObservablesSyncOnSubscribeTest_$52 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$52 *new_RxObservablesSyncOnSubscribeTest_$52_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$52, init)
}

RxObservablesSyncOnSubscribeTest_$52 *create_RxObservablesSyncOnSubscribeTest_$52_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$52, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$53

- (void)call {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$53_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testGenericsCreateStatelessWithUnsub" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$53 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, -1, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$53;
}

@end

void RxObservablesSyncOnSubscribeTest_$53_init(RxObservablesSyncOnSubscribeTest_$53 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$53 *new_RxObservablesSyncOnSubscribeTest_$53_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$53, init)
}

RxObservablesSyncOnSubscribeTest_$53 *create_RxObservablesSyncOnSubscribeTest_$53_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$53, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$54

- (JavaUtilConcurrentAtomicAtomicInteger *)call {
  return val$wip_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilConcurrentAtomicAtomicInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentUnsubscribe3000Iterations", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/util/concurrent/atomic/AtomicInteger;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$54 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, 3, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$54;
}

@end

void RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxObservablesSyncOnSubscribeTest_$54 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$wip_, capture$0);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$54 *new_RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$54, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxObservablesSyncOnSubscribeTest_$54 *create_RxObservablesSyncOnSubscribeTest_$54_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$54, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxObservablesSyncOnSubscribeTest_$55

- (JavaUtilConcurrentAtomicAtomicInteger *)callWithId:(JavaUtilConcurrentAtomicAtomicInteger *)s
                                               withId:(id<RxObserver>)o {
  [((id<RxObserver>) nil_chk(o)) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$55_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilConcurrentAtomicAtomicInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilConcurrentAtomicAtomicInteger;LRxObserver;", "(Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Observer<-Ljava/lang/Integer;>;)Ljava/util/concurrent/atomic/AtomicInteger;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentUnsubscribe3000Iterations", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Observer<-Ljava/lang/Integer;>;Ljava/util/concurrent/atomic/AtomicInteger;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$55 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$55;
}

@end

void RxObservablesSyncOnSubscribeTest_$55_init(RxObservablesSyncOnSubscribeTest_$55 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$55 *new_RxObservablesSyncOnSubscribeTest_$55_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$55, init)
}

RxObservablesSyncOnSubscribeTest_$55 *create_RxObservablesSyncOnSubscribeTest_$55_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$55, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$56

- (void)callWithId:(JavaUtilConcurrentAtomicAtomicInteger *)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(s)) getAndIncrement];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$56_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentUnsubscribe3000Iterations", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/util/concurrent/atomic/AtomicInteger;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$56 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$56;
}

@end

void RxObservablesSyncOnSubscribeTest_$56_init(RxObservablesSyncOnSubscribeTest_$56 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$56 *new_RxObservablesSyncOnSubscribeTest_$56_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$56, init)
}

RxObservablesSyncOnSubscribeTest_$56 *create_RxObservablesSyncOnSubscribeTest_$56_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$56, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$57

- (id)call {
  [((JavaUtilConcurrentCyclicBarrier *) nil_chk(val$cb_)) await];
  [((RxObserversTestSubscriber *) nil_chk(val$ts_)) requestMoreWithLong:1];
  return nil;
}

- (instancetype)initWithJavaUtilConcurrentCyclicBarrier:(JavaUtilConcurrentCyclicBarrier *)capture$0
                          withRxObserversTestSubscriber:(RxObserversTestSubscriber *)capture$1 {
  RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$cb_);
  RELEASE_(val$ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCyclicBarrier:withRxObserversTestSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cb_", "LJavaUtilConcurrentCyclicBarrier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaUtilConcurrentCyclicBarrier;LRxObserversTestSubscriber;", "(Ljava/util/concurrent/CyclicBarrier;Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;)V", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;", "LRxObservablesSyncOnSubscribeTest;", "testConcurrentUnsubscribe3000Iterations", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$57 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$57;
}

@end

void RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(RxObservablesSyncOnSubscribeTest_$57 *self, JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  JreStrongAssign(&self->val$cb_, capture$0);
  JreStrongAssign(&self->val$ts_, capture$1);
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$57 *new_RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$57, initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_, capture$0, capture$1)
}

RxObservablesSyncOnSubscribeTest_$57 *create_RxObservablesSyncOnSubscribeTest_$57_initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_(JavaUtilConcurrentCyclicBarrier *capture$0, RxObserversTestSubscriber *capture$1) {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$57, initWithJavaUtilConcurrentCyclicBarrier_withRxObserversTestSubscriber_, capture$0, capture$1)
}

@implementation RxObservablesSyncOnSubscribeTest_$58

- (id)call {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$58_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxObservablesSyncOnSubscribeTest;", "testStateThrows", "Ljava/lang/Object;Lrx/functions/Func0<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$58 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$58;
}

@end

void RxObservablesSyncOnSubscribeTest_$58_init(RxObservablesSyncOnSubscribeTest_$58 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$58 *new_RxObservablesSyncOnSubscribeTest_$58_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$58, init)
}

RxObservablesSyncOnSubscribeTest_$58 *create_RxObservablesSyncOnSubscribeTest_$58_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$58, init)
}

@implementation RxObservablesSyncOnSubscribeTest_$59

- (void)callWithId:(id)s
            withId:(id<RxObserver>)o {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservablesSyncOnSubscribeTest_$59_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;LRxObserver;", "(Ljava/lang/Object;Lrx/Observer<-Ljava/lang/Object;>;)V", "LRxObservablesSyncOnSubscribeTest;", "testStateThrows", "Ljava/lang/Object;Lrx/functions/Action2<Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxObservablesSyncOnSubscribeTest_$59 = { "", "rx.observables", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxObservablesSyncOnSubscribeTest_$59;
}

@end

void RxObservablesSyncOnSubscribeTest_$59_init(RxObservablesSyncOnSubscribeTest_$59 *self) {
  NSObject_init(self);
}

RxObservablesSyncOnSubscribeTest_$59 *new_RxObservablesSyncOnSubscribeTest_$59_init() {
  J2OBJC_NEW_IMPL(RxObservablesSyncOnSubscribeTest_$59, init)
}

RxObservablesSyncOnSubscribeTest_$59 *create_RxObservablesSyncOnSubscribeTest_$59_init() {
  J2OBJC_CREATE_IMPL(RxObservablesSyncOnSubscribeTest_$59, init)
}
