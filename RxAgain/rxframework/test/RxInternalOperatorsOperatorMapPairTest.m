//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorMapPairTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOperatorMapPairTest.h"
#include "RxObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorMapPairTest__Annotations$0();

@interface RxInternalOperatorsOperatorMapPairTest_$1 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMapPairTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorMapPairTest_$1_init(RxInternalOperatorsOperatorMapPairTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorMapPairTest_$1 *new_RxInternalOperatorsOperatorMapPairTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMapPairTest_$1 *create_RxInternalOperatorsOperatorMapPairTest_$1_init();

@interface RxInternalOperatorsOperatorMapPairTest_$2 : NSObject < RxFunctionsFunc2 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMapPairTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorMapPairTest_$2_init(RxInternalOperatorsOperatorMapPairTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorMapPairTest_$2 *new_RxInternalOperatorsOperatorMapPairTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMapPairTest_$2 *create_RxInternalOperatorsOperatorMapPairTest_$2_init();

@implementation RxInternalOperatorsOperatorMapPairTest

- (void)castCrashUnsubscribes {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOperatorMapPairTest_$1_init() withRxFunctionsFunc2:create_RxInternalOperatorsOperatorMapPairTest_$2_init()])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not subscribed?", [ps hasObservers]);
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Subscribed?", [ps hasObservers]);
  [((RxObserversTestSubscriber *) nil_chk(ts)) assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMapPairTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(castCrashUnsubscribes);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorMapPairTest__Annotations$0 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMapPairTest = { "OperatorMapPairTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorMapPairTest;
}

@end

void RxInternalOperatorsOperatorMapPairTest_init(RxInternalOperatorsOperatorMapPairTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMapPairTest *new_RxInternalOperatorsOperatorMapPairTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMapPairTest, init)
}

RxInternalOperatorsOperatorMapPairTest *create_RxInternalOperatorsOperatorMapPairTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMapPairTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorMapPairTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMapPairTest)

@implementation RxInternalOperatorsOperatorMapPairTest_$1

- (RxObservable *)callWithId:(JavaLangInteger *)t {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMapPairTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/Integer;>;", "LRxInternalOperatorsOperatorMapPairTest;", "castCrashUnsubscribes", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMapPairTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorMapPairTest_$1;
}

@end

void RxInternalOperatorsOperatorMapPairTest_$1_init(RxInternalOperatorsOperatorMapPairTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMapPairTest_$1 *new_RxInternalOperatorsOperatorMapPairTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMapPairTest_$1, init)
}

RxInternalOperatorsOperatorMapPairTest_$1 *create_RxInternalOperatorsOperatorMapPairTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMapPairTest_$1, init)
}

@implementation RxInternalOperatorsOperatorMapPairTest_$2

- (JavaLangInteger *)callWithId:(JavaLangInteger *)t1
                         withId:(JavaLangInteger *)t2 {
  return t1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMapPairTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;LJavaLangInteger;", "LRxInternalOperatorsOperatorMapPairTest;", "castCrashUnsubscribes", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMapPairTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOperatorMapPairTest_$2;
}

@end

void RxInternalOperatorsOperatorMapPairTest_$2_init(RxInternalOperatorsOperatorMapPairTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMapPairTest_$2 *new_RxInternalOperatorsOperatorMapPairTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMapPairTest_$2, init)
}

RxInternalOperatorsOperatorMapPairTest_$2 *create_RxInternalOperatorsOperatorMapPairTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMapPairTest_$2, init)
}
