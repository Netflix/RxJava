//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorTakeUntilTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsOperatorTakeUntilTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$7();

@interface RxInternalOperatorsOperatorTakeUntilTest_TestObservable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxObserver> observer_;
  id<RxSubscription> s_;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s;

- (void)sendOnCompleted;

- (void)sendOnNextWithNSString:(NSString *)value;

- (void)sendOnErrorWithNSException:(NSException *)e;

- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeUntilTest_TestObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeUntilTest_TestObservable, observer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorTakeUntilTest_TestObservable, s_, id<RxSubscription>)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(RxInternalOperatorsOperatorTakeUntilTest_TestObservable *self, id<RxSubscription> s);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeUntilTest_TestObservable *new_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(id<RxSubscription> s) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeUntilTest_TestObservable *create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(id<RxSubscription> s);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTakeUntilTest_TestObservable)

@interface RxInternalOperatorsOperatorTakeUntilTest_$1 : RxObserversTestSubscriber

- (void)onStart;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTakeUntilTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorTakeUntilTest_$1_init(RxInternalOperatorsOperatorTakeUntilTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorTakeUntilTest_$1 *new_RxInternalOperatorsOperatorTakeUntilTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorTakeUntilTest_$1 *create_RxInternalOperatorsOperatorTakeUntilTest_$1_init();

@implementation RxInternalOperatorsOperatorTakeUntilTest

- (void)testTakeUntil {
  id<RxSubscription> sSource = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  id<RxSubscription> sOther = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sSource);
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *other = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sOther);
  id<RxObserver> result = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *stringObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeUntilWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(other)];
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:result];
  [source sendOnNextWithNSString:@"one"];
  [source sendOnNextWithNSString:@"two"];
  [other sendOnNextWithNSString:@"three"];
  [source sendOnNextWithNSString:@"four"];
  [source sendOnCompleted];
  [other sendOnCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"four"];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sSource, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sOther, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testTakeUntilSourceCompleted {
  id<RxSubscription> sSource = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  id<RxSubscription> sOther = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sSource);
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *other = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sOther);
  id<RxObserver> result = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *stringObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeUntilWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(other)];
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:result];
  [source sendOnNextWithNSString:@"one"];
  [source sendOnNextWithNSString:@"two"];
  [source sendOnCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sSource, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sOther, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testTakeUntilSourceError {
  id<RxSubscription> sSource = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  id<RxSubscription> sOther = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sSource);
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *other = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sOther);
  NSException *error = create_NSException_init();
  id<RxObserver> result = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *stringObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeUntilWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(other)];
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:result];
  [source sendOnNextWithNSString:@"one"];
  [source sendOnNextWithNSString:@"two"];
  [source sendOnErrorWithNSException:error];
  [source sendOnNextWithNSString:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:error];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sSource, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sOther, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testTakeUntilOtherError {
  id<RxSubscription> sSource = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  id<RxSubscription> sOther = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sSource);
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *other = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sOther);
  NSException *error = create_NSException_init();
  id<RxObserver> result = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *stringObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeUntilWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(other)];
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:result];
  [source sendOnNextWithNSString:@"one"];
  [source sendOnNextWithNSString:@"two"];
  [other sendOnErrorWithNSException:error];
  [source sendOnNextWithNSString:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:error];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onCompleted];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sSource, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sOther, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testTakeUntilOtherCompleted {
  id<RxSubscription> sSource = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  id<RxSubscription> sOther = OrgMockitoMockito_mockWithIOSClass_(RxSubscription_class_());
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *source = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sSource);
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable *other = create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(sOther);
  id<RxObserver> result = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  RxObservable *stringObservable = [((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(source))) takeUntilWithRxObservable:RxObservable_createWithRxObservable_OnSubscribe_(other)];
  [((RxObservable *) nil_chk(stringObservable)) subscribeWithRxObserver:result];
  [source sendOnNextWithNSString:@"one"];
  [source sendOnNextWithNSString:@"two"];
  [other sendOnCompleted];
  [source sendOnNextWithNSString:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(0)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(result, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sSource, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
  [((id<RxSubscription>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(sOther, OrgMockitoMockito_timesWithInt_(1)))) unsubscribe];
}

- (void)testUntilFires {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeUntilWithRxObservable:until])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [until onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source still has observers", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Until still has observers", [until hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TestSubscriber is unsubscribed", [ts isUnsubscribed]);
}

- (void)testMainCompletes {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeUntilWithRxObservable:until])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [source onCompleted];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source still has observers", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Until still has observers", [until hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TestSubscriber is unsubscribed", [ts isUnsubscribed]);
}

- (void)testDownstreamUnsubscribes {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(source)) takeUntilWithRxObservable:until])) takeWithInt:1])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([source hasObservers]);
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  [ts assertTerminalEvent];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Source still has observers", [source hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Until still has observers", [until hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TestSubscriber is unsubscribed", [ts isUnsubscribed]);
}

- (void)testBackpressure {
  RxSubjectsPublishSubject *until = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxInternalOperatorsOperatorTakeUntilTest_$1_init();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) takeUntilWithRxObservable:until])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([((RxSubjectsPublishSubject *) nil_chk(until)) hasObservers]);
  [ts requestMoreWithLong:1];
  [ts assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:JavaLangInteger_class_()])];
  [ts assertNoErrors];
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(@"TestSubscriber completed", 0, [ts getCompletions]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Until still has observers", [until hasObservers]);
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"TestSubscriber is unsubscribed", [ts isUnsubscribed]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeUntilTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testTakeUntil);
  methods[1].selector = @selector(testTakeUntilSourceCompleted);
  methods[2].selector = @selector(testTakeUntilSourceError);
  methods[3].selector = @selector(testTakeUntilOtherError);
  methods[4].selector = @selector(testTakeUntilOtherCompleted);
  methods[5].selector = @selector(testUntilFires);
  methods[6].selector = @selector(testMainCompletes);
  methods[7].selector = @selector(testDownstreamUnsubscribes);
  methods[8].selector = @selector(testBackpressure);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$0, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$1, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$2, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$3, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$4, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$5, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$6, (void *)&RxInternalOperatorsOperatorTakeUntilTest__Annotations$7, "LRxInternalOperatorsOperatorTakeUntilTest_TestObservable;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeUntilTest = { "OperatorTakeUntilTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, 8, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorTakeUntilTest;
}

@end

void RxInternalOperatorsOperatorTakeUntilTest_init(RxInternalOperatorsOperatorTakeUntilTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorTakeUntilTest *new_RxInternalOperatorsOperatorTakeUntilTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeUntilTest, init)
}

RxInternalOperatorsOperatorTakeUntilTest *create_RxInternalOperatorsOperatorTakeUntilTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeUntilTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorTakeUntilTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeUntilTest)

@implementation RxInternalOperatorsOperatorTakeUntilTest_TestObservable

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s {
  RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(self, s);
  return self;
}

- (void)sendOnCompleted {
  [((id<RxObserver>) nil_chk(observer_)) onCompleted];
}

- (void)sendOnNextWithNSString:(NSString *)value {
  [((id<RxObserver>) nil_chk(observer_)) onNextWithId:value];
}

- (void)sendOnErrorWithNSException:(NSException *)e {
  [((id<RxObserver>) nil_chk(observer_)) onErrorWithNSException:e];
}

- (void)callWithId:(RxSubscriber *)observer {
  JreStrongAssign(&self->observer_, observer);
  [((RxSubscriber *) nil_chk(observer)) addWithRxSubscription:s_];
}

- (void)dealloc {
  RELEASE_(observer_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxSubscription:);
  methods[1].selector = @selector(sendOnCompleted);
  methods[2].selector = @selector(sendOnNextWithNSString:);
  methods[3].selector = @selector(sendOnErrorWithNSException:);
  methods[4].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "observer_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "s_", "LRxSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscription;", "sendOnNext", "LNSString;", "sendOnError", "LNSException;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/String;>;)V", "Lrx/Observer<-Ljava/lang/String;>;", "LRxInternalOperatorsOperatorTakeUntilTest;", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeUntilTest_TestObservable = { "TestObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 5, 2, 9, -1, -1, 10, -1 };
  return &_RxInternalOperatorsOperatorTakeUntilTest_TestObservable;
}

@end

void RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(RxInternalOperatorsOperatorTakeUntilTest_TestObservable *self, id<RxSubscription> s) {
  NSObject_init(self);
  JreStrongAssign(&self->observer_, nil);
  JreStrongAssign(&self->s_, s);
}

RxInternalOperatorsOperatorTakeUntilTest_TestObservable *new_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(id<RxSubscription> s) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeUntilTest_TestObservable, initWithRxSubscription_, s)
}

RxInternalOperatorsOperatorTakeUntilTest_TestObservable *create_RxInternalOperatorsOperatorTakeUntilTest_TestObservable_initWithRxSubscription_(id<RxSubscription> s) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeUntilTest_TestObservable, initWithRxSubscription_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorTakeUntilTest_TestObservable)

@implementation RxInternalOperatorsOperatorTakeUntilTest_$1

- (void)onStart {
  [self requestMoreWithLong:0];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorTakeUntilTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  JreCheckFinalize(self, [RxInternalOperatorsOperatorTakeUntilTest_$1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onStart);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRxInternalOperatorsOperatorTakeUntilTest;", "testBackpressure", "Lrx/observers/TestSubscriber<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorTakeUntilTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 0, -1, 1, 2, -1 };
  return &_RxInternalOperatorsOperatorTakeUntilTest_$1;
}

@end

void RxInternalOperatorsOperatorTakeUntilTest_$1_init(RxInternalOperatorsOperatorTakeUntilTest_$1 *self) {
  RxObserversTestSubscriber_init(self);
}

RxInternalOperatorsOperatorTakeUntilTest_$1 *new_RxInternalOperatorsOperatorTakeUntilTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorTakeUntilTest_$1, init)
}

RxInternalOperatorsOperatorTakeUntilTest_$1 *create_RxInternalOperatorsOperatorTakeUntilTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorTakeUntilTest_$1, init)
}
