//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OnSubscribeMapTest.java
//

#include "CoTouchlabDoppelTestingPlatformUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsOnErrorNotImplementedException.h"
#include "RxExceptionsTestException.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxFunctionsFunc2.h"
#include "RxInternalOperatorsOnSubscribeMapTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserver.h"
#include "RxObserversTestSubscriber.h"
#include "RxScheduler.h"
#include "RxSchedulersSchedulers.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Answers.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mock.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/MockitoAnnotations.h"
#include "org/mockito/verification/VerificationMode.h"

@interface RxInternalOperatorsOnSubscribeMapTest ()

+ (id<JavaUtilMap>)getMapWithNSString:(NSString *)prefix;

@end

__attribute__((unused)) static id<JavaUtilMap> RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(NSString *prefix);

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$9();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$10();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$11();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$12();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$13();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$14();

@interface RxInternalOperatorsOnSubscribeMapTest_$1 : NSObject < RxFunctionsFunc2 >

- (NSString *)callWithId:(NSString *)value
                  withId:(JavaLangInteger *)index;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$1_init(RxInternalOperatorsOnSubscribeMapTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$1_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$2 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(id<JavaUtilMap>)map;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$2_init(RxInternalOperatorsOnSubscribeMapTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$2 *new_RxInternalOperatorsOnSubscribeMapTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$2 *create_RxInternalOperatorsOnSubscribeMapTest_$2_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$3 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(JavaLangInteger *)id_;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$3_init(RxInternalOperatorsOnSubscribeMapTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$3 *new_RxInternalOperatorsOnSubscribeMapTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$3 *create_RxInternalOperatorsOnSubscribeMapTest_$3_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$3_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(id<JavaUtilMap>)map;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$3_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$3_$1_init(RxInternalOperatorsOnSubscribeMapTest_$3_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$3_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$3_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$3_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$3_$1_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$4 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(RxObservable *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$4_init(RxInternalOperatorsOnSubscribeMapTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$4 *new_RxInternalOperatorsOnSubscribeMapTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$4 *create_RxInternalOperatorsOnSubscribeMapTest_$4_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$4_$1 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(id<JavaUtilMap>)map;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$4_$1)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$4_$1_init(RxInternalOperatorsOnSubscribeMapTest_$4_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$4_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$4_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$4_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$4_$1_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$5 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$5)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$5_init(RxInternalOperatorsOnSubscribeMapTest_$5 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$5 *new_RxInternalOperatorsOnSubscribeMapTest_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$5 *create_RxInternalOperatorsOnSubscribeMapTest_$5_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$6 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSException *)t1;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$6)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$6_init(RxInternalOperatorsOnSubscribeMapTest_$6 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$6 *new_RxInternalOperatorsOnSubscribeMapTest_$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$6 *create_RxInternalOperatorsOnSubscribeMapTest_$6_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$7 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)arg0;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$7)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$7_init(RxInternalOperatorsOnSubscribeMapTest_$7 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$7 *new_RxInternalOperatorsOnSubscribeMapTest_$7_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$7 *create_RxInternalOperatorsOnSubscribeMapTest_$7_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$8 : NSObject < RxFunctionsFunc1 >

- (NSString *)callWithId:(NSString *)arg0;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$8)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$8_init(RxInternalOperatorsOnSubscribeMapTest_$8 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$8 *new_RxInternalOperatorsOnSubscribeMapTest_$8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$8 *create_RxInternalOperatorsOnSubscribeMapTest_$8_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$9 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$9)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$9_init(RxInternalOperatorsOnSubscribeMapTest_$9 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$9 *new_RxInternalOperatorsOnSubscribeMapTest_$9_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$9 *create_RxInternalOperatorsOnSubscribeMapTest_$9_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$10 : NSObject < RxFunctionsFunc1 >

- (id)callWithId:(id)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$10)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$10_init(RxInternalOperatorsOnSubscribeMapTest_$10 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$10 *new_RxInternalOperatorsOnSubscribeMapTest_$10_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$10 *create_RxInternalOperatorsOnSubscribeMapTest_$10_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$11 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$11)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$11_init(RxInternalOperatorsOnSubscribeMapTest_$11 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$11 *new_RxInternalOperatorsOnSubscribeMapTest_$11_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$11 *create_RxInternalOperatorsOnSubscribeMapTest_$11_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$12 : NSObject < RxObservable_OnSubscribe >

- (void)callWithId:(RxSubscriber *)observer;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$12)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$12_init(RxInternalOperatorsOnSubscribeMapTest_$12 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$12 *new_RxInternalOperatorsOnSubscribeMapTest_$12_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$12 *create_RxInternalOperatorsOnSubscribeMapTest_$12_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$13 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(id)object;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$13)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$13_init(RxInternalOperatorsOnSubscribeMapTest_$13 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$13 *new_RxInternalOperatorsOnSubscribeMapTest_$13_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$13 *create_RxInternalOperatorsOnSubscribeMapTest_$13_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$14 : NSObject < RxFunctionsFunc1 > {
 @public
  jint count_;
}

- (id)callWithId:(id)object;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$14)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$14_init(RxInternalOperatorsOnSubscribeMapTest_$14 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$14 *new_RxInternalOperatorsOnSubscribeMapTest_$14_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$14 *create_RxInternalOperatorsOnSubscribeMapTest_$14_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$15 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(id)object;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$15)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$15_init(RxInternalOperatorsOnSubscribeMapTest_$15 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$15 *new_RxInternalOperatorsOnSubscribeMapTest_$15_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$15 *create_RxInternalOperatorsOnSubscribeMapTest_$15_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$16 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$16)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$16_init(RxInternalOperatorsOnSubscribeMapTest_$16 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$16 *new_RxInternalOperatorsOnSubscribeMapTest_$16_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$16 *create_RxInternalOperatorsOnSubscribeMapTest_$16_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$17 : NSObject < RxFunctionsFunc1 >

- (RxObservable *)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$17)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$17_init(RxInternalOperatorsOnSubscribeMapTest_$17 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$17 *new_RxInternalOperatorsOnSubscribeMapTest_$17_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$17 *create_RxInternalOperatorsOnSubscribeMapTest_$17_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$18 : NSObject < RxFunctionsAction1 >

- (void)callWithId:(NSString *)s;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$18)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$18_init(RxInternalOperatorsOnSubscribeMapTest_$18 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$18 *new_RxInternalOperatorsOnSubscribeMapTest_$18_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$18 *create_RxInternalOperatorsOnSubscribeMapTest_$18_init();

@interface RxInternalOperatorsOnSubscribeMapTest_$19 : NSObject < RxFunctionsFunc1 >

- (JavaLangInteger *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeMapTest_$19)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeMapTest_$19_init(RxInternalOperatorsOnSubscribeMapTest_$19 *self);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$19 *new_RxInternalOperatorsOnSubscribeMapTest_$19_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeMapTest_$19 *create_RxInternalOperatorsOnSubscribeMapTest_$19_init();

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOnSubscribeMapTest)

id<RxFunctionsFunc2> RxInternalOperatorsOnSubscribeMapTest_APPEND_INDEX;

@implementation RxInternalOperatorsOnSubscribeMapTest

- (void)before {
  OrgMockitoMockitoAnnotations_initMocksWithId_(self);
}

- (void)testMap {
  id<JavaUtilMap> m1 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"One");
  id<JavaUtilMap> m2 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Two");
  RxObservable *observable = RxObservable_justWithId_withId_(m1, m2);
  RxObservable *m = [((RxObservable *) nil_chk(observable)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$2_init()];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:stringObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"OneFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"TwoFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMapMany {
  RxObservable *ids = RxObservable_justWithId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2));
  RxObservable *m = [((RxObservable *) nil_chk(ids)) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$3_init()];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:stringObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"OneFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"TwoFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"ThreeFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"FourFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMapMany2 {
  id<JavaUtilMap> m1 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"One");
  id<JavaUtilMap> m2 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Two");
  RxObservable *observable1 = RxObservable_justWithId_withId_(m1, m2);
  id<JavaUtilMap> m3 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Three");
  id<JavaUtilMap> m4 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Four");
  RxObservable *observable2 = RxObservable_justWithId_withId_(m3, m4);
  RxObservable *observable = RxObservable_justWithId_withId_(observable1, observable2);
  RxObservable *m = [((RxObservable *) nil_chk(observable)) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$4_init()];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:stringObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"OneFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"TwoFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"ThreeFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"FourFirst"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMapWithError {
  RxObservable *w = RxObservable_justWithId_withId_withId_withId_withId_(@"one", @"fail", @"two", @"three", @"fail");
  RxObservable *m = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(w)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$5_init()])) doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeMapTest_$6_init()];
  [((RxObservable *) nil_chk(m)) subscribeWithRxObserver:stringObserver_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_never()))) onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(stringObserver_, OrgMockitoMockito_timesWithInt_(1)))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testMapWithIssue417 {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$7_init()])) toBlocking])) single];
}

- (void)testMapWithErrorInFuncAndThreadPoolScheduler {
  RxObservable *m = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"one"))) observeOnWithRxScheduler:RxSchedulersSchedulers_computation()])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$8_init()];
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk(m)) toBlocking])) last];
}

- (void)testErrorPassesThruMap {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 0))) last])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$9_init()])) toBlocking])) single];
}

- (void)testErrorPassesThruMap2 {
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangIllegalStateException_init()))) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$10_init()])) toBlocking])) single];
}

- (void)testMapWithErrorInFunc {
  if (CoTouchlabDoppelTestingPlatformUtils_isJ2objc()) return;
  [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 1))) last])) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$11_init()])) toBlocking])) single];
}

- (void)verifyExceptionIsThrownIfThereIsNoExceptionHandler {
  id<RxObservable_OnSubscribe> creator = create_RxInternalOperatorsOnSubscribeMapTest_$12_init();
  id<RxFunctionsFunc1> manyMapper = create_RxInternalOperatorsOnSubscribeMapTest_$13_init();
  id<RxFunctionsFunc1> mapper = create_RxInternalOperatorsOnSubscribeMapTest_$14_init();
  id<RxFunctionsAction1> onNext = create_RxInternalOperatorsOnSubscribeMapTest_$15_init();
  @try {
    [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(creator))) flatMapWithRxFunctionsFunc1:manyMapper])) mapWithRxFunctionsFunc1:mapper])) subscribeWithRxFunctionsAction1:onNext];
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaLangRuntimeException *) nil_chk(e)) printStackTrace];
    @throw e;
  }
}

+ (id<JavaUtilMap>)getMapWithNSString:(NSString *)prefix {
  return RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(prefix);
}

- (void)testShouldNotSwallowOnErrorNotImplementedException {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_withId_(@"a", @"b"))) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$16_init()])) flatMapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$17_init()])) forEachWithRxFunctionsAction1:create_RxInternalOperatorsOnSubscribeMapTest_$18_init()];
}

- (void)functionCrashUnsubscribes {
  RxSubjectsPublishSubject *ps = RxSubjectsPublishSubject_create();
  RxObserversTestSubscriber *ts = create_RxObserversTestSubscriber_init();
  [((RxObservable *) nil_chk([((RxSubjectsPublishSubject *) nil_chk(ps)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$19_init()])) unsafeSubscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(@"Not subscribed?", [ps hasObservers]);
  [ps onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(@"Subscribed?", [ps hasObservers]);
  [ts assertErrorWithIOSClass:RxExceptionsTestException_class_()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(stringObserver_);
  RELEASE_(stringObserver2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 11, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 15, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 16, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(before);
  methods[1].selector = @selector(testMap);
  methods[2].selector = @selector(testMapMany);
  methods[3].selector = @selector(testMapMany2);
  methods[4].selector = @selector(testMapWithError);
  methods[5].selector = @selector(testMapWithIssue417);
  methods[6].selector = @selector(testMapWithErrorInFuncAndThreadPoolScheduler);
  methods[7].selector = @selector(testErrorPassesThruMap);
  methods[8].selector = @selector(testErrorPassesThruMap2);
  methods[9].selector = @selector(testMapWithErrorInFunc);
  methods[10].selector = @selector(verifyExceptionIsThrownIfThereIsNoExceptionHandler);
  methods[11].selector = @selector(getMapWithNSString:);
  methods[12].selector = @selector(testShouldNotSwallowOnErrorNotImplementedException);
  methods[13].selector = @selector(functionCrashUnsubscribes);
  methods[14].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stringObserver_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 17, 18 },
    { "stringObserver2_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 17, 19 },
    { "APPEND_INDEX", "LRxFunctionsFunc2;", .constantValue.asLong = 0, 0x18, -1, 20, 21, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$0, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$1, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$2, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$3, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$4, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$5, "LJavaLangInterruptedException;", (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$6, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$7, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$8, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$9, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$10, "getMap", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$11, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$12, "Lrx/Observer<Ljava/lang/String;>;", (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$13, (void *)&RxInternalOperatorsOnSubscribeMapTest__Annotations$14, &RxInternalOperatorsOnSubscribeMapTest_APPEND_INDEX, "Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest = { "OnSubscribeMapTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 15, 3, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOnSubscribeMapTest class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOnSubscribeMapTest_APPEND_INDEX, new_RxInternalOperatorsOnSubscribeMapTest_$1_init());
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOnSubscribeMapTest)
  }
}

@end

id<JavaUtilMap> RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(NSString *prefix) {
  RxInternalOperatorsOnSubscribeMapTest_initialize();
  id<JavaUtilMap> m = create_JavaUtilHashMap_init();
  [m putWithId:@"firstName" withId:JreStrcat("$$", prefix, @"First")];
  [m putWithId:@"lastName" withId:JreStrcat("$$", prefix, @"Last")];
  return m;
}

void RxInternalOperatorsOnSubscribeMapTest_init(RxInternalOperatorsOnSubscribeMapTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest *new_RxInternalOperatorsOnSubscribeMapTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest, init)
}

RxInternalOperatorsOnSubscribeMapTest *create_RxInternalOperatorsOnSubscribeMapTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest, init)
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalArgumentException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangIllegalStateException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(RxExceptionsOnErrorNotImplementedException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOnSubscribeMapTest__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgMockitoMock(JreLoadEnum(OrgMockitoAnswers, RETURNS_DEFAULTS), [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()], @"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeMapTest)

@implementation RxInternalOperatorsOnSubscribeMapTest_$1

- (NSString *)callWithId:(NSString *)value
                  withId:(JavaLangInteger *)index {
  return JreStrcat("$@", value, index);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeMapTest;", "Ljava/lang/Object;Lrx/functions/Func2<Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$1;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$1_init(RxInternalOperatorsOnSubscribeMapTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$1, init)
}

RxInternalOperatorsOnSubscribeMapTest_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$2

- (NSString *)callWithId:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) getWithId:@"firstName"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/String;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMap", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$2 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$2;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$2_init(RxInternalOperatorsOnSubscribeMapTest_$2 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$2 *new_RxInternalOperatorsOnSubscribeMapTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$2, init)
}

RxInternalOperatorsOnSubscribeMapTest_$2 *create_RxInternalOperatorsOnSubscribeMapTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$2, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$3

- (RxObservable *)callWithId:(JavaLangInteger *)id_ {
  RxObservable *subObservable;
  if ([((JavaLangInteger *) nil_chk(id_)) intValue] == 1) {
    id<JavaUtilMap> m1 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"One");
    id<JavaUtilMap> m2 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Two");
    subObservable = RxObservable_justWithId_withId_(m1, m2);
  }
  else {
    id<JavaUtilMap> m3 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Three");
    id<JavaUtilMap> m4 = RxInternalOperatorsOnSubscribeMapTest_getMapWithNSString_(@"Four");
    subObservable = RxObservable_justWithId_withId_(m3, m4);
  }
  return [((RxObservable *) nil_chk(subObservable)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$3_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapMany", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$3;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$3_init(RxInternalOperatorsOnSubscribeMapTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$3 *new_RxInternalOperatorsOnSubscribeMapTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$3, init)
}

RxInternalOperatorsOnSubscribeMapTest_$3 *create_RxInternalOperatorsOnSubscribeMapTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$3, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$3_$1

- (NSString *)callWithId:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) getWithId:@"firstName"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$3_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/String;", "LRxInternalOperatorsOnSubscribeMapTest_$3;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$3_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$3_$1;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$3_$1_init(RxInternalOperatorsOnSubscribeMapTest_$3_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$3_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$3_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$3_$1, init)
}

RxInternalOperatorsOnSubscribeMapTest_$3_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$3_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$3_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$4

- (RxObservable *)callWithId:(RxObservable *)o {
  return [((RxObservable *) nil_chk(o)) mapWithRxFunctionsFunc1:create_RxInternalOperatorsOnSubscribeMapTest_$4_$1_init()];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxObservable;", "(Lrx/Observable<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapMany2", "Ljava/lang/Object;Lrx/functions/Func1<Lrx/Observable<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$4;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$4_init(RxInternalOperatorsOnSubscribeMapTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$4 *new_RxInternalOperatorsOnSubscribeMapTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$4, init)
}

RxInternalOperatorsOnSubscribeMapTest_$4 *create_RxInternalOperatorsOnSubscribeMapTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$4, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$4_$1

- (NSString *)callWithId:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) getWithId:@"firstName"];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$4_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/String;", "LRxInternalOperatorsOnSubscribeMapTest_$4;", "callWithId:", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$4_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$4_$1;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$4_$1_init(RxInternalOperatorsOnSubscribeMapTest_$4_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$4_$1 *new_RxInternalOperatorsOnSubscribeMapTest_$4_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$4_$1, init)
}

RxInternalOperatorsOnSubscribeMapTest_$4_$1 *create_RxInternalOperatorsOnSubscribeMapTest_$4_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$4_$1, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$5

- (NSString *)callWithId:(NSString *)s {
  if ([@"fail" isEqual:s]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Forced Failure");
  }
  return s;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapWithError", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$5 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$5;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$5_init(RxInternalOperatorsOnSubscribeMapTest_$5 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$5 *new_RxInternalOperatorsOnSubscribeMapTest_$5_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$5, init)
}

RxInternalOperatorsOnSubscribeMapTest_$5 *create_RxInternalOperatorsOnSubscribeMapTest_$5_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$5, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$6

- (void)callWithId:(NSException *)t1 {
  [((NSException *) nil_chk(t1)) printStackTrace];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSException;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapWithError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$6 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$6;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$6_init(RxInternalOperatorsOnSubscribeMapTest_$6 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$6 *new_RxInternalOperatorsOnSubscribeMapTest_$6_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$6, init)
}

RxInternalOperatorsOnSubscribeMapTest_$6 *create_RxInternalOperatorsOnSubscribeMapTest_$6_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$6, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$7

- (JavaLangInteger *)callWithId:(JavaLangInteger *)arg0 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"any error");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapWithIssue417", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$7 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$7;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$7_init(RxInternalOperatorsOnSubscribeMapTest_$7 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$7 *new_RxInternalOperatorsOnSubscribeMapTest_$7_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$7, init)
}

RxInternalOperatorsOnSubscribeMapTest_$7 *create_RxInternalOperatorsOnSubscribeMapTest_$7_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$7, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$8

- (NSString *)callWithId:(NSString *)arg0 {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"any error");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapWithErrorInFuncAndThreadPoolScheduler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$8 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$8;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$8_init(RxInternalOperatorsOnSubscribeMapTest_$8 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$8 *new_RxInternalOperatorsOnSubscribeMapTest_$8_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$8, init)
}

RxInternalOperatorsOnSubscribeMapTest_$8 *create_RxInternalOperatorsOnSubscribeMapTest_$8_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$8, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$9

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i {
  return i;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$9_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeMapTest;", "testErrorPassesThruMap", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$9 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$9;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$9_init(RxInternalOperatorsOnSubscribeMapTest_$9 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$9 *new_RxInternalOperatorsOnSubscribeMapTest_$9_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$9, init)
}

RxInternalOperatorsOnSubscribeMapTest_$9 *create_RxInternalOperatorsOnSubscribeMapTest_$9_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$9, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$10

- (id)callWithId:(id)i {
  return i;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$10_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOnSubscribeMapTest;", "testErrorPassesThruMap2", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$10 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$10;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$10_init(RxInternalOperatorsOnSubscribeMapTest_$10 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$10 *new_RxInternalOperatorsOnSubscribeMapTest_$10_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$10, init)
}

RxInternalOperatorsOnSubscribeMapTest_$10 *create_RxInternalOperatorsOnSubscribeMapTest_$10_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$10, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$11

- (JavaLangInteger *)callWithId:(JavaLangInteger *)i {
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(i)) intValue] / 0);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$11_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeMapTest;", "testMapWithErrorInFunc", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$11 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$11;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$11_init(RxInternalOperatorsOnSubscribeMapTest_$11 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$11 *new_RxInternalOperatorsOnSubscribeMapTest_$11_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$11, init)
}

RxInternalOperatorsOnSubscribeMapTest_$11 *create_RxInternalOperatorsOnSubscribeMapTest_$11_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$11, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$12

- (void)callWithId:(RxSubscriber *)observer {
  [((RxSubscriber *) nil_chk(observer)) onNextWithId:@"a"];
  [observer onNextWithId:@"b"];
  [observer onNextWithId:@"c"];
  [observer onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$12_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Object;>;)V", "LRxInternalOperatorsOnSubscribeMapTest;", "verifyExceptionIsThrownIfThereIsNoExceptionHandler", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$12 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$12;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$12_init(RxInternalOperatorsOnSubscribeMapTest_$12 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$12 *new_RxInternalOperatorsOnSubscribeMapTest_$12_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$12, init)
}

RxInternalOperatorsOnSubscribeMapTest_$12 *create_RxInternalOperatorsOnSubscribeMapTest_$12_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$12, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$13

- (RxObservable *)callWithId:(id)object {
  return RxObservable_justWithId_(object);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$13_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "(Ljava/lang/Object;)Lrx/Observable<Ljava/lang/Object;>;", "LRxInternalOperatorsOnSubscribeMapTest;", "verifyExceptionIsThrownIfThereIsNoExceptionHandler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Lrx/Observable<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$13 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$13;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$13_init(RxInternalOperatorsOnSubscribeMapTest_$13 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$13 *new_RxInternalOperatorsOnSubscribeMapTest_$13_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$13, init)
}

RxInternalOperatorsOnSubscribeMapTest_$13 *create_RxInternalOperatorsOnSubscribeMapTest_$13_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$13, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$14

- (id)callWithId:(id)object {
  ++count_;
  if (count_ > 2) {
    @throw create_JavaLangRuntimeException_init();
  }
  return object;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$14_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOnSubscribeMapTest;", "verifyExceptionIsThrownIfThereIsNoExceptionHandler", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$14 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$14;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$14_init(RxInternalOperatorsOnSubscribeMapTest_$14 *self) {
  NSObject_init(self);
  self->count_ = 0;
}

RxInternalOperatorsOnSubscribeMapTest_$14 *new_RxInternalOperatorsOnSubscribeMapTest_$14_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$14, init)
}

RxInternalOperatorsOnSubscribeMapTest_$14 *create_RxInternalOperatorsOnSubscribeMapTest_$14_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$14, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$15

- (void)callWithId:(id)object {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[nil_chk(object) description]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$15_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "LRxInternalOperatorsOnSubscribeMapTest;", "verifyExceptionIsThrownIfThereIsNoExceptionHandler", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$15 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$15;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$15_init(RxInternalOperatorsOnSubscribeMapTest_$15 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$15 *new_RxInternalOperatorsOnSubscribeMapTest_$15_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$15, init)
}

RxInternalOperatorsOnSubscribeMapTest_$15 *create_RxInternalOperatorsOnSubscribeMapTest_$15_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$15, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$16

- (RxObservable *)callWithId:(NSString *)s {
  return RxObservable_justWithId_withId_(JreStrcat("$C", s, '1'), JreStrcat("$C", s, '2'));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$16_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeMapTest;", "testShouldNotSwallowOnErrorNotImplementedException", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$16 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$16;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$16_init(RxInternalOperatorsOnSubscribeMapTest_$16 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$16 *new_RxInternalOperatorsOnSubscribeMapTest_$16_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$16, init)
}

RxInternalOperatorsOnSubscribeMapTest_$16 *create_RxInternalOperatorsOnSubscribeMapTest_$16_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$16, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$17

- (RxObservable *)callWithId:(NSString *)s {
  return RxObservable_errorWithNSException_(create_JavaLangException_initWithNSString_(@"test"));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$17_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxObservable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "(Ljava/lang/String;)Lrx/Observable<Ljava/lang/String;>;", "LRxInternalOperatorsOnSubscribeMapTest;", "testShouldNotSwallowOnErrorNotImplementedException", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/String;Lrx/Observable<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$17 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$17;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$17_init(RxInternalOperatorsOnSubscribeMapTest_$17 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$17 *new_RxInternalOperatorsOnSubscribeMapTest_$17_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$17, init)
}

RxInternalOperatorsOnSubscribeMapTest_$17 *create_RxInternalOperatorsOnSubscribeMapTest_$17_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$17, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$18

- (void)callWithId:(NSString *)s {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$18_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSString;", "LRxInternalOperatorsOnSubscribeMapTest;", "testShouldNotSwallowOnErrorNotImplementedException", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$18 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$18;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$18_init(RxInternalOperatorsOnSubscribeMapTest_$18 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$18 *new_RxInternalOperatorsOnSubscribeMapTest_$18_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$18, init)
}

RxInternalOperatorsOnSubscribeMapTest_$18 *create_RxInternalOperatorsOnSubscribeMapTest_$18_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$18, init)
}

@implementation RxInternalOperatorsOnSubscribeMapTest_$19

- (JavaLangInteger *)callWithId:(JavaLangInteger *)v {
  @throw create_RxExceptionsTestException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOnSubscribeMapTest_$19_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOnSubscribeMapTest;", "functionCrashUnsubscribes", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeMapTest_$19 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, 3, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeMapTest_$19;
}

@end

void RxInternalOperatorsOnSubscribeMapTest_$19_init(RxInternalOperatorsOnSubscribeMapTest_$19 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeMapTest_$19 *new_RxInternalOperatorsOnSubscribeMapTest_$19_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeMapTest_$19, init)
}

RxInternalOperatorsOnSubscribeMapTest_$19 *create_RxInternalOperatorsOnSubscribeMapTest_$19_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeMapTest_$19, init)
}
