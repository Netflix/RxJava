//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorDoOnSubscribeTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalOperatorsOperatorDoOnSubscribeTest.h"
#include "RxObservable.h"
#include "RxObservablesConnectableObservable.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$2();

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$1 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$1, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$2 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$2, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$3 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$3)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$3, val$count_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$4 : NSObject < RxObservable_OnSubscribe > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$onSubscribed_;
  JavaUtilConcurrentAtomicAtomicReference *val$sref_;
}

- (void)callWithId:(RxSubscriber *)s;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$4)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$4, val$onSubscribed_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$4, val$sref_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1);

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$5 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countBefore_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$5, val$countBefore_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@interface RxInternalOperatorsOperatorDoOnSubscribeTest_$6 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *val$countAfter_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDoOnSubscribeTest_$6)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDoOnSubscribeTest_$6, val$countAfter_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0);

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest

- (void)testDoOnSubscribe {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o = [((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(o)) subscribe];
  [o subscribe];
  [o subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [count get]);
}

- (void)testDoOnSubscribe2 {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)])) takeWithInt:1])) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(count)];
  [((RxObservable *) nil_chk(o)) subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [count get]);
}

- (void)testDoOnUnSubscribeWorksWithRefCount {
  JavaUtilConcurrentAtomicAtomicInteger *onSubscribed = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *countBefore = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicInteger *countAfter = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  JavaUtilConcurrentAtomicAtomicReference *sref = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObservable *o = [((RxObservable *) nil_chk([((RxObservablesConnectableObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_createWithRxObservable_OnSubscribe_(create_RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(onSubscribed, sref)))) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(countBefore)])) publish])) refCount])) doOnSubscribeWithRxFunctionsAction0:create_RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(countAfter)];
  [((RxObservable *) nil_chk(o)) subscribe];
  [o subscribe];
  [o subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [countBefore get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [onSubscribed get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(3, [countAfter get]);
  [((RxSubscriber *) nil_chk([sref get])) onCompleted];
  [o subscribe];
  [o subscribe];
  [o subscribe];
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [countBefore get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(2, [onSubscribed get]);
  OrgJunitAssert_assertEqualsWithLong_withLong_(6, [countAfter get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorDoOnSubscribeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testDoOnSubscribe);
  methods[1].selector = @selector(testDoOnSubscribe2);
  methods[2].selector = @selector(testDoOnUnSubscribeWorksWithRefCount);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$0, (void *)&RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$1, (void *)&RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$2 };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest = { "OperatorDoOnSubscribeTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_init(RxInternalOperatorsOperatorDoOnSubscribeTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest *new_RxInternalOperatorsOperatorDoOnSubscribeTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest, init)
}

RxInternalOperatorsOperatorDoOnSubscribeTest *create_RxInternalOperatorsOperatorDoOnSubscribeTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorDoOnSubscribeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorDoOnSubscribeTest)

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$1

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnSubscribe" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$1;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$1 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$1_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$1, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$2

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnSubscribe2" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$2;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$2 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$2_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$2, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$3

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$count_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnSubscribe2" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$3 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$3;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$count_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$3 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$3_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$3, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$4

- (void)callWithId:(RxSubscriber *)s {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$onSubscribed_)) incrementAndGet];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$sref_)) setWithId:s];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0
                  withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$1 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$onSubscribed_);
  RELEASE_(val$sref_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$onSubscribed_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sref_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Integer;>;)V", "LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-Ljava/lang/Integer;>;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscriber<-Ljava/lang/Integer;>;>;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$4 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$4;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  JreStrongAssign(&self->val$onSubscribed_, capture$0);
  JreStrongAssign(&self->val$sref_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$4 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$4_initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicInteger *capture$0, JavaUtilConcurrentAtomicAtomicReference *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$4, initWithJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1)
}

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$5

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countBefore_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countBefore_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countBefore_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$5;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$countBefore_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$5 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$5_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$5, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

@implementation RxInternalOperatorsOperatorDoOnSubscribeTest_$6

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$countAfter_)) incrementAndGet];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$0 {
  RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$countAfter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$countAfter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "LRxInternalOperatorsOperatorDoOnSubscribeTest;", "testDoOnUnSubscribeWorksWithRefCount" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorDoOnSubscribeTest_$6 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxInternalOperatorsOperatorDoOnSubscribeTest_$6;
}

@end

void RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *self, JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  JreStrongAssign(&self->val$countAfter_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *new_RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}

RxInternalOperatorsOperatorDoOnSubscribeTest_$6 *create_RxInternalOperatorsOperatorDoOnSubscribeTest_$6_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorDoOnSubscribeTest_$6, initWithJavaUtilConcurrentAtomicAtomicInteger_, capture$0)
}
