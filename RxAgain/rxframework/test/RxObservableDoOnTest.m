//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/ObservableDoOnTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxFunctionsAction1.h"
#include "RxObservable.h"
#include "RxObservableDoOnTest.h"
#include "RxObservablesBlockingObservable.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxObservableDoOnTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxObservableDoOnTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxObservableDoOnTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxObservableDoOnTest__Annotations$3();

@interface RxObservableDoOnTest_$1 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$r_;
}

- (void)callWithId:(NSString *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableDoOnTest_$1)

J2OBJC_FIELD_SETTER(RxObservableDoOnTest_$1, val$r_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservableDoOnTest_$1 *new_RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableDoOnTest_$1 *create_RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObservableDoOnTest_$2 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$r_;
}

- (void)callWithId:(NSException *)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableDoOnTest_$2)

J2OBJC_FIELD_SETTER(RxObservableDoOnTest_$2, val$r_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservableDoOnTest_$2 *new_RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableDoOnTest_$2 *create_RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObservableDoOnTest_$3 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$r_;
}

- (void)callWithId:(id)v;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableDoOnTest_$3)

J2OBJC_FIELD_SETTER(RxObservableDoOnTest_$3, val$r_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0);

__attribute__((unused)) static RxObservableDoOnTest_$3 *new_RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableDoOnTest_$3 *create_RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0);

@interface RxObservableDoOnTest_$4 : NSObject < RxFunctionsAction0 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$r_;
}

- (void)call;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservableDoOnTest_$4)

J2OBJC_FIELD_SETTER(RxObservableDoOnTest_$4, val$r_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObservableDoOnTest_$4 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxObservableDoOnTest_$4 *new_RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservableDoOnTest_$4 *create_RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

@implementation RxObservableDoOnTest

- (void)testDoOnEach {
  JavaUtilConcurrentAtomicAtomicReference *r = create_JavaUtilConcurrentAtomicAtomicReference_init();
  NSString *output = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"one"))) doOnNextWithRxFunctionsAction1:create_RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(r)])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", output);
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", [r get]);
}

- (void)testDoOnError {
  JavaUtilConcurrentAtomicAtomicReference *r = create_JavaUtilConcurrentAtomicAtomicReference_init();
  NSException *t = nil;
  @try {
    [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"an error")))) doOnErrorWithRxFunctionsAction1:create_RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(r)])) toBlocking])) single];
    OrgJunitAssert_failWithNSString_(@"expected exception, not a return value");
  }
  @catch (NSException *e) {
    t = e;
  }
  OrgJunitAssert_assertNotNullWithId_(t);
  OrgJunitAssert_assertEqualsWithId_withId_(t, [r get]);
}

- (void)testDoOnErrorWithActionOfTypeObject {
  JavaUtilConcurrentAtomicAtomicReference *r = create_JavaUtilConcurrentAtomicAtomicReference_init();
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"an error")))) doOnErrorWithRxFunctionsAction1:create_RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(r)])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertTrueWithBoolean_([((JavaLangBoolean *) nil_chk([r get])) booleanValue]);
}

- (void)testDoOnCompleted {
  JavaUtilConcurrentAtomicAtomicBoolean *r = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  NSString *output = [((RxObservablesBlockingObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(@"one"))) doOnCompletedWithRxFunctionsAction0:create_RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(r)])) toBlocking])) single];
  OrgJunitAssert_assertEqualsWithId_withId_(@"one", output);
  OrgJunitAssert_assertTrueWithBoolean_([r get]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObservableDoOnTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testDoOnEach);
  methods[1].selector = @selector(testDoOnError);
  methods[2].selector = @selector(testDoOnErrorWithActionOfTypeObject);
  methods[3].selector = @selector(testDoOnCompleted);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxObservableDoOnTest__Annotations$0, (void *)&RxObservableDoOnTest__Annotations$1, (void *)&RxObservableDoOnTest__Annotations$2, (void *)&RxObservableDoOnTest__Annotations$3 };
  static const J2ObjcClassInfo _RxObservableDoOnTest = { "ObservableDoOnTest", "rx", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RxObservableDoOnTest;
}

@end

void RxObservableDoOnTest_init(RxObservableDoOnTest *self) {
  NSObject_init(self);
}

RxObservableDoOnTest *new_RxObservableDoOnTest_init() {
  J2OBJC_NEW_IMPL(RxObservableDoOnTest, init)
}

RxObservableDoOnTest *create_RxObservableDoOnTest_init() {
  J2OBJC_CREATE_IMPL(RxObservableDoOnTest, init)
}

IOSObjectArray *RxObservableDoOnTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservableDoOnTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservableDoOnTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxObservableDoOnTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservableDoOnTest)

@implementation RxObservableDoOnTest_$1

- (void)callWithId:(NSString *)v {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$r_)) setWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSString;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", "LRxObservableDoOnTest;", "testDoOnEach", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _RxObservableDoOnTest_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservableDoOnTest_$1;
}

@end

void RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxObservableDoOnTest_$1 *new_RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableDoOnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservableDoOnTest_$1 *create_RxObservableDoOnTest_$1_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableDoOnTest_$1, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObservableDoOnTest_$2

- (void)callWithId:(NSException *)v {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$r_)) setWithId:v];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxObservableDoOnTest;", "testDoOnError", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxObservableDoOnTest_$2 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservableDoOnTest_$2;
}

@end

void RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxObservableDoOnTest_$2 *new_RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableDoOnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservableDoOnTest_$2 *create_RxObservableDoOnTest_$2_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableDoOnTest_$2, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObservableDoOnTest_$3

- (void)callWithId:(id)v {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$r_)) setWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0 {
  RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSObject;", "LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Boolean;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Boolean;>;", "LRxObservableDoOnTest;", "testDoOnErrorWithActionOfTypeObject", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObservableDoOnTest_$3 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 5, -1, 6, 7, -1 };
  return &_RxObservableDoOnTest_$3;
}

@end

void RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(RxObservableDoOnTest_$3 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxObservableDoOnTest_$3 *new_RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableDoOnTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

RxObservableDoOnTest_$3 *create_RxObservableDoOnTest_$3_initWithJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableDoOnTest_$3, initWithJavaUtilConcurrentAtomicAtomicReference_, capture$0)
}

@implementation RxObservableDoOnTest_$4

- (void)call {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$r_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$r_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$r_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxObservableDoOnTest;", "testDoOnCompleted" };
  static const J2ObjcClassInfo _RxObservableDoOnTest_$4 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_RxObservableDoOnTest_$4;
}

@end

void RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxObservableDoOnTest_$4 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$r_, capture$0);
  NSObject_init(self);
}

RxObservableDoOnTest_$4 *new_RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxObservableDoOnTest_$4, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxObservableDoOnTest_$4 *create_RxObservableDoOnTest_$4_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservableDoOnTest_$4, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
