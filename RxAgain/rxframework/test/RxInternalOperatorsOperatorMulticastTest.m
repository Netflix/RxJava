//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorMulticastTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsFunc0.h"
#include "RxInternalOperatorsOperatorMulticast.h"
#include "RxInternalOperatorsOperatorMulticastTest.h"
#include "RxObservablesConnectableObservable.h"
#include "RxObserver.h"
#include "RxSubjectsPublishSubject.h"
#include "RxSubjectsSubject.h"
#include "RxSubscription.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$2();

@interface RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory : NSObject < RxFunctionsFunc0 >

- (RxSubjectsSubject *)call;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory)

__attribute__((unused)) static void RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *self);

__attribute__((unused)) static RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *new_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *create_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory)

@implementation RxInternalOperatorsOperatorMulticastTest

- (void)testMulticast {
  RxSubjectsSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *multicasted = create_RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(source, create_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init());
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [multicasted subscribeWithRxObserver:observer];
  [((RxSubjectsSubject *) nil_chk(source)) onNextWithId:@"one"];
  [source onNextWithId:@"two"];
  [multicasted connect];
  [source onNextWithId:@"three"];
  [source onNextWithId:@"four"];
  [source onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testMulticastConnectTwice {
  RxSubjectsSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *multicasted = create_RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(source, create_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init());
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [multicasted subscribeWithRxObserver:observer];
  [((RxSubjectsSubject *) nil_chk(source)) onNextWithId:@"one"];
  id<RxSubscription> sub = [multicasted connect];
  id<RxSubscription> sub2 = [multicasted connect];
  [source onNextWithId:@"two"];
  [source onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(sub, sub2);
}

- (void)testMulticastDisconnect {
  RxSubjectsSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesConnectableObservable *multicasted = create_RxInternalOperatorsOperatorMulticast_initWithRxObservable_withRxFunctionsFunc0_(source, create_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init());
  id<RxObserver> observer = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
  [multicasted subscribeWithRxObserver:observer];
  [((RxSubjectsSubject *) nil_chk(source)) onNextWithId:@"one"];
  id<RxSubscription> connection = [multicasted connect];
  [source onNextWithId:@"two"];
  [((id<RxSubscription>) nil_chk(connection)) unsubscribe];
  [source onNextWithId:@"three"];
  [multicasted subscribeWithRxObserver:observer];
  [multicasted connect];
  [source onNextWithId:@"four"];
  [source onCompleted];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"one"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"two"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_never()))) onNextWithId:@"three"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onNextWithId:@"four"];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(observer, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMulticastTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testMulticast);
  methods[1].selector = @selector(testMulticastConnectTwice);
  methods[2].selector = @selector(testMulticastDisconnect);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorMulticastTest__Annotations$0, (void *)&RxInternalOperatorsOperatorMulticastTest__Annotations$1, (void *)&RxInternalOperatorsOperatorMulticastTest__Annotations$2, "LRxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticastTest = { "OperatorMulticastTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 3, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorMulticastTest;
}

@end

void RxInternalOperatorsOperatorMulticastTest_init(RxInternalOperatorsOperatorMulticastTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMulticastTest *new_RxInternalOperatorsOperatorMulticastTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticastTest, init)
}

RxInternalOperatorsOperatorMulticastTest *create_RxInternalOperatorsOperatorMulticastTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticastTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorMulticastTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMulticastTest)

@implementation RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory

- (RxSubjectsSubject *)call {
  return RxSubjectsPublishSubject_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRxSubjectsSubject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(call);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;", "LRxInternalOperatorsOperatorMulticastTest;", "Ljava/lang/Object;Lrx/functions/Func0<Lrx/subjects/Subject<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory = { "PublishSubjectFactory", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1a, 2, 0, 1, -1, -1, 2, -1 };
  return &_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory;
}

@end

void RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *new_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory, init)
}

RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory *create_RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorMulticastTest_PublishSubjectFactory)
