//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/BlockingOperatorLatestTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxInternalOperatorsBlockingOperatorLatest.h"
#include "RxInternalOperatorsBlockingOperatorLatestTest.h"
#include "RxObservable.h"
#include "RxObservablesBlockingObservable.h"
#include "RxSchedulersTestScheduler.h"
#include "RxSubjectsPublishSubject.h"
#include "RxTestUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$7();

@implementation RxInternalOperatorsBlockingOperatorLatestTest

- (void)constructorShouldBePrivate {
  RxTestUtil_checkUtilityClassWithIOSClass_(RxInternalOperatorsBlockingOperatorLatest_class_());
}

- (void)testSimple {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), scheduler))) takeWithInt:10])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  for (jint i = 0; i < 9; i++) {
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(i), [it next]);
  }
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
}

- (void)testSameSourceMultipleIterators {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), scheduler))) takeWithInt:10])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  for (jint j = 0; j < 3; j++) {
    id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
    for (jint i = 0; i < 9; i++) {
      [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
      OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(i), [it next]);
    }
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
  }
}

- (void)testEmpty {
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk(RxObservable_empty())) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilIterator>) nil_chk(it)) hasNext]));
  [it next];
}

- (void)testSimpleJustNext {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_intervalWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(1, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), scheduler))) takeWithInt:10])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  for (jint i = 0; i < 10; i++) {
    [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    OrgJunitAssert_assertEqualsWithId_withId_(JavaLangLong_valueOfWithLong_(i), [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
}

- (void)testHasNextThrows {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"Forced failure!")))) subscribeOnWithRxScheduler:scheduler])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
}

- (void)testNextThrows {
  RxSchedulersTestScheduler *scheduler = create_RxSchedulersTestScheduler_init();
  RxObservablesBlockingObservable *source = [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_errorWithNSException_(create_JavaLangRuntimeException_initWithNSString_(@"Forced failure!")))) subscribeOnWithRxScheduler:scheduler])) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(source)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  [scheduler advanceTimeByWithLong:1 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  [((id<JavaUtilIterator>) nil_chk(it)) next];
}

- (void)testFasterSource {
  RxSubjectsPublishSubject *source = RxSubjectsPublishSubject_create();
  RxObservablesBlockingObservable *blocker = [((RxSubjectsPublishSubject *) nil_chk(source)) toBlocking];
  id<JavaLangIterable> iter = [((RxObservablesBlockingObservable *) nil_chk(blocker)) latest];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(1), [((id<JavaUtilIterator>) nil_chk(it)) next]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(2)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(3), [it next]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(6)];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangInteger_valueOfWithInt_(6), [it next]);
  [source onNextWithId:JavaLangInteger_valueOfWithInt_(7)];
  [source onCompleted];
  OrgJunitAssert_assertEqualsWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_([it hasNext]));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsBlockingOperatorLatestTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(constructorShouldBePrivate);
  methods[1].selector = @selector(testSimple);
  methods[2].selector = @selector(testSameSourceMultipleIterators);
  methods[3].selector = @selector(testEmpty);
  methods[4].selector = @selector(testSimpleJustNext);
  methods[5].selector = @selector(testHasNextThrows);
  methods[6].selector = @selector(testNextThrows);
  methods[7].selector = @selector(testFasterSource);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$0, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$1, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$2, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$3, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$4, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$5, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$6, (void *)&RxInternalOperatorsBlockingOperatorLatestTest__Annotations$7 };
  static const J2ObjcClassInfo _RxInternalOperatorsBlockingOperatorLatestTest = { "BlockingOperatorLatestTest", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsBlockingOperatorLatestTest;
}

@end

void RxInternalOperatorsBlockingOperatorLatestTest_init(RxInternalOperatorsBlockingOperatorLatestTest *self) {
  NSObject_init(self);
}

RxInternalOperatorsBlockingOperatorLatestTest *new_RxInternalOperatorsBlockingOperatorLatestTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsBlockingOperatorLatestTest, init)
}

RxInternalOperatorsBlockingOperatorLatestTest *create_RxInternalOperatorsBlockingOperatorLatestTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsBlockingOperatorLatestTest, init)
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaUtilNoSuchElementException_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangRuntimeException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangRuntimeException_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsBlockingOperatorLatestTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 1000) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsBlockingOperatorLatestTest)
