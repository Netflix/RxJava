//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/test/java/rx/internal/operators/OperatorSkipWhileTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction1.h"
#include "RxFunctionsFunc1.h"
#include "RxInternalOperatorsOperatorSkipWhileTest.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxObserversSubscribers.h"
#include "RxObserversTestSubscriber.h"
#include "RxSubscriber.h"
#include "RxSubscription.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/mockito/InOrder.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/verification/VerificationMode.h"

inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_get_LESS_THAN_FIVE();
static id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSkipWhileTest, LESS_THAN_FIVE, id<RxFunctionsFunc1>)

inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_get_INDEX_LESS_THAN_THREE();
static id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_INDEX_LESS_THAN_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSkipWhileTest, INDEX_LESS_THAN_THREE, id<RxFunctionsFunc1>)

inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_get_THROWS_NON_FATAL();
static id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_THROWS_NON_FATAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSkipWhileTest, THROWS_NON_FATAL, id<RxFunctionsFunc1>)

inline id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_get_THROWS_FATAL();
static id<RxFunctionsFunc1> RxInternalOperatorsOperatorSkipWhileTest_THROWS_FATAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSkipWhileTest, THROWS_FATAL, id<RxFunctionsFunc1>)

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$8();

__attribute__((unused)) static IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$9();

@interface RxInternalOperatorsOperatorSkipWhileTest_$1 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhileTest_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipWhileTest_$1_init(RxInternalOperatorsOperatorSkipWhileTest_$1 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$1 *new_RxInternalOperatorsOperatorSkipWhileTest_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$1 *create_RxInternalOperatorsOperatorSkipWhileTest_$1_init();

@interface RxInternalOperatorsOperatorSkipWhileTest_$2 : NSObject < RxFunctionsFunc1 > {
 @public
  jint index_;
}

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)value;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhileTest_$2)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipWhileTest_$2_init(RxInternalOperatorsOperatorSkipWhileTest_$2 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$2 *new_RxInternalOperatorsOperatorSkipWhileTest_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$2 *create_RxInternalOperatorsOperatorSkipWhileTest_$2_init();

@interface RxInternalOperatorsOperatorSkipWhileTest_$3 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)values;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhileTest_$3)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipWhileTest_$3_init(RxInternalOperatorsOperatorSkipWhileTest_$3 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$3 *new_RxInternalOperatorsOperatorSkipWhileTest_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$3 *create_RxInternalOperatorsOperatorSkipWhileTest_$3_init();

@interface RxInternalOperatorsOperatorSkipWhileTest_$4 : NSObject < RxFunctionsFunc1 >

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)values;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhileTest_$4)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipWhileTest_$4_init(RxInternalOperatorsOperatorSkipWhileTest_$4 *self);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$4 *new_RxInternalOperatorsOperatorSkipWhileTest_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$4 *create_RxInternalOperatorsOperatorSkipWhileTest_$4_init();

@interface RxInternalOperatorsOperatorSkipWhileTest_$5 : NSObject < RxFunctionsAction1 > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$errorOccurred_;
}

- (void)callWithId:(NSException *)t;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhileTest_$5)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipWhileTest_$5, val$errorOccurred_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipWhileTest_$5 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$5 *new_RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSkipWhileTest_$5 *create_RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0);

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorSkipWhileTest)

@implementation RxInternalOperatorsOperatorSkipWhileTest

- (void)testSkipWithIndex {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_INDEX_LESS_THAN_THREE])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(4)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testSkipEmpty {
  RxObservable *src = RxObservable_empty();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE])) subscribeWithRxObserver:w_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipEverything {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(1));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE])) subscribeWithRxObserver:w_];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(w_, OrgMockitoMockito_timesWithInt_(1)))) onCompleted];
}

- (void)testSkipNothing {
  RxObservable *src = RxObservable_justWithId_withId_withId_(JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(1));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testSkipSome {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(4), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(5));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(3)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(1)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onNextWithId:JavaLangInteger_valueOfWithInt_(5)];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
}

- (void)testSkipError {
  RxObservable *src = RxObservable_justWithId_withId_withId_withId_withId_withId_(JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(2), JavaLangInteger_valueOfWithInt_(42), JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(3), JavaLangInteger_valueOfWithInt_(1));
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(src)) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
}

- (void)testPredicateRuntimeError {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_THROWS_NON_FATAL])) subscribeWithRxObserver:w_];
  id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ w_ } count:1 type:NSObject_class_()]);
  [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onNextWithId:JavaLangInteger_valueOfWithInt_(OrgMockitoMatchers_anyInt())];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_never()])) onCompleted];
  [((id<RxObserver>) nil_chk([inOrder verifyWithId:w_ withOrgMockitoVerificationVerificationMode:OrgMockitoMockito_timesWithInt_(1)])) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRuntimeException_class_())];
}

- (void)testPredicateFatalError {
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_THROWS_FATAL])) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_empty()];
}

- (void)testPredicateRuntimeErrorDoesNotGoUpstreamFirst {
  JavaUtilConcurrentAtomicAtomicBoolean *errorOccurred = create_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  RxObserversTestSubscriber *ts = RxObserversTestSubscriber_create();
  [((RxObservable *) nil_chk([((RxObservable *) nil_chk([((RxObservable *) nil_chk(RxObservable_justWithId_(JavaLangInteger_valueOfWithInt_(1)))) doOnErrorWithRxFunctionsAction1:create_RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(errorOccurred)])) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_THROWS_NON_FATAL])) subscribeWithRxSubscriber:ts];
  OrgJunitAssert_assertFalseWithBoolean_([errorOccurred get]);
}

- (void)testSkipManySubscribers {
  RxObservable *src = [((RxObservable *) nil_chk(RxObservable_rangeWithInt_withInt_(1, 10))) skipWhileWithRxFunctionsFunc1:RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE];
  jint n = 5;
  for (jint i = 0; i < n; i++) {
    id<RxObserver> o = OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_());
    id<OrgMockitoInOrder> inOrder = OrgMockitoMockito_inOrderWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]);
    [((RxObservable *) nil_chk(src)) subscribeWithRxObserver:o];
    for (jint j = 5; j < 10; j++) {
      [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onNextWithId:JavaLangInteger_valueOfWithInt_(j)];
    }
    [((id<RxObserver>) nil_chk([((id<OrgMockitoInOrder>) nil_chk(inOrder)) verifyWithId:o])) onCompleted];
    [((id<RxObserver>) nil_chk(OrgMockitoMockito_verifyWithId_withOrgMockitoVerificationVerificationMode_(o, OrgMockitoMockito_never()))) onErrorWithNSException:OrgMockitoMatchers_anyWithIOSClass_(NSException_class_())];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipWhileTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testSkipWithIndex);
  methods[1].selector = @selector(testSkipEmpty);
  methods[2].selector = @selector(testSkipEverything);
  methods[3].selector = @selector(testSkipNothing);
  methods[4].selector = @selector(testSkipSome);
  methods[5].selector = @selector(testSkipError);
  methods[6].selector = @selector(testPredicateRuntimeError);
  methods[7].selector = @selector(testPredicateFatalError);
  methods[8].selector = @selector(testPredicateRuntimeErrorDoesNotGoUpstreamFirst);
  methods[9].selector = @selector(testSkipManySubscribers);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LRxObserver;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
    { "LESS_THAN_FIVE", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "INDEX_LESS_THAN_THREE", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1a, -1, 13, 12, -1 },
    { "THROWS_NON_FATAL", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1a, -1, 14, 12, -1 },
    { "THROWS_FATAL", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x1a, -1, 15, 12, -1 },
  };
  static const void *ptrTable[] = { (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$0, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$1, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$2, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$3, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$4, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$5, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$6, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$7, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$8, (void *)&RxInternalOperatorsOperatorSkipWhileTest__Annotations$9, "Lrx/Observer<Ljava/lang/Integer;>;", &RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE, "Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;", &RxInternalOperatorsOperatorSkipWhileTest_INDEX_LESS_THAN_THREE, &RxInternalOperatorsOperatorSkipWhileTest_THROWS_NON_FATAL, &RxInternalOperatorsOperatorSkipWhileTest_THROWS_FATAL };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest = { "OperatorSkipWhileTest", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorSkipWhileTest class]) {
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorSkipWhileTest_LESS_THAN_FIVE, new_RxInternalOperatorsOperatorSkipWhileTest_$1_init());
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorSkipWhileTest_INDEX_LESS_THAN_THREE, new_RxInternalOperatorsOperatorSkipWhileTest_$2_init());
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorSkipWhileTest_THROWS_NON_FATAL, new_RxInternalOperatorsOperatorSkipWhileTest_$3_init());
    JreStrongAssignAndConsume(&RxInternalOperatorsOperatorSkipWhileTest_THROWS_FATAL, new_RxInternalOperatorsOperatorSkipWhileTest_$4_init());
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorSkipWhileTest)
  }
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_init(RxInternalOperatorsOperatorSkipWhileTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->w_, OrgMockitoMockito_mockWithIOSClass_(RxObserver_class_()));
}

RxInternalOperatorsOperatorSkipWhileTest *new_RxInternalOperatorsOperatorSkipWhileTest_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest, init)
}

RxInternalOperatorsOperatorSkipWhileTest *create_RxInternalOperatorsOperatorSkipWhileTest_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest, init)
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaLangOutOfMemoryError_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RxInternalOperatorsOperatorSkipWhileTest__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSkipWhileTest)

@implementation RxInternalOperatorsOperatorSkipWhileTest_$1

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)v {
  if ([((JavaLangInteger *) nil_chk(v)) intValue] == 42) @throw create_JavaLangRuntimeException_initWithNSString_(@"that's not the answer to everything!");
  return JavaLangBoolean_valueOfWithBoolean_([v intValue] < 5);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipWhileTest_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorSkipWhileTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest_$1 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest_$1;
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_$1_init(RxInternalOperatorsOperatorSkipWhileTest_$1 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipWhileTest_$1 *new_RxInternalOperatorsOperatorSkipWhileTest_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$1, init)
}

RxInternalOperatorsOperatorSkipWhileTest_$1 *create_RxInternalOperatorsOperatorSkipWhileTest_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$1, init)
}

@implementation RxInternalOperatorsOperatorSkipWhileTest_$2

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)value {
  return JavaLangBoolean_valueOfWithBoolean_(index_++ < 3);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipWhileTest_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorSkipWhileTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest_$2;
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_$2_init(RxInternalOperatorsOperatorSkipWhileTest_$2 *self) {
  NSObject_init(self);
  self->index_ = 0;
}

RxInternalOperatorsOperatorSkipWhileTest_$2 *new_RxInternalOperatorsOperatorSkipWhileTest_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$2, init)
}

RxInternalOperatorsOperatorSkipWhileTest_$2 *create_RxInternalOperatorsOperatorSkipWhileTest_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$2, init)
}

@implementation RxInternalOperatorsOperatorSkipWhileTest_$3

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)values {
  @throw create_JavaLangRuntimeException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipWhileTest_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorSkipWhileTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest_$3 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest_$3;
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_$3_init(RxInternalOperatorsOperatorSkipWhileTest_$3 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipWhileTest_$3 *new_RxInternalOperatorsOperatorSkipWhileTest_$3_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$3, init)
}

RxInternalOperatorsOperatorSkipWhileTest_$3 *create_RxInternalOperatorsOperatorSkipWhileTest_$3_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$3, init)
}

@implementation RxInternalOperatorsOperatorSkipWhileTest_$4

- (JavaLangBoolean *)callWithId:(JavaLangInteger *)values {
  @throw create_JavaLangOutOfMemoryError_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorSkipWhileTest_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LJavaLangInteger;", "LRxInternalOperatorsOperatorSkipWhileTest;", "Ljava/lang/Object;Lrx/functions/Func1<Ljava/lang/Integer;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest_$4 = { "", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest_$4;
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_$4_init(RxInternalOperatorsOperatorSkipWhileTest_$4 *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipWhileTest_$4 *new_RxInternalOperatorsOperatorSkipWhileTest_$4_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$4, init)
}

RxInternalOperatorsOperatorSkipWhileTest_$4 *create_RxInternalOperatorsOperatorSkipWhileTest_$4_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$4, init)
}

@implementation RxInternalOperatorsOperatorSkipWhileTest_$5

- (void)callWithId:(NSException *)t {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$errorOccurred_)) setWithBoolean:true];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0 {
  RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(self, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$errorOccurred_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$errorOccurred_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LNSException;", "LJavaUtilConcurrentAtomicAtomicBoolean;", "LRxInternalOperatorsOperatorSkipWhileTest;", "testPredicateRuntimeErrorDoesNotGoUpstreamFirst", "Ljava/lang/Object;Lrx/functions/Action1<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSkipWhileTest_$5 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxInternalOperatorsOperatorSkipWhileTest_$5;
}

@end

void RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsOperatorSkipWhileTest_$5 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  JreStrongAssign(&self->val$errorOccurred_, capture$0);
  NSObject_init(self);
}

RxInternalOperatorsOperatorSkipWhileTest_$5 *new_RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$5, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}

RxInternalOperatorsOperatorSkipWhileTest_$5 *create_RxInternalOperatorsOperatorSkipWhileTest_$5_initWithJavaUtilConcurrentAtomicAtomicBoolean_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSkipWhileTest_$5, initWithJavaUtilConcurrentAtomicAtomicBoolean_, capture$0)
}
