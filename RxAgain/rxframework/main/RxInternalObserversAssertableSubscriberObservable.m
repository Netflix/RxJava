//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/main/java/rx/internal/observers/AssertableSubscriberObservable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxFunctionsAction0.h"
#include "RxInternalObserversAssertableSubscriberObservable.h"
#include "RxObserversAssertableSubscriber.h"
#include "RxObserversTestSubscriber.h"
#include "RxProducer.h"
#include "RxSubscriber.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Thread.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"

@interface RxInternalObserversAssertableSubscriberObservable () {
 @public
  RxObserversTestSubscriber *ts_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalObserversAssertableSubscriberObservable, ts_, RxObserversTestSubscriber *)

@implementation RxInternalObserversAssertableSubscriberObservable

- (instancetype)initWithRxObserversTestSubscriber:(RxObserversTestSubscriber *)ts {
  RxInternalObserversAssertableSubscriberObservable_initWithRxObserversTestSubscriber_(self, ts);
  return self;
}

+ (RxInternalObserversAssertableSubscriberObservable *)createWithLong:(jlong)initialRequest {
  return RxInternalObserversAssertableSubscriberObservable_createWithLong_(initialRequest);
}

- (void)onStart {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) onStart];
}

- (void)onCompleted {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) onCompleted];
}

- (void)setProducerWithRxProducer:(id<RxProducer>)p {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) setProducerWithRxProducer:p];
}

- (jint)getCompletions {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) getCompletions];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) onErrorWithNSException:e];
}

- (id<JavaUtilList>)getOnErrorEvents {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) getOnErrorEvents];
}

- (void)onNextWithId:(id)t {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) onNextWithId:t];
}

- (jint)getValueCount {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) getValueCount];
}

- (id<RxObserversAssertableSubscriber>)requestMoreWithLong:(jlong)n {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) requestMoreWithLong:n];
  return self;
}

- (id<JavaUtilList>)getOnNextEvents {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) getOnNextEvents];
}

- (id<RxObserversAssertableSubscriber>)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertReceivedOnNextWithJavaUtilList:items];
  return self;
}

- (id<RxObserversAssertableSubscriber>)awaitValueCountWithInt:(jint)expected
                                                     withLong:(jlong)timeout
                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (![((RxObserversTestSubscriber *) nil_chk(ts_)) awaitValueCountWithInt:expected withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$I$I", @"Did not receive enough values in time. Expected: ", expected, @", Actual: ", [ts_ getValueCount]));
  }
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertTerminalEvent {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertTerminalEvent];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertUnsubscribed {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertUnsubscribed];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertNoErrors {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoErrors];
  return self;
}

- (id<RxObserversAssertableSubscriber>)awaitTerminalEvent {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) awaitTerminalEvent];
  return self;
}

- (id<RxObserversAssertableSubscriber>)awaitTerminalEventWithLong:(jlong)timeout
                                   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) awaitTerminalEventWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  return self;
}

- (id<RxObserversAssertableSubscriber>)awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:(jlong)timeout
                                                          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  return self;
}

- (JavaLangThread *)getLastSeenThread {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) getLastSeenThread];
}

- (id<RxObserversAssertableSubscriber>)assertCompleted {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertCompleted];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertNotCompleted {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNotCompleted];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertErrorWithIOSClass:(IOSClass *)clazz {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertErrorWithIOSClass:clazz];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertErrorWithNSException:(NSException *)throwable {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertErrorWithNSException:throwable];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertNoTerminalEvent {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoTerminalEvent];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertNoValues {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertNoValues];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertValueCountWithInt:(jint)count {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueCountWithInt:count];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertValuesWithNSObjectArray:(IOSObjectArray *)values {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesWithNSObjectArray:values];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertValueWithId:(id)value {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValueWithId:value];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertValuesAndClearWithId:(id)expectedFirstValue
                                                withNSObjectArray:(IOSObjectArray *)expectedRestValues {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesAndClearWithId:expectedFirstValue withNSObjectArray:expectedRestValues];
  return self;
}

- (id<RxObserversAssertableSubscriber>)performWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  [((id<RxFunctionsAction0>) nil_chk(action)) call];
  return self;
}

- (NSString *)description {
  return [((RxObserversTestSubscriber *) nil_chk(ts_)) description];
}

- (id<RxObserversAssertableSubscriber>)assertResultWithNSObjectArray:(IOSObjectArray *)values {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesWithNSObjectArray:values];
  [ts_ assertNoErrors];
  [ts_ assertCompleted];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertFailureWithIOSClass:(IOSClass *)errorClass
                                               withNSObjectArray:(IOSObjectArray *)values {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesWithNSObjectArray:values];
  [ts_ assertErrorWithIOSClass:errorClass];
  [ts_ assertNotCompleted];
  return self;
}

- (id<RxObserversAssertableSubscriber>)assertFailureAndMessageWithIOSClass:(IOSClass *)errorClass
                                                              withNSString:(NSString *)message
                                                         withNSObjectArray:(IOSObjectArray *)values {
  [((RxObserversTestSubscriber *) nil_chk(ts_)) assertValuesWithNSObjectArray:values];
  [ts_ assertErrorWithIOSClass:errorClass];
  [ts_ assertNotCompleted];
  NSString *actualMessage = [((NSException *) nil_chk([((id<JavaUtilList>) nil_chk([ts_ getOnErrorEvents])) getWithInt:0])) getMessage];
  if (!(actualMessage == message || (message != nil && [message isEqual:actualMessage]))) {
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$$$$C", @"Error message differs. Expected: '", message, @"', Received: '", actualMessage, '\''));
  }
  return self;
}

- (void)dealloc {
  RELEASE_(ts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LRxInternalObserversAssertableSubscriberObservable;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 13, 3, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x11, 19, 20, -1, 21, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 26, 24, -1, 25, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 27, 8, -1, 30, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 31, 32, -1, 33, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x81, 34, 35, -1, 36, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x1, 37, 11, -1, 38, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x91, 39, 40, -1, 41, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x11, 42, 43, -1, 44, -1, -1 },
    { NULL, "LNSString;", 0x1, 45, -1, -1, -1, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x91, 46, 35, -1, 36, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x91, 47, 48, -1, 49, -1, -1 },
    { NULL, "LRxObserversAssertableSubscriber;", 0x91, 50, 51, -1, 52, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRxObserversTestSubscriber:);
  methods[1].selector = @selector(createWithLong:);
  methods[2].selector = @selector(onStart);
  methods[3].selector = @selector(onCompleted);
  methods[4].selector = @selector(setProducerWithRxProducer:);
  methods[5].selector = @selector(getCompletions);
  methods[6].selector = @selector(onErrorWithNSException:);
  methods[7].selector = @selector(getOnErrorEvents);
  methods[8].selector = @selector(onNextWithId:);
  methods[9].selector = @selector(getValueCount);
  methods[10].selector = @selector(requestMoreWithLong:);
  methods[11].selector = @selector(getOnNextEvents);
  methods[12].selector = @selector(assertReceivedOnNextWithJavaUtilList:);
  methods[13].selector = @selector(awaitValueCountWithInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[14].selector = @selector(assertTerminalEvent);
  methods[15].selector = @selector(assertUnsubscribed);
  methods[16].selector = @selector(assertNoErrors);
  methods[17].selector = @selector(awaitTerminalEvent);
  methods[18].selector = @selector(awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[19].selector = @selector(awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[20].selector = @selector(getLastSeenThread);
  methods[21].selector = @selector(assertCompleted);
  methods[22].selector = @selector(assertNotCompleted);
  methods[23].selector = @selector(assertErrorWithIOSClass:);
  methods[24].selector = @selector(assertErrorWithNSException:);
  methods[25].selector = @selector(assertNoTerminalEvent);
  methods[26].selector = @selector(assertNoValues);
  methods[27].selector = @selector(assertValueCountWithInt:);
  methods[28].selector = @selector(assertValuesWithNSObjectArray:);
  methods[29].selector = @selector(assertValueWithId:);
  methods[30].selector = @selector(assertValuesAndClearWithId:withNSObjectArray:);
  methods[31].selector = @selector(performWithRxFunctionsAction0:);
  methods[32].selector = @selector(description);
  methods[33].selector = @selector(assertResultWithNSObjectArray:);
  methods[34].selector = @selector(assertFailureWithIOSClass:withNSObjectArray:);
  methods[35].selector = @selector(assertFailureAndMessageWithIOSClass:withNSString:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ts_", "LRxObserversTestSubscriber;", .constantValue.asLong = 0, 0x12, -1, -1, 53, -1 },
  };
  static const void *ptrTable[] = { "LRxObserversTestSubscriber;", "(Lrx/observers/TestSubscriber<TT;>;)V", "create", "J", "<T:Ljava/lang/Object;>(J)Lrx/internal/observers/AssertableSubscriberObservable<TT;>;", "setProducer", "LRxProducer;", "onError", "LNSException;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "onNext", "LNSObject;", "(TT;)V", "requestMore", "(J)Lrx/observers/AssertableSubscriber<TT;>;", "()Ljava/util/List<TT;>;", "assertReceivedOnNext", "LJavaUtilList;", "(Ljava/util/List<TT;>;)Lrx/observers/AssertableSubscriber<TT;>;", "awaitValueCount", "IJLJavaUtilConcurrentTimeUnit;", "(IJLjava/util/concurrent/TimeUnit;)Lrx/observers/AssertableSubscriber<TT;>;", "()Lrx/observers/AssertableSubscriber<TT;>;", "awaitTerminalEvent", "JLJavaUtilConcurrentTimeUnit;", "(JLjava/util/concurrent/TimeUnit;)Lrx/observers/AssertableSubscriber<TT;>;", "awaitTerminalEventAndUnsubscribeOnTimeout", "assertError", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)Lrx/observers/AssertableSubscriber<TT;>;", "(Ljava/lang/Throwable;)Lrx/observers/AssertableSubscriber<TT;>;", "assertValueCount", "I", "(I)Lrx/observers/AssertableSubscriber<TT;>;", "assertValues", "[LNSObject;", "([TT;)Lrx/observers/AssertableSubscriber<TT;>;", "assertValue", "(TT;)Lrx/observers/AssertableSubscriber<TT;>;", "assertValuesAndClear", "LNSObject;[LNSObject;", "(TT;[TT;)Lrx/observers/AssertableSubscriber<TT;>;", "perform", "LRxFunctionsAction0;", "(Lrx/functions/Action0;)Lrx/observers/AssertableSubscriber<TT;>;", "toString", "assertResult", "assertFailure", "LIOSClass;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;[TT;)Lrx/observers/AssertableSubscriber<TT;>;", "assertFailureAndMessage", "LIOSClass;LNSString;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;Ljava/lang/String;[TT;)Lrx/observers/AssertableSubscriber<TT;>;", "Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/observers/AssertableSubscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalObserversAssertableSubscriberObservable = { "AssertableSubscriberObservable", "rx.internal.observers", ptrTable, methods, fields, 7, 0x1, 36, 1, -1, -1, -1, 54, -1 };
  return &_RxInternalObserversAssertableSubscriberObservable;
}

@end

void RxInternalObserversAssertableSubscriberObservable_initWithRxObserversTestSubscriber_(RxInternalObserversAssertableSubscriberObservable *self, RxObserversTestSubscriber *ts) {
  RxSubscriber_init(self);
  JreStrongAssign(&self->ts_, ts);
}

RxInternalObserversAssertableSubscriberObservable *new_RxInternalObserversAssertableSubscriberObservable_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *ts) {
  J2OBJC_NEW_IMPL(RxInternalObserversAssertableSubscriberObservable, initWithRxObserversTestSubscriber_, ts)
}

RxInternalObserversAssertableSubscriberObservable *create_RxInternalObserversAssertableSubscriberObservable_initWithRxObserversTestSubscriber_(RxObserversTestSubscriber *ts) {
  J2OBJC_CREATE_IMPL(RxInternalObserversAssertableSubscriberObservable, initWithRxObserversTestSubscriber_, ts)
}

RxInternalObserversAssertableSubscriberObservable *RxInternalObserversAssertableSubscriberObservable_createWithLong_(jlong initialRequest) {
  RxInternalObserversAssertableSubscriberObservable_initialize();
  RxObserversTestSubscriber *t1 = create_RxObserversTestSubscriber_initWithLong_(initialRequest);
  RxInternalObserversAssertableSubscriberObservable *t2 = create_RxInternalObserversAssertableSubscriberObservable_initWithRxObserversTestSubscriber_(t1);
  [t2 addWithRxSubscription:t1];
  return t2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalObserversAssertableSubscriberObservable)
