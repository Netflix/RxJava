//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/RxJava/src/main/java/rx/internal/operators/SingleOperatorZip.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RxExceptionsExceptions.h"
#include "RxFunctionsFuncN.h"
#include "RxInternalOperatorsSingleOperatorZip.h"
#include "RxPluginsRxJavaHooks.h"
#include "RxSingle.h"
#include "RxSingleSubscriber.h"
#include "RxSubscription.h"
#include "RxSubscriptionsCompositeSubscription.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface RxInternalOperatorsSingleOperatorZip ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalOperatorsSingleOperatorZip_init(RxInternalOperatorsSingleOperatorZip *self);

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip *new_RxInternalOperatorsSingleOperatorZip_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip *create_RxInternalOperatorsSingleOperatorZip_init();

@interface RxInternalOperatorsSingleOperatorZip_$1 : NSObject < RxSingle_OnSubscribe > {
 @public
  IOSObjectArray *val$singles_;
  id<RxFunctionsFuncN> val$zipper_;
}

- (void)callWithId:(RxSingleSubscriber *)subscriber;

- (instancetype)initWithRxSingleArray:(IOSObjectArray *)capture$0
                 withRxFunctionsFuncN:(id<RxFunctionsFuncN>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsSingleOperatorZip_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1, val$singles_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1, val$zipper_, id<RxFunctionsFuncN>)

__attribute__((unused)) static void RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(RxInternalOperatorsSingleOperatorZip_$1 *self, IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1);

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip_$1 *new_RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip_$1 *create_RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1);

@interface RxInternalOperatorsSingleOperatorZip_$1_$1 : RxSingleSubscriber {
 @public
  RxInternalOperatorsSingleOperatorZip_$1 *this$0_;
  IOSObjectArray *val$values_;
  jint val$j_;
  JavaUtilConcurrentAtomicAtomicInteger *val$wip_;
  RxSingleSubscriber *val$subscriber_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
}

- (void)onSuccessWithId:(id)value;

- (void)onErrorWithNSException:(NSException *)error;

- (instancetype)initWithRxInternalOperatorsSingleOperatorZip_$1:(RxInternalOperatorsSingleOperatorZip_$1 *)outer$
                                              withNSObjectArray:(IOSObjectArray *)capture$0
                                                        withInt:(jint)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                         withRxSingleSubscriber:(RxSingleSubscriber *)capture$3
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsSingleOperatorZip_$1_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1_$1, this$0_, RxInternalOperatorsSingleOperatorZip_$1 *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1_$1, val$values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1_$1, val$wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1_$1, val$subscriber_, RxSingleSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOperatorZip_$1_$1, val$once_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1_$1 *self, RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4);

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip_$1_$1 *new_RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsSingleOperatorZip_$1_$1 *create_RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4);

@implementation RxInternalOperatorsSingleOperatorZip

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsSingleOperatorZip_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxSingle *)zipWithRxSingleArray:(IOSObjectArray *)singles
              withRxFunctionsFuncN:(id<RxFunctionsFuncN>)zipper {
  return RxInternalOperatorsSingleOperatorZip_zipWithRxSingleArray_withRxFunctionsFuncN_(singles, zipper);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRxSingle;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(zipWithRxSingleArray:withRxFunctionsFuncN:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "zip", "[LRxSingle;LRxFunctionsFuncN;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>([Lrx/Single<+TT;>;Lrx/functions/FuncN<+TR;>;)Lrx/Single<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleOperatorZip = { "SingleOperatorZip", "rx.internal.operators", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsSingleOperatorZip;
}

@end

void RxInternalOperatorsSingleOperatorZip_init(RxInternalOperatorsSingleOperatorZip *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxInternalOperatorsSingleOperatorZip *new_RxInternalOperatorsSingleOperatorZip_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleOperatorZip, init)
}

RxInternalOperatorsSingleOperatorZip *create_RxInternalOperatorsSingleOperatorZip_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleOperatorZip, init)
}

RxSingle *RxInternalOperatorsSingleOperatorZip_zipWithRxSingleArray_withRxFunctionsFuncN_(IOSObjectArray *singles, id<RxFunctionsFuncN> zipper) {
  RxInternalOperatorsSingleOperatorZip_initialize();
  return RxSingle_createWithRxSingle_OnSubscribe_(create_RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(singles, zipper));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsSingleOperatorZip)

@implementation RxInternalOperatorsSingleOperatorZip_$1

- (void)callWithId:(RxSingleSubscriber *)subscriber {
  if (((IOSObjectArray *) nil_chk(val$singles_))->size_ == 0) {
    [((RxSingleSubscriber *) nil_chk(subscriber)) onErrorWithNSException:create_JavaUtilNoSuchElementException_initWithNSString_(@"Can't zip 0 Singles.")];
    return;
  }
  JavaUtilConcurrentAtomicAtomicInteger *wip = create_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(val$singles_->size_);
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  IOSObjectArray *values = [IOSObjectArray arrayWithLength:val$singles_->size_ type:NSObject_class_()];
  RxSubscriptionsCompositeSubscription *compositeSubscription = create_RxSubscriptionsCompositeSubscription_init();
  [((RxSingleSubscriber *) nil_chk(subscriber)) addWithRxSubscription:compositeSubscription];
  for (jint i = 0; i < val$singles_->size_; i++) {
    if ([compositeSubscription isUnsubscribed] || [once get]) {
      break;
    }
    jint j = i;
    RxSingleSubscriber *singleSubscriber = create_RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, values, j, wip, subscriber, once);
    [compositeSubscription addWithRxSubscription:singleSubscriber];
    if ([compositeSubscription isUnsubscribed] || [once get]) {
      break;
    }
    [((RxSingle *) nil_chk(IOSObjectArray_Get(val$singles_, i))) subscribeWithRxSingleSubscriber:singleSubscriber];
  }
}

- (instancetype)initWithRxSingleArray:(IOSObjectArray *)capture$0
                 withRxFunctionsFuncN:(id<RxFunctionsFuncN>)capture$1 {
  RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(self, capture$0, capture$1);
  return self;
}

- (void)dealloc {
  RELEASE_(val$singles_);
  RELEASE_(val$zipper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  methods[1].selector = @selector(initWithRxSingleArray:withRxFunctionsFuncN:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$singles_", "[LRxSingle;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "val$zipper_", "LRxFunctionsFuncN;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSingleSubscriber;", "(Lrx/SingleSubscriber<-TR;>;)V", "[LRxSingle;LRxFunctionsFuncN;", "([Lrx/Single<+TT;>;Lrx/functions/FuncN<+TR;>;)V", "[Lrx/Single<+TT;>;", "Lrx/functions/FuncN<+TR;>;", "LRxInternalOperatorsSingleOperatorZip;", "zipWithRxSingleArray:withRxFunctionsFuncN:", "Ljava/lang/Object;Lrx/Single$OnSubscribe<TR;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleOperatorZip_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 2, 7, -1, 8, 9, -1 };
  return &_RxInternalOperatorsSingleOperatorZip_$1;
}

@end

void RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(RxInternalOperatorsSingleOperatorZip_$1 *self, IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1) {
  JreStrongAssign(&self->val$singles_, capture$0);
  JreStrongAssign(&self->val$zipper_, capture$1);
  NSObject_init(self);
}

RxInternalOperatorsSingleOperatorZip_$1 *new_RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleOperatorZip_$1, initWithRxSingleArray_withRxFunctionsFuncN_, capture$0, capture$1)
}

RxInternalOperatorsSingleOperatorZip_$1 *create_RxInternalOperatorsSingleOperatorZip_$1_initWithRxSingleArray_withRxFunctionsFuncN_(IOSObjectArray *capture$0, id<RxFunctionsFuncN> capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleOperatorZip_$1, initWithRxSingleArray_withRxFunctionsFuncN_, capture$0, capture$1)
}

@implementation RxInternalOperatorsSingleOperatorZip_$1_$1

- (void)onSuccessWithId:(id)value {
  IOSObjectArray_Set(nil_chk(val$values_), val$j_, value);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$wip_)) decrementAndGet] == 0) {
    id r;
    @try {
      r = [((id<RxFunctionsFuncN>) nil_chk(this$0_->val$zipper_)) callWithNSObjectArray:val$values_];
    }
    @catch (NSException *e) {
      RxExceptionsExceptions_throwIfFatalWithNSException_(e);
      [self onErrorWithNSException:e];
      return;
    }
    [((RxSingleSubscriber *) nil_chk(val$subscriber_)) onSuccessWithId:r];
  }
}

- (void)onErrorWithNSException:(NSException *)error {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSingleSubscriber *) nil_chk(val$subscriber_)) onErrorWithNSException:error];
  }
  else {
    RxPluginsRxJavaHooks_onErrorWithNSException_(error);
  }
}

- (instancetype)initWithRxInternalOperatorsSingleOperatorZip_$1:(RxInternalOperatorsSingleOperatorZip_$1 *)outer$
                                              withNSObjectArray:(IOSObjectArray *)capture$0
                                                        withInt:(jint)capture$1
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                         withRxSingleSubscriber:(RxSingleSubscriber *)capture$3
                      withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$4 {
  RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$values_);
  RELEASE_(val$wip_);
  RELEASE_(val$subscriber_);
  RELEASE_(val$once_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onSuccessWithId:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(initWithRxInternalOperatorsSingleOperatorZip_$1:withNSObjectArray:withInt:withJavaUtilConcurrentAtomicAtomicInteger:withRxSingleSubscriber:withJavaUtilConcurrentAtomicAtomicBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsSingleOperatorZip_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$values_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$j_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subscriber_", "LRxSingleSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LRxInternalOperatorsSingleOperatorZip_$1;[LNSObject;ILJavaUtilConcurrentAtomicAtomicInteger;LRxSingleSubscriber;LJavaUtilConcurrentAtomicAtomicBoolean;", "(Lrx/internal/operators/SingleOperatorZip$1;[Ljava/lang/Object;ILjava/util/concurrent/atomic/AtomicInteger;Lrx/SingleSubscriber<-TR;>;Ljava/util/concurrent/atomic/AtomicBoolean;)V", "Lrx/SingleSubscriber<-TR;>;", "LRxInternalOperatorsSingleOperatorZip_$1;", "callWithId:", "Lrx/SingleSubscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsSingleOperatorZip_$1_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 3, 6, 8, -1, 9, 10, -1 };
  return &_RxInternalOperatorsSingleOperatorZip_$1_$1;
}

@end

void RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1_$1 *self, RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$values_, capture$0);
  self->val$j_ = capture$1;
  JreStrongAssign(&self->val$wip_, capture$2);
  JreStrongAssign(&self->val$subscriber_, capture$3);
  JreStrongAssign(&self->val$once_, capture$4);
  RxSingleSubscriber_init(self);
}

RxInternalOperatorsSingleOperatorZip_$1_$1 *new_RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsSingleOperatorZip_$1_$1, initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}

RxInternalOperatorsSingleOperatorZip_$1_$1 *create_RxInternalOperatorsSingleOperatorZip_$1_$1_initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_(RxInternalOperatorsSingleOperatorZip_$1 *outer$, IOSObjectArray *capture$0, jint capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, RxSingleSubscriber *capture$3, JavaUtilConcurrentAtomicAtomicBoolean *capture$4) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsSingleOperatorZip_$1_$1, initWithRxInternalOperatorsSingleOperatorZip_$1_withNSObjectArray_withInt_withJavaUtilConcurrentAtomicAtomicInteger_withRxSingleSubscriber_withJavaUtilConcurrentAtomicAtomicBoolean_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}
