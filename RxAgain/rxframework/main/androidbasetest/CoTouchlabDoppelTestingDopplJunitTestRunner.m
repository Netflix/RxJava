//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbasetest/src/main/java/co/touchlab/doppel/testing/DopplJunitTestRunner.java
//

#include "CoTouchlabDoppelTestingDopplJunitTestRunner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Package.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "junit/runner/Version.h"
#include "org/junit/Test.h"
#include "org/junit/internal/TextListener.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/JUnitCore.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/RunWith.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunListener.h"
#include "org/junit/runners/JUnit4.h"
#include "org/junit/runners/Suite.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface CoTouchlabDoppelTestingDopplJunitTestRunner () {
 @public
  JavaIoPrintStream *out_;
  id<JavaUtilSet> includePatterns_;
  id<JavaUtilSet> excludePatterns_;
  id<JavaUtilMap> nameMappings_;
  id<JavaUtilMap> randomNames_;
  JavaUtilRandom *random_;
  CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *outputFormat_;
  CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *sortOrder_;
}

- (NSString *)replaceAllWithNSString:(NSString *)value;

- (NSString *)getSortKeyWithIOSClass:(IOSClass *)cls
withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)sortOrder;

- (id<JavaUtilSet>)getAllTestClasses;

- (NSString *)getPackageNameWithIOSClass:(IOSClass *)cls;

- (id<JavaUtilSet>)getTestClasses;

- (jboolean)matchesPatternWithIOSClass:(IOSClass *)testClass
                          withNSString:(NSString *)pattern;

- (void)loadPropertiesWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (void)loadPropertiesFromResourceWithNSString:(NSString *)resourcePath;

- (void)onErrorWithJavaLangException:(JavaLangException *)e;

@end

J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, out_, JavaIoPrintStream *)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, includePatterns_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, excludePatterns_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, nameMappings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, randomNames_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, random_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, outputFormat_, CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner, sortOrder_, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)

inline NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_get_PROPERTIES_FILE_NAME();
static NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_PROPERTIES_FILE_NAME = @"JUnitTestRunner.properties";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabDoppelTestingDopplJunitTestRunner, PROPERTIES_FILE_NAME, NSString *)

__attribute__((unused)) static NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_replaceAllWithNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, NSString *value);

__attribute__((unused)) static NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_getSortKeyWithIOSClass_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *cls, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *sortOrder);

__attribute__((unused)) static id<JavaUtilSet> CoTouchlabDoppelTestingDopplJunitTestRunner_getAllTestClasses(CoTouchlabDoppelTestingDopplJunitTestRunner *self);

__attribute__((unused)) static NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_getPackageNameWithIOSClass_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *cls);

__attribute__((unused)) static id<JavaUtilSet> CoTouchlabDoppelTestingDopplJunitTestRunner_getTestClasses(CoTouchlabDoppelTestingDopplJunitTestRunner *self);

__attribute__((unused)) static jboolean CoTouchlabDoppelTestingDopplJunitTestRunner_matchesPatternWithIOSClass_withNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *testClass, NSString *pattern);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesWithJavaIoInputStream_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, JavaIoInputStream *stream);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesFromResourceWithNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, NSString *resourcePath);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, JavaLangException *e);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *self, NSString *__name, jint __ordinal);

@interface CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener : OrgJunitRunnerNotificationRunListener {
 @public
  __unsafe_unretained CoTouchlabDoppelTestingDopplJunitTestRunner *this$0_;
  jint numTests_;
  jint numFailures_;
  OrgJunitRunnerNotificationFailure *testFailure_;
  jdouble testStartTime_;
}

- (void)testRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result;

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure;

- (NSString *)parseDescriptionWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

- (instancetype)initWithCoTouchlabDoppelTestingDopplJunitTestRunner:(CoTouchlabDoppelTestingDopplJunitTestRunner *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener)

J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener, testFailure_, OrgJunitRunnerNotificationFailure *)

inline jint CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_get_numUnexpected();
#define CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_numUnexpected 0
J2OBJC_STATIC_FIELD_CONSTANT(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener, numUnexpected, jint)

__attribute__((unused)) static NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_parseDescriptionWithOrgJunitRunnerDescription_(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *self, OrgJunitRunnerDescription *description_);

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *self, CoTouchlabDoppelTestingDopplJunitTestRunner *outer$);

__attribute__((unused)) static CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *new_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *create_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$);

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener)

@interface CoTouchlabDoppelTestingDopplJunitTestRunner_$1 : NSObject < JavaUtilComparator > {
 @public
  CoTouchlabDoppelTestingDopplJunitTestRunner *this$0_;
  CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *val$sortOrder_;
}

- (jint)compareWithId:(IOSClass *)class1
               withId:(IOSClass *)class2;

- (instancetype)initWithCoTouchlabDoppelTestingDopplJunitTestRunner:(CoTouchlabDoppelTestingDopplJunitTestRunner *)outer$
          withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabDoppelTestingDopplJunitTestRunner_$1)

J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner_$1, this$0_, CoTouchlabDoppelTestingDopplJunitTestRunner *)
J2OBJC_FIELD_SETTER(CoTouchlabDoppelTestingDopplJunitTestRunner_$1, val$sortOrder_, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)

__attribute__((unused)) static void CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *self, CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0);

__attribute__((unused)) static CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *new_CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *create_CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0);

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDoppelTestingDopplJunitTestRunner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  CoTouchlabDoppelTestingDopplJunitTestRunner_initWithJavaIoPrintStream_(self, outArg);
  return self;
}

+ (jint)mainWithNSStringArray:(IOSObjectArray *)args {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_mainWithNSStringArray_(args);
}

+ (jint)runWithIOSClassArray:(IOSObjectArray *)classes
withOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_(classes, listener);
}

- (jint)run {
  id<JavaUtilSet> classesSet = CoTouchlabDoppelTestingDopplJunitTestRunner_getTestClasses(self);
  IOSObjectArray *classes = [((id<JavaUtilSet>) nil_chk(classesSet)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[classesSet size] type:IOSClass_class_()]];
  [self sortClassesWithIOSClassArray:classes withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:sortOrder_];
  OrgJunitRunnerNotificationRunListener *listener = [self newRunListenerWithCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat:outputFormat_];
  return CoTouchlabDoppelTestingDopplJunitTestRunner_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_(classes, listener);
}

- (OrgJunitRunnerNotificationRunListener *)newRunListenerWithCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat:(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *)outputFormat {
  switch ([outputFormat ordinal]) {
    case CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_Enum_JUNIT:
    [((JavaIoPrintStream *) nil_chk(out_)) printlnWithNSString:JreStrcat("$$", @"JUnit version ", JunitRunnerVersion_id__())];
    return create_OrgJunitInternalTextListener_initWithJavaIoPrintStream_(out_);
    case CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_Enum_GTM_UNIT_TESTING:
    return create_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(self);
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"outputFormat");
  }
}

- (void)sortClassesWithIOSClassArray:(IOSObjectArray *)classes
withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)sortOrder {
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(classes, create_CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(self, sortOrder));
}

- (NSString *)replaceAllWithNSString:(NSString *)value {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_replaceAllWithNSString_(self, value);
}

- (NSString *)getSortKeyWithIOSClass:(IOSClass *)cls
withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)sortOrder {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_getSortKeyWithIOSClass_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(self, cls, sortOrder);
}

// Returns true if |cls| conforms to the NSObject protocol.
BOOL IsNSObjectClass(Class cls) {
  while (cls != nil) {
    if (class_conformsToProtocol(cls, @protocol(NSObject))) {
      return YES;
    }
    // class_conformsToProtocol() does not examine superclasses.
    cls = class_getSuperclass(cls);
  }
  return NO;
}

- (id<JavaUtilSet>)getAllTestClasses {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_getAllTestClasses(self);
}

- (jboolean)isJUnitTestClassWithIOSClass:(IOSClass *)cls {
  return [self isJUnit3TestClassWithIOSClass:cls] || [self isJUnit4TestClassWithIOSClass:cls];
}

- (jboolean)isJUnit3TestClassWithIOSClass:(IOSClass *)cls {
  if ([OrgJunitTest_class_() isAssignableFrom:cls]) {
    NSString *packageName = CoTouchlabDoppelTestingDopplJunitTestRunner_getPackageNameWithIOSClass_(self, cls);
    return ![((NSString *) nil_chk(packageName)) hasPrefix:@"junit.framework"] && ![packageName hasPrefix:@"junit.extensions"];
  }
  return false;
}

- (jboolean)isJUnit4TestClassWithIOSClass:(IOSClass *)cls {
  if (![((NSString *) nil_chk([((IOSClass *) nil_chk(cls)) getName])) hasSuffix:@"Test"]) {
    return false;
  }
  id<JavaLangAnnotationAnnotation> annotation = [cls getAnnotationWithIOSClass:OrgJunitRunnerRunWith_class_()];
  if (annotation != nil) {
    id<OrgJunitRunnerRunWith> runWith = (id<OrgJunitRunnerRunWith>) cast_chk(annotation, [OrgJunitRunnerRunWith class]);
    id value = [runWith value];
    if ([nil_chk(value) isEqual:OrgJunitRunnersJUnit4_class_()] || [value isEqual:OrgJunitRunnersSuite_class_()]) {
      return true;
    }
  }
  return false;
}

- (NSString *)getPackageNameWithIOSClass:(IOSClass *)cls {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_getPackageNameWithIOSClass_(self, cls);
}

- (id<JavaUtilSet>)getTestClasses {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_getTestClasses(self);
}

- (jboolean)matchesPatternWithIOSClass:(IOSClass *)testClass
                          withNSString:(NSString *)pattern {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_matchesPatternWithIOSClass_withNSString_(self, testClass, pattern);
}

- (void)loadPropertiesWithJavaIoInputStream:(JavaIoInputStream *)stream {
  CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesWithJavaIoInputStream_(self, stream);
}

- (void)loadPropertiesFromResourceWithNSString:(NSString *)resourcePath {
  CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesFromResourceWithNSString_(self, resourcePath);
}

- (void)onErrorWithJavaLangException:(JavaLangException *)e {
  CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(self, e);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(includePatterns_);
  RELEASE_(excludePatterns_);
  RELEASE_(nameMappings_);
  RELEASE_(randomNames_);
  RELEASE_(random_);
  RELEASE_(outputFormat_);
  RELEASE_(sortOrder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerNotificationRunListener;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x102, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 18, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaIoPrintStream:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  methods[3].selector = @selector(runWithIOSClassArray:withOrgJunitRunnerNotificationRunListener:);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(newRunListenerWithCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat:);
  methods[6].selector = @selector(sortClassesWithIOSClassArray:withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:);
  methods[7].selector = @selector(replaceAllWithNSString:);
  methods[8].selector = @selector(getSortKeyWithIOSClass:withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:);
  methods[9].selector = @selector(getAllTestClasses);
  methods[10].selector = @selector(isJUnitTestClassWithIOSClass:);
  methods[11].selector = @selector(isJUnit3TestClassWithIOSClass:);
  methods[12].selector = @selector(isJUnit4TestClassWithIOSClass:);
  methods[13].selector = @selector(getPackageNameWithIOSClass:);
  methods[14].selector = @selector(getTestClasses);
  methods[15].selector = @selector(matchesPatternWithIOSClass:withNSString:);
  methods[16].selector = @selector(loadPropertiesWithJavaIoInputStream:);
  methods[17].selector = @selector(loadPropertiesFromResourceWithNSString:);
  methods[18].selector = @selector(onErrorWithJavaLangException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTIES_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "out_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "includePatterns_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "excludePatterns_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "nameMappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "randomNames_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "random_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputFormat_", "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sortOrder_", "LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintStream;", "main", "[LNSString;", "run", "[LIOSClass;LOrgJunitRunnerNotificationRunListener;", "newRunListener", "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", "sortClasses", "[LIOSClass;LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", "replaceAll", "LNSString;", "getSortKey", "LIOSClass;LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", "()Ljava/util/Set<Ljava/lang/Class;>;", "isJUnitTestClass", "LIOSClass;", "isJUnit3TestClass", "isJUnit4TestClass", "getPackageName", "matchesPattern", "LIOSClass;LNSString;", "loadProperties", "LJavaIoInputStream;", "loadPropertiesFromResource", "onError", "LJavaLangException;", &CoTouchlabDoppelTestingDopplJunitTestRunner_PROPERTIES_FILE_NAME, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;LCoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;LCoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer;LCoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner = { "DopplJunitTestRunner", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x1, 19, 9, -1, 29, -1, -1, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner;
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_init(CoTouchlabDoppelTestingDopplJunitTestRunner *self) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_initWithJavaIoPrintStream_(self, JreLoadStatic(JavaLangSystem, out));
}

CoTouchlabDoppelTestingDopplJunitTestRunner *new_CoTouchlabDoppelTestingDopplJunitTestRunner_init() {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner, init)
}

CoTouchlabDoppelTestingDopplJunitTestRunner *create_CoTouchlabDoppelTestingDopplJunitTestRunner_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner, init)
}

void CoTouchlabDoppelTestingDopplJunitTestRunner_initWithJavaIoPrintStream_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, JavaIoPrintStream *outArg) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->includePatterns_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->excludePatterns_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->nameMappings_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->randomNames_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->random_, new_JavaUtilRandom_initWithLong_(JavaLangSystem_currentTimeMillis()));
  JreStrongAssign(&self->outputFormat_, JreLoadEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat, JUNIT));
  JreStrongAssign(&self->sortOrder_, JreLoadEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder, ALPHABETICAL));
  JreStrongAssign(&self->out_, outArg);
}

CoTouchlabDoppelTestingDopplJunitTestRunner *new_CoTouchlabDoppelTestingDopplJunitTestRunner_initWithJavaIoPrintStream_(JavaIoPrintStream *outArg) {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner, initWithJavaIoPrintStream_, outArg)
}

CoTouchlabDoppelTestingDopplJunitTestRunner *create_CoTouchlabDoppelTestingDopplJunitTestRunner_initWithJavaIoPrintStream_(JavaIoPrintStream *outArg) {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner, initWithJavaIoPrintStream_, outArg)
}

jint CoTouchlabDoppelTestingDopplJunitTestRunner_mainWithNSStringArray_(IOSObjectArray *args) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_initialize();
  CoTouchlabDoppelTestingDopplJunitTestRunner *runner = create_CoTouchlabDoppelTestingDopplJunitTestRunner_init();
  CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesFromResourceWithNSString_(runner, CoTouchlabDoppelTestingDopplJunitTestRunner_PROPERTIES_FILE_NAME);
  return [runner run];
}

jint CoTouchlabDoppelTestingDopplJunitTestRunner_runWithIOSClassArray_withOrgJunitRunnerNotificationRunListener_(IOSObjectArray *classes, OrgJunitRunnerNotificationRunListener *listener) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_initialize();
  OrgJunitRunnerJUnitCore *junitCore = create_OrgJunitRunnerJUnitCore_init();
  [junitCore addListenerWithOrgJunitRunnerNotificationRunListener:listener];
  jboolean hasError = false;
  id<JavaUtilList> resultList = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(classes))->size_);
  {
    IOSObjectArray *a__ = classes;
    IOSClass * const *b__ = a__->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      @autoreleasepool {
        IOSClass *c = *b__++;
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"\n\n********** Running ", [((IOSClass *) nil_chk(c)) getName], @" **********")];
        OrgJunitRunnerResult *result = [junitCore runWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ c } count:1 type:IOSClass_class_()]];
        [resultList addWithId:create_CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer_initWithOrgJunitRunnerResult_withIOSClass_(result, c)];
        hasError = (hasError || ![((OrgJunitRunnerResult *) nil_chk(result)) wasSuccessful]);
      }
    }
  }
  jint bigTotal = 0;
  jint failureTotal = 0;
  for (CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer * __strong result in resultList) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"\n\n********** Result for ", [((IOSClass *) nil_chk(((CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer *) nil_chk(result))->testClass_)) getName], @" **********")];
    if ([((OrgJunitRunnerResult *) nil_chk(result->result_)) wasSuccessful]) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Success"];
    }
    else {
      failureTotal += [result->result_ getFailureCount];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Failures ", [result->result_ getFailureCount])];
      id<JavaUtilList> failures = [result->result_ getFailures];
      for (OrgJunitRunnerNotificationFailure * __strong failure in nil_chk(failures)) {
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((OrgJunitRunnerNotificationFailure *) nil_chk(failure)) description]];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"message: ", [failure getMessage])];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"description: ", [((OrgJunitRunnerDescription *) nil_chk([failure getDescription])) description])];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"trace: ", [failure getTrace])];
      }
    }
    bigTotal += [result->result_ getRunCount];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"Total: ", bigTotal)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Failures: ", failureTotal)];
  return hasError ? 1 : 0;
}

NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_replaceAllWithNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, NSString *value) {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(self->nameMappings_)) entrySet])) {
    NSString *pattern = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    NSString *replacement = [entry_ getValue];
    value = [((NSString *) nil_chk(value)) replaceAll:pattern withReplacement:replacement];
  }
  return value;
}

NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_getSortKeyWithIOSClass_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *cls, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *sortOrder) {
  NSString *className_ = [((IOSClass *) nil_chk(cls)) getName];
  {
    NSString *sortKey;
    switch ([sortOrder ordinal]) {
      case CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_Enum_ALPHABETICAL:
      return CoTouchlabDoppelTestingDopplJunitTestRunner_replaceAllWithNSString_(self, className_);
      case CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_Enum_RANDOM:
      sortKey = [((id<JavaUtilMap>) nil_chk(self->randomNames_)) getWithId:className_];
      if (sortKey == nil) {
        sortKey = JavaLangInteger_toStringWithInt_([((JavaUtilRandom *) nil_chk(self->random_)) nextInt]);
        [self->randomNames_ putWithId:className_ withId:sortKey];
      }
      return sortKey;
      default:
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sortOrder");
    }
  }
}

id<JavaUtilSet> CoTouchlabDoppelTestingDopplJunitTestRunner_getAllTestClasses(CoTouchlabDoppelTestingDopplJunitTestRunner *self) {
  int classCount = objc_getClassList(NULL, 0);
  Class *classes = (Class *)malloc(classCount * sizeof(Class));
  objc_getClassList(classes, classCount);
  id<JavaUtilSet> result = AUTORELEASE([[JavaUtilHashSet alloc] init]);
  for (int i = 0; i < classCount; i++) {
    @try {
      Class cls = classes[i];
      if (IsNSObjectClass(cls)) {
        IOSClass *javaClass = IOSClass_fromClass(cls);
        if ([self isJUnitTestClassWithIOSClass:javaClass]) {
          [result addWithId:javaClass];
        }
      }
    }
    @catch (NSException *e) {
      // Ignore any exceptions thrown by class initialization.
    }
  }
  free(classes);
  return result;
}

NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_getPackageNameWithIOSClass_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *cls) {
  JavaLangPackage *pkg = [((IOSClass *) nil_chk(cls)) getPackage];
  return pkg != nil ? [pkg getName] : @"";
}

id<JavaUtilSet> CoTouchlabDoppelTestingDopplJunitTestRunner_getTestClasses(CoTouchlabDoppelTestingDopplJunitTestRunner *self) {
  id<JavaUtilSet> allTestClasses = CoTouchlabDoppelTestingDopplJunitTestRunner_getAllTestClasses(self);
  id<JavaUtilSet> includedClasses = create_JavaUtilHashSet_init();
  if ([((id<JavaUtilSet>) nil_chk(self->includePatterns_)) isEmpty]) {
    includedClasses = allTestClasses;
  }
  else {
    for (IOSClass * __strong testClass in nil_chk(allTestClasses)) {
      for (NSString * __strong includePattern in self->includePatterns_) {
        if (CoTouchlabDoppelTestingDopplJunitTestRunner_matchesPatternWithIOSClass_withNSString_(self, testClass, includePattern)) {
          [includedClasses addWithId:testClass];
          break;
        }
      }
    }
  }
  id<JavaUtilIterator> includedClassesIterator = [((id<JavaUtilSet>) nil_chk(includedClasses)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(includedClassesIterator)) hasNext]) {
    IOSClass *testClass = [includedClassesIterator next];
    for (NSString * __strong excludePattern in nil_chk(self->excludePatterns_)) {
      if (CoTouchlabDoppelTestingDopplJunitTestRunner_matchesPatternWithIOSClass_withNSString_(self, testClass, excludePattern)) {
        [includedClassesIterator remove];
        break;
      }
    }
  }
  return includedClasses;
}

jboolean CoTouchlabDoppelTestingDopplJunitTestRunner_matchesPatternWithIOSClass_withNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, IOSClass *testClass, NSString *pattern) {
  return [((NSString *) nil_chk([((IOSClass *) nil_chk(testClass)) getCanonicalName])) contains:pattern];
}

void CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesWithJavaIoInputStream_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, JavaIoInputStream *stream) {
  JavaUtilProperties *properties = create_JavaUtilProperties_init();
  @try {
    [properties load__WithJavaIoInputStream:stream];
  }
  @catch (JavaIoIOException *e) {
    CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(self, e);
  }
  id<JavaUtilSet> propertyNames = [properties stringPropertyNames];
  for (NSString * __strong key in nil_chk(propertyNames)) {
    NSString *value = [properties getPropertyWithNSString:key];
    @try {
      if ([((NSString *) nil_chk(key)) isEqual:@"outputFormat"]) {
        JreStrongAssign(&self->outputFormat_, CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_valueOfWithNSString_(value));
      }
      else if ([key isEqual:@"sortOrder"]) {
        JreStrongAssign(&self->sortOrder_, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_valueOfWithNSString_(value));
      }
      else if ([((NSString *) nil_chk(value)) isEqual:[((CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *) nil_chk(JreLoadEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion, INCLUDE))) name]]) {
        [((id<JavaUtilSet>) nil_chk(self->includePatterns_)) addWithId:key];
      }
      else if ([value isEqual:[((CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *) nil_chk(JreLoadEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion, EXCLUDE))) name]]) {
        [((id<JavaUtilSet>) nil_chk(self->excludePatterns_)) addWithId:key];
      }
      else {
        [((id<JavaUtilMap>) nil_chk(self->nameMappings_)) putWithId:key withId:value];
      }
    }
    @catch (JavaLangIllegalArgumentException *e) {
      CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(self, e);
    }
  }
}

void CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesFromResourceWithNSString_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, NSString *resourcePath) {
  @try {
    JavaIoInputStream *stream = [((JavaLangClassLoader *) nil_chk(JavaLangClassLoader_getSystemClassLoader())) getResourceAsStreamWithNSString:resourcePath];
    if (stream != nil) {
      CoTouchlabDoppelTestingDopplJunitTestRunner_loadPropertiesWithJavaIoInputStream_(self, stream);
    }
    else {
      @throw create_JavaIoIOException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Resource not found: %s", [IOSObjectArray arrayWithObjects:(id[]){ resourcePath } count:1 type:NSObject_class_()]));
    }
  }
  @catch (JavaLangException *e) {
    CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(self, e);
  }
}

void CoTouchlabDoppelTestingDopplJunitTestRunner_onErrorWithJavaLangException_(CoTouchlabDoppelTestingDopplJunitTestRunner *self, JavaLangException *e) {
  [((JavaLangException *) nil_chk(e)) printStackTraceWithJavaIoPrintStream:self->out_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner)

J2OBJC_INITIALIZED_DEFN(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat)

CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values_[2];

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat

+ (IOSObjectArray *)values {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values();
}

+ (CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *)valueOfWithNSString:(NSString *)name {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "JUNIT", "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "GTM_UNIT_TESTING", "LCoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat, JUNIT), &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat, GTM_UNIT_TESTING), "LCoTouchlabDoppelTestingDopplJunitTestRunner;", "Ljava/lang/Enum<Lco/touchlab/doppel/testing/DopplJunitTestRunner$OutputFormat;>;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat = { "OutputFormat", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat;
}

+ (void)initialize {
  if (self == [CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"JUNIT", @"GTM_UNIT_TESTING",
    };
    for (jint i = 0; i < 2; i++) {
      (CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat)
  }
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values() {
  CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initialize();
  return [IOSObjectArray arrayWithObjects:CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values_ count:2 type:CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_class_()];
}

CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_valueOfWithNSString_(NSString *name) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initialize();
  for (int i = 0; i < 2; i++) {
    CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *e = CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat *CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_fromOrdinal(NSUInteger ordinal) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner_OutputFormat)

J2OBJC_INITIALIZED_DEFN(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder)

CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values_[2];

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder

+ (IOSObjectArray *)values {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values();
}

+ (CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)valueOfWithNSString:(NSString *)name {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALPHABETICAL", "LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "RANDOM", "LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder, ALPHABETICAL), &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder, RANDOM), "LCoTouchlabDoppelTestingDopplJunitTestRunner;", "Ljava/lang/Enum<Lco/touchlab/doppel/testing/DopplJunitTestRunner$SortOrder;>;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder = { "SortOrder", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;
}

+ (void)initialize {
  if (self == [CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"ALPHABETICAL", @"RANDOM",
    };
    for (jint i = 0; i < 2; i++) {
      (CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder)
  }
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values() {
  CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initialize();
  return [IOSObjectArray arrayWithObjects:CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values_ count:2 type:CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_class_()];
}

CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_valueOfWithNSString_(NSString *name) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initialize();
  for (int i = 0; i < 2; i++) {
    CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *e = CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_fromOrdinal(NSUInteger ordinal) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder)

J2OBJC_INITIALIZED_DEFN(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion)

CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values_[2];

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion

+ (IOSObjectArray *)values {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values();
}

+ (CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *)valueOfWithNSString:(NSString *)name {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LCoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INCLUDE", "LCoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "EXCLUDE", "LCoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion, INCLUDE), &JreEnum(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion, EXCLUDE), "LCoTouchlabDoppelTestingDopplJunitTestRunner;", "Ljava/lang/Enum<Lco/touchlab/doppel/testing/DopplJunitTestRunner$TestInclusion;>;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion = { "TestInclusion", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion;
}

+ (void)initialize {
  if (self == [CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"INCLUDE", @"EXCLUDE",
    };
    for (jint i = 0; i < 2; i++) {
      (CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion)
  }
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initWithNSString_withInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values() {
  CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initialize();
  return [IOSObjectArray arrayWithObjects:CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values_ count:2 type:CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_class_()];
}

CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_valueOfWithNSString_(NSString *name) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initialize();
  for (int i = 0; i < 2; i++) {
    CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *e = CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion *CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_fromOrdinal(NSUInteger ordinal) {
  CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner_TestInclusion)

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer

- (instancetype)initWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result
                                withIOSClass:(IOSClass *)testClass {
  CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer_initWithOrgJunitRunnerResult_withIOSClass_(self, result, testClass);
  return self;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(testClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnerResult:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "result_", "LOrgJunitRunnerResult;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "testClass_", "LIOSClass;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnerResult;LIOSClass;", "LCoTouchlabDoppelTestingDopplJunitTestRunner;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer = { "ResultContainer", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x8, 1, 2, 1, -1, -1, -1, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer;
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer_initWithOrgJunitRunnerResult_withIOSClass_(CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer *self, OrgJunitRunnerResult *result, IOSClass *testClass) {
  NSObject_init(self);
  JreStrongAssign(&self->result_, result);
  JreStrongAssign(&self->testClass_, testClass);
}

CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer *new_CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer_initWithOrgJunitRunnerResult_withIOSClass_(OrgJunitRunnerResult *result, IOSClass *testClass) {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer, initWithOrgJunitRunnerResult_withIOSClass_, result, testClass)
}

CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer *create_CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer_initWithOrgJunitRunnerResult_withIOSClass_(OrgJunitRunnerResult *result, IOSClass *testClass) {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer, initWithOrgJunitRunnerResult_withIOSClass_, result, testClass)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner_ResultContainer)

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener

- (void)testRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result {
  [((JavaIoPrintStream *) nil_chk(this$0_->out_)) printfWithNSString:@"Executed %d tests, with %d failures (%d unexpected)\n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numTests_), JavaLangInteger_valueOfWithInt_(numFailures_), JavaLangInteger_valueOfWithInt_(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_numUnexpected) } count:3 type:NSObject_class_()]];
}

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  numTests_++;
  JreStrongAssign(&testFailure_, nil);
  testStartTime_ = JavaLangSystem_currentTimeMillis();
  [((JavaIoPrintStream *) nil_chk(this$0_->out_)) printfWithNSString:@"Test Case '-[%s]' started.\n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_parseDescriptionWithOrgJunitRunnerDescription_(self, description_) } count:1 type:NSObject_class_()]];
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  jdouble testEndTime = JavaLangSystem_currentTimeMillis();
  jdouble elapsedSeconds = 0.001 * (testEndTime - testStartTime_);
  NSString *statusMessage = @"passed";
  if (testFailure_ != nil) {
    statusMessage = @"failed";
    [((JavaIoPrintStream *) nil_chk(this$0_->out_)) printWithNSString:[testFailure_ getTrace]];
  }
  [((JavaIoPrintStream *) nil_chk(this$0_->out_)) printfWithNSString:@"Test Case '-[%s]' %s (%.3f seconds).\n\n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_parseDescriptionWithOrgJunitRunnerDescription_(self, description_), statusMessage, JavaLangDouble_valueOfWithDouble_(elapsedSeconds) } count:3 type:NSObject_class_()]];
}

- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
  JreStrongAssign(&testFailure_, failure);
  numFailures_++;
}

- (NSString *)parseDescriptionWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  return CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_parseDescriptionWithOrgJunitRunnerDescription_(self, description_);
}

- (instancetype)initWithCoTouchlabDoppelTestingDopplJunitTestRunner:(CoTouchlabDoppelTestingDopplJunitTestRunner *)outer$ {
  CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(self, outer$);
  return self;
}

- (void)__javaClone:(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(testFailure_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testRunFinishedWithOrgJunitRunnerResult:);
  methods[1].selector = @selector(testStartedWithOrgJunitRunnerDescription:);
  methods[2].selector = @selector(testFinishedWithOrgJunitRunnerDescription:);
  methods[3].selector = @selector(testFailureWithOrgJunitRunnerNotificationFailure:);
  methods[4].selector = @selector(parseDescriptionWithOrgJunitRunnerDescription:);
  methods[5].selector = @selector(initWithCoTouchlabDoppelTestingDopplJunitTestRunner:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCoTouchlabDoppelTestingDopplJunitTestRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "numTests_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numFailures_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numUnexpected", "I", .constantValue.asInt = CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_numUnexpected, 0x12, 10, -1, -1, -1 },
    { "testFailure_", "LOrgJunitRunnerNotificationFailure;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "testStartTime_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "testRunFinished", "LOrgJunitRunnerResult;", "LJavaLangException;", "testStarted", "LOrgJunitRunnerDescription;", "testFinished", "testFailure", "LOrgJunitRunnerNotificationFailure;", "parseDescription", "LCoTouchlabDoppelTestingDopplJunitTestRunner;", "numUnexpected" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener = { "GtmUnitTestingTextListener", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x2, 6, 6, 9, -1, -1, -1, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener;
}

@end

NSString *CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_parseDescriptionWithOrgJunitRunnerDescription_(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *self, OrgJunitRunnerDescription *description_) {
  NSString *displayName = [((OrgJunitRunnerDescription *) nil_chk(description_)) getDisplayName];
  jint p1 = [((NSString *) nil_chk(displayName)) indexOfString:@"("];
  jint p2 = [displayName indexOfString:@")"];
  if (p1 < 0 || p2 < 0 || p2 <= p1) {
    return displayName;
  }
  NSString *methodName = [displayName substring:0 endIndex:p1];
  NSString *className_ = [displayName substring:p1 + 1 endIndex:p2];
  return JreStrcat("$C$", CoTouchlabDoppelTestingDopplJunitTestRunner_replaceAllWithNSString_(self->this$0_, className_), ' ', methodName);
}

void CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *self, CoTouchlabDoppelTestingDopplJunitTestRunner *outer$) {
  self->this$0_ = outer$;
  OrgJunitRunnerNotificationRunListener_init(self);
  self->numTests_ = 0;
  self->numFailures_ = 0;
}

CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *new_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$) {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener, initWithCoTouchlabDoppelTestingDopplJunitTestRunner_, outer$)
}

CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener *create_CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$) {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener, initWithCoTouchlabDoppelTestingDopplJunitTestRunner_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDoppelTestingDopplJunitTestRunner_GtmUnitTestingTextListener)

@implementation CoTouchlabDoppelTestingDopplJunitTestRunner_$1

- (jint)compareWithId:(IOSClass *)class1
               withId:(IOSClass *)class2 {
  NSString *name1 = CoTouchlabDoppelTestingDopplJunitTestRunner_getSortKeyWithIOSClass_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(this$0_, class1, val$sortOrder_);
  NSString *name2 = CoTouchlabDoppelTestingDopplJunitTestRunner_getSortKeyWithIOSClass_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(this$0_, class2, val$sortOrder_);
  return [((NSString *) nil_chk(name1)) compareToWithId:name2];
}

- (instancetype)initWithCoTouchlabDoppelTestingDopplJunitTestRunner:(CoTouchlabDoppelTestingDopplJunitTestRunner *)outer$
          withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:(CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *)capture$0 {
  CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(self, outer$, capture$0);
  return self;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$sortOrder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(initWithCoTouchlabDoppelTestingDopplJunitTestRunner:withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LCoTouchlabDoppelTestingDopplJunitTestRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sortOrder_", "LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "LIOSClass;LIOSClass;", "LCoTouchlabDoppelTestingDopplJunitTestRunner;LCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder;", "LCoTouchlabDoppelTestingDopplJunitTestRunner;", "sortClassesWithIOSClassArray:withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder:", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Class;>;" };
  static const J2ObjcClassInfo _CoTouchlabDoppelTestingDopplJunitTestRunner_$1 = { "", "co.touchlab.doppel.testing", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_CoTouchlabDoppelTestingDopplJunitTestRunner_$1;
}

@end

void CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *self, CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$sortOrder_, capture$0);
  NSObject_init(self);
}

CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *new_CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0) {
  J2OBJC_NEW_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_$1, initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_, outer$, capture$0)
}

CoTouchlabDoppelTestingDopplJunitTestRunner_$1 *create_CoTouchlabDoppelTestingDopplJunitTestRunner_$1_initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_(CoTouchlabDoppelTestingDopplJunitTestRunner *outer$, CoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder *capture$0) {
  J2OBJC_CREATE_IMPL(CoTouchlabDoppelTestingDopplJunitTestRunner_$1, initWithCoTouchlabDoppelTestingDopplJunitTestRunner_withCoTouchlabDoppelTestingDopplJunitTestRunner_SortOrder_, outer$, capture$0)
}
