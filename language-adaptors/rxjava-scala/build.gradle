apply plugin: 'scala'

tasks.withType(ScalaCompile) {
	scalaCompileOptions.fork = true
    scalaCompileOptions.unchecked = true
    scalaCompileOptions.setAdditionalParameters(['-feature'])

    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.+'
    testCompile 'org.scalatest:scalatest_2.10:1.9.1'
}

// Add RxJava core to Scaladoc input:
// tasks.scaladoc.source(project(':rxjava-core').tasks.getByPath(':rxjava-core:compileJava').source)
// println("-------")
// println(tasks.scaladoc.source.asPath)

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: configurations.provided.asPath + ':' + configurations.testRuntime.asPath + ":" + compileScala.destinationDir
    )
    ant.scalatest(runpath: sourceSets.test.output.classesDir,
            haltonfailure: 'true',
            fork: 'false') {reporter(type: 'stdout')}
}