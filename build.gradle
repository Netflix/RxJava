buildscript {
  repositories { jcenter() }
  dependencies { classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:2.2.3' }
}

description = 'RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM.'

apply plugin: 'rxjava-project'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

dependencies {
    testCompile 'junit:junit-dep:4.10'
    testCompile 'org.mockito:mockito-core:1.8.5'
}

////////////////////////////////////////////////////////////////////
// to run findbugs: 
//     ./gradlew findbugsMain
// then open build/reports/findbugs/main.html
////////////////////////////////////////////////////////////////////

findbugs {
  ignoreFailures = false
  toolVersion = '+'
  // disable findbugs for default runs of `check` or `build`
  sourceSets = [] 
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = 'max'
}

//////////////////////////////////////////////////////////////////
// to run jacoco: 
//     ./gradlew test jacocoTestReport
// to run jacoco on a single test (matches OperatorRetry to OperatorRetryTest in test code base):
//     ./gradlew -Dtest.single=OperatorRetry test jacocoTestReport
// then open build/reports/jacoco/index.html
/////////////////////////////////////////////////////////////////

jacoco {
    toolVersion = '+'
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco"
    }
}

javadoc {
    exclude '**/rx/internal/**'
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}

test{
     maxHeapSize = '2g'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
 }
