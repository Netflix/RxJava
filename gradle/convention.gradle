// GRADLE-2087 workaround, perform after java plugin
status = project.hasProperty('preferredStatus') ? project.preferredStatus : (version.contains('SNAPSHOT') ? 'snapshot' : 'release')

subprojects { project ->
    if (!subprojects.empty) { // is a container
        return
    }

    description = name.capitalize().replaceAll("-\\w") { " " + (it.toUpperCase() - "-") }.replaceAll("Rxjava", "RxJava")

    apply plugin: 'java'
    apply plugin: 'osgi'

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    // Restore status after Java plugin
    status = rootProject.status

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier 'sources'
        extension 'jar'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier 'javadoc'
        extension 'jar'
    }

    configurations {
        create("sources")
        create("javadoc")
        archives {
            extendsFrom configurations.sources
            extendsFrom configurations.javadoc
        }
    }

    // When outputing to an Ivy repo, we want to use the proper type field
    gradle.taskGraph.whenReady {
        def isNotMaven = !it.hasTask(project.uploadMavenCentral)
        if (isNotMaven) {
            def artifacts = project.configurations.sources.artifacts
            def sourceArtifact = artifacts.iterator().next()
            sourceArtifact.type = 'sources'
        }
    }

    artifacts {
        sources(sourcesJar) {
            // Weird Gradle quirk where type will be used for the extension, but only for sources
            type 'jar'
        }
        javadoc(javadocJar) {
            type 'javadoc'
        }
    }

    configurations {
        provided {
            description = 'much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive.'
            transitive = true
            visible = true
        }
    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
            runtimeClasspath -= configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
        examples {
            compileClasspath += configurations.provided + main.output
        }
        perf {
            compileClasspath += configurations.provided + main.output
        }
    }

    configurations {
        examplesCompile.extendsFrom testCompile
        examplesRuntime.extendsFrom testRuntime
        perfCompile.extendsFrom testCompile
        perfRuntime.extendsFrom testRuntime
    }

    javadoc {
        options {
            doclet = "org.benjchristensen.doclet.DocletExclude"
            docletpath = [rootProject.file('gradle/doclet-exclude.jar')]
            stylesheetFile = rootProject.file('gradle/javadocStyleSheet.css')
            windowTitle = "$project.description Javadoc $project.version"
            addStringOption('top').value = '<h2 class="title" style="padding-top:40px">' + project.description + '</h2>'.toString()
        }
        classpath += configurations.provided
    }

    build {
        dependsOn examplesClasses
    }

    // Individual projects will apply specific language plugins which add to source setsâ€¦
    // do this late so we get those additions
    afterEvaluate {
        idea {
            module {
                [sourceSets.examples, sourceSets.perf].each {
                    [it.allSource.srcDirs, it.resources.srcDirs].each {
                        testSourceDirs += it
                    }
                }
                scopes.PROVIDED.plus += configurations.provided
            }
        }

        eclipse {
            classpath {
                plusConfigurations += configurations.provided
                downloadJavadoc = true
            }
        }
    }

}

apply plugin: 'github-pages' // Used to create publishGhPages task

def docTasks = [:]
[Javadoc, ScalaDoc, Groovydoc].each { Class docClass ->
    def allSources = allprojects.tasks*.withType(docClass).flatten()*.source
    if (allSources) {
        def shortName = docClass.simpleName.toLowerCase()
        def docTask = task "aggregate${shortName.capitalize()}"(type: docClass, description: "Aggregate subproject ${shortName}s") {
            source = allSources
            destinationDir = file("${project.buildDir}/docs/${shortName}")
            doFirst {
                def classpaths = allprojects.findAll { it.plugins.hasPlugin(JavaPlugin) }.collect {
                    it.sourceSets.main.compileClasspath
                }
                classpath = files(classpaths)
            }
        }
        docTasks[shortName] = docTask
        processGhPages.dependsOn(docTask)
    }
}

githubPages {
    repoUri = "git@github.com:Netflix/${rootProject.githubProjectName}.git"
    pages {
        docTasks.each { shortName, docTask ->
            from(docTask.outputs.files) {
                into "docs/${shortName}"
            }
        }
    }
}